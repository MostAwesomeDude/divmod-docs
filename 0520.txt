= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Form Handling (A summary of Nevow form handling techniques) =
[[PageOutline(2-3,Contents)]]
There is no one correct way to handle forms in Nevow. By the end of this short tutorial you will have a basic understanding of three Nevow  form handling techniques. The tutorial includes some real world problems and (hopefully) demonstrates some appropriate form handling solutions. Examples are included on separate wiki pages for clarity and to make it easy for the reader to download and run them. Some screenshots are provided so that you can quickly see the output of the examples.

== Automatic Form Generation and Handling ==
Form handling is one of the most tedious parts of developing a web application. Fortunately there are two sophisticated form handling libraries available for Nevow; '''Formless''' and [http://forms-project.pollenation.net/ Pollenation Forms]. Both offer automatic form generation, validation and type coercion. 

Formless is older and comes bundled with Nevow but can be confusing for beginners and frustrating for more experienced users. That said, it is highly customisable and allows html coder to precisely layout the form while still taking advantage of the automatic validation and type coercion. 

Pollenation Forms is both simpler for the beginner and offers powerful features for the experienced user. It is the recommended form handling library for those who do not need precise customisation of the form layout in the document template.

== A Note About Formless !TypedInterfaces ==
One of the original goals for Formless was that as well as web forms, it should be flexible enough to handle forms for other user interfaces e.g. curses, gtk. The idea was that the developer should create a !TypedInterface (an enhanced Zope Interface) describing the signature of a method that might be invoked in response to a form submission. By implementing this interface in a Nevow.rend.Page, the developer could present a web UI. Elsewhere the same !TypedInterface could be implemented to provide a gtk UI for example. In practice though, only the web form rendering code was maintained.
 * see the Formless section of [http://www.python.org/pycon/dc2004/papers/60/context this 2004 paper by Donovan Preston, the original author of Nevow and Formless]
Recently '''!TypedInterface has been deprecated in favour of the newer and simpler bind_* syntax'''. (see [source:trunk/Nevow/ChangeLog Nevow Changelog 2005-07-12]) Confusingly for the beginner, most of the Nevow examples still use !TypedInterfaces, but hopefully these will be updated in due course.

In the rest of this document we will use only the new bind_* syntax.

== Example 1: A News Item Editor Page ==
[[Image(Example1.0.png,200,float:right;clear:right;margin-bottom:2px;)]]
[[Image(Example1.1.png,200,float:right;clear:right;margin-bottom:2px;)]]
[[Image(Example1.2.png,200,float:right;clear:right;margin-bottom:2px;)]]
The following example demonstrates and compares the simplest use of Formless / Pollenation Forms. 
We start with a [attachment:Example1.0.tac basic tac file (src)] containing everything but the form:
 * the rend.Page subclass and docFactory
 * a simple list to store news items
 * a data_* method to expose the list of stories to the template
 * a method to save new items to the database which redirects to a completion page on success

 * '''[attachment:Example1.1.tac.py Formless Recipe (src):]''' To expose the method (saveNewsItem) in our web page with Formless we:
   * import [source:trunk/Nevow/formless/annotate.py annotate] and [source:trunk/Nevow/formless/webform.py webform]
   * update the template to include form layout css and a placeholder (<n:invisible />) for our form renderer
   * add the Formless standard css file as a [source:trunk/Nevow/nevow/static.py#L144 static.File] child resource 
   * define a corresponding bind_saveNewsItem method whose job is to return a description of the saveNewsItem method arguments
   * define a custom renderer which adds the results of webform.renderForms() to the page output.
 * '''[attachment:Example1.2.tac.py Pollenation Forms Recipe (src):]''' With Pollenation Forms we:
   * import [http://forms-project.pollenation.net/cgi-bin/trac.cgi/browser/trunk/forms/__init__.py forms]
   * mixin the [http://forms-project.pollenation.net/cgi-bin/trac.cgi/browser/trunk/forms/form.py#L303 forms.ResourceMixin] to our rend.Page subclass.
   * update the template to include form layout css and a placeholder for our form renderer (forms.ResourceMixin defines its own render_form method so we use that)
   * update our saveNewsItem method to accommodate the extra args that forms will pass to it.
   * define a special form_* method which builds and returns the form.
== Manual Form Handling ==
Sometimes a form is so simple that it is easiest to write the form html by hand and handle the result manually. The following code demonstrates a  form with which the user can choose his preferred number of items per page in a datagrid.
 * [attachment:ManualFormHandlingExample.tac.py]
The <select> tag has a javascript onchange handler to automatically submit it's parent form and is presented inline with the content of its parent <p> tag. To achieve this automatically using webform.renderForms() would have required defining a custom form template with custom patterns etc (see later example). 

(It should be noted that Formless or Pollenation Forms could be used here for automatic coercion and validation of the form variables without employing their form rendering machinery. An example of this may be added later.)