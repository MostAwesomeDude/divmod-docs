1,1,1127233113,trac,127.0.0.1,"= Importing ticket data =

== Bugzilla ==

Ticket data can be imported from Bugzilla using the bugzilla2trac.py script, available in the contrib/ directory of the Trac distribution.

{{{
$ bugzilla2trac.py
bugzilla2trac - Imports a bug database from Bugzilla into Trac.

Usage: bugzilla2trac.py [options]

Available Options:
  --db <MySQL dbname>              - Bugzilla's database
  --tracenv /path/to/trac/env      - full path to Trac db environment
  -h | --host <MySQL hostname>     - Bugzilla's DNS host name
  -u | --user <MySQL username>     - effective Bugzilla's database user
  -p | --passwd <MySQL password>   - Bugzilla's user password
  -c | --clean                     - remove current Trac tickets before importing
  --help | help                    - this help info

Additional configuration options can be defined directly in the script.
}}}

Currently, the following data is imported from Bugzilla:

  * bugs
  * bug activity (field changes)
  * bug attachments

The script provides a number of features to ease the conversion, such as:

  * PRODUCT_KEYWORDS:  Trac doesn't have the concept of products, so the script provides the ability to attach a ticket keyword instead.

  * IGNORE_COMMENTS:  Don't import Bugzilla comments that match a certain regexp.

  * STATUS_KEYWORDS:  Attach ticket keywords for the Bugzilla statuses not available in Trac.  By default, the 'VERIFIED' and 'RELEASED' Bugzilla statuses are translated into Trac keywords.

For more details on the available options, see the configuration section at the top of the script.

== Sourceforge ==

Ticket data can be imported from Sourceforge using the sourceforge2trac.py script, available in the contrib/ directory of the Trac distribution.
",,
2,1,1127233113,trac,127.0.0.1,"= Using RSS with Trac =
[[TracGuideToc]]

Several of the Trac modules support content syndication using the RSS (Really Simple Syndication) XML format.
Using the RSS subscription feature in Trac, you can easily monitor progress of the project, a set of issues or even changes to a single file .

Trac supports RSS feeds in:

 * TracTimeline --  Use the RSS feed to '''subscribe to project events'''.[[br]]Monitor overall project progress in your favorite RSS reader.
 * TracReports -- Allows syndication of report results.[[br]]Be notified about important and relevant issue tickets.
 * TracBrowser -- Syndication of file changes.[[br]]Stay up to date with changes to a specific file.

== How to access RSS data ==
Anywhere in Trac where RSS is available, you should find a small orange 'XML' icon, typically placed at the bottom of the page. Clicking the icon will access the RSS feed for that specific resource.

'''Note:''' Different modules provide different data in their RSS feeds. Usually, the syndicated information corresponds to the current view. For example, if you click the RSS link on a report page, the feed will be based on that report. It might be explained by thinking of the RSS feeds as an ''alternate view of the data currently displayed''.

== Links ==
 * http://blogs.law.harvard.edu/tech/rss -- RSS 2.0 Specification
 * http://www.mozilla.org/products/firefox/ -- Mozilla Firefox supports [http://www.mozilla.org/products/firefox/live-bookmarks.html live bookmarks] using RSS
 * http://sage.mozdev.org -- Sage RSS and Atom feed aggregator for Mozilla Firefox
 * http://www.rssreader.com/ -- Free and powerful RSS Reader for Windows
 * http://liferea.sourceforge.net/ -- Open source GTK2 RSS Reader for Linux
----
See also: TracGuide, TracTimeline, TracReports, TracBrowser",,
3,1,1127233113,trac,127.0.0.1,"= Configure Apache for multiple projects =

By following these instructions, you will set up Apache to automatically serve multiple Trac projects for you. 

Start out by creating a project directory in your documentroot (/var/www in this example). Projects will be accessed as http://hostname/projects/projectname. Copy (or symlink) trac.cgi to this directory together with a file named index.html. This will be shown when users try to access nonexistent projects.

Then create your trac projects with trac-admin. It's important that they are all placed in the same directory. In this example we'll use /var/lib/trac. Add to your Apache configuration:

{{{
RewriteEngine on
RewriteRule ^/projects/+$			/projects/index.html [L]
RewriteCond /var/lib/trac/$1			-d
RewriteRule ^/projects/([[:alnum:]]+)(/?.*)	/projects/trac.cgi$2 [S=1,E=TRAC_ENV:/var/lib/trac/$1]
RewriteRule ^/projects/(.*)			/projects/index.html

<Directory '/var/www/projects'>
	AllowOverride None
	Options ExecCGI -MultiViews +SymLinksIfOwnerMatch
	AddHandler cgi-script .cgi
	Order allow,deny
	Allow from all
</Directory>

<LocationMatch '/projects/[[:alnum:]]+/login'>
	AuthType Basic
	AuthName 'trac'
	AuthUserFile /path/to/trac.htpasswd
	Require valid-user
</LocationMatch>
}}}

Make sure you have the rewrite module loaded or compiled in Apache.

{{{LoadModule rewrite_module modules/mod_rewrite.so}}}

Now, when you add another project, you don't need to edit any apache config. The only file you may want to edit is index.html to make it list the new project. If you think this is too much work, replace it with a python cgi script that does it for you.

[wiki:TracStandalone tracd] and TracModPython can also serve multiple projects.


----
See also: TracGuide, TracInstall",,
4,1,1127233113,trac,127.0.0.1,"= Trac Backup =
Since Trac uses a database backend, it requires some extra care to safely create a backup of a TracEnvironment. Luckily, TracAdmin has a command to make backups easier - '''hotcopy'''.

'''Note:''' Trac uses the ''hotcopy'' nomenclature to match that of [http://subversion.tigris.org/ Subversion], to make it easier to remember when managing both Trac and Subversion servers.

== Creating a Backup ==
To create a backup of a live TracEnvironment, simply run:
{{{
  $ trac-admin /some/where/mytracenv hotcopy /my/vault/mytracenv-backup
}}}

'''Note:''' TracAdmin will lock the database while copying.

The resulting backup copy is safe to handle using standard file-based backup tools like tar or dump/restore.


=== Restoring a Backup ===
Backups are simply a copied snapshot of the entire TracEnvironment directory structure, including the SQLite database. 

To restore an environment from a backup, simply shut down your Trac service (Web server or tracd), restore the directory structure from backup and restart the service.

----
See also: TracAdmin, TracGuide
",,
5,1,1127233113,trac,127.0.0.1,"= The Trac Timeline =
[[TracGuideToc]]

The timeline provides a historic view of the project in a single report.

It lists all Trac events that have occured in chronological order, a
brief description of each event and if applicable, the person responsible for
the change.

The timeline lists these kinds of events:
 * '''Wiki page events''' -- Creation and changes
 * '''Ticket events''' -- Creation and resolution/closing
 * '''Source code changes ''' -- Subversion commits 
 * '''Milestone ''' -- Milestone reached

Each event entry provides a hyperlink to the specific event in question, and 
in the case svn commit log messages, displays the commit message itself. 

== Subversion Commit Messages == 
It's important to note that WikiFormatting can be used in commit log messages,
including TracLinks.

This allows developers hyperlink and refer to issue tickets, wikipages and files
directly when committing a patch to the repository.

Example:

{{{
 $ svn commit -m 'Updated foo to bar. See FooBar. This fixes bug #42.' 
}}}

This is a subtle but quite useful feature.

== RSS Support ==
The Timeline module supports subscribtion using RSS 2.0 syndication. To subscribe to project events, click the '''RSS Feed''' link in the navigation bar, or the orange XML icon at the bottom of the page. See TracRss for more information on RSS support in Trac.


----
See also: TracGuide, TracWiki, WikiFormatting, TracRss, TracNotification",,
6,1,1127233113,trac,127.0.0.1,,,
7,1,1127233113,trac,127.0.0.1,"= Trac Installation Guide =
[[TracGuideToc]]

The Trac web-based project management tool is implemented as a CGI- or standalone program. Trac is written in the [http://www.python.org/ Python] programming language
and uses the [http://www.sqlite.org/ SQLite] embedded database for persistant storage. For HTML rendering, Trac uses the [http://www.clearsilver.net/ Clearsilver] template system.


== Requirements ==

To install Trac, the following software packages must be installed:

 * [http://www.python.org/ Python], version >= 2.1 (>=2.3 recommended).
   * Please keep in mind, that for RPM-based systems you will also need python-devel and python-xml packages.
 * [http://subversion.tigris.org/ Subversion], version >= 1.0. (>=1.1 recommended)
 * [http://svnbook.red-bean.com/svnbook-1.1/ch08s02.html#svn-ch-8-sect-2.3 Subversion Python bindings] (Caveat: Trac uses the [http://www.swig.org/ SWIG] bindings included in the Subversion distribution,  '''not''' the  [http://pysvn.tigris.org/ PySVN] package!)
 * [http://www.sqlite.org/ SQLite], version 2.8.x or 3.0.x
 * [http://pysqlite.sf.net/ PySQLite], version >= 0.5 but < 1.1.0 (for SQLite 2.8.x), version >= 1.1.1 (for SQLite 3.0.x) 
 * [http://clearsilver.net/ Clearsilver], version >= 0.9.3
 * [http://docutils.sourceforge.net/ docutils], version >= 0.3.3 (??)
 * A CGI-capable web server (tested on [http://httpd.apache.org/ Apache] )

=== Optional Packages ===

 * [http://www.modpython.org/ mod_python] (see TracModPython)

== Installing Trac ==
Like most Python programs, install the Trac python modules by running the following command at the top of the source directory:
{{{
$ python ./setup.py install
}}}

This will byte-compile the python source code and install it in the {{{site-packages}}} directory
of your python installation. The directories {{{cgi-bin}}}, {{{templates}}}, {{{htdocs}}} and {{{wiki-default}}} are all copied to $prefix/share/trac/ . 

The script will also install the [wiki:TracAdmin trac-admin] command-line tool, used to create and maintain [wiki:TracEnvironment project environments]. 

The [wiki:TracAdmin trac-admin] program is the ''control center'' for Trac.

'''Note:''' you'll need root permissions or equivalent for this step.

For more information on installing Trac on specific platforms, see the [http://projects.edgewall.com/trac/wiki/TracInstallPlatforms TracInstallPlatforms] page (on the main project web site).

=== Advanced Users ===
To install Trac in a custom location, and view other advanced install options, run:
{{{
$ python ./setup.py --help
}}}

== Creating a Project Environment ==

TracEnvironment is the backend storage format where Trac stores
information like wiki pages, tickets, reports, settings, etc.
An environment consist of a directory containing an SQLite database, 
human-readable configuration file, log-files and attachments.

A new Trac environment is created using [wiki:TracAdmin trac-admin], like:

{{{
$ trac-admin /path/to/projectenv initenv
}}}

[wiki:TracAdmin trac-admin] will ask you where your subversion repository is located and
where it can find the trac templates directory (the default value should work for a typical install).

'''Note:''' The web server user will require file system write permission to the environment
directory and all the files inside. '''Remember to set the appropriate permissions.''

The same applies for the subversion repository files (unless using the [http://svn.collab.net/repos/svn/trunk/notes/fsfs FSFS Subversion backend], something we highly recommend. 

== Configuring Apache ==

Make '{{{trac/cgi-bin/trac.cgi}}}' accessible to your web server at {{{/cgi-bin/}}}, either by copying/symlinking or use the '{{{trac/cgi-bin/}}}' directory directly.

Edit the apache config and add this snippet, filenames edited to match your installation:
 
{{{
Alias /trac/ '/usr/share/trac/htdocs/' #or where you installed the trac htdocs
#You have to allow people to read the files in htdocs
<Directory '/usr/share/trac/htdocs'>
	Options Indexes MultiViews
	AllowOverride None
	Order allow,deny
	Allow from all
</Directory>


# Trac need to know where the database is located
<Location '/cgi-bin/trac.cgi'>
	SetEnv TRAC_ENV '/path/to/projectenv'
</Location>

# You need this to allow users to authenticate
# trac.htpasswd can be created with 
# cmd 'htpasswd -c trac.htpasswd' (UNIX)
# do 'man htpasswd' to see all the options
<Location '/cgi-bin/trac.cgi/login'>
	AuthType Basic
	AuthName 'trac'
	AuthUserFile /somewhere/trac.htpasswd
	Require valid-user
</Location>
}}}

'''Note:''' If Apache complains about the Set''''''Env line make sure you have the Load''''''Module for mod_env uncommented (Apache 1.3).

'''Note:''' When creating a new environment, {{{trac-admin}}} will print a config snippet customized for your project.

'''Note:''' If you are using [http://httpd.apache.org/docs/suexec.html Apache suEXEC] feature see [http://projects.edgewall.com/trac/wiki/ApacheSuexec ApacheSuexec] (on the project web site).

== Using Trac ==

'''Congratulations!''' You should now have a running Trac installation at:

http://<yourhostname>/cgi-bin/trac.cgi

You should be able to browse your subversion repository, create tickets,
view the timeline and use all the features of Trac.

Keep in mind that anonymous users (not logged in) can only access a restricted subset of all Trac features by default. 

'''Note:''' If you don't want long, and relatively ugly, URLs, you can prettify them by changing your Apache config. See [http://projects.edgewall.com/trac/wiki/TracPrettyUrls TracPrettyUrls] (on the project website).

Please continue to TracPermissions to learn how to grant additional privileges to authenticated users.

For user documentation, see TracGuide.

''Enjoy!''

[http://projects.edgewall.com/trac/wiki/TracTeam The Trac Team]

----
See also:  TracGuide, TracUpgrade, TracPermissions, TracInstallPlatforms, TracModPython",,
8,1,1127233113,trac,127.0.0.1,"= reStructuredText Support in Trac =

Trac supports using ''reStructuredText'' (RST) as an alternative to wiki markup in any context WikiFormatting is used.

From the reStucturedText webpage:
 '''reStructuredText is an easy-to-read, what-you-see-is-what-you-get plaintext markup syntax and parser   system. It is useful for in-line program documentation (such as Python docstrings), for quickly creating  simple web pages, and for standalone documents. reStructuredText is designed for extensibility for  specific application domains. '''

=== Requirements ===
Note that to activate RST support in Trac, the python docutils package must be installed. 
If not already available on your operating system, you can download it at the [http://docutils.sourceforge.net/rst.html RST Website].

=== More information on RST ===

 * reStructuredText Website -- http://docutils.sourceforge.net/rst.html
 * RST Quick Reference -- http://docutils.sourceforge.net/docs/rst/quickref.html

----

== Using RST in Trac ==
To specify that a block of text should be parsed using RST, use the ''rst'' processor. 

=== TracLinks in reStructuredText ===

 * Trac provides a custom RST reference-directive 'trac' to allow TracLinks from within RST text.

 Example:
 {{{
 {{{
 #!rst
 This is a reference to |a ticket|

 .. |a ticket| trac:: #42
 }}}
 }}}

 For a complete example of all uses of the ''trac''-directive, please see WikiRestructuredTextLinks. 


 * Trac allows an even easier way of creating TracLinks in RST, using the custom '':trac:'' link naming scheme.

 Example:
 {{{
 {{{
 #!rst
 This is a reference to ticket `#12`:trac:

 To learn how to use Trac, see `TracGuide`:trac:
 }}}
 }}}

=== Syntax highlighting in reStructuredText ===

There is a directive for doing TracSyntaxColoring in ReST as well. The directive is called
code-block

Example

{{{
{{{
#!rst

.. code-block:: python

 class Test:

    def TestFunction(self):
        pass

}}}
}}}

Will result in the below.

{{{
#!rst

.. code-block:: python

 class Test:

    def TestFunction(self):
        pass

}}}


=== Example ===
The example below should be mostly self-explanatory:
{{{
#!html
<pre class='wiki'>{{{
#!rst
FooBar Header
=============
reStructuredText is **nice**. It has its own webpage_.

A table:

=====  =====  ======
   Inputs     Output
------------  ------
  A      B    A or B
=====  =====  ======
False  False  False
True   False  True
False  True   True
True   True   True
=====  =====  ======

RST TracLinks
-------------

See also ticket |#42|.

.. |#42| trac:: #42

.. _webpage: http://docutils.sourceforge.net/rst.html
}}}</pre>
}}}


Results in:
{{{
#!rst
FooBar Header
=============
reStructuredText is **nice**. It has its own webpage_.

A table:

=====  =====  ======
   Inputs     Output
------------  ------
  A      B    A or B
=====  =====  ======
False  False  False
True   False  True
False  True   True
True   True   True
=====  =====  ======

RST TracLinks
-------------

See also ticket |#42|.

.. |#42| trac:: #42

.. _webpage: http://docutils.sourceforge.net/rst.html
}}}


----
See also: WikiRestructuredTextLinks, WikiProcessors, WikiFormatting",,
9,1,1127233113,trac,127.0.0.1,"Wiki page names are written using CamelCase. Within a wiki text, any word in CamelCase automatically becomes a hyperlink to the wiki page with that same name.

Page names must follow these rules:

 1. The name must consist of alphabetic characters only. No digits, spaces, punctuation, or underscores are allowed.
 1. A name must have at least two capital letters.
 1. The first character must be capitalized.
 1. Every capital letter must be followed by one or more lower-case letters. 
 1. The use of slash ( / ) is permitted to create a hierarchy inside the wiki.

If you want a to create a wiki page that doesnt follow CamelCase rules you could use the following syntax see #614:
{{{
[wiki:NOTCamelCase NOTCamelCase]
}}}


----
See also: WikiNewPage, WikiFormatting, TracWiki",,
10,1,1127233113,trac,127.0.0.1,"= Syntax Coloring of Source Code =
Trac supports language-specific colorization (syntax highlighting) of source code in [wiki:WikiFormatting WikiFormatted] text and the [wiki:TracBrowser Source Browser].

To do this, Trac uses external libraries with support for a great number of programming languages.

Currently Trac supports syntax coloring using one or more of the following packages:

 * [http://people.ssh.fi/mtr/genscript/ GNU Enscript]
 * [http://silvercity.sourceforge.net/ SilverCity]

To activate syntax coloring, simply install either one (or more) of these packages. No additional configuration is needed.

When in use, Trac will automatically prioritize !SilverCity highlighting over Enscript if possible, (see note below). 

If neither package is available, Trac will display the data as plain text. 

'''Note:''' Enscript supports a greater number of languages, however !SilverCity is generally faster since it is a library and isn't executed in an external process.

=== About SilverCity ===
!SilverCity uses the lexer from [http://www.scintilla.org/ Scintilla]. Scintilla supports more languages than !SilverCity implements. If you want to add a language to !SilverCity supported by Scintilla, it's not very difficult. See [http://projects.edgewall.com/trac/wiki/SilverCityAddLanguage SilverCityAddLanguage] for some information how.


== Syntax Coloring Support ==

|| || !SilverCity || Enscript ||
|| Ada      ||   || X ||
|| Asm      ||   || X ||
|| * ASP    || X || X ||
|| * C      || X || X ||
|| * C++    || X || X ||
|| * Java   ||   || X ||
|| Awk      ||   || X ||
|| CSS      || X ||   ||
|| Diff     ||   || X ||
|| Eiffel   ||   || X ||
|| Elisp    ||   || X ||
|| Fortran  ||   || X ||
|| Haskell  ||   || X ||
|| HTML     || X || X ||
|| IDL      ||   || X ||
|| Javascript || X || X ||
|| m4       ||   || X ||
|| Makefile ||   || X ||
|| Matlab   ||   || X ||
|| Objective-C|| || X ||
|| Pascal   ||   || X ||
|| * Perl   || X || X ||
|| * PHP    || X || X ||
|| PSP      || X ||   ||
|| Pyrex    ||   || X ||
|| * Python || X || X ||
|| * Ruby   || X || X ||
|| Scheme   ||   || X ||
|| Shell    ||   || X ||
|| SQL      || X || X ||
|| Troff    ||   || X ||
|| TCL      ||   || X ||
|| Tex      ||   || X ||
|| Verilog  ||   || X ||
|| VHDL     ||   || X ||
|| Visual Basic |||| X ||
|| VRML     ||   || X ||
|| XML      || X || X ||

''(*) Supported as inline code blocks in [wiki:WikiFormatting Wiki text] using WikiProcessors.''

== Extra Software ==
 * GNU Enscript -- http://people.ssh.fi/mtr/genscript/
 * !SilverCity -- http://silvercity.sf.net/

----
See also: WikiProcessors, WikiFormatting, TracWiki, TracBrowser",,
11,1,1127233113,trac,127.0.0.1,"== Trac Permissions ==
[[TracGuideToc]]

Trac uses a simple but flexible permission system to control what users can and can't access.

Permission privilegies are managed using the [wiki:TracAdmin trac-admin] tool.

Regular visitors, non-authenticated users, accessing the system are assigned the default 
role (''user'') named {{{anonymous}}}. 
Assign permissions to the {{{anonymous}}} user to set privilegies for non-authenticated/guest users.

In addition to these privileges users can be granted additional individual 
rights in effect when authenticated and logged into the system.

=== Available privileges ===

 * {{{TRAC_ADMIN}}}
 * {{{LOG_VIEW}}}
 * {{{FILE_VIEW}}}
 * {{{CHANGESET_VIEW}}}
 * {{{BROWSER_VIEW}}}
 * {{{TICKET_VIEW, TICKET_CREATE, TICKET_MODIFY, TICKET_ADMIN}}}
 * {{{REPORT_VIEW, REPORT_CREATE, REPORT_MODIFY, REPORT_DELETE, REPORT_ADMIN, REPORT_SQL_VIEW}}}
 * {{{WIKI_VIEW, WIKI_CREATE, WIKI_MODIFY, WIKI_DELETE, WIKI_ADMIN}}}
 * {{{MILESTONE_VIEW, MILESTONE_CREATE, MILESTONE_MODIFY, MILESTONE_DELETE}}}
 * {{{ROADMAP_VIEW, ROADMAP_ADMIN}}}
 * {{{TIMELINE_VIEW}}}
 * {{{SEARCH_VIEW}}}
 * {{{CONFIG_VIEW}}}

The {{{something_ADMIN}}} privileges are just shortcuts that can be used to grant a user all the ''something'' privileges in one go. Having {{{TRAC_ADMIN}}}
is like being {{{root}}} on a *NIX system, it will let you do anything you want.

=== Granting privileges ===

Currently the only way to grant privileges to users is by using the
{{{trac-admin}}} script. The current set of privileges can be listed
with the following command:

{{{
  $ trac-admin /path/to/projenv permission list
}}}

This command will let the user ''bob'' delete reports:

{{{
  $ trac-admin /path/to/projenv permission add bob REPORT_DELETE
}}}

=== Permission groups ===

Permissions can be grouped together to form roles such as
''developer'', ''admin'', etc.

{{{
  $ trac-admin /path/to/projenv permission add developer WIKI_ADMIN
  $ trac-admin /path/to/projenv permission add developer REPORT_ADMIN
  $ trac-admin /path/to/projenv permission add developer TICKET_MODIFY
  $ trac-admin /path/to/projenv permission add bob developer
  $ trac-admin /path/to/projenv permission add john developer
}}}

=== Default permissions ===

Granting privileges to the special user ''anonymous'' can be used to control
what an anonymous user can do before they have logged in.

In the same way, privileges granted to the special user ''authenticated'' will apply to any authenticated (logged in) user.

----
See also: TracAdmin, TracGuide",,
12,1,1127233113,trac,127.0.0.1,"= Trac Support =

Like in most [http://www.opensource.org/ open source projects], 'free' Trac support is available primarily through the community itself, mainly through the [http://projects.edgewall.com/trac/wiki/MailingList mailing list] and the project wiki.

There is also an [http://projects.edgewall.com/trac/wiki/IrcChannel IRC channel], where people might be able to help out. Much of the 'live' development discussions also happen there.

== Commercial Support ==
Edgewall also offers commercial support to individuals and organizations who desire it. 

For more information, visit our [http://www.edgewall.com/products/trac/support.html commercial support page] for Trac.

You can of course also [http://www.edgewall.com/contact/ contact us directly] at any time at if you have any questions.

----
See also: [http://projects.edgewall.com/trac/wiki/MailingList MailingList], 
",,
13,1,1127233113,trac,127.0.0.1,"= Using HTML in Wiki Text =

Trac supports inserting HTML into any wiki context, accomplished using the HTML [wiki:WikiProcessors WikiProcessor].

HTML support is built-in, and does not require installing any additional packages.

== How to Use HTML ==
To inform the wiki engine that a block of text should be treated as HTML, use the ''html'' processor. 

This example should explain:
{{{
#!html
<pre class='wiki'>{{{
#!html
&lt;h1 style='text-align: right; color: blue'&gt;HTML Test&lt;/h1&gt;
}}}</pre>
}}}

Results in:
{{{
#!html
<h1 style='text-align: right; color: blue'>HTML Test</h1>
}}}

== More Information ==

 * http://www.w3.org/ -- World Wide Web Consortium
 * http://www.w3.org/MarkUp/ -- HTML Markup Home Page

----
See also:  WikiProcessors, WikiFormatting, WikiRestructuredText",,
14,1,1127233113,trac,127.0.0.1,"= trac.ini Reference =
[[TracGuideToc]]

Trac configuration is done by editing the ''trac.ini'' config file, located in {{{<projectenv>/conf/trac.ini}}}.

This is a brief reference of available configuration options.

== [project] ==
|| name   || Project name ||
|| descr  || Short project description ||
|| url    || URL to the main project website ||
|| icon   || URL to icon file to use as shortcut icon (favicon) ||
|| footer || Page footer text (right-aligned) ||

== [trac] ==
|| repository_dir  || Path to local Subversion repository ||
|| htdocs_location || Base URL for static Trac graphics and CSS files ||
|| database        || Database to use for this project ||
|| templates_dir   || Path of Clearsilver templates ||
|| default_charset || Source files uses this charset ||

== [logging] ==
|| log_type  || Logging facility to use. (none, file, stderr, syslog, winlog) ||
|| log_file  || If ''log_type'' is ''file'', this should be a path to the log-file ||
|| log_level || Level of verbosity in log (CRITICAL, ERROR, WARN, INFO, DEBUG) ||

See also: TracLogging

== [ticket] ==
|| default_version   || Default version for newly created tickets ||
|| default_severity  || Default severity for newly created tickets ||
|| default_priority  || Default priority for newly created tickets ||
|| default_milestone || Default milestone for newly created tickets ||
|| default_component || Default component for newly created tickets ||

See also: TracTicketsCustomFields

== [attachment] ==
|| max_size || Maximum allowed file size for ticket and wiki attachments ||

== [notification] ==
|| smtp_enabled   || Enable SMTP (email) notification (true, false) ||
|| smtp_server    || SMTP server to use for email notifications ||
|| smtp_from      || Sender address to use in notification emails ||
|| smtp_replyto   || Reply-To address to use in notification emails ||
|| smtp_always_cc || Email address(es) to always send notifications to ||
|| always_notify_reporter || Always send notifications to any address in the ''reporter'' field ||

See also: TracNotification

== [header_logo] ==
|| src    || URL to image to use as header logo ||
|| link   || Destination URL to link to from header logo ||
|| alt    || ''alt'' text for header logo ||
|| width  || Header logo width in pixels ||
|| height || Header logo height in pixels ||

== [mimeviewer] ==
|| enscript_path || Path to Enscript program ||

== [timeline] ==
|| changeset_show_files || Number of files to show (-1 for unlimited, 0 to disable) ||

== [diff] ==
|| tab_width || Displayed tab width in changeset diffs ||

[[BR]]
----
See also: TracGuide, TracAdmin",,
15,1,1127233113,trac,127.0.0.1,"= Trac and mod_python =

Trac 0.7.1 and later supports [http://www.modpython.org/ mod_python], which speeds up Trac's response times considerably and permits use of many Apache features not possible with tracd/mod_proxy.

== Simple configuration ==

Here's a typical Trac CGI/Apache setup:

{{{
ScriptAlias /projects/myproject /path/to/python/share/trac/cgi-bin/trac.cgi
<Location /projects/myproject>
   SetEnv TRAC_ENV /var/trac/myproject
</Location>
}}}

The equivalent mod_python setup is:

{{{
<Location /projects/myproject>
   SetHandler mod_python
   PythonHandler trac.ModPythonHandler
   PythonOption TracUriRoot '/projects/myproject'
   PythonOption TracEnv /var/trac/myproject
</Location>
}}}

Note that the option ''TracUriRoot'' may or may not be necessary in your setup. Try without first, and if the URLs produced by Trac look wrong, add the ''TracUriRoot'' option.

== Setting up multiple projects ==

The Trac mod_python handler handler supports a configuration option similar to Subversion's {{{SvnParentPath}}}, called {{{TracEnvParentDir}}}:

{{{
<Location /projects>
  SetHandler mod_python
  PythonHandler trac.ModPythonHandler
  PythonOption TracUriRoot /projects
  PythonOption TracEnvParentDir '/var/trac'
</LocationMatch>
}}}

When you request the {{{/projects}}} URL, you will get a (currently very simple) listing of all subdirectories of the directory you set as {{{TracEnvParentDir}}}. Selecting any project in the list will bring you to the corresponding Trac instance. You should make sure that the configured directory only contains Trac environment directories that match the currently installed Trac version, because that is not checked prior the the generation of the project list.


=== Adding authentication ===

Adding authentication is straightforward in both cases. For example:

{{{
<LocationMatch /projects/[[:alnum:]]+/login>
  AuthType Basic
  AuthName 'Trac'
  AuthUserFile /var/www/passwd
  Require valid-user
</LocationMatch>
}}}

=== Win32 Issues ===

If you run trac with mod_python on Windows, attachments will not work.

There is a (simple) workaround for this which is to apply the patch attached to 
ticket [http://projects.edgewall.com/trac/ticket/554 #554].


----
See also TracGuide, TracInstall, TracMultipleProjects",,
16,1,1127233113,trac,127.0.0.1,"= WikiFormatting =

Wiki markup is a core feature in Trac, tightly integrating all the other parts of Trac into flexible and powerful whole.

Trac has a built in small and powerful wiki rendering engine. This wiki engine implements an ever growing subset of the commands from other popular Wikis especially [http://moin.sf.net/ MoinWiki]. 

This page demonstrates the formatting syntax available anywhere WikiFormatting is allowed.

== Font styles ==

The Trac wiki support the following font styles: '''bold''', ''italic'',
__underline__ and ~~strike-through~~.

{{{
The Trac wiki support the following font styles: '''bold''', ''italic'',
__underline__ and ~~strike-through~~.
}}}


== Heading ==

You can create heading by starting a line with one up to five ''equal\\ '=' characters
followed by a single space and the headline text. The line should end with a space 
followed by the same number of ''equal'' characters. 

''Note: As of writing, headings cannot contain TracLinks.''

=== Example: ===
{{{
= Heading =
== Subheading ==
}}}


== Paragraphs ==

A new text paragraph is created whenever two blocks of text are separated
by one or more empty lines.

A forced line break can also be inserted, using:
{{{
Line 1[[BR]]Line 2
}}}
Display:

Line 1[[BR]]Line 2

  Text paragraphs can be indented by starting the lines with two or more spaces.

== Lists ==
The wiki supports both ordered/numbered and unordered lists.

Example:
{{{
 * Item 1
   * Item 1.1
 * Item 2

 1. Item 1
   1. Item 1.1
 1. Item 2
}}}
Display:
 * Item 1
   * Item 1.1
 * Item 2

 1. Item 1
   1. Item 1.1
 1. Item 2

== Preformatted text ==
Block quotes, preformatted text, are suitable for source code snippets, notes and examples. Use three ''curly braces'' wrapped around the text to define a block quote:
  
Example:
{{{
 {{{
  def HelloWorld()
      print 'Hello World'
 }}}
}}}

Display:
{{{
 def HelloWorld()
     print 'Hello World'
}}}

== Tables ==

Simple tables can be created like this:
{{{
||Cell 1||Cell 2||Cell 3||
||Cell 4||Cell 5||Cell 6||
}}}
Display:
||Cell 1||Cell 2||Cell 3||
||Cell 4||Cell 5||Cell 6||

== Links ==

!Hyperlinks are automatically created for WikiPageNames and urls. !WikiPageLinks can be disabled by
prepending an exclamation mark (!) character, such as {{{!WikiPageLink}}}.

Examples:

 TitleIndex, http://www.edgewall.com/.

Links can be given a more descriptive title by writing the link followed by
a space and a title and all this inside two square brackets. Like this:
{{{
 * [http://www.edgewall.com/ Edgewall Software]
 * [wiki:TitleIndex Title Index]
}}}
Display:

 * [http://www.edgewall.com/ Edgewall Software]
 * [wiki:TitleIndex Title Index]

=== Trac Links ===

Wiki pages can link directly to other parts of the Trac system.
Pages can refer to tickets, reports, changesets, milestones, source files and
other Wiki pages using the following notation:
 * Tickets: '''!#1''' or '''!ticket:1'''
 * Reports: '''!{1}''' or '''!report:1'''
 * Changesets: '''![1]''' or '''!changeset:1'''
 * Wiki pages: '''CamelCase''' or '''!wiki:CamelCase'''
 * Milestones: '''!milestone:1.0'''
 * Files: '''!source:trunk/COPYING'''
 * A specific file revision: '''!source:/trunk/COPYING#200'''
Display:
 * Tickets: #1 or ticket:1
 * Reports: {1} or report:1
 * Changesets: [1] or changeset:1
 * Wiki pages: CamelCase or wiki:CamelCase
 * Milestones: milestone:1.0
 * Files: source:trunk/COPYING
 * A specific file revision: source:/trunk/COPYING#200

See TracLinks for more in-depth information.

== Escaping Links and WikiNames ==
You may avoid making hyperlinks out of TracLinks by preceding an expression with a single '!' (exclamation mark).

{{{
 !NoHyperLink
 !#42 is not a link
}}}

Display:
 !NoHyperLink
 !#42 is not a link

== Images ==

Urls ending with .png, .gif or .jpg are automatically interpreted as image links, and converted to IMG tags.

Example:
{{{
http://www.edgewall.com/gfx/trac_example_image.png
}}}
Display:

http://www.edgewall.com/gfx/trac_example_image.png

== Macros ==
Macros are ''custom functions'' to insert dynamic content in a page. See WikiMacros for usage.

Example:
{{{
 [[Timestamp]]
}}}
Display:
 [[Timestamp]]

== Processors ==
Trac supports alternative markup formats using WikiProcessors. For example, processors are used to write pages in [wiki:WikiRestructuredText reStructuredText] or [wiki:WikiHtml HTML]. 

See WikiProcessors for more information.

'''Example 1:'''
{{{
#!html
<pre class='wiki'>{{{
#!html
&lt;h1 style='text-align: right; color: blue'&gt;HTML Test&lt;/h1&gt;
}}}</pre>
}}}
Display:
{{{
#!html
<h1 style='text-align: right; color: blue'>HTML Test</h1>
}}}

'''Example 2:'''
{{{
#!html
<pre class='wiki'>{{{
#!python
class Test:
    def __init__(self):
        print 'Hello World'
if __name__ == '__main__':
   Test()
}}}</pre>
}}}
Display:
{{{
#!python
class Test:
    def __init__(self):
        print 'Hello World'
if __name__ == '__main__':
   Test()
}}}

== Miscellaneous ==

Four or more dashes will be replaced by a horizontal line (<HR>)

{{{
 ----
}}}

Display:
----


----
See also: TracLinks, TracGuide, WikiHtml, WikiMacros, WikiProcessors, TracSyntaxColoring.

",,
17,1,1127233113,trac,127.0.0.1,"= The Trac Browser =
[[TracGuideToc]]

The Trac browser can be used to browse directories, change logs 
and specific revisions of files stored in a subversion repository.

Directory entries are displayed in a list with sortable columns. The list 
entries can be sorted by '''name''', '''size''' or '''date''' by clicking on the column headers.
The sort order can be reversed by clicking on a given column header again.

The browser can be used to navigate through the directory structure 
by clicking on the directory names. Clicking on filenames on the other 
hand will display the files change log.

It's also possible to browse directories as they were in history, at any given repository revision.

The default behavior is to display the latest revision but
another revision number can easily be selected using the form at the top of the
page.

'''Note:''' The browser does not use the Subversion access configuration so if you restrict read access to part of the repository in Subversion that same restriction will not be in place in the Trac browser. (Support for this functionality '''is''' being worked on for future Trac versions)

== RSS Support ==

The browser module supports RSS syndication to monitor changes to a file. To subscribe to an RSS feed of the revision log for a file, open its revision log in the browser and click the orange 'XML' icon at the bottom of the page. For more information on RSS support in Trac, see TracRss.

----
See also: TracGuide, TracChangeset",,
18,1,1127233113,trac,127.0.0.1,"= Custom Ticket Fields =
Trac support adding custom, user-defined, fields to the ticket module. Using custom fields, you can add typed, site-specific, properties to tickets.

'''Note: In Trac 0.8, this feature is still experimental.'''

== Configuriation ==
Configuring custom ticket fields is done in the TracIni config file.

All field definitions should be under a section named [ticket-custom] in the ini-file.

The syntax of each field definition is:
{{{
 FIELD_NAME = TYPE
 (FIELD_NAME.OPTION = VALUE)
 ...
}}}
Looking at the example below should help explain the syntax.

=== Available Field Types and Options ===
 * '''text''': A simple (one line) text field.
   * label: Descriptive label.
   * value: Default value.
   * order: Sort order placement. (Determines relative placement in forms.)
 * '''checkbox''': A boolean value check box.
   * label: Descriptive label.
   * value: Default value (0 or 1).
   * order: Sort order placement.
 * '''select''': Drop-down select box. Uses a list of values.
   * options: List of values, separated by '''|''' (vertical pipe).
   * value: Default value (Item #, starting at 0).
   * order: Sort order placement.
 * '''radio''': Radio buttons. Essentially the same as '''select'''.
   * label: Descriptive label.
   * options: List of values, separated by '''|''' (vertical pipe).
   * value: Default value (Item #, starting at 0).
   * order: Sort order placement.
 * '''textarea''': Multi-line text area.
   * label: Descriptive label.
   * value: Default text.
   * width: Width in columns.
   * height: Height in lines.
   * order: Sort order placement.

=== Sample Config ===
{{{
[ticket-custom]
test_one = text
test_one.label = Just a text box

test_two = text
test_two.label = Another text-box
test_two.value = Just a default value

test_three = checkbox
test_three.label = Some checkbox
test_three.value = 1

test_four = select
test_four.label = My selectbox
test_four.options = one|two|third option|four
test_four.value = 2

test_five = radio
test_five.label = Radio buttons are fun
test_five.options = uno|dos|tres|cuatro|cinco
test_five.value = 1

test_six = textarea
test_six.label = This is a large textarea
test_six.value = Default text
test_six.width = 60
test_six.height = 30
}}}

----
See also: TracTickets, TracIni",,
19,1,1127233113,trac,127.0.0.1,"= Email Notification of Ticket Changes =
[[TracGuideToc]]

Trac supports basic notification for ticket changes using email. 

Email notification is useful to keep users up-to-date on tickets/issues of interest, and also provides a convenient way to post ticket changes to a dedicated mailing list. '''Note:''' As an example, this is how the [http://lists.edgewall.com/archive/trac-tickets/ Trac-tickets] mailing list works.

Disabled by default, notification can be activated and configured in [wiki:TracIni trac.ini].

== Receiving Notification ==
When reporting a new ticket or adding a comment, enter a validing email address in the ''reporter'', ''editor'' or ''cc'' field. Trac will automatically send you an email when changes are made to the ticket.

This is useful to keep up-to-date on an issue or enhancement request that interests you.

== Configuring SMTP Notification ==

=== Config Options ===
These are the available options for the ''[notification]'' section in trac.ini.
 * '''smtp_enabled''': Enable notification.
 * '''smtp_server''': SMTP server used for notification messages.
 * '''smtp_from''': Email address to use for ''Sender''-headers in notification emails.
 * '''smtp_replyto''': Email address to use for ''Reply-To''-headers in notification emails.
 * '''smtp_always_cc''': List of email addresses to always send notifications to. ''Typically used to post ticket changes to a dedicated mailing list.''
 * '''always_notify_reporter''':  Always send notifications to any address in the reporter field.

Either '''smtp_from''' or '''smtp_replyto''' (or both) ''must'' be set, otherwise Trac refuses to send notification mails.

=== Example Configuration ===

{{{
[notification]
smtp_enabled = true
smtp_server = mail.example.com
smtp_from = notifier@example.com
smtp_replyto = myproj@projects.example.com
smtp_always_cc = ticketmaster@example.com, theboss+myproj@example.com
}}}

== Sample Email ==
{{{
#42: testing
---------------------------+------------------------------------------------
       Id:  42             |      Status:  assigned                
Component:  report system  |    Modified:  Fri Apr  9 00:04:31 2004
 Severity:  major          |   Milestone:  0.9                     
 Priority:  lowest         |     Version:  0.6                     
    Owner:  anonymous      |    Reporter:  jonas@example.com               
---------------------------+------------------------------------------------
Changes:
  * component:  changset view => search system
  * priority:  low => highest
  * owner:  jonas => anonymous
  * cc:  daniel@example.com =>
         daniel@example.com, jonas@example.com
  * status:  new => assigned

Comment:
I'm interested too!

--
Ticket URL: <http://example.com/trac/ticket/42>
My Project <http://myproj.example.com/>
}}}
----
See also: TracTickets, TracIni, TracGuide",,
20,1,1127233113,trac,127.0.0.1,"= Unicode Support in Trac =
Trac stores all text using UTF-8 encoding, including text in tickets and wiki pages. 

As such, it supports most (all?) commonly used character encodings.


== Examples ==

=== Swedish ===

''Räven raskar över isen med luva på.''

=== Français ===

''Il est possible d'écrire en Français : à, ç, û, ...''

=== Icelandic ===

''Ævar sagði við ömmu sína: Sjáðu hvað ég er stór!''

=== Japanese ===

''漢字 ひらがな カタカナ ﾊﾝｶｸｶﾅ''

=== Chinese ===

Traditional: ''繁體中文, 許功蓋會育''; Simplified: ''简体中文，许功盖会育''

=== Korean ===

''이번에는 한글로 써보겠습니다. 잘 보이나요?''

=== Russian ===

Проверка Русского языка: кажется работает...

=== Bulgarian ===

Българският език работи ли?

=== Greek ===
Μακάρι να έτρεχε στο και Debian box μου... Bug #495

=== Spanish ===
Esto es un pequeño texto en Español, ahora una con acentó

=== Hebrew ===
אני יכול לאכול זכוכית וזה לא מזיק לי",,
21,1,1127233113,trac,127.0.0.1,"= Accessibility Support in Trac =
Not every user has a graphic environment with a mouse or other pointing device. Some users rely on keyboard, alternative keyboard or voice input to navigate links, activate form controls, etc. In Trac, we work to assure users may interact with devices other than a pointing device.

Trac supports accessibility keys for the most common operations.

== Accessibility Keys ==
 * 1 - WikiStart
 * 2 - Timeline
 * 3 - Roadmap
 * 4 - Search
 * 5 - TracFaq
 * 6 - TracGuide / Documentation
 * 7 - New Ticket
 * 9 - About Trac
 * 0 - TracAccessibility 

----
See also: TracGuide",,
22,1,1127233113,trac,127.0.0.1,"= Platform-specific Documentation =
This is an index of pages describing how to install and run Trac on specific platforms and operating systems.

All pages are on the [http://projects.edgewall.com/trac/wiki/TracProject TracProject] website, since they tend to be edited quite often.

 * [http://projects.edgewall.com/trac/wiki/TracOnOsx TracOnOsx]
 * [http://projects.edgewall.com/trac/wiki/TracOnMandrakelinux TracOnMandrakelinux]
 * [http://projects.edgewall.com/trac/wiki/TracOnGentoo TracOnGentoo]
 * [http://projects.edgewall.com/trac/wiki/TracOnFreeBsd TracOnFreeBsd]
 * [http://projects.edgewall.com/trac/wiki/TracOnNetBsd TracOnNetBsd]
 * [http://projects.edgewall.com/trac/wiki/TracOnDebian TracOnDebian]
 * [http://projects.edgewall.com/trac/wiki/TracOnWindows TracOnWindows]
 * [http://projects.edgewall.com/trac/wiki/TracOnWindowsIis TracOnWindowsIis]
 * [http://projects.edgewall.com/trac/wiki/TracOnWindowsIis6 TracOnWindowsIis6]
 * [http://projects.edgewall.com/trac/wiki/TracOnRedhat TracOnRedhat]
 * [http://projects.edgewall.com/trac/wiki/TracOnFedoraCore TracOnFedoraCore]
 * [http://projects.edgewall.com/trac/wiki/TracOnSuSE TracOnSuSE]
 * [http://projects.edgewall.com/trac/wiki/TracOnSlackware TracOnSlackware]

----
See also: TracInstall, TracGuide, [http://projects.edgewall.com/trac/wiki/TracFaq TracFaq]",,
23,1,1127233113,trac,127.0.0.1,"= Trac Reports =
[[TracGuideToc]]

The Trac reports module provides a simple, yet powerful reporting facility
to present information about tickets in the Trac database.

Rather than have its own report definition format, TracReports relies on standard SQL
SELECT statements for custom report definition. 

A report consists of these basic parts:
 * ID -- Unique (sequential) identifier 
 * Title  -- Descriptive title
 * Description  -- A brief description of the report, in WikiFormatting text.
 * Report Body -- List of results from report query, formatted according to the methods described below.
 * Footer -- Links to alternative download formats for this report.


== Changing Sort Order ==
Simple reports - ungrouped reports to be specific - can be changed to be sorted by any column simply by clicking the column header. 

If a column header is a hyperlink (red), click the column you would like to sort by. Clicking the same header again reverses the order.


== Alternate Download Formats ==
Aside from the default HTML view, reports can also be exported in a number of alternate formats.
At the bottom of the report page, you will find a list of available data formats. Click the desired link to 
download the alternate report format.

=== Comma-delimited - CSV (Comma Separated Values) ===
Export the report as plain text, each row on its own line, columns separated by a single comma (',').
'''Note:''' Column data is stripped from carriage returns, line feeds and commas to preserve structure.

=== Tab-delimited ===
Like above, but uses tabs (\t) instead of comma.

=== RSS - XML Content Syndication ===
All reports support syndication using XML/RSS 2.0. To subscribe to a , click the the orange 'XML' icon at the bottom of the page. See TracRss for general information on RSS support in Trac.

----
== Creating Custom Reports ==

''Creating a custom report requires a comfortable knowledge of SQL.''

A report is basically a single named SQL query, executed and presented by
Trac.  Reports can be viewed and created from a custom SQL expression directly
in from the web interface.

Typically, a report consists of a SELECT-expression from the 'ticket' table,
using the available columns and sorting the way you want it.

== Ticket columns ==
The ''ticket'' table has the following columns:
 * id
 * time
 * changetime
 * component
 * severity  
 * priority 
 * owner
 * reporter
 * cc
 * url
 * version
 * milestone
 * status
 * resolution
 * summary
 * description

See TracTickets for a detailed description of the column fields.

'''all active tickets, sorted by priority and time'''

'''Example:''' ''All active tickets, sorted by priority and time''
{{{
SELECT id AS ticket, status, severity, priority, owner, 
       time as created, summary FROM ticket 
  WHERE status IN ('new', 'assigned', 'reopened')
  ORDER BY priority, time
}}}


----


== Advanced Reports: Dynamic Variables ==
For more flexible reports, Trac supports the use of ''dynamic variables'' in report SQL statements. 
In short, dynamic variables are ''special'' strings that are replaced by custom data before query execution.

=== Using Variables in a Query ===
The syntax for dynamic variables is simple, any upper case word beginning with '$' is considered a variable.

Example:
{{{
SELECT id AS ticket,summary FROM ticket WHERE priority='$PRIORITY'
}}}

To assign a value to $PRIORITY when viewing the report, you must define it as an argument in the report URL, leaving out the the leading '$'.

Example:
{{{
 http://projects.edgewall.com/trac/reports/14?PRIORITY=high
}}}


=== Special/Constant Variables ===
There is one ''magic'' dynamic variable to allow practical reports, its value automatically set without having to change the URL. 

 * $USER -- Username of logged in user.

Example (''List all tickets assigned to me''):
{{{
SELECT id AS ticket,summary FROM ticket WHERE owner='$USER'
}}}


----


== Advanced Reports: Custom Formatting ==
Trac is also capable of more advanced reports, including custom layouts,
result grouping and user-defined CSS styles. To create such reports, we'll use
specialized SQL statements to control the output of the Trac report engine.

== Special Columns ==
To format reports, TracReports looks for 'magic' column names in the query
result. These 'magic' names are processed and affect the layout and style of the 
final report.

=== Automatically formatted columns ===
 * '''ticket''' -- Ticket ID number. Becomes a hyperlink to that ticket. 
 * '''created, modified, date, time''' -- Format cell as a date and/or time.

 * '''description''' -- Ticket description field, parsed through the wiki engine.

'''Example:'''
{{{
SELECT id as ticket, created, status, summary FROM ticket 
}}}

=== Custom formatting columns ===
Columns whose names begin and end with 2 underscores (Example: '''_''''''_color_''''''_''') are
assumed to be ''formatting hints'', affecting the appearance of the row.
 
 * '''_''''''_group_''''''_''' -- Group results based on values in this column. Each group will have its own header and table.
 * '''_''''''_color_''''''_''' -- Should be a numeric value ranging from 1 to 5 to select a pre-defined row color. Typically used to color rows by issue priority.
 * '''_''''''_style_''''''_''' -- A custom CSS style expression to use for the current row. 

'''Example:''' ''List active tickets, grouped by milestone, colored by priority''
{{{
SELECT p.value AS __color__,
     t.milestone AS __group__,
     (CASE owner WHEN 'daniel' THEN 'font-weight: bold; background: red;' ELSE '' END) AS __style__,
       t.id AS ticket, summary
  FROM ticket t,enum p
  WHERE t.status IN ('new', 'assigned', 'reopened') 
    AND p.name=t.priority AND p.type='priority'
  ORDER BY t.milestone, p.value, t.severity, t.time
}}}

'''Note:''' A table join is used to match ''ticket'' priorities with their
numeric representation from the ''enum'' table.

=== Changing layout of report rows ===
By default, all columns on each row are display on a single row in the HTML
report, possibly formatted according to the descriptions above. However, it's
also possible to create multi-line report entries.

 * '''column_''' -- ''Break row after this''. By appending an underscore ('_') to the column name, the remaining columns will be be continued on a second line.

 * '''_column_''' -- ''Full row''. By adding an underscore ('_') both at the beginning and the end of a column name, the data will be shown on a separate row.

 * '''_column'''  --  ''Hide data''. Prepending an underscore ('_') to a column name instructs Trac to hide the contents from the HTML output. This is useful for information to be visible only if downloaded in other formats (like CSV or RSS/XML).

'''Example:''' ''List active tickets, grouped by milestone, colored by priority, with  description and multi-line layout''

{{{
SELECT p.value AS __color__,
       t.milestone AS __group__,
       (CASE owner 
          WHEN 'daniel' THEN 'font-weight: bold; background: red;' 
          ELSE '' END) AS __style__,
       t.id AS ticket, summary AS summary_,             -- ## Break line here
       component,version, severity, milestone, status, owner,
       time AS created, changetime AS modified,         -- ## Dates are formatted
       description AS _description_,                    -- ## Uses a full row
       changetime AS _changetime, reporter AS _reporter -- ## Hidden from HTML output
  FROM ticket t,enum p
  WHERE t.status IN ('new', 'assigned', 'reopened') 
    AND p.name=t.priority AND p.type='priority'
  ORDER BY t.milestone, p.value, t.severity, t.time
}}}


----
See also: TracTickets, TracQuery, TracGuide",,
24,1,1127233113,trac,127.0.0.1,"= Trac Storage - The Environment =
Trac uses a directory structure and an embedded [http://www.sqlite.org/ SQLite] database as storage.

== Creating an Environment ==
A new Trac environment is created using [wiki:TracAdmin trac-admin], like:

{{{
$ trac-admin /path/to/projectenv initenv
}}}

[wiki:TracAdmin trac-admin] will ask you where your subversion repository is located and
where it can find the trac templates directory (the default value should work for a typical install).

'''Note:''' The web server user will require file system write permission to the environment
directory and all the files inside. '''Remember to set the appropriate permissions.''

The same applies for the subversion repository files (unless using the [http://svn.collab.net/repos/svn/trunk/notes/fsfs FSFS Subversion backend], something we highly recommend. 



== Directory Structure ==
{{{
 EnvDir
   |-- README
   |-- VERSION
   |-- attachments
   |   |-- ticket
   |   `-- wiki
   |-- conf
   |   `-- trac.ini
   |-- db
   |   `-- trac.db
   |-- log
   |   `-- trac.log
   |-- templates
   |   |-- site_css.cs
   |   |-- site_footer.cs
   |   `-- site_header.cs
   `-- wiki-macros
}}}

 * '''README''' - Brief description of the environment.
 * '''VERSION''' - Contains the environment version identifier.
 * '''attachments''' - All attached files go in here.
   * '''ticket''' - Ticket attachments.
   * '''wiki''' - Wiki attachments.
 * '''conf'''
   * '''trac.ini''' - Main configuration file. See TracIni.
 * '''db'''
   * '''trac.db''' - SQLite database.
 * '''templates''' - Custom (environment-specific) templates.
   * '''site_css.cs''' - Custom CSS stylesheet.
   * '''site_footer.cs''' - Custom footer.
   * '''site_header.cs''' - Custom header.
 * '''wiki-macros''' - Environment-specific WikiMacros.

----
See also: TracBackup, TracIni, TracGuide",,
25,1,1127233113,trac,127.0.0.1,,,
26,1,1127233113,trac,127.0.0.1,"New words created by smashing together capitalized words.

CamelCase is the original wiki convention for creating hyperlinks, with the additional requirement that the capitals are followed by a lower-case letter, hence AlabamA and ABc will not be links.

See also: WikiPageNames, WikiNewPage, WikiFormatting, TracWiki

== More information on CamelCase ==
 * http://c2.com/cgi/wiki?WikiCase
 * http://en.wikipedia.org/wiki/CamelCase",,
27,1,1127233113,trac,127.0.0.1,"= Wiki Processors =
Processors are WikiMacros designed to provide alternative markup formats for the Trac Wiki engine. Processors can be thought of as ''macro functions to process user-edited text''. 

The wiki engine uses processors to allow using [wiki:WikiRestructuredText Restructured Text] and [wiki:WikiHtml raw HTML] in any wiki text throughout Trac.

== Using Processors ==
To use a processor on a block of text, use a wiki blockquote, selecting a processor by name using 'hashbang notation' (#!), familiar to most UNIX users from scripts.

'''Example 1''' (''inserting raw HTML in a wiki text''):

{{{
#!html
<pre class='wiki'>{{{
#!html
&lt;h1 style='color: orange'&gt;This is raw HTML&lt;/h1&gt;
}}}</pre>
}}}

'''Results in:'''
{{{
#!html
<h1 style='color: orange'>This is raw HTML</h1>
}}}

----

'''Example 2''' (''inserting Restructured Text in wiki text''):

{{{
#!html
<pre class='wiki'>{{{
#!rst
A header
--------
This is some **text** with a footnote [*]_.

.. [*] This is the footnote.
}}}</pre>
}}}

'''Results in:'''
{{{
#!rst
A header
--------
This is some **text** with a footnote [*]_.

.. [*] This is the footnote.
}}}
----
'''Example 3''' (''inserting a block of C source code in wiki text''):

{{{
#!html
<pre class='wiki'>{{{
#!c
int main(int argc, char *argv[])
{
  printf('Hello World\n');
  return 0;
}
}}}</pre>
}}}

'''Results in:'''
{{{
#!c
int main(int argc, char *argv[])
{
  printf('Hello World\n');
  return 0;
}
}}}

----



== Available Processors ==
The following processors are included in the Trac distribution:
 * '''html''' -- Insert custom HTML in a wiki page. See WikiHtml.
 * '''rst''' -- Trac support for Restructured Text. See WikiRestructuredText.
 * '''textile''' -- Initial support as of aug 2, 2004.  See [http://projects.edgewall.com/trac/ticket/593 ticket 593] and [http://dealmeida.net/projects/textile/ Textile].

=== Source Code Support ===
Trac includes processors to provide inline [wiki:TracSyntaxColoring syntax highlighting] for these languages:
 * '''c''' -- C
 * '''cpp''' -- C++
 * '''python''' -- Python
 * '''perl''' -- Perl
 * '''ruby''' -- Ruby
 * '''php''' -- PHP
 * '''asp''' --- ASP
 * '''sql''' -- SQL
 * '''xml''' -- XML
'''Note:''' ''Trac relies on external software packages for syntax coloring. See TracSyntaxColoring for more info.''

By using the mime-type as processor, it is posible to syntax-highlight the same languages that are supported when browsing source code.  (The list of mime-types can be found in [source:trunk/trac/Mimeview.py Mimeview.py]).

For example, you can write:

{{{
{{{
#!text/html
<h1>text</h1>
}}}
}}}

The result will be syntax highlighted html code. The same is valid for all other mime types supported.



For more processor macros developed and/or contributed by users, visit the macro bazaar: 
 http://projects.edgewall.com/trac/wiki/MacroBazaar

----
== Advanced Topics: Developing Processor Macros ==
Developing processors is no different than WikiMacros. In fact they work the same way, only the usage syntax differs. See WikiMacros for more information.

'''Example:''' (''Restructured Text Processor''):
{{{
from docutils.core import publish_string

def execute(hdf, text, env):
    html = publish_string(text, writer_name = 'html')
    return html[html.find('<body>')+6:html.find('</body>')].strip()
}}}

----
See also : WikiMacros, WikiHtml, WikiRestructuredText, TracSyntaxColoring, WikiFormatting, TracGuide",,
28,1,1127233113,trac,127.0.0.1,"= Using Search =

Trac has a built-in search engine to allow finding occurrences of keywords and substrings in wiki pages, tickets and changeset descriptions.

Using the Trac search facility is straightforward and its interface should be familiar to most www users.

Apart from the [search: Search module], you will also find a small search field above the navigation bar at all time. It provides convenient access to the search module from all pages.

== Quickjumps ==
For intermediate and advanced use, Trac has a useful way to quickly navigate to a given resource, named '''quickjumps'''.

If you enter a [wiki:TracLinks TracLink] in the search field above the navigation bar, Trac will recognize this and assume you know where you're going. 

For example:

 * ![42] -- Opens change set 42
 * !#42 -- Opens ticket number 42
 * !{1} -- Opens report 1

'''Note:''' ''This is a particularly useful feature to quickly navigate to a specific issue ticket or changeset.''

=== Advanced: Disabling Quickjumps ===
To disable the quickjump feature for a search keyword - for example when searching for occurences of the literal word !TracGuide - begin the query with an exclamation mark (!).

----
See also: TracGuide, TracLinks, TracQuery",,
29,1,1127233113,trac,127.0.0.1,"= Trac Ticket Queries =
[[TracGuideToc]]

In addition to [wiki:TracReports reports], Trac provides support for ''custom ticket queries'', used to display lists of tickets meeting a specified set of criteria. 

To configure and execute a custom query, switch to the ''View Tickets'' module from the navigation bar, and select the ''Custom Query'' link.

== Query Form ==

A form will be presented, letting you select or enter values for any of the ticket properties (both built-in and custom). Any value selected/entered in this form will be used to constrain the set of tickets displayed. Only tickets where properties match the criteria will be displayed.

== Results Display ==

After executing the search, a list of tickets meeting the selected criteria will show. By default, the list is sorted by priority. You can change the sorting to any other visible column by clicking on the corresponding column header. Clicking the same header again will reverse the sort order.

You can edit the query by clicking ''Refine Query''.

----
See also: TracTickets, TracReports, TracGuide",,
30,1,1127233113,trac,127.0.0.1,"= Welcome to Trac 0.8 'Qualia' =

Trac is a '''minimalistic''' approach to '''web-based''' management of
'''software projects'''. Its goal is to simplify effective tracking and handling of software issues, enhancements and overall progress.

All aspects of Trac have been designed with the single goal to 
'''help developers write great software''' while '''staying out of the way'''
and imposing as little as possible on a team's established process and
culture.

As all Wiki pages, this page is editable, this means that you can
modify the contents of this page simply by using your
web-browser. Simply click on the 'Edit this page' link at the bottom
of the page. WikiFormatting will give you a detailed description of
available Wiki formatting commands.

'[wiki:TracAdmin trac-admin] ''yourenvdir'' initenv' created
a new Trac environment, containing a default set of wiki pages and some sample
data. This newly created environment also contains 
[wiki:TracGuide documentation] to help you get started with your project.

You can use [wiki:TracAdmin trac-admin] to configure
[http://trac.edgewall.com/ Trac] to better fit your project, especially in
regard to ''components'', ''versions'' and ''milestones''. 


TracGuide is a good place to start.

Enjoy! [[BR]]
''The Trac Team''

== Starting Points ==

 * TracGuide --  Built-in Documentation
 * [http://projects.edgewall.com/trac/ The Trac project] -- Trac Open Source Project
 * [http://projects.edgewall.com/trac/wiki/TracFaq Trac FAQ] -- Frequently Asked Questions
 * TracSupport --  Trac Support

For a complete list of local wiki pages, see TitleIndex.

Trac is brought to you by [http://www.edgewall.com/ Edgewall Software],
providing professional Linux and software development services to clients
worldwide. Visit http://www.edgewall.com/ for more information.

",,
31,1,1127233113,trac,127.0.0.1,"= Trac Logging =
[[TracGuideToc]]

Trac supports logging of system messages using the standard ''logging'' module part of Python 2.3 and newer.

'''Note:''' If you are using a Python version older than 2.3, the Trac logging mechanism will be silently disabled.

Logging is configured in the {{{[logging]}}} section in [wiki:TracIni trac.ini].

== Python 2.2 Workaround ==
If you are using Python 2.2, however, note that the logging package from Python 2.3 works perfectly under 2.2 as well; you can just copy the entire {{{logging}}} directory from the Python 2.3 library into the Python 2.2 lib directory. Perhaps not the most elegant solution, but it works.


== Supported Logging Methods ==
 * '''none''' -- Suppress all log messages.
 * '''file''' -- Log messages to a file, specified with the ''log_file'' directive in [wiki:TracIni trac.ini]. 
 * '''stderr''' -- Output all log entries to console ([wiki:TracStandalone tracd] only).
 * '''syslog''' -- (UNIX) Send messages to local syslogd via named pipe '/dev/log'.
 * '''winlog''' -- (Windows) Use the system's NT eventlog for Trac logging.

== Log Levels ==
The level of verbosity of logged messages can be set using the ''log_level'' directive in [wiki:TracIni trac.ini]. The log level defines the minimum level of urgency required for a message to be logged.

The levels are:
 * ''CRITICAL'' -- Log only the most critical, typically fatal, messages.
 * ''ERROR'' -- Request failures, bugs and errors. 
 * ''WARN'' -- Warnings, non-interrupting events.
 * ''INFO'' -- Diagnostic information, log information about all requests.
 * ''DEBUG'' -- Development messages, profiling, etc. Not fit for human consumption.

----
See also: TracIni, TracGuide, TracEnvironment",,
32,1,1127233113,trac,127.0.0.1,"= The Sandbox =

This is just a page to practice and learn WikiFormatting. 

Go ahead, edit it freely.",,
33,1,1127233113,trac,127.0.0.1,,,
34,1,1127233113,trac,127.0.0.1,"= Trac Links =
As you might have guessed, TracLinks are a very fundamental feature of Trac.

They allow hyperlinking between Trac entities (tickets, reports, changesets, Wiki
pages, milestones and source files) from anywhere WikiFormatting is used.

TracLinks are generally of the form '''item:id''' (where ''id'' represents the
number, name or path of the item) though some frequently used kinds of items
also have short-hand, alternative, notations. 

Some examples:

 * Tickets: '''!#1''' or '''!ticket:1'''
 * Reports: '''!{1}''' or '''!report:1'''
 * Changesets: '''![1]''' or '''!changeset:1'''
 * Wiki pages: '''CamelCase''' or '''!wiki:CamelCase'''
 * Milestones: '''!milestone:1.0'''
 * Files: '''!source:trunk/COPYING'''

Display:
 * Tickets: #1 or ticket:1
 * Reports: {1} or report:1
 * Changesets: [1] or changeset:1
 * Wiki pages: CamelCase or wiki:CamelCase
 * Milestones: milestone:1.0
 * Files: source:trunk/COPYING

'''Note:''' The wiki:CamelCase form is rarely used, but it can be convenient to refer to
pages whose names do not follow WikiPageNames rules, i.e., single words,
non-alphabetic characters, etc.

Trac links using the full (non-shorthand) notation can also be given a custom
link title like this:

{{{
[ticket:1 This is a link to ticket number one].
}}}

Display:

[ticket:1 This is a link to ticket number one].

It might seem a simple enough concept at a glance, but actually allows quite a complex network of information.

In practice though, it's very intuitive and simple to use, and we've found the 'link trail' extremely helpful to better understand what's
happening in a project or why a particular change was made.

== source: links ==
The default behavior for a source:/some/path link is to open the directory browser if the path points
to a directory and otherwise open the log view. It's also possible to link directly to a specific
revision of a file like this: source:/some/file#123 or like this to link to the latest revision:
source:/some/file#latest.

== Where to use TracLinks ==
You can use TracLinks in:

 * Source code (Subversion) commit messages
 * Wiki pages
 * Full descriptions for tickets, reports and milestones

and any other text fields explicitly marked as supporting WikiFormatting.

== Escaping TracLinks ==
To prevent parsing of a !TracLink, you can escape it by preceding it with a '!' (exclamation mark).

{{{
 !NoLinkHere.
 ![42] is not a link either.
}}}

Display:
 !NoLinkHere.
 ![42] is not a link either.

----
See also: WikiFormatting, TracWiki
 ",,
35,1,1127233113,trac,127.0.0.1,"= The Trac Roadmap =
[[TracGuideToc]]

The roadmap provides a view on the [wiki:TracTickets ticket system] that helps planning and managing the future development of a project.

== The Roadmap View ==

Basically, the roadmap is just a list of future milestones. You can add a description to milestones (using WikiFormatting) describing main objectives, for example. In addition, tickets targeted for a milestone are aggregated, and the ratio between active and resolved tickets is displayed as a milestone progress bar.

== The Milestone View ==

It is possible to drill down into this simple statistic by viewing the individual milestone pages. By default, the active/resolved ratio will be grouped and displayed by component. You can also regroup the status by other criteria, such as ticket owner or severity. Ticket numbers are linked to [wiki:TracQuery custom queries] listing corresponding tickets.

== Roadmap Administration ==

It is possible to add, modify and remove milestones using either TracAdmin or the web interface. 

'''Note:''' Milestone descriptions can currently only be edited from the web interface. With appropriate permissions, you'll see links below the main navigation bar to manage milestones.

== iCalendar Support ==

The Roadmap supports the [http://www.ietf.org/rfc/rfc2445.txt iCalendar] format to keep track of planned milestones and related tickets from your favorite calendar software. Calendar applications supporting the iCalendar specification include [http://www.apple.com/ical/ Apple iCal] for Mac OS X and the cross-platform [http://www.mozilla.org/projects/calendar/ Mozilla Calendar]. 

To subscribe to the roadmap, copy the iCalendar link from the roadmap (found at the bottom of the page) and choose the 'Subscribe to remote calendar' action (or similar), and insert the URL just copied.

'''Note:''' For tickets to be included in the calendar (as TO-DO items), you need to be authenticated when copying the link. You will only see tickets assigned to yourself, and associated with a milestone.

----
See also: TracTickets, TracReports, TracQuery, TracGuide",,
36,1,1127233113,trac,127.0.0.1,"= Tracd =

Tracd is a lightweight stand-alone Trac server. In most cases it's easier to setup and runs faster than trac.cgi.

'''Note: tracd is still experimental.'''

== Pros ==

 * Fewer dependencies: You don't need to install apache or any other web-server.
 * Fast: Should be as fast as the ModPython version (much faster than the cgi).

== Cons ==

 * Less features: Tracd implements a very simple web-server and is not as configurable as apache.
 * Only htdigest authentication: Tracd can currently only authenticate users against apache-htdigest files.
 * No native https support: [http://www.rickk.com/sslwrap/ sslwrap] can be used instead.

== Usage examples ==

A single project on port 8080. (http://localhost:8080/)
{{{
 $ tracd -p 8080 /path/to/project
}}}
With more than one project. (http://localhost:8080/project1/ and http://localhost:8080/project2/)
{{{
 $ tracd -p 8080 /path/to/project1 /path/to/project2
}}}
With htdigest authentication. The file /tmp/users.htdigest contain user accounts for project1 with the realm 'mycompany.com'.
{{{
 $ tracd -p 8080 --auth project1,/tmp/users.htdigest,mycompany.com /path/to/project1
}}}


----
See also: TracGuide, TracInstall, TracModPython",,
37,1,1127233113,trac,127.0.0.1,"= Upgrade Instructions =
[[TracGuideToc]]

Trac environments sometimes need to be upgraded before they can be used 
in a new version of Trac. This document describes the steps necessary
to upgrade an environment.

== From 0.7.x to 0.8 ==

The database schema was changed between 0.7.x and 0.8. Existing environments
must be upgraded before they can be used with Trac 0.8.

The following command will automatically perform the upgrade:
{{{
 $ trac-admin /path/to/projectenv upgrade
}}}

Trac environments are created with a default set of wiki pages. It's 
recommended to update these pages on existing environments whenever
Trac is upgraded to get up-to-date documentation and additional functionality.
The following command will perform the update:
{{{
 $ trac-admin /path/to/projectenv wiki upgrade
}}}

-----
See also: TracGuide, TracInstall",,
38,1,1127233113,trac,127.0.0.1,"= Recent Changes =

[[RecentChanges]]
",,
39,1,1127233113,trac,127.0.0.1,"= TracAdmin =
[[TracGuideToc]]

Trac is distributed with a powerful configuration tool. This tool can be used 
to configure and customize your Trac-installation to better fit your needs.

== Usage ==

{{{
Usage: trac-admin </path/to/projenv> [command [subcommand] [option ...]]

Invoking trac-admin without command starts interactive mode.

about                                             -- Shows information about trac-admin                    
help                                              -- Show documentation                                    
initenv                                           -- Create and initialize a new environment interactively 
initenv <projectname> <repospath> <templatepath>  -- Create and initialize a new environment from arguments
hotcopy <backupdir>                               -- Make a hot backup copy of an environment.             
resync                                            -- Re-synchronize trac with the repository               
upgrade                                           -- Upgrade database to current version.                  
wiki list                                         -- List wiki pages                                       
wiki export <page> [file]                         -- Export wiki page to file or stdout                    
wiki import <page> [file]                         -- Import wiki page from file or stdin                   
wiki dump <directory>                             -- Export all wiki pages to files named by title         
wiki load <directory>                             -- Import all wiki pages from directory                  
wiki upgrade                                      -- Upgrade default wiki pages to current version         
permission list                                   -- List permission rules                                 
permission add <user> <action> [action] [...]     -- Add a new permission rule                             
permission remove <user> <action> [action] [...]  -- Remove permission rule                                
component list                                    -- Show available components                             
component add <name> <owner>                      -- Add a new component                                   
component rename <name> <newname>                 -- Rename a component                                    
component remove <name>                           -- Remove/uninstall component                            
component chown <name> <owner>                    -- Change component ownership                            
priority list                                     -- Show possible ticket priorities                       
priority add <value>                              -- Add a priority value option                           
priority change <value> <newvalue>                -- Change a priority value                               
priority remove <value>                           -- Remove priority value                                 
severity list                                     -- Show possible ticket priorities                       
severity add <value>                              -- Add a severity value option                           
severity change <value> <newvalue>                -- Change a severity value                               
severity remove <value>                           -- Remove severity value                                 
version list                                      -- Show versions                                         
version add <name> [time]                         -- Add version                                           
version rename <name> <newname>                   -- Rename version                                        
version time <name> <time>                        -- Set version date (Format: 'Jun 3, 2003')              
version remove <name>                             -- Remove version                                        
milestone list                                    -- Show milestones                                       
milestone add <name> [time]                       -- Add milestone                                         
milestone rename <name> <newname>                 -- Rename milestone                                      
milestone time <name> <time>                      -- Set milestone date (Format: 'Jun 3, 2003')            
milestone remove <name>                           -- Remove milestone                                      
}}}

== Interactive Mode ==

When passed the database filename as only argument, '''trac-admin''' starts in interactive mode.
Commands can then be executed on the selected database using the prompt, which offers tab-completion
(on non-Windows environments) and automatic repetition of the last command issued.

== A Note on Configuration ==
For configuration of the Trac environment, Trac 0.7 introduced a new storage format, including a separate config file used for settings. See TracIni for details.


----
See Also: TracGuide, TracBackup, TracPermissions. TracEnvironment, TracIni",,
40,1,1127233113,trac,127.0.0.1,,,
41,1,1127233113,trac,127.0.0.1,"= Trac Changeset Module =
[[TracGuideToc]]

Trac has a built-in functionality for visualizing diffs - changes to files.

== The Changeset View ==

When viewing a commited changeset, such as when clicking a changeset
[wiki:TracLinks TracLink] or a changeset event-line in the 
[wiki:TracTimeline timeline], Trac will display what changes this current set of patches imposes.

The changeset view consists of two parts, the '''header''' and the '''diff view'''.

=== Changeset Header ===

The header shows an overview of the whole changeset.
Here you will find information such as:

 * Timestamp -- When the changeset was commited
 * Author -- Who commited the changeset
 * Message -- A brief description from the author (the commit log message)
 * Files -- A list of files affected by this changeset

In front of each listed file, you'll find  a colored rectangle. The color
indicates how the file is affected by the changeset.
 
 * Green: Added
 * Red: Removed
 * Yellow: Modified

The color legend is located below the header as a reminder.

=== Diff View ===

Below the header is the main part of the changeset, the diff view. Each file is shown in a separate section, each of which will contain only the regions of the file that are affected by the changeset. There are two different styles of displaying the diffs: ''inline'' or ''side-by-side'' (you can switch between those styles using the preferences form):

 * The ''inline'' style shows the changed regions of a file underneath eachother. A region removed from the file will be colored red, an added region will be colored green. If a region was modified, the old version is displayed above the new version. Line numbers on the left side indicate the exact position of the change in both the old and the new version of the file.
 * The ''side-by-side'' style shows the old version of the left and the new version on the right (this will typically require more screen width than the inline style.) Added and removed regions will be colored in the same way as with the inline style (green and red, respectively), but modified regions will have a yellow background.

In addition, various advanced options are available in the preferences form for adjusting the display of the diffs:
 * You can set how many lines are displayed before and after every change
 * You can toggle whether blank lines, case changes and white space changes are ignored, thereby letting you find the functional changes more quickly

----
See also: TracGuide, TracBrowser
",,
42,1,1127233113,trac,127.0.0.1,"= Title Index =

[[TitleIndex]]
",,
43,1,1127233113,trac,127.0.0.1,"= How to Add a New Wiki Page =

These are the steps to create a new wiki pages:

 1. Choose a name for your new page. See WikiPageNames for naming conventions.
 1. Edit an existing page, and add a hyperlink to your new page. Save your changes.
 1. Follow the link you created to take you to the new page. Trac display a 'describe !PageName here' message.
 1. Click the 'Edit this page' link to edit and add content to your new page
 1. All done. Your new page is published.


See also: TracWiki, WikiFormatting, TracLinks, WikiDeletePage

",,
44,1,1127233113,trac,127.0.0.1,"= The Trac Wiki Engine =
[[TracGuideToc]]

Trac has a built-in wiki engine, used for text and documentation throughout the system. WikiFormatting is used for [wiki:TitleIndex wiki pages], '''tickets''' and '''commit log messages'''. 

This allows for formatted text and hyperlinks in and between all Trac modules.

Editing wiki text is easy, using any web browser and a simple formatting system (see WikiFormatting), rather than more complex markups like HTML. 
The reasoning behind its design is that HTML, with its large library of nested tags, is too complicated to allow fast-paced editing, and distracts from the actual content of the pages. Note though, Trac also supports [wiki:WikiHtml HTML] and [wiki:WikiRestructuredText reStructuredText] as alternative markup formats.

The main goal of the wiki  is making editing text easier and '''encourage''' people to contribute and annotate text content for a project. 

Wiki itself does not enforce any structure, but rather resembles a stack of empty paper sheets, where you can organize information and documentation as you see fit, and later reorganize if necessary. 

For more help on editing wiki text, see:
 * WikiFormatting
 * WikiPageNames
 * WikiNewPage
 * TracLinks
 * WikiMacros
 * WikiProcessors

If you want to practice editing, please use the SandBox.

Some more information about wiki on the web:
 * http://wikipedia.org/wiki/Wiki
 * http://c2.com/cgi/wiki?WikiHistory
 * http://www.usemod.com/cgi-bin/mb.pl?WhyWikiWorks",,
45,2,1127968448,trac,127.0.0.1,"= Importing ticket data =

== Bugzilla ==

Ticket data can be imported from Bugzilla using the [http://projects.edgewall.com/trac/browser/trunk/contrib/bugzilla2trac.py bugzilla2trac.py] script, available in the contrib/ directory of the Trac distribution.

{{{
$ bugzilla2trac.py
bugzilla2trac - Imports a bug database from Bugzilla into Trac.

Usage: bugzilla2trac.py [options]

Available Options:
  --db <MySQL dbname>              - Bugzilla's database
  --tracenv /path/to/trac/env      - full path to Trac db environment
  -h | --host <MySQL hostname>     - Bugzilla's DNS host name
  -u | --user <MySQL username>     - effective Bugzilla's database user
  -p | --passwd <MySQL password>   - Bugzilla's user password
  -c | --clean                     - remove current Trac tickets before importing
  --help | help                    - this help info

Additional configuration options can be defined directly in the script.
}}}

Currently, the following data is imported from Bugzilla:

  * bugs
  * bug activity (field changes)
  * bug attachments

The script provides a number of features to ease the conversion, such as:

  * PRODUCT_KEYWORDS:  Trac doesn't have the concept of products, so the script provides the ability to attach a ticket keyword instead.

  * IGNORE_COMMENTS:  Don't import Bugzilla comments that match a certain regexp.

  * STATUS_KEYWORDS:  Attach ticket keywords for the Bugzilla statuses not available in Trac.  By default, the 'VERIFIED' and 'RELEASED' Bugzilla statuses are translated into Trac keywords.

For more details on the available options, see the configuration section at the top of the script.

== Sourceforge ==

Ticket data can be imported from Sourceforge using the [http://projects.edgewall.com/trac/browser/trunk/contrib/sourceforge2trac.py sourceforge2trac.py] script, available in the contrib/ directory of the Trac distribution.

== Mantis ==

Mantis bugs can be imported using the attached script.

Currently, the following data is imported from Mantis:
  * bugs
  * bug comments
  * bug activity (field changes)

Attachments are NOT imported.  If you use the script, please read the NOTES section (at the top of the file) and make sure you adjust the config parameters for your environment.

mantis2trac.py has the same parameters as the bugzilla2trac.py script:
{{{
mantis2trac - Imports a bug database from Mantis into Trac.

Usage: mantis2trac.py [options]

Available Options:
  --db <MySQL dbname>              - Mantis database
  --tracenv /path/to/trac/env      - Full path to Trac db environment
  -h | --host <MySQL hostname>     - Mantis DNS host name
  -u | --user <MySQL username>     - Effective Mantis database user
  -p | --passwd <MySQL password>   - Mantis database user password
  -c | --clean                     - Remove current Trac tickets before importing
  --help | help                    - This help info

Additional configuration options can be defined directly in the script.
}}} 


== Other ==

Since trac uses a SQL database to store the data, you can import from other systems by examining the database tables. Just go into [http://www.sqlite.org/sqlite.html sqlite] command line to look at the tables and import into them from your application.
",,
46,2,1127968448,trac,127.0.0.1,,,
47,2,1127968448,trac,127.0.0.1,"= Trac Backup =
[[TracGuideToc]]

Since Trac uses a database backend, some extra care is required to safely create a backup of a [wiki:TracEnvironment project environment]. Luckily, [wiki:TracAdmin trac-admin] has a command to make backups easier: `hotcopy`.

  ''Note: Trac uses the `hotcopy` nomenclature to match that of [http://subversion.tigris.org/ Subversion], to make it easier to remember when managing both Trac and Subversion servers.''

== Creating a Backup ==

To create a backup of a live TracEnvironment, simply run:
{{{
  $ trac-admin /path/to/projenv hotcopy /path/to/backupdir
}}}

[wiki:TracAdmin trac-admin] will lock the database while copying.''

The resulting backup directory is safe to handle using standard file-based backup tools like `tar` or `dump`/`restore`.

=== Restoring a Backup ===

Backups are simply a copied snapshot of the entire [wiki:TracEnvironment project environment] directory, including the SQLite database. 

To restore an environment from a backup, simply stop the process running Trac (i.e. the Web server or [wiki:TracStandalone tracd]), restore the directory structure from the backup and restart the service.

  ''Note: Automatic backup of environments that don't use SQLite as database backend is not supported at this time. As a workaround, we recommend that you stop the server, copy the environment directory, and make a backup of the database using whatever mechanism is provided by the database system.''

----
See also: TracAdmin, TracEnvironment, TracGuide
",,
48,2,1127968448,trac,127.0.0.1,"= The Trac Timeline =
[[TracGuideToc]]

The timeline provides a historic view of the project in a single report.

It lists all Trac events that have occured in chronological order, a
brief description of each event and if applicable, the person responsible for
the change.

The timeline lists these kinds of events:
 * '''Wiki page events''' -- Creation and changes
 * '''Ticket events''' -- Creation and resolution/closing
 * '''Source code changes ''' -- Subversion commits 
 * '''Milestone ''' -- Milestone reached

Each event entry provides a hyperlink to the specific event in question, and 
in the case svn commit log messages, displays the commit message itself. 

== Subversion Commit Messages == 
It's important to note that WikiFormatting can be used in commit log messages,
including TracLinks.

This allows developers to hyperlink and refer to issue tickets, wikipages and files
directly when committing a patch to the repository.

Example:

{{{
 $ svn commit -m 'Updated foo to bar. See FooBar. This fixes bug #42.' 
}}}

This is a subtle but quite useful feature.

== RSS Support ==
The Timeline module supports subscribtion using RSS 2.0 syndication. To subscribe to project events, click the '''RSS Feed''' link in the navigation bar, or the orange XML icon at the bottom of the page. See TracRss for more information on RSS support in Trac.


----
See also: TracGuide, TracWiki, WikiFormatting, TracRss, TracNotification",,
49,2,1127968448,trac,127.0.0.1,"= The Trac Ticket System =
[[TracGuideToc]]

The Trac issue database provides simple but effective tracking of issues and bugs within a project.

As the central project management element of Trac, tickets are used for '''project tasks''', '''feature requests''', '''bug reports''' and '''software support issues'''. 

As with the TracWiki, this subsystem has been designed with the goal of making user contribution and participation as simple as possible. It should be as easy as possible to report bugs, ask questions and suggest improvements.

An issue is assigned to a person who must resolve it or reassign the ticket to someone else.
All tickets can be edited, annotated, assigned, prioritized and discussed at any time.

'''Note:''' To make full use of the ticket system, use it as an ''in bucket'' for ideas and tasks for your project, rather than just bug/fault reporting. 

== Ticket Fields ==

A  ticket contains the following information attributes:
 
 * '''Reporter''' - The author of the ticket.

 * '''Component''' - The project module or subsystem this ticket concerns.
 * '''Version''' - Version of the project that this ticket pertains to.
 * '''Severity''' - What are the effects the issue described? Ranges from an ''enhancement'' request to ''blocker'' (must be fixed before next milestone).
 * '''Keywords''' - Keywords that a ticket is marked with.  Useful for searching and report generation.

 * '''Priority''' - The importance of is the issue relative to other tasks.
 * '''Milestone''' - When this issue should be resolved at the latest.
 * '''Assigned to''' - Principal person responsible for handling the issue.
 * '''Cc''' - A list of other associated people. ''note: this does '''not''' imply responsiblity or any other policy. 
 
 * '''Resolution''' - Reason for why a ticket was closed, such as {{{fixed}}}, {{{invalid}}}, {{{duplicate}}}, etc.
 * '''Status''' - What is the current status? (One of {{{new}}}, {{{assigned}}}, {{{closed}}}, {{{reopened}}}.)
 * '''Summary''' - A brief description summarizing the problem or issue.
 * '''Description''' - The body of the ticket. A good description should be '''specific, descriptive and to the point'''.

== Changing and Commenting Tickets ==

Once a ticket has been entered into Trac, you can at any time change the
information by '''annotating''' the bug. This means changes and comments to
the ticket are logged as a part of the ticket itself.

When viewing a ticket, this log of changes will appear below the main ticket area.

''In the Trac project, we use ticket comments to discuss issues and
tasks. This makes understanding the motivation behind a design- or implementation choice easier, when returning to it later.''

'''Note:''' An important feature is being able to use TracLinks and
WikiFormatting in ticket descriptions and comments. Use TracLinks to refer to
other issues, changesets or files to make your ticket more specific and easier
to understand.

'''Note:''' See TracNotification for how to configure email notifications of ticket changes.

=== State Diagram ===
http://projects.edgewall.com/trac/attachment/wiki/TracTickets/Trac%20Ticket%20State%20Chart%2020040607DF.png?format=raw

== Advanced: Preset values for New Tickets from URL ==

To create a link to the new-ticket form filled with preset values, you need to call the /newticket? URL with variable=value separated by &. 

Possible variables are :

 * '''reporter''' - Name or email of the reporter
 * '''summary''' - Summary line for the ticket
 * '''description''' - Long description of the ticket
 * '''component''' - The component droplist
 * '''version''' - The version droplist
 * '''severity''' - The severity droplist
 * '''keywords''' - The keywords 
 * '''priority''' - The priority droplist
 * '''milestone''' - The milestone droplist
 * '''owner''' - The person responsible for the ticket
 * '''cc''' - The list of emails for notifying about the ticket change

'''Example:''' ''/trac/newticket?summary=Compile%20Error&version=1.0&component=gui''


See also:  TracGuide, TracWiki, TracTicketsCustomFields, TracNotification",,
50,2,1127968448,trac,127.0.0.1,"= Trac Installation Guide = 
[[TracGuideToc]]

Trac is a lightweight project management tool that is implemented as a web-based application. Trac is written in the Python programming language and can use [http://sqlite.org/ SQLite] or [http://www.postgresql.org/ PostgreSQL] as  database. For HTML rendering, Trac uses the [http://www.clearsilver.net/ Clearsilver] templating system.

What follows are generic instructions for installing and setting up Trac and its requirements. While you can find instructions for installing Trac on specific systems at [http://projects.edgewall.com/trac/wiki/TracInstallPlatforms TracInstallPlatforms] on the main Trac site, please be sure to first read through these general instructions to get a good understanding of the tasks involved.

== Requirements ==

To install Trac, the following software packages must be installed:

 * [http://www.python.org/ Python], version >= 2.3.
   * Python 2.4 is not supported on Windows since there are no Subversion bindings available for it.
   * For RPM-based systems you might also need the `python-devel` and `python-xml` packages.
 * [http://subversion.tigris.org/ Subversion], version >= 1.0. (>= 1.1 recommended) and corresponding [http://svnbook.red-bean.com/svnbook-1.1/ch08s02.html#svn-ch-8-sect-2.3 Python bindings]
   * Trac uses the [http://www.swig.org/ SWIG] bindings included in the Subversion distribution, '''not''' [http://pysvn.tigris.org/ PySVN] (which is sometimes confused with the standard SWIG bindings).
   * If Subversion was already installed without the SWIG bindings, you'll need to re-`configure` Subversion and `make swig-py`, `make install-swig-py`.
 * [http://www.clearsilver.net/ ClearSilver], version >= 0.9.3

=== For SQLite ===

 * [http://www.sqlite.org/ SQLite], version 2.8.x or 3.x
 * [http://pysqlite.org/ PySQLite]
   * version 1.0.x (for SQLite 2.8.x)
   * version 1.1.x or 2.x (for SQLite 3.x)

''Note: Versions of Trac prior to 0.9 do '''not''' work with PySQLite 2.x.''

=== For PostgreSQL ===

 * [http://www.postgresql.org/ PostgreSQL]
 * [http://initd.org/projects/psycopg1 psycopg1], [http://initd.org/projects/psycopg2 psycopg2], or [http://pypgsql.sourceforge.net/ pyPgSQL]

''Note: PostgreSQL support requires Trac version 0.9 or later.''

=== Optional Requirements ===

 * A CGI-capable web server (see TracCgi), or
 * a [http://www.fastcgi.com/ FastCGI]-capable web server (see TracFastCgi), or
 * [http://httpd.apache.org/ Apache] with [http://www.modpython.org/ mod_python 3.1.3+] (see TracModPython)
 * [http://docutils.sourceforge.net/ docutils], version >= 0.3.3 for WikiRestructuredText.
 * [http://peak.telecommunity.com/DevCenter/setuptools setuptools], version >= 0.5a13 for using plugins (see TracPlugins)

'''Attention''': The various available versions of these dependencies are not necessarily interchangable, so please pay attention to the version numbers above. If you are having trouble getting Trac to work please double-check all the dependencies before asking for help on the [http://projects.edgewall.com/trac/wiki/MailingList MailingList] or [http://projects.edgewall.com/trac/wiki/IrcChannel IrcChannel].

Please refer to the documentation of these packages to find out how they are best installed. In addition, most of the [http://projects.edgewall.com/trac/wiki/TracInstallPlatforms platform-specific instructions] also describe the installation of the dependencies.

== Installing Trac ==

Like most Python programs, install the Trac Python package by running the following command at the top of the source directory:
{{{
$ python ./setup.py install
}}}

''Note: you'll need root permissions or equivalent for this step.''

This will byte-compile the python source code and install it in the `site-packages` directory
of your Python installation. The directories `cgi-bin`, `templates`, `htdocs` and `wiki-default` are all copied to `$prefix/share/trac/.`

The script will also install the [wiki:TracAdmin trac-admin] command-line tool, used to create and maintain [wiki:TracEnvironment project environments], as well as the [wiki:TracStandalone tracd] standalone server.

=== Advanced Users ===

To install Trac to a custom location, or find out about other advanced installation options, run:
{{{
$ python ./setup.py --help
}}}

Specifically, you might be interested in:
{{{
$ python ./setup.py install --prefix=/path/you/want
}}}


== Creating a Project Environment ==

A [wiki:TracEnvironment Trac environment] is the backend storage where Trac stores information like wiki pages, tickets, reports, settings, etc. An environment is basically a directory that contains a human-readable configuration file and various other files and directories.

A new environment is created using [wiki:TracAdmin trac-admin]:
{{{
$ svnadmin create --fs-type=fsfs /path/to/svn_project_env
 (in some environments leave out the parameters '--fs-type=fsfs' )
$ trac-admin /path/to/trac_project_env initenv
}}}

[wiki:TracAdmin trac-admin] will prompt you for the information it needs to create the environment, such as the name of the project, the [wiki:TracEnvironment#DatabaseConnectionStrings database connection string], and so on. If you're not sure what to specify for one of these options, just leave it blank to use the default value. The database connection string in particular will always work as long as you have SQLite installed. The only option where the default value is likely to not work is the path to the Subversion repository, so make sure that one's correct.

Also note that the values you specify here can be changed later by directly editing the [wiki:TracIni] configuration file.

''Note: The user account under which the web server runs will require write permissions to the environment
directory and all the files inside.''


== Running the Standalone Server ==

After having created a Trac environment, you can easily try the web interface by running the standalone server [wiki:TracStandalone tracd]:
{{{
$ tracd --port 8000 /path/to/projectenv
}}}

Then, fire up a browser and visit `http://localhost:8000/`. You should get a simple listing of all environments that tracd knows about. Follow the link to the environment you just created, and you should see Trac in action.


== Running Trac on a Web Server ==

Trac provides three options for connecting to a “real” web server: [wiki:TracCgi CGI], [wiki:TracFastCgi FastCGI] and [wiki:TracModPython mod_python]. For decent performance, it is recommended that you use either FastCGI or mod_python.


== Using Trac ==

Once you have your Trac site up and running, you should be able to browse your subversion repository, create tickets, view the timeline, etc.

Keep in mind that anonymous (not logged in) users can by default access most but not all of the features. You will need to configure authentication and grant additional [wiki:TracPermissions permissions] to authenticated users to see the full set of features.

''Enjoy!''

[http://projects.edgewall.com/trac/wiki/TracTeam The Trac Team]

----
See also:  TracGuide, TracCgi, TracFastCgi, TracModPython, TracUpgrade, TracPermissions",,
51,2,1127968448,trac,127.0.0.1,"= reStructuredText Support in Trac =

Trac supports using ''reStructuredText'' (RST) as an alternative to wiki markup in any context WikiFormatting is used.

From the reStucturedText webpage:
 '''reStructuredText is an easy-to-read, what-you-see-is-what-you-get plaintext markup syntax and parser   system. It is useful for in-line program documentation (such as Python docstrings), for quickly creating  simple web pages, and for standalone documents. reStructuredText is designed for extensibility for  specific application domains. '''

=== Requirements ===
Note that to activate RST support in Trac, the python docutils package must be installed. 
If not already available on your operating system, you can download it at the [http://docutils.sourceforge.net/rst.html RST Website].

=== More information on RST ===

 * reStructuredText Website -- http://docutils.sourceforge.net/rst.html
 * RST Quick Reference -- http://docutils.sourceforge.net/docs/rst/quickref.html

----

== Using RST in Trac ==
To specify that a block of text should be parsed using RST, use the ''rst'' processor. 

=== TracLinks in reStructuredText ===

 * Trac provides a custom RST reference-directive 'trac' to allow TracLinks from within RST text.

 Example:
 {{{
 {{{
 #!rst
 This is a reference to |a ticket|

 .. |a ticket| trac:: #42
 }}}
 }}}

 For a complete example of all uses of the ''trac''-directive, please see WikiRestructuredTextLinks. 


 * Trac allows an even easier way of creating TracLinks in RST, using the custom '':trac:'' link naming scheme.

 Example:
 {{{
 {{{
 #!rst
 This is a reference to ticket `#12`:trac:

 To learn how to use Trac, see `TracGuide`:trac:
 }}}
 }}}

=== Syntax highlighting in reStructuredText ===

There is a directive for doing TracSyntaxColoring in ReST as well. The directive is called
code-block

Example

{{{
{{{
#!rst

.. code-block:: python

 class Test:

    def TestFunction(self):
        pass

}}}
}}}

Will result in the below.

{{{
#!rst

.. code-block:: python

 class Test:

    def TestFunction(self):
        pass

}}}

=== WikiMacros in reStructuredText ===

For doing WikiMacros in ReST you use the same directive as for syntax highlightning i.e
code-block. To work you must use a version of trac that has #801 applied. 

=== WikiMacro Example ===

{{{
{{{
#!rst

.. code-block:: HelloWorld
 
   Something I wanted to say


}}}
}}}

Will result in the below.

[[HelloWorld(Something I wanted to say)]]


=== Bigger ReST Example ===
The example below should be mostly self-explanatory:
{{{
#!html
<pre class='wiki'>{{{
#!rst
FooBar Header
=============
reStructuredText is **nice**. It has its own webpage_.

A table:

=====  =====  ======
   Inputs     Output
------------  ------
  A      B    A or B
=====  =====  ======
False  False  False
True   False  True
False  True   True
True   True   True
=====  =====  ======

RST TracLinks
-------------

See also ticket `#42`:trac:.

.. _webpage: http://docutils.sourceforge.net/rst.html
}}}</pre>
}}}


Results in:
{{{
#!rst
FooBar Header
=============
reStructuredText is **nice**. It has its own webpage_.

A table:

=====  =====  ======
   Inputs     Output
------------  ------
  A      B    A or B
=====  =====  ======
False  False  False
True   False  True
False  True   True
True   True   True
=====  =====  ======

RST TracLinks
-------------

See also ticket `#42`:trac:.

.. _webpage: http://docutils.sourceforge.net/rst.html
}}}


----
See also: WikiRestructuredTextLinks, WikiProcessors, WikiFormatting",,
52,2,1127968448,trac,127.0.0.1,,,
53,2,1127968448,trac,127.0.0.1,"= Syntax Coloring of Source Code =
Trac supports language-specific colorization (syntax highlighting) of source code in [wiki:WikiFormatting WikiFormatted] text and the [wiki:TracBrowser Source Browser].

To do this, Trac uses external libraries with support for a great number of programming languages.

Currently Trac supports syntax coloring using one or more of the following packages:

 * [http://people.ssh.fi/mtr/genscript/ GNU Enscript]
 * [http://silvercity.sourceforge.net/ SilverCity]

To activate syntax coloring, simply install either one (or more) of these packages. No additional configuration is required, however to modify the colors, have a look at trac/htdocs/css/code.css.

When in use, Trac will automatically prioritize !SilverCity highlighting over Enscript if possible, (see note below). 

If neither package is available, Trac will display the data as plain text. 

'''Note:''' Enscript supports a greater number of languages, however !SilverCity is generally faster since it is a library and isn't executed in an external process.

=== About SilverCity ===
!SilverCity uses the lexer from [http://www.scintilla.org/ Scintilla]. Scintilla supports more languages than !SilverCity implements. If you want to add a language to !SilverCity supported by Scintilla, it's not very difficult. See [http://projects.edgewall.com/trac/wiki/SilverCityAddLanguage SilverCityAddLanguage] for some information how.


== Syntax Coloring Support ==

|| || !SilverCity || Enscript ||
|| Ada      ||   || X ||
|| Asm      ||   || X ||
|| * ASP    || X || X ||
|| * C      || X || X ||
|| * C++    || X || X ||
|| * Java   ||   || X ||
|| Awk      ||   || X ||
|| CSS      || X ||   ||
|| Diff     ||   || X ||
|| Eiffel   ||   || X ||
|| Elisp    ||   || X ||
|| Fortran  ||   || X ||
|| Haskell  ||   || X ||
|| HTML     || X || X ||
|| IDL      ||   || X ||
|| Javascript || X || X ||

|| m4       ||   || X ||
|| Makefile ||   || X ||
|| Matlab   ||   || X ||
|| Objective-C|| || X ||
|| Pascal   ||   || X ||
|| * Perl   || X || X ||
|| * PHP    || X || X ||
|| PSP      || X ||   ||
|| Pyrex    ||   || X ||
|| * Python || X || X ||
|| * Ruby   || X || X (1) ||
|| Scheme   ||   || X ||
|| Shell    ||   || X ||
|| SQL      || X || X ||
|| Troff    ||   || X ||
|| TCL      ||   || X ||
|| Tex      ||   || X ||
|| Verilog  ||   || X ||
|| VHDL     ||   || X ||
|| Visual Basic |||| X ||
|| VRML     ||   || X ||
|| XML      || X || X ||

''(*) Supported as inline code blocks in [wiki:WikiFormatting Wiki text] using WikiProcessors.''

''(1) Ruby highlighting is not included in the Enscript distribution.  Highlighting rules for Ruby can be obtained from: http://neugierig.org/software/ruby/

== Extra Software ==
 * GNU Enscript -- http://people.ssh.fi/mtr/genscript/
 * !SilverCity -- http://silvercity.sf.net/

----
See also: WikiProcessors, WikiFormatting, TracWiki, TracBrowser",,
54,2,1127968448,trac,127.0.0.1,"== Trac Permissions ==
[[TracGuideToc]]

Trac uses a simple but flexible permission system to control what users can and can't access.

Permission privileges are managed using the [wiki:TracAdmin trac-admin] tool.

Regular visitors, non-authenticated users, accessing the system are assigned the default 
role (''user'') named {{{anonymous}}}. 
Assign permissions to the {{{anonymous}}} user to set privileges for non-authenticated/guest users.

In addition to these privileges users can be granted additional individual 
rights in effect when authenticated and logged into the system.

=== Available privileges ===

 * {{{TRAC_ADMIN}}}
 * {{{LOG_VIEW}}}
 * {{{FILE_VIEW}}}
 * {{{CHANGESET_VIEW}}}
 * {{{BROWSER_VIEW}}}
 * {{{TICKET_VIEW, TICKET_CREATE, TICKET_APPEND, TICKET_CHGPROP, TICKET_MODIFY, TICKET_ADMIN}}}
 * {{{REPORT_VIEW, REPORT_CREATE, REPORT_MODIFY, REPORT_DELETE, REPORT_ADMIN, REPORT_SQL_VIEW}}}
 * {{{WIKI_VIEW, WIKI_CREATE, WIKI_MODIFY, WIKI_DELETE, WIKI_ADMIN}}}
 * {{{MILESTONE_VIEW, MILESTONE_CREATE, MILESTONE_MODIFY, MILESTONE_DELETE}}}
 * {{{ROADMAP_VIEW, ROADMAP_ADMIN}}}
 * {{{TIMELINE_VIEW}}}
 * {{{SEARCH_VIEW}}}
 * {{{CONFIG_VIEW}}}

The {{{something_ADMIN}}} privileges are just shortcuts that can be used to grant a user all the ''something'' privileges in one go. Having {{{TRAC_ADMIN}}}
is like being {{{root}}} on a *NIX system, it will let you do anything you want.

=== Granting privileges ===

Currently the only way to grant privileges to users is by using the
{{{trac-admin}}} script. The current set of privileges can be listed
with the following command:

{{{
  $ trac-admin /path/to/projenv permission list
}}}

This command will let the user ''bob'' delete reports:

{{{
  $ trac-admin /path/to/projenv permission add bob REPORT_DELETE
}}}

=== Permission groups ===

Permissions can be grouped together to form roles such as
''developer'', ''admin'', etc.

{{{
  $ trac-admin /path/to/projenv permission add developer WIKI_ADMIN
  $ trac-admin /path/to/projenv permission add developer REPORT_ADMIN
  $ trac-admin /path/to/projenv permission add developer TICKET_MODIFY
  $ trac-admin /path/to/projenv permission add bob developer
  $ trac-admin /path/to/projenv permission add john developer
}}}

=== Default permissions ===

Granting privileges to the special user ''anonymous'' can be used to control
what an anonymous user can do before they have logged in.

In the same way, privileges granted to the special user ''authenticated'' will apply to any authenticated (logged in) user.

----
See also: TracAdmin, TracGuide",,
55,2,1127968448,trac,127.0.0.1,,,
56,2,1127968448,trac,127.0.0.1,"= trac.ini Reference =
[[TracGuideToc]]

Trac configuration is done by editing the ''trac.ini'' config file, located in {{{<projectenv>/conf/trac.ini}}}.

This is a brief reference of available configuration options.

== [trac] ==
|| `database`        || [wiki:TracEnvironment#DatabaseConnectionStrings Database connection string] for this project ||
|| `default_charset` || Charset used in text files in the subversion repository (default is `iso-8859-15`) ||
|| `default_handler` || Name of the component that handles requests to the base URL (default is `WikiHandler`) (''since 0.9'') ||
|| `repository_dir`  || Path to local Subversion repository ||
|| `authz_file`      || Path to Subversion [http://svnbook.red-bean.com/en/1.1/ch06s04.html#svn-ch-6-sect-4.4.2 authorization (authz) file]. ||
|| `check_auth_ip` || Whether the IP address of the user should be checked for authentication (true, false) (''since 0.9'') ||
|| `ignore_auth_case` || Whether case should be ignored for login names (true, false) (''since 0.9'') ||
|| `templates_dir`   || Path to the !ClearSilver templates ||

== [project] ==
|| `name`   || Project name ||
|| `descr`  || Short project description ||
|| `url`    || URL to the main project website ||
|| `icon`   || URL to icon file to use as shortcut icon (favicon) ||
|| `footer` || Page footer text (right-aligned) ||

== [header_logo] ==
|| `src`    || URL to image to use as header logo ||
|| `link`   || Destination URL to link to from header logo ||
|| `alt`    || ''alt'' text for header logo ||
|| `width`  || Header logo width in pixels ||
|| `height` || Header logo height in pixels ||

== [logging] ==
|| `log_type`  || Logging facility to use. (none, file, stderr, syslog, winlog) ||
|| `log_file`  || If ''log_type'' is ''file'', this should be a path to the log-file ||
|| `log_level` || Level of verbosity in log (CRITICAL, ERROR, WARN, INFO, DEBUG) ||
See also: TracLogging

== [attachment] ==
|| `max_size` || Maximum allowed file size for ticket and wiki attachments ||

== [notification] ==
|| `smtp_enabled`   || Enable SMTP (email) notification (true, false) ||
|| `smtp_server`    || SMTP server to use for email notifications ||
|| `smtp_user`      || Username for SMTP server (''since 0.9'') ||
|| `smtp_password`  || Password for SMTP server (''since 0.9'') ||
|| `smtp_from`      || Sender address to use in notification emails ||
|| `smtp_replyto`   || Reply-To address to use in notification emails ||
|| `smtp_always_cc` || Email address(es) to always send notifications to ||
|| `always_notify_reporter` || Always send notifications to any address in the ''reporter'' field ||
|| `always_notify_owner` || Always send notifications to the ticket owner (''since 0.9'') ||
See also: TracNotification

== [mimeviewer] ==
|| `enscript_path` || Path to the Enscript program ||
|| `php_path` || Path to the PHP program ||
|| `max_preview_size` || Maximum file size for HTML preview (''since 0.9'') ||
|| `tab_width` || Displayed tab width in file preview (''since 0.9'') ||

== [ticket] ==
|| `default_version`   || Default version for newly created tickets ||
|| `default_severity`  || Default severity for newly created tickets ||
|| `default_priority`  || Default priority for newly created tickets ||
|| `default_milestone` || Default milestone for newly created tickets ||
|| `default_component` || Default component for newly created tickets ||
|| `restrict_owner`    || Make the owner field of tickets use a drop-down menu (''since 0.9'') ||

== [ticket-custom] ==
Creates user-defined ticket fields.
See TracTicketsCustomFields.

== [timeline] ==
|| `changeset_show_files` || Number of files to show (-1 for unlimited, 0 to disable) ||
|| `default_daysback` || Default 'depth' of the Timeline, in days (''since 0.9'') ||

== [browser] ==
|| `hide_properties` || List of subversion properties to hide from the repository browser (''since 0.9'') ||

== [wiki] ==
|| `ignore_missing_pages` || enable/disable highlighting CamelCase links to missing pages (''since 0.9'') ||

== [disabled_components] ==
You can disable any Trac component by listing its name in this section and assigning a truth value (e.g. ''yes''). See the ''Plugins'' page on ''About Trac'' to get the list of active components.
(''since 0.9'')

----
See also: TracGuide, TracAdmin, TracEnvironment",,
57,2,1127968448,trac,127.0.0.1,"= Trac and mod_python =

Trac supports [http://www.modpython.org/ mod_python], which speeds up Trac's response times considerably and permits use of many Apache features not possible with [wiki:TracStandalone tracd]/mod_proxy.

Be sure to grab mod_python 3.1.3 and later for ''SetHandler'' ''mod_python'' directive to work.  Also, older versions may generate an internal error (see [http://projects.edgewall.com/trac/ticket/1090 #1090])

== Simple configuration ==

If you just installed mod_python, you may have to add a line to load the module in the Apache configuration:
{{{
LoadModule python_module modules/mod_python.so
}}}

A simple setup of Trac on mod_python looks like this:
{{{
<Location /projects/myproject>
   SetHandler mod_python
   PythonHandler trac.ModPythonHandler
   PythonOption TracEnv /var/trac/myproject
   PythonOption TracUriRoot /projects/myproject
</Location>
}}}

Note that the option `TracUriRoot` may or may not be necessary in your setup. Try without first, and if the URLs produced by Trac look wrong or if Trac does not seem to recognize the URLs correctly, add the `TracUriRoot` option.

Configuring authentication works the same as for [wiki:TracCgi#AddingAuthentication CGI]:
{{{
<Location '/projects/myproject/login'>
  AuthType Basic
  AuthName 'myproject'
  AuthUserFile /var/trac/myproject/.htaccess
  Require valid-user
</Location>
}}}

If the Trac installation isn't installed in your Python path, you'll have to tell Apache where to find the Trac mod_python handler  using the `PythonPath` directive:
{{{
<Location /projects/myproject>
  ...
  PythonPath 'sys.path + ['/path/to/trac']'
  ...
</Location>
}}}

== Setting up multiple projects ==

The Trac mod_python handler handler supports a configuration option similar to Subversion's `SvnParentPath`, called `TracEnvParentDir`:
{{{
<Location /projects>
  SetHandler mod_python
  PythonHandler trac.ModPythonHandler
  PythonOption TracEnvParentDir /var/trac
  PythonOption TracUriRoot /projects
</Location>
}}}

When you request the `/projects` URL, you will get a listing of all subdirectories of the directory you set as `TracEnvParentDir`. Selecting any project in the list will bring you to the corresponding Trac environment.

If you don't want to have the subdirectory listing as your projects home page you can use a
{{{
<LocationMatch '/.+/'>
}}}

This will instruct Apache to use mod_python for all locations different from root while having the possibility of placing a custom home page for root in your !DocumentRoot folder.

You can also use the same authentication realm for all of the projects using a `<LocationMatch>` directive:
{{{
<LocationMatch '/[^/]+/login'>
  AuthType Basic
  AuthName 'Trac'
  AuthUserFile /var/trac/.htaccess
  Require valid-user
</LocationMatch>
}}}

== Troubleshooting ==

=== Form submission problems ===

If you're experiencing problems submitting some of the forms in Trac (a common problem is that you get redirected to the start page after submission), check whether your {{{DocumentRoot}}} contains a folder or file with the same path that you mapped the mod_python handler to. For some reason, mod_python gets confused when it is mapped to a location that also matches a static resource.

=== Using .htaccess ===

Although it may seem trivial to rewrite the above configuration as a directory in your document root with a `.htaccess` file, this does not work. Apache will append a '/' to any Trac URLs, which interferes with its correct operation.

It may be possible to work around this with mod_rewrite, but I failed to get this working. In all, it is more hassle than it is worth. Stick to the provided instructions. :)

=== Win32 Issues ===

If you run trac with mod_python on Windows, attachments will not work.

There is a (simple) workaround for this which is to apply the patch attached to 
ticket [http://projects.edgewall.com/trac/ticket/554 #554].

=== OS X issues ===

When using mod_python on OS X you will not be able to restart Apache using `apachectl restart`. This is apparently fixed in mod_python 3.2, but there's also a patch available for earlier versions [http://www.dscpl.com.au/projects/vampire/patches.html here].

----
See also TracGuide, TracInstall, TracCgi, TracFastCgi",,
58,2,1127968448,trac,127.0.0.1,"= WikiFormatting =
[[TracGuideToc]]

Wiki markup is a core feature in Trac, tightly integrating all the other parts of Trac into a flexible and powerful whole.

Trac has a built in small and powerful wiki rendering engine. This wiki engine implements an ever growing subset of the commands from other popular Wikis,
especially [http://moinmoin.wikiwikiweb.de/ MoinMoin]. 


This page demonstrates the formatting syntax available anywhere WikiFormatting is allowed.


== Font styles ==

The Trac wiki supports the following font styles:
{{{
 * '''bold'''
 * ''italic''
 * '''''bold italic'''''
 * __underline__
 * {{{monospace}}} or `monospace`
 * ~~strike-through~~
 * ^superscript^ 
 * ,,subscript,,.
}}}

Display:
 * '''bold'''
 * ''italic''
 * '''''bold italic'''''
 * __underline__
 * {{{monospace}}} or `monospace`
 * ~~strike-through~~
 * ^superscript^ 
 * ,,subscript,,.



== Heading ==

You can create heading by starting a line with one up to five ''equal'' '=' characters
followed by a single space and the headline text. The line should end with a space 
followed by the same number of ''equal'' characters. 

Example:
{{{
= Heading =
== Subheading ==
=== About ''this'' ===
}}}

Display:
= Heading =
== Subheading ==
=== About ''this'' ===


== Paragraphs ==

A new text paragraph is created whenever two blocks of text are separated
by one or more empty lines.

A forced line break can also be inserted, using:
{{{
Line 1[[BR]]Line 2
}}}
Display:

Line 1[[BR]]Line 2

  Text paragraphs can be indented by starting the lines with two or more spaces.


== Lists ==

The wiki supports both ordered/numbered and unordered lists.
There must be a space preceding the star '*' or number '1.', or nothing will happen.

Example:
{{{
 * Item 1
   * Item 1.1
 * Item 2

 1. Item 1
   1. Item 1.1
 1. Item 2
}}}

Display:
 * Item 1
   * Item 1.1
 * Item 2

 1. Item 1
   1. Item 1.1
 1. Item 2


== Definition lists ==

The wiki also supports definition lists.

Example:
{{{
 llama::
   some kind of mammal, with hair
 ppython::
   some kind of reptile, without hair
   (can you spot the typo?)
}}}

Display:
 llama::
   some kind of mammal, with hair
 ppython::
   some kind of reptile, without hair
   (can you spot the typo?)

Note that you need a space in front of the defined term.


== Preformatted text ==

Block quotes, preformatted text, are suitable for source code snippets, notes and examples. Use three ''curly braces'' wrapped around the text to define a block quote.
  
Example:
{{{
 {{{
  def HelloWorld()
      print 'Hello World'
 }}}
}}}

Display:
{{{
 def HelloWorld()
     print 'Hello World'
}}}


== Tables ==

Simple tables can be created like this:
{{{
||Cell 1||Cell 2||Cell 3||
||Cell 4||Cell 5||Cell 6||
}}}

Display:
||Cell 1||Cell 2||Cell 3||
||Cell 4||Cell 5||Cell 6||

Note that more complex tables can be created using
[wiki:WikiRestructuredText#BiggerReSTExample reStructuredText].

== Links ==

Hyperlinks are automatically created for WikiPageNames and urls. 
!WikiPageLinks can be disabled by
prepending an exclamation mark '!' character, such as {{{!WikiPageLink}}}.

Example:
{{{
 TitleIndex, http://www.edgewall.com/, !NotAlink
}}}

Display:
 TitleIndex, http://www.edgewall.com/, !NotAlink

Links can be given a more descriptive title by writing the link followed by
a space and a title and all this inside square brackets. 
If the descriptive title is omitted, then the explicit prefix is disguarded,
unless the link is an external link. This can be useful for wiki pages
not adhering to the WikiPageNames convention.

Like this:
{{{
 * [http://www.edgewall.com/ Edgewall Software]
 * [wiki:TitleIndex Title Index]
 * [wiki:ISO9000]
}}}

Display:
 * [http://www.edgewall.com/ Edgewall Software]
 * [wiki:TitleIndex Title Index]
 * [wiki:ISO9000]


=== Trac Links ===

Wiki pages can link directly to other parts of the Trac system.
Pages can refer to tickets, reports, changesets, milestones, source files and
other Wiki pages using the following notation:
{{{
 * Tickets: #1 or ticket:1
 * Reports: {1} or report:1
 * Changesets: r1, [1] or changeset:1
 * Revision Logs: r1:3, [1:3] or log:branches/0.9-stable#1:3
 * Wiki pages: CamelCase or wiki:CamelCase
 * Milestones: milestone:1.0 or milestone:'End-of-days Release'
 * Files: source:trunk/COPYING
 * A specific file revision: source:/trunk/COPYING#200
 * A filename with embedded space: source:'/trunk/README FIRST'
}}}

Display:
 * Tickets: #1 or ticket:1
 * Reports: {1} or report:1
 * Changesets: r1, [1] or changeset:1
 * Revision Logs: r1:3, [1:3] or log:branches/0.8-stable#1000:2000
 * Wiki pages: CamelCase or wiki:CamelCase
 * Milestones: milestone:1.0 or milestone:'End-of-days Release'
 * Files: source:trunk/COPYING
 * A specific file revision: source:/trunk/COPYING#200
 * A filename with embedded space: source:'/trunk/README FIRST'

See TracLinks for more in-depth information.


== Escaping Links and WikiPageNames ==

You may avoid making hyperlinks out of TracLinks by preceding an expression with a single '!' (exclamation mark).

{{{
 !NoHyperLink
 !#42 is not a link
}}}

Display:
 !NoHyperLink
 !#42 is not a link


== Images ==

Urls ending with `.png`, `.gif` or `.jpg` are automatically interpreted as image links, and converted to `<img>` tags.

Example:
{{{
http://www.edgewall.com/gfx/trac_example_image.png
}}}

Display:

http://www.edgewall.com/gfx/trac_example_image.png


== Macros ==

Macros are ''custom functions'' to insert dynamic content in a page. 
See WikiMacros for usage.

Example:
{{{
 [[Timestamp]]
}}}

Display:
 [[Timestamp]]


== Processors ==

Trac supports alternative markup formats using WikiProcessors. 
For example, processors are used to write pages in 
[wiki:WikiRestructuredText reStructuredText] or [wiki:WikiHtml HTML]. 

See WikiProcessors for more information.

'''Example 1:'''
{{{
#!html
<pre class='wiki'>{{{
#!html
&lt;h1 style='text-align: right; color: blue'&gt;HTML Test&lt;/h1&gt;
}}}</pre>
}}}

Display:
{{{
#!html
<h1 style='text-align: right; color: blue'>HTML Test</h1>
}}}

'''Example 2:'''
{{{
#!html
<pre class='wiki'>{{{
#!python
class Test:
    def __init__(self):
        print 'Hello World'
if __name__ == '__main__':
   Test()
}}}</pre>
}}}

Display:
{{{
#!python
class Test:
    def __init__(self):
        print 'Hello World'
if __name__ == '__main__':
   Test()
}}}


== Miscellaneous ==

Four or more dashes will be replaced by a horizontal line (<HR>)

Example:
{{{
 ----
}}}

Display:
----


----

See also: TracLinks, TracGuide, WikiHtml, WikiMacros, WikiProcessors, TracSyntaxColoring.

----
",,
59,2,1127968448,trac,127.0.0.1,"= The Trac Browser =
[[TracGuideToc]]

The Trac browser can be used to browse directories, change logs 
and specific revisions of files stored in a subversion repository.

Directory entries are displayed in a list with sortable columns. The list 
entries can be sorted by ''name'', ''size'' or ''age'' by clicking on the column
headers. The sort order can be reversed by clicking on a given column
header again.

The browser can be used to navigate through the directory structure 
by clicking on the directory names. Clicking on a file name will show
the contents of the file. Clicking on the revision number of a file or
directory will take you to the revision history for that file.

It's also possible to browse directories or files as they were in history,
at any given repository revision. The default behavior is to display the
latest revision but another revision number can easily be selected using
the ''View revision'' input field at the top of the page.

== RSS Support ==

The browser module provided RSS feeds to monitor changes to a file or
directory. To subscribe to an RSS feed for a file or directory, open its
revision log in the browser and click the orange 'XML' icon at the bottom
of the page. For more information on RSS support in Trac, see TracRss.

----
See also: TracGuide, TracChangeset, FineGrainedPermissions
",,
60,2,1127968448,trac,127.0.0.1,"= Custom Ticket Fields =
Trac supports adding custom, user-defined fields to the ticket module. Using custom fields, you can add typed, site-specific properties to tickets.

'''Note: In Trac 0.8, this feature is still experimental.'''

== Configuration ==
Configuring custom ticket fields is done in the TracIni config file.

All field definitions should be under a section named '''{{{[ticket-custom]}}}''' in the ini-file.

The syntax of each field definition is:
{{{
 FIELD_NAME = TYPE
 (FIELD_NAME.OPTION = VALUE)
 ...
}}}
The example below should help to explain the syntax.

=== Available Field Types and Options ===
 * '''text''': A simple (one line) text field.
   * label: Descriptive label.
   * value: Default value.
   * order: Sort order placement. (Determines relative placement in forms.)
 * '''checkbox''': A boolean value check box.
   * label: Descriptive label.
   * value: Default value (0 or 1).
   * order: Sort order placement.
 * '''select''': Drop-down select box. Uses a list of values.
   * options: List of values, separated by '''|''' (vertical pipe).
   * value: Default value (Item #, starting at 0).
   * order: Sort order placement.
 * '''radio''': Radio buttons. Essentially the same as '''select'''.
   * label: Descriptive label.
   * options: List of values, separated by '''|''' (vertical pipe).
   * value: Default value (Item #, starting at 0).
   * order: Sort order placement.
 * '''textarea''': Multi-line text area.
   * label: Descriptive label.
   * value: Default text.
   * cols: Width in columns.
   * rows: Height in lines.
   * order: Sort order placement.

=== Sample Config ===
{{{
[ticket-custom]

test_one = text
test_one.label = Just a text box

test_two = text
test_two.label = Another text-box
test_two.value = Just a default value

test_three = checkbox
test_three.label = Some checkbox
test_three.value = 1

test_four = select
test_four.label = My selectbox
test_four.options = one|two|third option|four
test_four.value = 2

test_five = radio
test_five.label = Radio buttons are fun
test_five.options = uno|dos|tres|cuatro|cinco
test_five.value = 1

test_six = textarea
test_six.label = This is a large textarea
test_six.value = Default text
test_six.cols = 60
test_six.rows = 30
}}}

=== Notes ===
Do not insert space characters between '{{{|}}}'-separated option values for ''radio'' and ''select'' fields.
 * ok: {{{FIELD_NAME.options = un|deux|trois}}}
 * invalid: {{{FIELD_NAME.options = un | deux | trois}}}

----
See also: TracTickets, TracIni, TracIniReportCustomFieldSample",,
61,2,1127968448,trac,127.0.0.1,"= Email Notification of Ticket Changes =
[[TracGuideToc]]

Trac supports basic notification for ticket changes using email. 

Email notification is useful to keep users up-to-date on tickets/issues of interest, and also provides a convenient way to post ticket changes to a dedicated mailing list. '''Note:''' As an example, this is how the [http://lists.edgewall.com/archive/trac-tickets/ Trac-tickets] mailing list works.

Disabled by default, notification can be activated and configured in [wiki:TracIni trac.ini].

== Receiving Notification ==
When reporting a new ticket or adding a comment, enter a valid email address in the ''reporter'', ''editor'' or ''cc'' field. Trac will automatically send you an email when changes are made to the ticket.

This is useful to keep up-to-date on an issue or enhancement request that interests you.

== Configuring SMTP Notification ==

=== Config Options ===
These are the available options for the ''[notification]'' section in trac.ini.
 * '''smtp_enabled''': Enable notification.
 * '''smtp_server''': SMTP server used for notification messages.
 * '''smtp_user''': (''requires [milestone:0.9 0.9]'') user name for authentication SMTP account.
 * '''smtp_password''': (''requires [milestone:0.9 0.9]'') password for authentication SMTP account.
 * '''smtp_from''': Email address to use for ''Sender''-headers in notification emails.
 * '''smtp_replyto''': Email address to use for ''Reply-To''-headers in notification emails.
 * '''smtp_always_cc''': List of email addresses to always send notifications to. ''Typically used to post ticket changes to a dedicated mailing list.''
 * '''always_notify_reporter''':  Always send notifications to any address in the reporter field.
 * '''always_notify_owner''': (''requires [milestone:0.9 0.9]'') Always send notifications to the address in the owner field.

Either '''smtp_from''' or '''smtp_replyto''' (or both) ''must'' be set, otherwise Trac refuses to send notification mails.

=== Example Configuration ===

{{{
[notification]
smtp_enabled = true
smtp_server = mail.example.com
smtp_from = notifier@example.com
smtp_replyto = myproj@projects.example.com
smtp_always_cc = ticketmaster@example.com, theboss+myproj@example.com
}}}

== Sample Email ==
{{{
#42: testing
---------------------------+------------------------------------------------
       Id:  42             |      Status:  assigned                
Component:  report system  |    Modified:  Fri Apr  9 00:04:31 2004
 Severity:  major          |   Milestone:  0.9                     
 Priority:  lowest         |     Version:  0.6                     
    Owner:  anonymous      |    Reporter:  jonas@example.com               
---------------------------+------------------------------------------------
Changes:
  * component:  changset view => search system
  * priority:  low => highest
  * owner:  jonas => anonymous
  * cc:  daniel@example.com =>
         daniel@example.com, jonas@example.com
  * status:  new => assigned

Comment:
I'm interested too!

--
Ticket URL: <http://example.com/trac/ticket/42>
My Project <http://myproj.example.com/>
}}}
----
See also: TracTickets, TracIni, TracGuide",,
62,2,1127968448,trac,127.0.0.1,"= Unicode Support in Trac =
Trac stores all text using UTF-8 encoding, including text in tickets and wiki pages. 

As such, it supports most (all?) commonly used character encodings.


== Examples ==
Please keep sorted order when you add an entry.

=== Arabic ===
تراك يقوم بحفظ كل الكلمات باستخدام صيغة UTF-8، بما في ذلك الكلمات المستخدمة في صفحات  التيكت والويكي.

=== Bulgarian ===
Българският език работи ли?

=== Česky ===
Čeština v kódování UTF-8, žádný problém.

=== Chinese ===
Traditional: ''繁體中文, 許功蓋會育''; Simplified: ''简体中文，许功盖会育''

=== English ===
Yes indeed, Trac supports English. Fully.

=== Français ===
''Il est possible d'écrire en Français : à, ç, û, ...''
Voir aussi TracTermsFr

=== German ===
Trac-Wiki muß auch deutsche Umlaute richtig anzeigen: ö, ä, ü, ...

=== Greek ===
Τα Ελληνικά υποστηρίζονται επαρκώς επίσης.

=== Hebrew ===
אני יכול לאכול זכוכית וזה לא מזיק לי

=== Icelandic ===
''Ævar sagði við ömmu sína: Sjáðu hvað ég er stór!''

=== Japanese ===
''漢字 ひらがな カタカナ ﾊﾝｶｸｶﾅ''

=== Korean ===
''이번에는 한글로 써보겠습니다. 잘 보이나요?'' [wiki:한글링크 한글링크]

=== Persian (Farsi) ===
این یک متن فارسی است ولی از چپ به راست

=== Polish ===
Pchnąć w tę łódź jeża lub ośm skrzyń fig

=== Portuguese ===
É possível guardar caracteres especias da língua portuguesa, incluindo o símbolo da moeda européia '€', trema 'ü', crase 'à', agudos 'áéíóú', circunflexos 'âêô', til 'ãõ', cedilha 'ç', ordinais 'ªº', grau '°¹²³'.

=== Russian ===
Проверка русского языка: кажется работает...
See also TracTermsRu

=== Serbian ===
Podržan, uprkos činjenici da se za njegovo pisanje koriste чак два алфабета.

=== Slovenian ===
Ta suhi škafec pušča vodo že od nekdaj!

=== Spanish ===
Esto es un pequeño texto en Español, ahora una con acentó

=== Swedish ===
''Räven raskar över isen med luva på.''

=== Thai ===
Trac แสดงภาษาไทยได้อย่างถูกต้อง!

=== Ukrainian ===
Перевірка української мови...",,
63,2,1127968448,trac,127.0.0.1,"= Accessibility Support in Trac =

Not every user has a graphic environment with a mouse or other pointing device. Some users rely on keyboard, alternative keyboard or voice input to navigate links, activate form controls, etc. In Trac, we work to assure users may interact with devices other than a pointing device.

Trac supports accessibility keys for the most common operations. On Windows and Linux platforms, press any of the keys listed below in combination with the `<Ctrl>` key; on a Mac, use the `<alt>` key instead.

== Global Access Keys ==

 * `1` - WikiStart
 * `2` - [wiki:TracTimeline Timeline]
 * `3` - [wiki:TracRoadmap Roadmap]
 * `4` - [wiki:TracSearch Search]
 * `5` - TracFaq
 * `6` - TracGuide / Documentation
 * `7` - [wiki:TracTickets New Ticket]
 * `9` - About Trac
 * `0` - TracAccessibility 

----
See also: TracGuide",,
64,2,1127968448,trac,127.0.0.1,,,
65,2,1127968448,trac,127.0.0.1,"= Trac Storage - The Environment =

Trac uses a directory structure and a database for storing project data.

== Creating an Environment ==

A new Trac environment is created using [wiki:TracAdmin trac-admin]:
{{{
$ trac-admin /path/to/projectenv initenv
}}}

[wiki:TracAdmin trac-admin] will ask you for the name of the project, the
database connection string (explained below), and where your subversion
repository is located.

  ''Note: The web server user will require file system write permission to
the environment directory and all the files inside. Please remember to set
the appropriate permissions. The same applies to the Subversion
repository, although Trac will only require read access as long as you're
not using the BDB file system.''

== Database Connection Strings ==

Since version 0.9, Trac supports both [http://sqlite.org/ SQLite] and
[http://www.postgresql.org/ PostgreSQL] as database backends.  The default
is to use SQLite, which is probably sufficient for most projects. The database file
is then stored in the environment directory, and can easily be
[wiki:TracBackup backed up] together with the rest of the environment.

The connection string for an embedded SQLite database is:
{{{
sqlite:db/trac.db
}}}

If you want to use PostgreSQL instead, you'll have to use a different
connection string. For example, to connect to a database on the same
machine called `trac`, that allows access to the user `johndoe` with
the password `letmein`, use:
{{{
postgres://johndoe:letmein@localhost/trac
}}}

If PostgreSQL is running on a non-standard port (for example 9431), use:
{{{
postgres://johndoe:letmein@localhost:9342/trac
}}}

Note that with PostgreSQL you will have to create the database before running
`trac-admin initenv`.

== Directory Structure ==

An environment directory will usually consist of the following files and directories:

 * `README` - Brief description of the environment.
 * `VERSION` - Contains the environment version identifier.
 * `attachments` - Attachments to wiki pages and tickets are stored here.
 * `conf`
   * `trac.ini` - Main configuration file. See TracIni.
 * `db`
   * `trac.db` - The SQLite database (if you're using SQLite).
 * `plugins` - Environment-specific [wiki:TracPlugins plugins] (Python eggs)
 * `templates` - Custom environment-specific templates.
   * `site_css.cs` - Custom CSS rules.
   * `site_footer.cs` - Custom page footer.
   * `site_header.cs` - Custom page header.
 * `wiki-macros` - Environment-specific [wiki:WikiMacros Wiki macros].

----
See also: TracAdmin, TracBackup, TracIni, TracGuide
",,
66,2,1127968448,trac,127.0.0.1,,,
67,2,1127968448,trac,127.0.0.1,"= !CamelCase =
New words created by smashing together capitalized words.

CamelCase is the original wiki convention for creating hyperlinks, with the additional requirement that the capitals are followed by a lower-case letter; hence “AlabamA” and “ABc” will not be links.

== More information on !CamelCase ==

 * http://c2.com/cgi/wiki?WikiCase
 * http://en.wikipedia.org/wiki/CamelCase

----
See also: WikiPageNames, WikiNewPage, WikiFormatting, TracWiki",,
68,2,1127968448,trac,127.0.0.1,"= Wiki Processors =
Processors are WikiMacros designed to provide alternative markup formats for the Trac Wiki engine. Processors can be thought of as ''macro functions to process user-edited text''. 

The wiki engine uses processors to allow using [wiki:WikiRestructuredText Restructured Text] and [wiki:WikiHtml raw HTML] in any wiki text throughout Trac.

== Using Processors ==
To use a processor on a block of text, use a wiki blockquote, selecting a processor by name using 'hashbang notation' (#!), familiar to most UNIX users from scripts.

'''Example 1''' (''inserting raw HTML in a wiki text''):

{{{
#!html
<pre class='wiki'>{{{
#!html
&lt;h1 style='color: orange'&gt;This is raw HTML&lt;/h1&gt;
}}}</pre>
}}}

'''Results in:'''
{{{
#!html
<h1 style='color: orange'>This is raw HTML</h1>
}}}

----

'''Example 2''' (''inserting Restructured Text in wiki text''):

{{{
#!html
<pre class='wiki'>{{{
#!rst
A header
--------
This is some **text** with a footnote [*]_.

.. [*] This is the footnote.
}}}</pre>
}}}

'''Results in:'''
{{{
#!rst
A header
--------
This is some **text** with a footnote [*]_.

.. [*] This is the footnote.
}}}
----
'''Example 3''' (''inserting a block of C source code in wiki text''):

{{{
#!html
<pre class='wiki'>{{{
#!c
int main(int argc, char *argv[])
{
  printf('Hello World\n');
  return 0;
}
}}}</pre>
}}}

'''Results in:'''
{{{
#!c
int main(int argc, char *argv[])
{
  printf('Hello World\n');
  return 0;
}
}}}

----



== Available Processors ==
The following processors are included in the Trac distribution:
 * '''html''' -- Insert custom HTML in a wiki page. See WikiHtml.
 * '''rst''' -- Trac support for Restructured Text. See WikiRestructuredText.
 * '''textile''' -- Supported if  [http://dealmeida.net/projects/textile/ Textile] is installed.

=== Source Code Support ===
Trac includes processors to provide inline [wiki:TracSyntaxColoring syntax highlighting] for these languages:
 * '''c''' -- C
 * '''cpp''' -- C++
 * '''python''' -- Python
 * '''perl''' -- Perl
 * '''ruby''' -- Ruby
 * '''php''' -- PHP
 * '''asp''' --- ASP
 * '''sql''' -- SQL
 * '''xml''' -- XML
'''Note:''' ''Trac relies on external software packages for syntax coloring. See TracSyntaxColoring for more info.''

By using the mime-type as processor, it is posible to syntax-highlight the same languages that are supported when browsing source code.

For example, you can write:

{{{
{{{
#!text/html
<h1>text</h1>
}}}
}}}

The result will be syntax highlighted html code. The same is valid for all other mime types supported.



For more processor macros developed and/or contributed by users, visit the macro bazaar: 
 http://projects.edgewall.com/trac/wiki/MacroBazaar

----
== Advanced Topics: Developing Processor Macros ==
Developing processors is no different than WikiMacros. In fact they work the same way, only the usage syntax differs. See WikiMacros for more information.

'''Example:''' (''Restructured Text Processor''):
{{{
from docutils.core import publish_string

def execute(hdf, text, env):
    html = publish_string(text, writer_name = 'html')
    return html[html.find('<body>')+6:html.find('</body>')].strip()
}}}

----
See also : WikiMacros, WikiHtml, WikiRestructuredText, TracSyntaxColoring, WikiFormatting, TracGuide",,
69,2,1127968448,trac,127.0.0.1,"= Trac Ticket Queries =
[[TracGuideToc]]

In addition to [wiki:TracReports reports], Trac provides support for ''custom ticket queries'', used to display lists of tickets meeting a specified set of criteria. 

To configure and execute a custom query, switch to the ''View Tickets'' module from the navigation bar, and select the ''Custom Query'' link.

== New Interface For 0.9 ==

The query interface has been totally revamped for Trac [milestone:0.9] to be simpler and easier to use.  Users of Trac 0.8 should skip down to the sections below covering the previous interface.

=== Filters ===
When you first go to the query page the default filters will display all open tickets, or if you're logged in it will display open tickets assigned to you.  Current filters can be removed by clicking the button to the right with the minus sign on the label.  New filters are added from the pulldown list in the bottom-right corner of the filters box.  Filters with either a text box or a pulldown menu of options can be added multiple times to perform an ''or'' of the criteria.

You can use the fields just below the filters box to group the results based on a field, or display the full description for each ticket.

Once you've edited your filters click the ''Update'' button to refresh your results.

=== Navigating Tickets ===
Clicking on one of the query results will take you to that ticket.  You can navigate through the results by clicking the ''Next Ticket'' or ''Previous Ticket'' links just below the main menu bar, or click the ''Back to Query'' link to return to the query page.  

You can safely edit any of the tickets and continue to navigate through the results using the ''Next/Previous/Back to Query'' links after saving your results.  When you return to the query any tickets you edited will be displayed with italicized text.  If one of the tickets was edited such that it no longer matches the query criteria the text will also be greyed.  The query results can be refreshed and cleared of these status indicators by clicking the ''Update'' button again.

=== Saving Queries ===
You may want to save some queries so that you can come back to them later.  You can do this by making a link to the query from any Wiki page.  First, select the criteria from the URL line in your web browser, starting at the '?' to the end of the line.  This can be pasted into a Wiki link in the following format:

{{{
[query:?status=assigned&group=owner&order=priority Assigned Tickets by Owner]
}}}

Which is displayed as:

[query:?status=assigned&group=owner&order=priority Assigned Tickets by Owner]


== Previous Interface for 0.8 ==

=== Query Form ===

A form will be presented, letting you select or enter values for any of the ticket properties (both built-in and custom). Any value selected/entered in this form will be used to constrain the set of tickets displayed. Only tickets where properties match the criteria will be displayed.

=== Results Display ===

After executing the search, a list of tickets meeting the selected criteria will show. By default, the list is sorted by priority. You can change the sorting to any other visible column by clicking on the corresponding column header. Clicking the same header again will reverse the sort order.

You can edit the query by clicking ''Refine Query''.

----
See also: TracTickets, TracReports, TracGuide",,
70,2,1127968448,trac,127.0.0.1,"= Trac Logging =
[[TracGuideToc]]

Trac supports logging of system messages using the standard [http://docs.python.org/lib/module-logging.html logging module] that comes with Python.

Logging is configured in the {{{[logging]}}} section in [wiki:TracIni trac.ini].

== Supported Logging Methods ==

The log method is set using the `log_type` configuration option, which takes any of the following values:
 '''none'':: Suppress all log messages.
 '''file''':: Log messages to a file, specified with the `log_file` option in [wiki:TracIni trac.ini]. 
 '''stderr''':: Output all log entries to console ([wiki:TracStandalone tracd] only).
 '''syslog''':: (UNIX) Send messages to local syslogd via named pipe `/dev/log`.
 '''eventlog''':: (Windows) Use the system's NT eventlog for Trac logging.

== Log Levels ==

The verbosity level of logged messages can be set using the ''log_level'' directive in [wiki:TracIni trac.ini]. The log level defines the minimum level of urgency required for a message to be logged.

The levels are:
 '''CRITICAL''':: Log only the most critical (typically fatal) errors.
 '''ERROR''':: Log failures, bugs and errors. 
 '''WARN''':: Log warnings, non-interrupting events.
 '''INFO''':: Diagnostic information, log information about all processing.
 '''DEBUG''':: Trace messages, profiling, etc.

----
See also: TracIni, TracGuide, TracEnvironment
",,
71,2,1127968448,trac,127.0.0.1,"= TracLinks in reStructuredText =

This document is for testing the ``..trac::`` directive. The page is written like

{{{
{{{
#!rst 

Examples
...
...

}}}
}}}


This is a list of example uses of the ''trac'' directive, providing use of TracLinks in WikiRestructuredText.

{{{
#!rst

Examples
--------

trac role
=========
Syntax is \`link\`\:trac: or :trac:\`link\`, and could be put anywhere in the text. 'link' has the same format as explain for the ``.. trac::`` directive below.

``In the middle of my text `WikiFormatting`:trac: see!!!!`` 
   In the middle of my text `WikiFormatting`:trac: see!!!!

or

``In the middle of my text :trac:`WikiFormatting` see!!!!`` 
   In the middle of my text :trac:`WikiFormatting` see!!!!


wiki
====
``.. trac:: WikiFormatting``
	.. trac:: WikiFormatting

``.. trac:: wiki:WikiFormatting``
       .. trac:: wiki:WikiFormatting

``.. trac:: wiki:WikiFormatting WikiFormatting``
	.. trac:: wiki:WikiFormatting WikiFormatting

``.. trac:: wiki:WikiFormatting LinkText``
	.. trac:: wiki:WikiFormatting LinkText

tickets
=======

``.. trac:: #1``
	.. trac:: #1
``.. trac:: #1 ticket one``
	.. trac:: #1 ticket one
``.. trac:: ticket:1``
	.. trac:: ticket:1
``.. trac:: ticket:1 ticket one``
	.. trac:: ticket:1 ticket one

reports
=======

``.. trac:: {1}``
	.. trac:: {1}
``.. trac:: {1} report one``
        .. trac:: {1} report one
``.. trac:: report:1``
	.. trac:: report:1
``.. trac:: report:1 report one``
	.. trac:: report:1 report one

changesets
==========

``.. trac:: [42]``
	.. trac:: [42]
``.. trac:: [42] changeset 42``
	.. trac:: [42] changeset 42
``.. trac:: changeset:42``
	.. trac:: changeset:42
``.. trac:: changeset:42 changeset 42``
	.. trac:: changeset:42 changeset 42
``.. trac:: foo``
	.. trac:: foo

files
=====

``.. trac:: browser:/trunk/trac``
	.. trac:: browser:/trunk/trac

The leading ``/`` can be omitted...

``.. trac:: repos:trunk/trac trunk/trac``
	.. trac:: repos:trunk/trac trunk/trac
``.. trac:: source:trunk/trac Trac source code``
	.. trac:: source:trunk/trac Trac source code

``.. trac:: browser:trunk/README``
	.. trac:: browser:trunk/README
``.. trac:: repos:trunk/README trunk/README``
	.. trac:: repos:trunk/README trunk/README
``.. trac:: source:trunk/README README in trunk``
	.. trac:: source:trunk/README README in trunk

Note that if ``hoo`` is a file, the link targets its revision log. In order to see the file's content, you need to specify the revision explicitely, like here:

``.. trac:: browser:/trunk/README#latest latest of trunk/README``
	.. trac:: browser:/trunk/README#latest latest of trunk/README
``.. trac:: repos:trunk/README#42 trunk/README in rev 42``
	.. trac:: repos:trunk/README#42 trunk/README in rev 42
}}}

----
See also: WikiRestructuredTextLinks, TracLinks",,
72,2,1127968448,trac,127.0.0.1,"= Trac Links =
As you might have guessed, TracLinks are a very fundamental feature of Trac.

They allow hyperlinking between Trac entities (tickets, reports, changesets, Wiki
pages, milestones and source files) from anywhere WikiFormatting is used.

TracLinks are generally of the form '''type:id''' (where ''id'' represents the
number, name or path of the item) though some frequently used kinds of items
also have short-hand notations.

Some examples:
 * Tickets: '''!#1''' or '''!ticket:1'''
 * Reports: '''!{1}''' or '''!report:1'''
 * Changesets: '''!r1''', '''![1]''' or '''!changeset:1'''
 * Revision log: '''!r1:3''', '''![1:3]''' or '''!log:#1:3'''
 * Wiki pages: '''CamelCase''' or '''!wiki:CamelCase'''
 * Milestones: '''!milestone:1.0'''
 * Files: '''!source:trunk/COPYING'''
 * A specific file revision: '''!source:/trunk/COPYING#200'''
Display:
 * Tickets: #1 or ticket:1
 * Reports: {1} or report:1
 * Changesets: r1, [1] or changeset:1
 * Differences: r1:3, [1:3] or log:#1:3
 * Wiki pages: CamelCase or wiki:CamelCase
 * Milestones: milestone:1.0
 * Files: source:trunk/COPYING
 * A specific file revision: source:/trunk/COPYING#200

'''Note:''' The wiki:CamelCase form is rarely used, but it can be convenient to refer to
pages whose names do not follow WikiPageNames rules, i.e., single words,
non-alphabetic characters, etc.

Trac links using the full (non-shorthand) notation can also be given a custom
link title like this:

{{{
[ticket:1 This is a link to ticket number one].
}}}

Display: [ticket:1 This is a link to ticket number one].

If the title is be omitted, only the id (the part after the colon) is displayed:

{{{
[ticket:1]
}}}

Display: [ticket:1]

It might seem a simple enough concept at a glance, but actually allows quite a complex network of information. In practice, it's very intuitive and simple to use, and we've found the 'link trail' extremely helpful to better understand what's happening in a project or why a particular change was made.

== source: links ==
The default behavior for a source:/some/path link is to open the directory browser if the path points
to a directory and otherwise open the log view. It's also possible to link directly to a specific
revision of a file like this: source:/some/file#123 or like this to link to the latest revision:
source:/some/file#latest.

== Where to use TracLinks ==
You can use TracLinks in:

 * Source code (Subversion) commit messages
 * Wiki pages
 * Full descriptions for tickets, reports and milestones

and any other text fields explicitly marked as supporting WikiFormatting.

== Escaping Links ==

To prevent parsing of a !TracLink, you can escape it by preceding it with a '!' (exclamation mark).
{{{
 !NoLinkHere.
 ![42] is not a link either.
}}}

Display:
 !NoLinkHere.
 ![42] is not a link either.

----
See also: WikiFormatting, TracWiki
 ",,
73,2,1127968448,trac,127.0.0.1,"= Tracd =

Tracd is a lightweight stand-alone Trac server. In most cases it's easier to setup and runs faster than trac.cgi.


== Pros ==

 * Fewer dependencies: You don't need to install apache or any other web-server.
 * Fast: Should be as fast as the TracModPython version (much faster than the cgi).

== Cons ==

 * Less features: Tracd implements a very simple web-server and is not as configurable as apache.
 * Only htdigest authentication: Tracd can currently only authenticate users against apache-htdigest files.
 * No native https support: [http://www.rickk.com/sslwrap/ sslwrap] can be used instead,
   or [http://lists.edgewall.com/archive/trac/2005-August/004381.html STUNNEL].

== Usage examples ==

A single project on port 8080. (http://localhost:8080/)
{{{
 $ tracd -p 8080 /path/to/project
}}}
With more than one project. (http://localhost:8080/project1/ and http://localhost:8080/project2/)
{{{
 $ tracd -p 8080 /path/to/project1 /path/to/project2
}}}
With htdigest authentication. The file /tmp/users.htdigest contain user accounts for project1 with the realm 'mycompany.com'.
{{{
 $ tracd -p 8080 --auth project1,/tmp/users.htdigest,mycompany.com /path/to/project1
}}}
htdigest authentication can also be used for more than one project.
The digest file can be shared:
{{{
 $ tracd -p 8080 \
   --auth project1,/tmp/users.htdigest,mycompany.com \
   --auth project2,/tmp/users.htdigest,mycompany.com \
   /path/to/project1 /path/to/project2
}}}

== Tracd on Windows ==

tracd also works on Windows. 
But on that platform, the sensitivity on multithreading issues is high,
and you ''might'' have problems (i.e. crashes of the Python interpreter).
If this happens, you can force tracd to operate in single-threaded mode:
{{{
#!text/x-diff
Index: trac/web/standalone.py
===================================================================
--- trac/web/standalone.py      (revision 1862)
+++ trac/web/standalone.py      (working copy)
@@ -124,7 +124,7 @@
         return auth['username']


-class TracHTTPServer(ThreadingMixIn, HTTPServer):
+class TracHTTPServer(HTTPServer):

     projects = None
}}}

Please also report any such issue, as they are believed to be fixed by now.


== Generating passwords on Windows ==

If you don't have Apache available, you can use this Python script to generate your passwords (code borrowed heavily from #845):

{{{
from optparse import OptionParser
import md5

# build the options
usage = 'usage: %prog [options]'
parser = OptionParser(usage=usage)
parser.add_option('-u', '--username',action='store', dest='username', type = 'string',
                  help='the username for whom to generate a password')
parser.add_option('-p', '--password',action='store', dest='password', type = 'string',
                  help='the password to use')
(options, args) = parser.parse_args()

# check options
if (options.username is None) or (options.password is None):
   parser.error('You must supply both the username and password')
   
# Generate the string to enter into the htdigest file
realm = 'trac'
kd = lambda x: md5.md5(':'.join(x)).hexdigest()
print ':'.join((options.username, realm, kd([options.username, realm, options.password])))
}}}

----
See also: [source:trunk/README.tracd#latest README.tracd], TracGuide, TracInstall, TracModPython",,
74,2,1127968448,trac,127.0.0.1,"= Upgrade Instructions =
[[TracGuideToc]]

A Trac environment sometimes needs to be upgraded before it can be used with a new version of Trac. This document describes the steps necessary to upgrade an environment.

 '''Note''': ''Environment upgrades are not necessary for minor version releases unless otherwise noted. For example, there's no need to upgrade a Trac environment created with (or upgraded) 0.8.0 when installing 0.8.4 (or any other 0.8.x release).''

== General Instructions ==

Typically, there are four steps involved in upgrading to a newer version of Trac:

=== Update the Trac Code ===

Get the new version of Trac, either by downloading an offical release package or by checking it out from the [http://projects.edgewall.com/trac/wiki/SubversionRepository Subversion repository].

If you have a source distribution, you need to run
{{{
python setup.py install
}}}

to install the new version. If you've downloaded the Windows installer, you execute it, and so on.

In any case, if you're doing a major version upgrade (such as from 0.8 to 0.9), it is ''highly'' recommended that you first remove the existing Trac code. To do this, you need to delete the `trac` directory from the Python `lib/site-packages` directory. You may also want to remove the Trac `cgi-bin`, `htdocs` and `templates` directories that are commonly found in a directory called `share/trac` (the exact location depends on your platform).

=== Upgrade the Trac Environment ===

Unless noted otherwise, upgrading between major versions (such as 0.8 and 0.9) involves changes to the database schema, and possibly the layout of the [wiki:TracEnvironment environment directory]. Fortunately, Trac provides automated upgrade scripts to ease the pain. These scripts are run via [wiki:TracAdmin trac-admin]:
{{{
trac-admin /path/to/projenv upgrade
}}}

This command will do nothing if the environment is already up-to-date. [[BR]]

=== Update the Trac Documentation ===

Every [wiki:TracEnvironment Trac environment] includes a copy of the Trac documentation for the installed version. As you probably want to keep the included documentation in sync with the installed version of Trac, [wiki:TracAdmin trac-admin] provides a command to upgrade the documentation:
{{{
trac-admin /path/to/projenv wiki upgrade
}}}

Note that this procedure will of course leave your `WikiStart` page intact.

=== Restart the Web Server ===

In order to reload the new Trac code you will need to restart your web server (note this is not necessary for plain old CGI, although CGI is discouraged for performance reasons).

== Specific Versions ==

The following sections discuss any extra actions that may need to be taken to upgrade to specific versions of Trac.

== From 0.8.x to 0.9 ==

If you're using [wiki:TracCgi CGI] you will want to update your `Alias` to the Trac htdocs static resources.  See the documentation on [wiki:TracCgi#MappingStaticResources mapping static resources] for an example on how to configure this.

[wiki:TracFastCgi FastCGI] and [wiki:TracModPython mod_python] users can safely remove any `Alias`es to the Trac htdocs folder since this is no longer used by default.

[wiki:TracModPython mod_python] users will also need to change the name of the mod_python handler in the Apache HTTPD configuration:
{{{
   from: PythonHandler trac.ModPythonHandler
   to:   PythonHandler trac.web.modpython_frontend
}}}

If you have [http://initd.org/tracker/pysqlite PySQLite] 2.x installed, Trac will now try to open your SQLite database using the SQLite 3.x file format. The database formats used by SQLite 2.8.x and SQLite 3.x are incompatible. If you get an error like ''“file is encrypted or is not a database”'' after upgrading, then you must convert your database file.

To do this, you need to have both SQLite 2.8.x and SQLite 3.x installed (they have different filenames so can coexist on the same system). Then use the following commands:
{{{
 $ mv trac.db trac2.db
 $ sqlite trac2.db .dump | sqlite3 trac.db
}}}

After testing that the conversion was successful, the `trac2.db` file can be deleted. For more information on the SQLite upgrade see http://www.sqlite.org/version3.html.

== From 0.7.x to 0.8 ==

0.8 adds a new roadmap feature which requires additional permissions. While a
fresh installation will by default grant ROADMAP_VIEW and MILESTONE_VIEW
permissions to anonymous, these permissions have to be granted manually when
upgrading:
{{{
 $ trac-admin /path/to/projectenv permission add anonymous MILESTONE_VIEW
 $ trac-admin /path/to/projectenv permission add anonymous ROADMAP_VIEW
}}}

-----
See also: TracGuide, TracInstall",,
75,2,1127968448,trac,127.0.0.1,"= TracAdmin =
[[TracGuideToc]]

Trac is distributed with a powerful command-line configuration tool. This tool can be used  to configure and customize your Trac-installation to better fit your needs.

== Usage ==

You can get a comprehensive list of the available options, commands and sub-commands by invoking `trac-admin` with the `help` command:
{{{
trac-admin help
}}}

Unless you're executing the `help`, `about` or `version` sub-commands, you'll need to specify the path to the TracEnvironment that you want to administer as the first argument, for example:
{{{
trac-admin /path/to/projenv wiki list
}}}

== Interactive Mode ==

When passing the environment path as the only argument, `trac-admin` starts in interactive mode.
Commands can then be executed on the selected environment using the prompt, which offers tab-completion
(on non-Windows environments, and when the Python `readline` module is available) and automatic repetition of the last command issued.

Once you're in interactive mode, you can also get help on specific commands or subsets of commands:

For example, to get an explanation of the `resync` command, run:
{{{
> help resync
}}}

To get help on a all the Wiki-related commands, run:
{{{
> help wiki
}}}

----
See also: TracGuide, TracBackup, TracPermissions, TracEnvironment, TracIni
",,
76,2,1127968448,trac,127.0.0.1,"= The Trac User and Administration Guide =
[[TracGuideToc]]

The TracGuide is meant to serve as a starting point for all documentation regarding Trac usage and development. The guide is a free document, a collaborative effort, and a part of the [http://projects.edgewall.com/trac/ Trac Project] itself.

== Table of Contents ==
Currently available documentation:
 * TracGuide (This page)  -- Documentation starting point.
   * TracInstall -- How to install and run Trac.
   * TracUpgrade -- How to upgrade existing installations.
   * TracAdmin -- Administrating a Trac project.
   * TracImport -- Importing tickets from other bug databases.
   * TracIni -- Trac configuration file reference. 
   * TracPermissions -- Access control and permissions.
   * TracPlugins -- Installing and managing Trac extensions.
   * TracWiki -- How to use the built-in Wiki.
   * TracBrowser -- Browsing source code with Trac.
   * TracChangeset -- Viewing changes to source code.
   * TracTickets -- Using the issue tracker.
   * TracReports -- Writing and using reports.
   * TracQuery -- Executing custom ticket queries.
   * TracRoadmap -- The roadmap helps tracking project progress.
   * TracTimeline -- The timeline provides a historic perspective on a project.
   * TracLogging -- The Trac logging facility.
   * TracRss -- RSS content syndication in Trac.
   * TracNotification -- Email notification.

 * [http://projects.edgewall.com/trac/wiki/TracFaq Trac FAQ] - A collection of Frequently Asked Questions (on the project website)

== Support and Other Sources of Information ==
If you are looking for a good place to ask a question about Trac, look no further than the [http://projects.edgewall.com/trac/wiki/MailingList MailingList]. It provides a friendly environment to discuss openly among Trac users and developers.

See also the TracSupport page for more information resources.",,
77,2,1127968448,trac,127.0.0.1,"= Trac Changeset Module =
[[TracGuideToc]]

Trac has a built-in functionality for visualizing “diffs” - changes to files.

When viewing a repository check-in, such as when following a
changeset [wiki:TracLinks link] or a changeset event in the 
[wiki:TracTimeline timeline], Trac will display the exact changes
made by the check-in.

The changeset view consists of two parts, the ''header'' and the ''diff views''.

== Changeset Header ==

The header shows an overview of the whole changeset.
Here you will find information such as:

 * Timestamp -- When the changeset was commited
 * Author -- Who commited the changeset
 * Message -- A brief description from the author (the commit log message)
 * Files -- A list of files affected by this changeset

In front of each listed file, you'll find  a colored rectangle. The color
indicates how the file is affected by the changeset.
 
 * Green: Added
 * Red: Removed
 * Yellow: Modified
 * Blue: Copied
 * Gray: Moved

The color legend is located below the header as a reminder.

== Diff Views ==

Below the header is the main part of the changeset, the diff view. Each file is shown in a separate section, each of which will contain only the regions of the file that are affected by the changeset. There are two different styles of displaying the diffs: ''inline'' or ''side-by-side'' (you can switch between those styles using the preferences form):

 * The ''inline'' style shows the changed regions of a file underneath each other. A region removed from the file will be colored red, an added region will be colored green. If a region was modified, the old version is displayed above the new version. Line numbers on the left side indicate the exact position of the change in both the old and the new version of the file.
 * The ''side-by-side'' style shows the old version on the left and the new version on the right (this will typically require more screen width than the inline style.) Added and removed regions will be colored in the same way as with the inline style (green and red, respectively), but modified regions will have a yellow background.

In addition, various advanced options are available in the preferences form for adjusting the display of the diffs:
 * You can set how many lines are displayed before and after every change
 * You can toggle whether blank lines, case changes and white space changes are ignored, thereby letting you find the functional changes more quickly

----
See also: TracGuide, TracBrowser
",,
78,2,1127968448,trac,127.0.0.1,"= Steps to Add a New Wiki Page =

 1. Choose a name for your new page. See WikiPageNames for naming conventions.
 1. Edit an existing page and add a hyperlink to your new page. Save your changes.
 1. Follow the link you created to take you to the new page. Trac will display a 'describe !PageName here' message.
 1. Click the 'Edit this page' button to edit and add content to your new page. Save your changes.
 1. All done. Your new page is published.


See also: TracWiki, WikiFormatting, TracLinks, WikiDeletePage 
",,
79,1,1127968448,trac,127.0.0.1,"= Delete an existing Wiki Page =

Users with {{{WIKI_DELETE}}} permissions can delete wiki pages using the {{{'delete page'}}} or the {{{'delete this version'}}} buttons
at the bottom of the wiki page. These buttons are only visible for users with {{{WIKI_DELETE}}} permissions.

'''Note:''' This is an irreversible operation.



See also: TracWiki, TracPermissions
",,
80,2,1127968448,trac,127.0.0.1,"= The Trac Wiki Engine =
[[TracGuideToc]]

Trac has a built-in wiki engine, used for text and documentation throughout the system. WikiFormatting is used for [wiki:TitleIndex wiki pages], '''tickets''' and '''commit log messages'''. 

This allows for formatted text and hyperlinks in and between all Trac modules.

Editing wiki text is easy, using any web browser and a simple formatting system (see WikiFormatting), rather than more complex markups like HTML. 
The reasoning behind its design is that HTML, with its large library of nested tags, is too complicated to allow fast-paced editing, and distracts from the actual content of the pages. Note though, Trac also supports [wiki:WikiHtml HTML] and [wiki:WikiRestructuredText reStructuredText] as alternative markup formats.

The main goal of the wiki  is making editing text easier and '''encourage''' people to contribute and annotate text content for a project. 

Wiki itself does not enforce any structure, but rather resembles a stack of empty paper sheets, where you can organize information and documentation as you see fit, and later reorganize if necessary. 

For more help on editing wiki text, see:
 * WikiFormatting
 * WikiPageNames
 * WikiNewPage
 * TracLinks
 * WikiMacros
 * WikiProcessors

If you want to practice editing, please use the SandBox.

Some more information about wiki on the web:
 * http://wikipedia.org/wiki/Wiki
 * http://c2.com/cgi/wiki?WikiHistory
 * http://www.usemod.com/cgi-bin/mb.pl?WhyWikiWorks
",,
81,1,1127968448,trac,127.0.0.1,"= Installing Trac as CGI =

To install Trac as a CGI script, you need to make the `trac.cgi` executable as a CGI by your web server. If you're using [http://httpd.apache.org/ Apache HTTPD], there are a couple ways to do that:

 1. Use a `ScriptAlias` to map an URL to the `trac.cgi` script
 2. Copy the `trac.cgi` file into the directory for CGI executables used by your web server (commonly named `cgi-bin`). You can also create a symbolic link, but in that case make sure that the `FollowSymLinks` option is enabled for the `cgi-bin` directory.

The first option is recommended as it also allows you to map the CGI to a friendly URL.

Now, edit the Apache configuration file and add this snippet, file names and locations changed to match your installation:
{{{
ScriptAlias /trac /usr/share/trac/cgi-bin/trac.cgi

# Trac need to know where the database is located
<Location '/trac'>
  SetEnv TRAC_ENV '/path/to/projectenv'
</Location>
}}}

This will make Trac available at `http://yourhost.example.org/trac`.

 ''Note: Make sure that the modules mod_alias and mod_env modules are available and enabled in your Apache configuration, otherwise Apache will complain about the above snippet.''

 ''Note: If you are using the [http://httpd.apache.org/docs/suexec.html Apache suEXEC] feature see [http://projects.edgewall.com/trac/wiki/ApacheSuexec ApacheSuexec] (on the main Trac site).''

== Mapping Static Resources ==

Out of the box, Trac will serve static resources such as style sheets or images itself. For a CGI setup, though, this is highly undesirable, because it results in the CGI script being invoked for documents that could be more efficiently served by the web server.

Web servers such as [http://httpd.apache.org/ Apache HTTPD] allow you to create “Aliases” to resources, thereby giving them a virtual URL that doesn't necessarily bear any resemblance to the layout of the servers file system. We already used this capability above when defining a `ScriptAlias` for the CGI script, and we'll use it now to map requests to the static resources to the directory on the file system that contains them, thereby bypassing the processing of such requests by the CGI script.

Edit the Apache configuration file again and add the following snippet '''before''' the `ScriptAlias` for the CGI script , file names and locations changed to match your installation:
{{{
Alias /trac/chrome/common /usr/share/trac/htdocs
<Directory '/usr/share/trac/htdocs'>
  Order allow,deny
  Allow from all
</Directory>
}}}

Note that whatever URL path you mapped the `trac.cgi` script to, the path `/chrome/common` is the path you have to append to that location to intercept requests to the static resources.

For example, if Trac is mapped to `/cgi-bin/trac.cgi` on your server, the URL of the Alias should be `/cgi-bin/trac.cgi/chrome/common`.

== Adding Authentication ==

The simplest way to enable authentication with Apache is to create a password file. Use the `htpasswd` program to create the password file:
{{{
$ htpasswd -c /somewhere/trac.htpasswd admin
New password: <type password>
Re-type new password: <type password again>
Adding password for user admin
}}}

After the first user, you dont need the '-c' option anymore:
{{{
$ htpasswd /somewhere/trac.htpasswd john
New password: <type password>
Re-type new password: <type password again>
Adding password for user john
}}}

  ''See the man page for `htpasswd` for full documentation.''

After you've created the users, you can set their permissions using TracPermissions.

Now, you'll need to enable authentication against the password file in the Apache configuration:
{{{
<Location '/cgi-bin/trac.cgi/login'>
  AuthType Basic
  AuthName 'Trac'
  AuthUserFile /somewhere/trac.htpasswd
  Require valid-user
</Location>
}}}

For better security, it is recommended that you either enable SSL or at least use the “Digest” authentication scheme instead of “Basic”. Please read the [http://httpd.apache.org/docs/2.0/ Apache HTTPD documentation] to find out more.

----
See also:  TracGuide, TracInstall, TracFastCgi, TracModPython
",,
82,1,1127968448,trac,127.0.0.1,"= Trac with FastCGI =

Since version 0.9, Trac supports being run through the [http://www.fastcgi.com/ FastCGI] interface. Like [wiki:TracModPython mod_python], this allows Trac to remain resident, and is faster than external CGI interfaces which must start a new process for each request. However, unlike mod_python, it is able to support [http://httpd.apache.org/docs/suexec.html SuEXEC]. Additionally, it is supported by much wider variety of web servers.

== Simple Apache configuration ==
{{{
# Enable fastcgi for .fcgi files
# (If you're using a distro package for mod_fcgi, something like
# this is probably already present)
<IfModule mod_fastcgi.c>
   AddHandler fastcgi-script .fcgi
   FastCgiIpcDir /var/lib/apache2/fastcgi 
</IfModule>
LoadModule fastcgi_module /usr/lib/apache2/modules/mod_fastcgi.so
}}}

You can either setup the `TRAC_ENV` as an overall default:
{{{
FastCgiConfig -initial-env TRAC_ENV=/path/to/env/trac
}}}

Or you can serve multiple Trac projects in a directory like:
{{{
FastCgiConfig -initial-env TRAC_ENV_PARENT_DIR=/parent/dir/of/projects
}}}

Configure `ScriptAlias` or similar options as described in TracCgi, but calling `trac.fcgi` instead of `trac.cgi`.

== Simple Lighttpd Configuration ==

The FastCGI front-end was developed primarily for use with alternative webservers, such as [http://www.lighttpd.net/ lighttpd].

lighttpd a secure, fast, compliant and very flexible web-server which has been optimized for high-performance
environments.  It has a very low memory footprint compared to other web servers and takes care of CPU load.

For using `trac.fcgi` with lighttpd add the following to your lighttpd.conf:
{{{
fastcgi.server = ('/trac' =>
                   ('trac' =>
                     ('socket' => '/tmp/trac-fastcgi.sock',
                      'bin-path' => '/path/to/cgi-bin/trac.fcgi',
                      'check-local' => 'disable',
                      'bin-environment' =>
                        ('TRAC_ENV' => '/path/to/projenv')
                     )
                   )
                 )
}}}

Note that you will need to add a new entry to `fastcgi.server` for each separate Trac instance that you wish to run. Alternatively, you may use the `TRAC_ENV_PARENT_DIR` variable instead of `TRAC_ENV` as described  above.

Other important information like [http://trac.lighttpd.net/trac/wiki/TracInstall this updated TracInstall page], [wiki:TracCgi#MappingStaticResources and this] are useful for non-fastcgi specific installation aspects.

Relaunch lighttpd, and browse to `http://yourhost.example.org/trac` to access Trac.

----
See also TracCgi, TracModPython, TracInstall, TracGuide",,
83,1,1127968448,trac,127.0.0.1,"= Trac Plugins =

Since version 0.9, Trac supports plugins that extend the built-in functionality. The plugin functionality is based on the [http://projects.edgewall.com/trac/wiki/TracDev/ComponentArchitecture component architecture].

== Requirements ==

To use plugins in Trac, you need to have [http://peak.telecommunity.com/DevCenter/setuptools setuptools] (version 0.5 or 0.6) installed.

To install `setuptools`, download the bootstrap module [http://peak.telecommunity.com/dist/ez_setup.py ez_setup.py] and execute it as follows:
{{{
$ python ez_setup.py
}}}

If the `ez_setup.py` script fails to install the setuptools release, you can download it from [http://www.python.org/pypi/setuptools PyPI] and install it manually.

== Installing a Trac Plugin ==

=== For a Single Project ===

Plugins are packaged as [http://peak.telecommunity.com/DevCenter/PythonEggs Python eggs]. That means they are ZIP archives with the file extension `.egg`. If you have downloaded a source distribution of a plugin, you can run:
{{{
$ python setup.py bdist_egg
}}}
to build the `.egg` file.

Once you have the plugin archive, you need to copy it into the `plugins` directory of the [wiki:TracEnvironment project environment]. Also, make sure that the web server has sufficient permissions to read the plugin egg.

=== For All Projects ===

Plugins that you want to use in all your projects (such as [http://projects.edgewall.com/trac/wiki/WebAdmin WebAdmin]) can be installed globally by running:
{{{
$ python setup.py install
}}}

Alternatively, you can just drop the `.egg` file in the Python `site-packages` directory.

== Setting up the Plugin Cache ==

Some plugins will need to be extracted by the Python eggs runtime (`pkg_resources`), so that their contents are actual files on the file system. The directory in which they are extracted defaults to the home directory of the current user, which may or may not be a problem. You can however override the default location using the `PYTHON_EGG_CACHE` environment variable.

To do this from the Apache configuration, use the `SetEnv` directive as follows:
{{{
SetEnv PYTHON_EGG_CACHE /path/to/dir
}}}

This works whether your using the [wiki:TracCgi CGI] or the [wiki:TracModPython mod_python] front-end. Put this directive next to where you set the path to the [wiki:TracEnvironment Trac environment], i.e. in the same `<Location>` block.

For example (for CGI):
{{{
 <Location /trac>
   SetEnv TRAC_ENV /path/to/projenv
   SetEnv PYTHON_EGG_CACHE /path/to/dir
 </Location>
}}}

or (for mod_python):
{{{
 <Location /trac>
   SetHandler mod_python
   ...
   SetEnv PYTHON_EGG_CACHE /path/to/dir
 </Location>
}}}

For [wiki:TracFastCgi FastCGI], you'll need to `-initial-env` option, or whatever is provided by your web server for setting environment variables.

----
See also TracGuide, [wiki:TracDev/ComponentArchitecture component architecture]",,
84,2,1128009792.03,moe,198.49.126.204,,,
85,3,1128115189.88,moe,198.49.126.204,"= Welcome To Divmod's Trac Installation =

== Ticket Queries ==
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&groupdesc=1&group=milestone&component=ClickChronicle&order=priority grouped by milestone])

== Starting Points ==

 * TracGuide --  Built-in Documentation
 * [http://projects.edgewall.com/trac/ The Trac project] -- Trac Open Source Project
 * [http://projects.edgewall.com/trac/wiki/TracFaq Trac FAQ] -- Frequently Asked Questions
 * TracSupport --  Trac Support

For a complete list of local wiki pages, see TitleIndex.

Trac is brought to you by [http://www.edgewall.com/ Edgewall Software],
providing professional Linux and software development services to clients
worldwide. Visit http://www.edgewall.com/ for more information.

",',0
86,4,1128537009.71861,glyph,198.49.126.204,"= Welcome To Divmod's Trac Installation =

== Ticket Queries ==
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&groupdesc=1&group=milestone&component=ClickChronicle&order=priority grouped by milestone])

== Potentially Interesting Ideas ==

MantissaIsTheDeploymentTarget

== Starting Points ==

 * TracGuide --  Built-in Documentation
 * [http://projects.edgewall.com/trac/ The Trac project] -- Trac Open Source Project
 * [http://projects.edgewall.com/trac/wiki/TracFaq Trac FAQ] -- Frequently Asked Questions
 * TracSupport --  Trac Support

For a complete list of local wiki pages, see TitleIndex.

Trac is brought to you by [http://www.edgewall.com/ Edgewall Software],
providing professional Linux and software development services to clients
worldwide. Visit http://www.edgewall.com/ for more information.

",',0
87,1,1128537639.48545,glyph,198.49.126.204,"== What Does That Mean? ==

Mantissa is an application server.

It can serve an application over several protocols.

HTTP is one of those protocols, but HttpIsntSpecial.

The web interface that Mantissa provides should be pluggable, but it should ''not'' be so flexible that every Mantissa application provides its own fixed skin and look and feel.

In other words, when you write a Mantissa application, Mantissa is the deployment target.  You deploy your application into a Mantissa application container that faces the web, *not* directoy onto the web.  Ideally the Mantissa web container will be able to show components from several different independently-developed applications simultaneously.

This means that you SHOULD NOT be writing your own IResource implementations or full-page templates; applications should be plugging in somewhere on the page.  The set of interfaces developed for this right now (INavigableFragment, INavigableElement) are not necessarily the best, but others will arise soon.

This is not gold-plating or overengineering, as many seem to think.  It springs from a specific requirement.  Divmod specifcially intends to develop something like 10 different applications, and launch each one separately, but make it easy for people to sign up and for our subscribers to activate new services.  Each of those applications is pluggable and has integration points with other applications.  These applications are all going to share the same web interface and should have a common look and feel, common interface elements, and a shared infrastructure (for example: password management, search).

== Examples of Where This Matters ==

The most trivial example is side-by-side viewing.   It would be good if the tab-based navigation system could move towards being one where you click on a tab to 'go to a page', vs. one where you click on a tab to 'launch' a Mantissa object, enabling side-by-side viewing of multiple interactive objects on one LivePage.  (Donovan's ill-fated launch-bar demonstration is what I mean by this, for those who saw it before it was deleted)

Obviously you cannot lay out the entire page in one component if it is going to be displayed on the same page as a separate component.

A better example might be search.  There should be one search box for every Mantissa application.  When a user searches, each application should be queried (where 'application' in this case is equivalent to 'thing installed on a user's store, implementing the appropriate search interface')

The search results page should not be laid out or rendered by any particular application, but instead, be an aggregation of all the search results for a particular term.  This means that the search page has to be part of the framework, not part of an application.

(More examples to come)","first cut at this concept",0
88,1,1128537716.67779,glyph,198.49.126.204,"HTTP is just a protocol.

It is popular, but it isn't magical.

It isn't the best protocol; it makes it hard to build interactive applications.

Other protocols deserve good implementations, too.","The Web Paradox.",0
89,2,1128537788.73767,glyph,198.49.126.204,"== What Does That Mean? ==

Mantissa is an application server.

It can serve an application over several protocols.

HTTP is one of those protocols, but HttpIsntSpecial.

The web interface that Mantissa provides should be pluggable, but it should ''not'' be so flexible that every Mantissa application provides its own fixed skin and look and feel.

In other words, when you write a Mantissa application, Mantissa is the deployment target.  You deploy your application into a Mantissa application container that faces the web, '''not''' directly onto the web.  Ideally the Mantissa web container will be able to show components from several different independently-developed applications simultaneously.

This means that you SHOULD NOT be writing your own IResource implementations or full-page templates; applications should be plugging in somewhere on the page.  The set of interfaces developed for this right now (INavigableFragment, INavigableElement) are not necessarily the best, but others will arise soon.

This is not gold-plating or overengineering, as many seem to think.  It springs from a specific requirement.  Divmod specifcially intends to develop something like 10 different applications, and launch each one separately, but make it easy for people to sign up and for our subscribers to activate new services.  Each of those applications is pluggable and has integration points with other applications.  These applications are all going to share the same web interface and should have a common look and feel, common interface elements, and a shared infrastructure (for example: password management, search).

== Examples of Where This Matters ==

The most trivial example is side-by-side viewing.   It would be good if the tab-based navigation system could move towards being one where you click on a tab to 'go to a page', vs. one where you click on a tab to 'launch' a Mantissa object, enabling side-by-side viewing of multiple interactive objects on one LivePage.  (Donovan's ill-fated launch-bar demonstration is what I mean by this, for those who saw it before it was deleted)

Obviously you cannot lay out the entire page in one component if it is going to be displayed on the same page as a separate component.

A better example might be search.  There should be one search box for every Mantissa application.  When a user searches, each application should be queried (where 'application' in this case is equivalent to 'thing installed on a user's store, implementing the appropriate search interface')

The search results page should not be laid out or rendered by any particular application, but instead, be an aggregation of all the search results for a particular term.  This means that the search page has to be part of the framework, not part of an application.

(More examples to come)",',0
90,3,1128538354.76948,glyph,198.49.126.204,"= Mantissa Is The Deployment Target =
=== The Web Is Not ===

== What Does That Mean? ==

Mantissa is an application server.

It can serve an application over several protocols.

HTTP is one of those protocols, but HttpIsntSpecial.

The web interface that Mantissa provides should be pluggable, but it should ''not'' be so flexible that every Mantissa application provides its own fixed skin and look and feel.

In other words, when you write a Mantissa application, Mantissa is the deployment target.  You deploy your application into a Mantissa application container that faces the web, '''not''' directly onto the web.  Ideally the Mantissa web container will be able to show components from several different independently-developed applications simultaneously.

This means that you SHOULD NOT be writing your own IResource implementations or full-page templates; applications should be plugging in somewhere on the page.  The set of interfaces developed for this right now (INavigableFragment, INavigableElement) are not necessarily the best, but others will arise soon.

This is not gold-plating or overengineering, as many seem to think.  It springs from a specific requirement.  Divmod specifcially intends to develop something like 10 different applications, and launch each one separately, but make it easy for people to sign up and for our subscribers to activate new services.  Each of those applications is pluggable and has integration points with other applications.  These applications are all going to share the same web interface and should have a common look and feel, common interface elements, and a shared infrastructure (for example: password management, search).

== Examples of Where This Matters ==

The most trivial example is side-by-side viewing.   It would be good if the tab-based navigation system could move towards being one where you click on a tab to 'go to a page', vs. one where you click on a tab to 'launch' a Mantissa object, enabling side-by-side viewing of multiple interactive objects on one LivePage.  (Donovan's ill-fated launch-bar demonstration is what I mean by this, for those who saw it before it was deleted)

Obviously you cannot lay out the entire page in one component if it is going to be displayed on the same page as a separate component.

A better example might be search.  There should be one search box for every Mantissa application.  When a user searches, each application should be queried (where 'application' in this case is equivalent to 'thing installed on a user's store, implementing the appropriate search interface')

The search results page should not be laid out or rendered by any particular application, but instead, be an aggregation of all the search results for a particular term.  This means that the search page has to be part of the framework, not part of an application.

(More examples to come)",',0
91,1,1128538431.09286,glyph,198.49.126.204,"The first publicly-released Divmod application.

It chronicles your clicks.

(Release information soon)",',0
92,5,1128554573.22633,glyph,198.49.126.204,"= Welcome To Divmod's Trac Installation =

== Ticket Queries ==
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&groupdesc=1&group=milestone&component=ClickChronicle&order=priority grouped by milestone])

== Projects ==

AxiomProject
ClickChronicleProject
CombinatorProject
EpsilonProject
MantissaProject
NevowProject
PyflakesProject
RadicalProject
VertexProject

== Potentially Interesting Ideas ==

MantissaIsTheDeploymentTarget

== Trac Starting Points ==

 * TracGuide --  Built-in Documentation
 * [http://projects.edgewall.com/trac/ The Trac project] -- Trac Open Source Project
 * [http://projects.edgewall.com/trac/wiki/TracFaq Trac FAQ] -- Frequently Asked Questions
 * TracSupport --  Trac Support

For a complete list of local wiki pages, see TitleIndex.

Trac is brought to you by [http://www.edgewall.com/ Edgewall Software],
providing professional Linux and software development services to clients
worldwide. Visit http://www.edgewall.com/ for more information.

",',0
93,6,1128554597.88752,glyph,198.49.126.204,"= Welcome To Divmod's Trac Installation =

== Ticket Queries ==
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&groupdesc=1&group=milestone&component=ClickChronicle&order=priority grouped by milestone])

== Projects ==

AxiomProject

ClickChronicleProject

CombinatorProject

EpsilonProject

MantissaProject

NevowProject

PyflakesProject

RadicalProject

VertexProject

== Potentially Interesting Ideas ==

MantissaIsTheDeploymentTarget

== Trac Starting Points ==

 * TracGuide --  Built-in Documentation
 * [http://projects.edgewall.com/trac/ The Trac project] -- Trac Open Source Project
 * [http://projects.edgewall.com/trac/wiki/TracFaq Trac FAQ] -- Frequently Asked Questions
 * TracSupport --  Trac Support

For a complete list of local wiki pages, see TitleIndex.

Trac is brought to you by [http://www.edgewall.com/ Edgewall Software],
providing professional Linux and software development services to clients
worldwide. Visit http://www.edgewall.com/ for more information.

",',0
94,7,1128795850.7003,amir,198.49.126.204,"= Welcome To Divmod's Trac Installation =

== Ticket Queries ==
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&groupdesc=1&group=milestone&component=ClickChronicle&order=priority grouped by milestone])

== Projects ==

AxiomProject

ClickChronicleProject

CombinatorProject

EpsilonProject

MantissaProject

NevowProject

PyflakesProject

RadicalProject

VertexProject

== Potentially Interesting Ideas ==

ClickChronicleAlpha

MantissaIsTheDeploymentTarget

== Trac Starting Points ==

 * TracGuide --  Built-in Documentation
 * [http://projects.edgewall.com/trac/ The Trac project] -- Trac Open Source Project
 * [http://projects.edgewall.com/trac/wiki/TracFaq Trac FAQ] -- Frequently Asked Questions
 * TracSupport --  Trac Support

For a complete list of local wiki pages, see TitleIndex.

Trac is brought to you by [http://www.edgewall.com/ Edgewall Software],
providing professional Linux and software development services to clients
worldwide. Visit http://www.edgewall.com/ for more information.

",',0
95,1,1128796521.06956,amir,198.49.126.204,,,
96,2,1128796565.68022,amir,198.49.126.204,,,
97,3,1128796810.00657,amir,198.49.126.204,"= Overview =

From the ClickChronicle [http://clickchronicle.com/faq FAQ]

  1. What is ClickChronicle?
  ClickChronicle keeps a record of your web browsing and allows you to search all the web pages that you have visited.

  We are staring Alpha testing and would appreciate your help in shaking down any bugs and enhancing the product.

  The service is ''Firefox only'' and  has 2 parts: a click recorder and the clickchronicle.com service. The click recorder is currently a [http://greasemonkey.mozdev.org/ Greasemonkey] script, so you'll have to download and install the Greasemonkey extension; restart your browser and then install the [http://clickchronicle.com/static/js/clickchronicle.user.js ClickChronicle Greasemonkey script]. Instructions follow.

= Getting started =

 * Go to http://clickchronicle.com/signup
 * Enter your email address
 * Check your email for registration confirmation
 * Follow the link in the email to activate your account
 * Select a password
 * Make sure [http://greasemonkey.mozdev.org/ Greasemonkey] is installed and running (e.g. install it and restart Firefox)
 * View the script on [http://clickchronicle.com/static/js/clickchronicle.user.js this page]. Yes, it's yuck Javascript - sorry!
 * While viewing the javascript go to the Firefox 'Tools' menu and select 'Install this user script'
 * Click OK on the subsequent dialog to install the script
 ",',0
98,4,1128797225.6012,amir,198.49.126.204,"= Overview =

From the ClickChronicle [http://clickchronicle.com/faq FAQ]

  1. What is ClickChronicle?
  ClickChronicle keeps a record of your web browsing and allows you to search all the web pages that you have visited.

  We are staring Alpha testing and would appreciate your help in shaking down any bugs and enhancing the product.

  The service is ''Firefox only'' and  has 2 parts: a click recorder and the clickchronicle.com service. The click recorder is currently a [http://greasemonkey.mozdev.org/ Greasemonkey] script, so you'll have to download and install the Greasemonkey extension; restart your browser and then install the [http://clickchronicle.com/static/js/clickchronicle.user.js ClickChronicle Greasemonkey script]. Instructions follow.

= Getting started =

 * Go to http://clickchronicle.com/signup
 * Enter your email address
 * Check your email for registration confirmation
 * Follow the link in the email to activate your account
 * Select a password
 * Make sure [http://greasemonkey.mozdev.org/ Greasemonkey] is installed and running (e.g. install it and restart Firefox)
 * View the script on [http://clickchronicle.com/static/js/clickchronicle.user.js this page]. Yes, it's yuck Javascript - sorry!
 * While viewing the javascript go to the Firefox 'Tools' menu and select 'Install this user script'
 * Click OK on the subsequent dialog to install the script
 * Open a new browser window or tab
 * Notice the small ClickChronicle on/off button at the bottom right hand corner of the browser window. This shows the current state of the click recorder and allows you toggle recording on and off.
 * When recording is off the button display 'CC Off' and is grey: http://divmod.org/users/amir/screenshots/ccoff.png
 * Clicking on the button switches on recording and displays 'CC On' on a dark blue background: http://divmod.org/users/amir/screenshots/ccon.png
 ",',0
99,5,1128797298.61958,amir,198.49.126.204,,,
100,6,1128797506.97791,amir,198.49.126.204,"= Overview =

From the ClickChronicle [http://clickchronicle.com/faq FAQ]

  1. What is ClickChronicle?
  ClickChronicle keeps a record of your web browsing and allows you to search all the web pages that you have visited.

  We are staring Alpha testing and would appreciate your help in shaking down any bugs and enhancing the product.

  The service is ''Firefox only'' and  has 2 parts: a click recorder and the clickchronicle.com service. The click recorder is currently a [http://greasemonkey.mozdev.org/ Greasemonkey] script, so you'll have to download and install the Greasemonkey extension; restart your browser and then install the [http://clickchronicle.com/static/js/clickchronicle.user.js ClickChronicle Greasemonkey script]. Instructions follow.

= Getting started =

 * Go to http://clickchronicle.com/signup
 * Enter your email address
 * Check your email for registration confirmation
 * Follow the link in the email to activate your account
 * Select a password
 * Make sure [http://greasemonkey.mozdev.org/ Greasemonkey] is installed and running (e.g. install it and restart Firefox)
 * View the script on [http://clickchronicle.com/static/js/clickchronicle.user.js this page]. Yes, it's yuck Javascript - sorry!
 * While viewing the javascript go to the Firefox 'Tools' menu and select 'Install this user script'
 * Click OK on the subsequent dialog to install the script
 * Open a new browser window or tab
 * Notice the small ClickChronicle on/off button at the bottom right hand corner of the browser window. This shows the current state of the click recorder and allows you toggle recording on and off.
 * When recording is off (clicks not recorded to clickchronicle.com) the button display 'CC Off' and is grey: http://divmod.org/users/amir/screenshots/ccoff.png
 * Clicking on the button starts recording clicks to clickchronicle.com and displays 'CC On' on a dark blue background: http://divmod.org/users/amir/screenshots/ccon.png
 * In order for clicks to be succesffully recorded to your account, you must be logged in to clickchronicle.com. The easiest way to ensure that you are always logged in is to logout (!) and the login again and check the 'Remember me' box. This sets a 2 week cookie. You don't want to check this box if you are using someone else's machine or a public machine in a library or internet cafe since it will allow others to see you clicks.
 * Once you have switched click recording on you should visit a few sites and then go to clickchronicle to ensure that the clicks have got through.",',0
101,7,1128797791.32746,amir,198.49.126.204,"= ClickChronicle Alpha =
  Welcome interpid alpha tester and Divmod fan!
  We hope you enjoy our latest offering.

== Disclaimer ==
  This is alpha software and it may break. We have tested the software, but during the alpha period we may have to restart the service erasing your account and data. We will do our best to avoid this but you have been warned.

= Overview =

From the ClickChronicle [http://clickchronicle.com/faq FAQ]

  1. What is ClickChronicle?
  ClickChronicle keeps a record of your web browsing and allows you to search all the web pages that you have visited.

  We are staring Alpha testing and would appreciate your help in shaking down any bugs and enhancing the product.

  The service is ''Firefox only'' and  has 2 parts: a click recorder and the clickchronicle.com service. The click recorder is currently a [http://greasemonkey.mozdev.org/ Greasemonkey] script, so you'll have to download and install the Greasemonkey extension; restart your browser and then install the [http://clickchronicle.com/static/js/clickchronicle.user.js ClickChronicle Greasemonkey script]. Instructions follow.

= Getting started =

 * Go to http://clickchronicle.com/signup
 * Enter your email address
 * Check your email for registration confirmation
 * Follow the link in the email to activate your account
 * Select a password
 * Make sure [http://greasemonkey.mozdev.org/ Greasemonkey] is installed and running (e.g. install it and restart Firefox)
 * View the script on [http://clickchronicle.com/static/js/clickchronicle.user.js this page]. Yes, it's yuck Javascript - sorry!
 * While viewing the javascript go to the Firefox 'Tools' menu and select 'Install this user script'
 * Click OK on the subsequent dialog to install the script
 * Open a new browser window or tab
 * Notice the small ClickChronicle on/off button at the bottom right hand corner of the browser window. This shows the current state of the click recorder and allows you toggle recording on and off.
 * When recording is off (clicks not recorded to clickchronicle.com) the button display 'CC Off' and is grey: http://divmod.org/users/amir/screenshots/ccoff.png
 * Clicking on the button starts recording clicks to clickchronicle.com and displays 'CC On' on a dark blue background: http://divmod.org/users/amir/screenshots/ccon.png
 * In order for clicks to be succesffully recorded to your account, you must be logged in to clickchronicle.com. The easiest way to ensure that you are always logged in is to logout (!) and the login again and check the 'Remember me' box. This sets a 2 week cookie. You don't want to check this box if you are using someone else's machine or a public machine in a library or internet cafe since it will allow others to see you clicks.
 * Once you have switched click recording on you should visit a few sites and then go to clickchronicle to ensure that the clicks have got through.",',0
102,8,1128798073.69705,amir,198.49.126.204,"= ClickChronicle Alpha =
  Welcome interpid alpha tester and Divmod fan!
  We hope you enjoy our latest offering.

== Disclaimer ==
  This is alpha software and it may break. We have tested the software, but during the alpha period we may have to restart the service erasing your account and data. We will do our best to avoid this but you have been warned.

= Overview =

From the ClickChronicle [http://clickchronicle.com/faq FAQ]

  1. What is ClickChronicle?
  ClickChronicle keeps a record of your web browsing and allows you to search all the web pages that you have visited.

  We are staring Alpha testing and would appreciate your help in shaking down any bugs and enhancing the product.

  The service is ''Firefox only'' and  has 2 parts: a click recorder and the clickchronicle.com service. The click recorder is currently a [http://greasemonkey.mozdev.org/ Greasemonkey] script, so you'll have to download and install the Greasemonkey extension; restart your browser and then install the [http://clickchronicle.com/static/js/clickchronicle.user.js ClickChronicle Greasemonkey script]. Instructions follow.

= Getting started =

 * Go to http://clickchronicle.com/signup
 * Enter your email address
 * Check your email for registration confirmation
 * Follow the link in the email to activate your account
 * Select a password
 * Make sure [http://greasemonkey.mozdev.org/ Greasemonkey] is installed and running (e.g. install it and restart Firefox)
 * View the script on [http://clickchronicle.com/static/js/clickchronicle.user.js this page]. Yes, it's yuck Javascript - sorry!
 * While viewing the javascript go to the Firefox 'Tools' menu and select 'Install this user script'
 * Click OK on the subsequent dialog to install the script
 * Open a new browser window or tab
 * Notice the small ClickChronicle on/off button at the bottom right hand corner of the browser window. This shows the current state of the click recorder and allows you toggle recording on and off.
 * When recording is off (clicks not recorded to clickchronicle.com) the button display 'CC Off' and is grey: http://divmod.org/users/amir/screenshots/ccoff.png
 * Clicking on the button starts recording clicks to clickchronicle.com and displays 'CC On' on a dark blue background: http://divmod.org/users/amir/screenshots/ccon.png
 * In order for clicks to be succesffully recorded to your account, you must be logged in to clickchronicle.com. The easiest way to ensure that you are always logged in is to logout (!) and the login again and check the 'Remember me' box. This sets a 2 week cookie. You don't want to check this box if you are using someone else's machine or a public machine in a library or internet cafe since it will allow others to see you clicks.
 * Once you have switched click recording on you should visit a few sites and then go to clickchronicle to ensure that the clicks have got through.

= Reporting bugs and requesting features =
  If you have problems, suggestion or feedback please create a [http://divmod.org/trac/newticket?component=ClickChronicle new ticket]. Don't e shy! We love to hear from you.

= What's next? =
  We will be soon be releasing the click chronicle recording extension that is self contained and does not rely on Greasemonkey. We are looking forward to your help in testing this spiffy new extesion.",',0
103,9,1128798186.17992,amir,198.49.126.204,"= ClickChronicle Alpha =
  Welcome interpid alpha tester and Divmod fan!
  We hope you enjoy our latest offering.

== Disclaimer ==
  This is alpha software and it may break. We have tested the software, but during the alpha period we may have to restart the service erasing your account and data. We will do our best to avoid this but you have been warned.

= Overview =

From the ClickChronicle [http://clickchronicle.com/faq FAQ]

  1. What is ClickChronicle?
  ClickChronicle keeps a record of your web browsing and allows you to search all the web pages that you have visited.

  We are staring Alpha testing and would appreciate your help in shaking down any bugs and enhancing the product.

  The service is ''Firefox only'' and  has 2 parts: a click recorder and the clickchronicle.com service. The click recorder is currently a [http://greasemonkey.mozdev.org/ Greasemonkey] script, so you'll have to download and install the Greasemonkey extension; restart your browser and then install the [http://clickchronicle.com/static/js/clickchronicle.user.js ClickChronicle Greasemonkey script]. Instructions follow.

= Getting started =

 * Go to http://clickchronicle.com/signup
 * Enter your email address
 * Check your email for registration confirmation
 * Follow the link in the email to activate your account
 * Select a password
 * Make sure [http://greasemonkey.mozdev.org/ Greasemonkey] is installed and running (e.g. install it and restart Firefox)
 * View the script on [http://clickchronicle.com/static/js/clickchronicle.user.js this page]. Yes, it's yuck Javascript - sorry!
 * While viewing the javascript go to the Firefox 'Tools' menu and select 'Install this user script'
 * Click OK on the subsequent dialog to install the script
 * Open a new browser window or tab
 * Notice the small ClickChronicle on/off button at the bottom right hand corner of the browser window. This shows the current state of the click recorder and allows you toggle recording on and off.
 * When recording is off (clicks not recorded to clickchronicle.com) the button display 'CC Off' and is grey: http://divmod.org/users/amir/screenshots/ccoff.png
 * Clicking on the button starts recording clicks to clickchronicle.com and displays 'CC On' on a dark blue background: http://divmod.org/users/amir/screenshots/ccon.png
 * In order for clicks to be succesffully recorded to your account, you must be logged in to clickchronicle.com. The easiest way to ensure that you are always logged in is to logout (!) and the login again and check the 'Remember me' box. This sets a 2 week cookie. You don't want to check this box if you are using someone else's machine or a public machine in a library or internet cafe since it will allow others to see you clicks.
 * Once you have switched click recording on you should visit a few sites and then go to clickchronicle to ensure that the clicks have got through.

= Reporting bugs and requesting features =
  If you have problems, suggestion or feedback please create a [http://divmod.org/trac/newticket?component=ClickChronicle new ticket]. Don't e shy! We love to hear from you.

= What's next? =
  We will be soon be releasing the click chronicle recording extension that is self contained and does not rely on Greasemonkey. We are looking forward to your help in testing this spiffy new extension.",',0
104,10,1128799618.9979,glyph,198.49.126.204,"= ClickChronicle Alpha =
  Welcome intrepid alpha tester and Divmod fan!
  We hope you enjoy our latest offering.

== Disclaimer ==
  This is alpha software and it may break. We have tested the software, but during the alpha period we may have to restart the service erasing your account and data. We will do our best to avoid this but you have been warned.

= Overview =

From the ClickChronicle [http://clickchronicle.com/faq FAQ]

  1. What is ClickChronicle?
  ClickChronicle keeps a record of your web browsing and allows you to search all the web pages that you have visited.

  We are staring Alpha testing and would appreciate your help in shaking down any bugs and enhancing the product.

  The service is ''Firefox only'' and  has 2 parts: a click recorder and the clickchronicle.com service. The click recorder is currently a [http://greasemonkey.mozdev.org/ Greasemonkey] script, so you'll have to download and install the Greasemonkey extension; restart your browser and then install the [http://clickchronicle.com/static/js/clickchronicle.user.js ClickChronicle Greasemonkey script]. Instructions follow.

= Getting started =

 * Go to http://clickchronicle.com/signup
 * Enter your email address
 * Check your email for registration confirmation
 * Follow the link in the email to activate your account
 * Select a password
 * Make sure [http://greasemonkey.mozdev.org/ Greasemonkey] is installed and running (e.g. install it and restart Firefox)
 * View the script on [http://clickchronicle.com/static/js/clickchronicle.user.js this page]. Yes, it's yuck Javascript - sorry!
 * While viewing the javascript go to the Firefox 'Tools' menu and select 'Install this user script'
 * Click OK on the subsequent dialog to install the script
 * Open a new browser window or tab
 * Notice the small ClickChronicle on/off button at the bottom right hand corner of the browser window. This shows the current state of the click recorder and allows you toggle recording on and off.
 * When recording is off (clicks not recorded to clickchronicle.com) the button display 'CC Off' and is grey: http://divmod.org/users/amir/screenshots/ccoff.png
 * Clicking on the button starts recording clicks to clickchronicle.com and displays 'CC On' on a dark blue background: http://divmod.org/users/amir/screenshots/ccon.png
 * In order for clicks to be succesffully recorded to your account, you must be logged in to clickchronicle.com. The easiest way to ensure that you are always logged in is to logout (!) and the login again and check the 'Remember me' box. This sets a 2 week cookie. You don't want to check this box if you are using someone else's machine or a public machine in a library or internet cafe since it will allow others to see you clicks.
 * Once you have switched click recording on you should visit a few sites and then go to clickchronicle to ensure that the clicks have got through.

= Reporting bugs and requesting features =
  If you have problems, suggestion or feedback please create a [http://divmod.org/trac/newticket?component=ClickChronicle new ticket]. Don't e shy! We love to hear from you.

= What's next? =
  We will be soon be releasing the click chronicle recording extension that is self contained and does not rely on Greasemonkey. We are looking forward to your help in testing this spiffy new extension.","spelling correction",0
105,1,1128976384.42249,glyph,198.49.126.204,,,
106,1,1128976595.63301,glyph,198.49.126.204,'"One potato, two potato, three potato, four....'

The sort of programming that encourages you to write your own 'for' loops and build up / tear down data structures, rather than passing vectors or iterators down through an interface in such a way that would allow a smarter version of that interface to be more efficient.

In other words, this is the PotatoProgramming way to write 'sum':

{{{
def sum(numbers):
    total = 0
    for number in numbers:
        total += number
    return total
}}}

Contrast this with:

{{{
import operator
def sum(numbers):
    return reduce(operator.__add__, numbers)
}}}

This term was coined by R0mlLefkowitz.",',0
107,1,1128976688.53163,glyph,198.49.126.204,"ClickChronicle is an application and service for recording and indexing your clicks, i.e. URLs that you visit with your web browser.

It's available at http://clickchronicle.com/

See ClickChronicleAlpha for more information.",',0
108,1,1128976847.02339,glyph,198.49.126.204,"Combinator is a tool that Divmod Python programmers use to manage multiple branches of our software.  It integrates with Subversion.

It can be used to manage any number of branches with any number of projects.  It sets up your Python sys.path to point at the appropriate directories for the set of branches you are currently working on.

It is mainly of interest if you are checking code out of SVN: users of installed versions of Divmod software can probably ignore this project (for now).",',0
109,1,1128976978.83812,glyph,198.49.126.204,"Epsilon is a small utility package; it depends on tools to recent for Twisted (like datetime in python2.4) but performs generic enough functions that it can be used in projects that don't want to share Divmods' other projects' large footprint.

Currently it includes a powerful date/time formatting and import/export class, for exchanging date and time information between all Python's various ways to interpret objects as times or time deltas, and some tools for managing concurrent asynchronous processes within Twisted.",',0
110,1,1128977104.90087,glyph,198.49.126.204,"Mantissa is an application server.

It provides integration between the AxiomProject object database, and the TwistedFramework, as well as web user-interface utilities.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicleAlpha), and if you want to write something that hooks into our network, Mantissa is how you do it.",',0
111,1,1128977124.7187,glyph,198.49.126.204,"= Get Twisted =

http://www.twistedmatrix.com/",',0
112,1,1128977191.73198,glyph,198.49.126.204,"Nevow is a web templating framework and AJAX application server.

It is comprised of FormLess, StAn, and LivePage.

Divmod uses it in MantissaProject for the web user-interface layer.",',0
113,1,1128977250.03777,glyph,198.49.126.204,"A client/server asynchronous communication mechanism that is embedded in a web page.  It consists of a Twisted server component written in Python and a client component written in javascript.

A two-way real-time chat application is an example of something that might take advantage of LivePage's capabilities.",',0
114,1,1128977391.12207,glyph,198.49.126.204,"PyFlakes is a Lint-like tool for Python, like PyChecker.  It is focused on identifying common errors quickly without executing Python code.

Its primary advantage over PyChecker is that it is ''fast''.  You don't have to sit around for minutes waiting for the checker to run; it runs on most large projects in only a few seconds.",',0
116,1,1128977664.47244,glyph,198.49.126.204,"Vertex is Divmod's implementation of Q2Q.

Q2Q is a protocol opening authenticated connections, even through NAT, allowing a user to reliably demonstrate their identity (for distributed authentication), to receive real-time data directly from other users, and to provide a mechanism for a user to decide whether they want to expose their IP address to a third party *before* accepting a peer-to-peer connection.

It is byte-stream oriented and application-agnostic.  Any peer-to-peer application can use Q2Q to open connections and deliver messages.",',0
117,8,1128994332.70479,moe,198.49.126.204,"= Welcome To Divmod's Trac Installation =

== Ticket Queries ==
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&groupdesc=1&group=milestone&component=ClickChronicle&order=priority grouped by milestone])

== Projects ==

 * AxiomProject
 * ClickChronicleProject
 * CombinatorProject
 * EpsilonProject
 * MantissaProject
 * NevowProject
 * PyflakesProject
 * RadicalProject
 * VertexProject

== Potentially Interesting Ideas ==

 * ClickChronicleAlpha
 * MantissaIsTheDeploymentTarget

== Trac Starting Points ==

 * TracGuide --  Built-in Documentation
 * [http://projects.edgewall.com/trac/ The Trac project] -- Trac Open Source Project
 * [http://projects.edgewall.com/trac/wiki/TracFaq Trac FAQ] -- Frequently Asked Questions
 * TracSupport --  Trac Support

For a complete list of local wiki pages, see TitleIndex.

Trac is brought to you by [http://www.edgewall.com/ Edgewall Software],
providing professional Linux and software development services to clients
worldwide. Visit http://www.edgewall.com/ for more information.

",',0
118,9,1128994587.80563,moe,198.49.126.204,"= Welcome To Divmod's Trac Installation =

== Ticket Queries ==
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])

== Projects ==

 * AxiomProject
 * ClickChronicleProject
 * CombinatorProject
 * EpsilonProject
 * MantissaProject
 * NevowProject
 * PyflakesProject
 * RadicalProject
 * VertexProject

== Potentially Interesting Ideas ==

 * ClickChronicleAlpha
 * MantissaIsTheDeploymentTarget

== Trac Starting Points ==

 * TracGuide --  Built-in Documentation
 * [http://projects.edgewall.com/trac/ The Trac project] -- Trac Open Source Project
 * [http://projects.edgewall.com/trac/wiki/TracFaq Trac FAQ] -- Frequently Asked Questions
 * TracSupport --  Trac Support

For a complete list of local wiki pages, see TitleIndex.

Trac is brought to you by [http://www.edgewall.com/ Edgewall Software],
providing professional Linux and software development services to clients
worldwide. Visit http://www.edgewall.com/ for more information.

",',0
119,2,1128997970.74648,amir,198.49.126.204,"Epsilon is a small utility package; it depends on tools too recent for Twisted (like datetime in python2.4) but performs generic enough functions that it can be used in projects that don't want to share Divmod's other projects' large footprint.

Currently it includes a powerful date/time formatting and import/export class, for exchanging date and time information between all Python's various ways to interpret objects as times or time deltas, and some tools for managing concurrent asynchronous processes within Twisted.",',0
121,11,1129050902.62502,moe,198.49.126.204,"= ClickChronicle Alpha =
  Welcome intrepid alpha tester and Divmod fan!
  We hope you enjoy our latest offering.

== Disclaimer ==
  This is alpha software and it may break. We have tested the software, but during the alpha period we may have to restart the service erasing your account and data. We will do our best to avoid this but you have been warned.

= Overview =

From the ClickChronicle [http://clickchronicle.com/faq FAQ]

  1. What is ClickChronicle?
  ClickChronicle keeps a record of your web browsing and allows you to search all the web pages that you have visited.

  We are staring Alpha testing and would appreciate your help in shaking down any bugs and enhancing the product.

  The service is ''Firefox only'' and  has 2 parts: a click recorder and the clickchronicle.com service. The click recorder is currently a [http://greasemonkey.mozdev.org/ Greasemonkey] script, so you'll have to download and install the Greasemonkey extension; restart your browser and then install the [http://clickchronicle.com/static/js/clickchronicle.user.js ClickChronicle Greasemonkey script]. Instructions follow.

= Getting started =

 * Go to http://clickchronicle.com/signup
 * Enter your email address
 * Check your email for registration confirmation
 * Follow the link in the email to activate your account
 * Select a password
 * Make sure [http://greasemonkey.mozdev.org/ Greasemonkey] is installed and running (e.g. install it and restart Firefox)
 * When logged into [http://www.clickchronicle.com/ ClickChronicle], right-click the 'Get greasemonkey script' link, and select 'Install User Script...'
 * Open a new browser window or tab
 * Notice the small ClickChronicle on/off button at the bottom right hand corner of the browser window. This shows the current state of the click recorder and allows you toggle recording on and off.
 * When recording is off (clicks not recorded to clickchronicle.com) the button display 'CC Off' and is grey: http://divmod.org/users/amir/screenshots/ccoff.png
 * Clicking on the button starts recording clicks to clickchronicle.com and displays 'CC On' on a dark blue background: http://divmod.org/users/amir/screenshots/ccon.png
 * In order for clicks to be succesffully recorded to your account, you must be logged in to clickchronicle.com. The easiest way to ensure that you are always logged in is to logout (!) and the login again and check the 'Remember me' box. This sets a 2 week cookie. You don't want to check this box if you are using someone else's machine or a public machine in a library or internet cafe since it will allow others to see you clicks.
 * Once you have switched click recording on you should visit a few sites and then go to clickchronicle to ensure that the clicks have got through.

= Reporting bugs and requesting features =
  If you have problems, suggestion or feedback please create a [http://divmod.org/trac/newticket?component=ClickChronicle new ticket]. Don't e shy! We love to hear from you.

= What's next? =
  We will be soon be releasing the click chronicle recording extension that is self contained and does not rely on Greasemonkey. We are looking forward to your help in testing this spiffy new extension.",',0
122,12,1129051016.5217,moe,198.49.126.204,"= ClickChronicle Alpha =
  Welcome intrepid alpha tester and Divmod fan!
  We hope you enjoy our latest offering.

== Disclaimer ==
  This is alpha software and it may break. We have tested the software, but during the alpha period we may have to restart the service erasing your account and data. We will do our best to avoid this but you have been warned.

= Overview =

From the ClickChronicle [http://clickchronicle.com/faq FAQ]

  1. What is ClickChronicle?
  ClickChronicle keeps a record of your web browsing and allows you to search all the web pages that you have visited.

  We are staring Alpha testing and would appreciate your help in shaking down any bugs and enhancing the product.

  The service is ''Firefox only'' and  has 2 parts: a click recorder and the clickchronicle.com service. The click recorder is currently a [http://greasemonkey.mozdev.org/ Greasemonkey] script, so you'll have to download and install the Greasemonkey extension; restart your browser and then install the [http://clickchronicle.com/static/js/clickchronicle.user.js ClickChronicle Greasemonkey script]. Instructions follow.

= Getting started =

 * Go to http://clickchronicle.com/signup
 * Enter your email address
 * Check your email for registration confirmation
 * Follow the link in the email to activate your account
 * Select a password
 * Make sure [http://greasemonkey.mozdev.org/ Greasemonkey] is installed and running (e.g. install it and restart Firefox)
 * When logged into [http://www.clickchronicle.com/ ClickChronicle], right-click the 'Get greasemonkey script' link ([http://www.clickchronicle.com/static/js/clickchronicle.user.js or right-click here]), and select 'Install User Script...' from the context menu
 * Open a new browser window or tab
 * Notice the small ClickChronicle on/off button at the bottom right hand corner of the browser window. This shows the current state of the click recorder and allows you toggle recording on and off.
 * When recording is off (clicks not recorded to clickchronicle.com) the button display 'CC Off' and is grey: http://divmod.org/users/amir/screenshots/ccoff.png
 * Clicking on the button starts recording clicks to clickchronicle.com and displays 'CC On' on a dark blue background: http://divmod.org/users/amir/screenshots/ccon.png
 * In order for clicks to be succesffully recorded to your account, you must be logged in to clickchronicle.com. The easiest way to ensure that you are always logged in is to logout (!) and the login again and check the 'Remember me' box. This sets a 2 week cookie. You don't want to check this box if you are using someone else's machine or a public machine in a library or internet cafe since it will allow others to see you clicks.
 * Once you have switched click recording on you should visit a few sites and then go to clickchronicle to ensure that the clicks have got through.

= Reporting bugs and requesting features =
  If you have problems, suggestion or feedback please create a [http://divmod.org/trac/newticket?component=ClickChronicle new ticket]. Don't e shy! We love to hear from you.

= What's next? =
  We will be soon be releasing the click chronicle recording extension that is self contained and does not rely on Greasemonkey. We are looking forward to your help in testing this spiffy new extension.",',0
123,1,1129096243.26125,pjd@satori.za.net,198.49.126.204,"{{{
#!python
@partial(partial,partial)
def merger( merge, seq, *args, **kw ):
    '''Merge seq using the given merger.

    The merger is handed an iterator of values to merge, and is expected to
    yield a sequence of merged values.

    The merging iterator yields two values at a time: the previously merged
    result (initially None), and an item from seq.
    '''
    merged = None
    merging = ( (merged,item) for item in seq )
    for merged in merge( merging, *args, **kw ):
        pass
    return merged
}}}

This decorator is useful as a PotatoProgramming alternative to {{{reduce}}}.",',0
124,2,1129105590.82463,pjd@satori.za.net,198.49.126.204,'"One potato, two potato, three potato, four....'

The sort of programming that encourages you to write your own 'for' loops and build up / tear down data structures, rather than passing vectors or iterators down through an interface in such a way that would allow a smarter version of that interface to be more efficient.

In other words, this is the PotatoProgramming way to write 'sum':

{{{
#!python
def sum(numbers):
    total = 0
    for number in numbers:
        total += number
    return total
}}}

Contrast this with:

{{{
#!python
import operator
def sum(numbers):
    return reduce(operator.__add__, numbers)

}}}

This term was coined by R0mlLefkowitz.


----

The above comparison could be made more fair by allowing the first example to encapsulate its accumulator (like {{{reduce}}} already does) using MergerDecorator:

{{{
#!python
@merger
def sum(numbers, start=0):
    yield start
    for total, number in numbers:
        yield total + number
}}}

The nice thing about the PotatoProgramming approach is that ''you'' control the 'potato' (iterator/data structure), instead of the other way around.  This makes it much easier and more natural to express problems that involve complex state or work across multiple data structures.",',0
125,3,1129146718.60773,anonymous,198.49.126.204,'"One potato, two potato, three potato, four....'

The sort of programming that encourages you to write your own 'for' loops and build up / tear down data structures, rather than passing vectors or iterators down through an interface in such a way that would allow a smarter version of that interface to be more efficient.

In other words, this is the PotatoProgramming way to write 'sum':

{{{
#!python
def sum(numbers):
    total = 0
    for number in numbers:
        total += number
    return total
}}}

Contrast this with:

{{{
#!python
import operator
def sum(numbers):
    return reduce(operator.__add__, numbers)

}}}

This term was coined by R0mlLefkowitz.


----

The above comparison could be made more fair by allowing the first example to encapsulate its accumulator (like {{{reduce}}} already does) using MergerDecorator:

{{{
#!python
@merger
def sum(numbers, start=0):
    yield start
    for total, number in numbers:
        yield total + number
}}}

The nice thing about the PotatoProgramming approach is that ''you'' control the 'potato' (iterator/data structure), instead of the other way around.  This makes it much easier and more natural to express problems that involve complex state or work across multiple data structures.

''This is still really slow, and is not the sort of thing that application programmers should concern themselves with.  The term is entirely pejorative.''",',0
126,2,1129146779.88528,anonymous,198.49.126.204,"{{{
#!python
@partial(partial,partial)
def merger( merge, seq, *args, **kw ):
    '''Merge seq using the given merger.

    The merger is handed an iterator of values to merge, and is expected to
    yield a sequence of merged values.

    The merging iterator yields two values at a time: the previously merged
    result (initially None), and an item from seq.
    '''
    merged = None
    merging = ( (merged,item) for item in seq )
    for merged in merge( merging, *args, **kw ):
        pass
    return merged
}}}

This decorator is useful as a PotatoProgramming alternative to {{{reduce}}}.

''In other words - a bad idea.  Please don't use it - especially don't think that Divmod code would use such a thing!  -glyph ''",',0
127,3,1129170421.18378,pjd@satori.za.net,198.49.126.204,"{{{
#!python
@partial(partial,partial)
def merger( merge, seq, *args, **kw ):
    '''Feed the given generator a stream of pairs to merge, and return the
    final result.
    '''
    seq = iter(seq)
    merged = seq.next()
    for merged in merge( ((merged,item) for item in seq), *args, **kw):
        pass
    return merged
}}}

This decorator helps you write sequence reductions in the PotatoProgramming / ExternalIteration style.

''In other words - a bad idea.  Please don't use it - especially don't think that Divmod code would use such a thing!  -glyph ''",',0
128,4,1129170807.29908,pjd@satori.za.net,198.49.126.204,'"One potato, two potato, three potato, four....'

The sort of programming that encourages you to write your own 'for' loops and build up / tear down data structures, rather than passing vectors or iterators down through an interface in such a way that would allow a smarter version of that interface to be more efficient.

In other words, this is the PotatoProgramming way to write 'sum':

{{{
#!python
def sum(numbers):
    total = 0
    for number in numbers:
        total += number
    return total
}}}

Contrast this with:

{{{
#!python
import operator
def sum(numbers):
    return reduce(operator.__add__, numbers)

}}}

This term was coined by R0mlLefkowitz.


----

The above comparison could be made more fair by allowing the first example to encapsulate its accumulator (like {{{reduce}}} already does) using MergerDecorator:

{{{
#!python
@merger
def sum(numbers):
    for total, number in numbers:
        yield total + number
}}}

The nice thing about the PotatoProgramming approach is that ''you'' control the 'potato' (iterator/data structure), instead of the other way around.  This makes it much easier and more natural to express problems that involve complex state or work across multiple data structures.

''This is still really slow, and is not the sort of thing that application programmers should concern themselves with.  The term is entirely pejorative.''","remove the ill-advised start argument",0
129,5,1129238552.45576,pjd@satori.za.net,198.49.126.204,,,
130,6,1129239923.88742,pjd@satori.za.net,198.49.126.204,,,
131,7,1129270545.7372,exarkun,198.49.126.204,'"One potato, two potato, three potato, four....'

The sort of programming that encourages you to write your own 'for' loops and build up / tear down data structures, rather than passing vectors or iterators down through an interface in such a way that would allow a smarter version of that interface to be more efficient.

In other words, this is the PotatoProgramming way to write 'sum':

{{{
#!python
def sum(numbers):

    total = 0
    for number in numbers:
        total += number
    return total
}}}

Contrast this with:

{{{
#!python
import operator
def sum(numbers):
    return reduce(operator.__add__, numbers)

}}}

This term was coined by R0mlLefkowitz.


----

The above comparison could be made more fair by allowing the first example to encapsulate its accumulator (like {{{reduce}}} already does) using MergerDecorator:

{{{
#!python
@merger
def sum(numbers):
    for total, number in numbers:
        yield total + number
}}}

The nice thing about the PotatoProgramming approach is that ''you'' control the 'potato' (iterator/data structure), instead of the other way around.  This makes it much easier and more natural to express problems that involve complex state or work across multiple data structures.

''This is still really slow, and is not the sort of thing that application programmers should concern themselves with.  The term is entirely pejorative.''


In this case, it's slower only because the time spent summing is dwarfed by the outer accumulation loop, which is Python in {{{@merger}}}, but C in {{{reduce}}}.

However, as problems grow larger and more complex, PotatoProgramming solutions generally tend to be ''more'' efficient than 'no potato' code.  Consider the following (finding all usernames in {{{/etc/password}}} having UIDs below 1000):

{{{
#!python
def system_users(lines):
    for line in lines:
        if len(line[:line.find('#')].strip()):
            fields = line.split(':')
            if int(fields[2]) < 1000:
                yield fields[0]
}}}
''{{{timeit.py}}} result:  100000 loops, best of 3: 5.25 usec per loop''

{{{
#!python
def system_users(lines):
    return imap(lambda fields: fields[0],
            ifilter(lambda fields: int(fields[2]) < 1000,
                imap(lambda line: line.split(':'),
                    ifilter(lambda line: len(line[:line.find('#')].strip()),
                        lines))))
}}}
''{{{timeit.py}}} result:  100000 loops, best of 3: 10.9 usec per loop''

Even though the itertools solution is hand-optimized C, the PotatoProgramming solution takes just under half the time, because it preserves the state of the program in one place, instead of fracturing it across many small objects that have to work in isolation.

Not apparent in the above examples is how, for the same reason, PotatoProgramming usually makes it much easier to implement more complex operations, where some parts depend on the state of others.  And ''this'' is exactly what application programmers should be concerning themselves with.

''All you've done above is rewrite the potato program using some constructs sometimes loosely associated with non-potato code.  Using imap() and ifilter() with a PotatoLambda means this is just as much PotatoProgramming as the original version.  Worse, it does things that are *particularly* inefficient in Python, so it's even slower than the naive PotatoProgramming solution.  Consider an implementation of system_users which uses Numeric Python and you may get a better idea of the advantages of non-potato programming.

-exarkun''
","Rebut increasingly confusing pro-potato comments ",0
132,10,1129303261.00331,exarkun,198.49.126.204,"= Welcome To Divmod's Trac Installation =

== Ticket Queries ==
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])

== Projects ==

 * AnvilProject
 * AxiomProject
 * ClickChronicleProject
 * CombinatorProject
 * EpsilonProject
 * MantissaProject
 * NevowProject
 * PyflakesProject
 * RadicalProject
 * VertexProject

== Potentially Interesting Ideas ==

 * ClickChronicleAlpha
 * MantissaIsTheDeploymentTarget

== Trac Starting Points ==

 * TracGuide --  Built-in Documentation
 * [http://projects.edgewall.com/trac/ The Trac project] -- Trac Open Source Project
 * [http://projects.edgewall.com/trac/wiki/TracFaq Trac FAQ] -- Frequently Asked Questions
 * TracSupport --  Trac Support

For a complete list of local wiki pages, see TitleIndex.

Trac is brought to you by [http://www.edgewall.com/ Edgewall Software],
providing professional Linux and software development services to clients
worldwide. Visit http://www.edgewall.com/ for more information.

",',0
133,1,1129305161.8518,amir,198.49.126.204,"  Anvil is Divmod's planned issues tracker.
  We have tried Roundup, RT and now Trac and while each of them is great in some ways but they each have some shortcommings.
  Anvil will be tailored for Divmod's development process and will integrate with QuotientProject so team members have a unified view of their tasks and messages.
  Anvil will be built on MantissaProject.",',0
134,2,1129305337.41392,amir,198.49.126.204,"Anvil is Divmod's planned issues tracker.


We have tried Roundup, RT and now Trac and while each of them is great in some ways but they each have some shortcommings. Anvil will be tailored for Divmod's development process and will integrate with QuotientProject so team members have a unified view of their tasks and messages.


Anvil will be built on MantissaProject.",',0
135,3,1129305595.99586,amir,198.49.126.204,"Anvil is Divmod's planned issues tracker.


We have tried Roundup, RT and now Trac and while each of them is great in some ways but they each have some shortcomings. Anvil will be tailored for Divmod's development process and will integrate with QuotientProject so team members have a unified view of their tasks and messages.


Anvil will be built on MantissaProject.",',0
136,4,1129305678.6906,amir,198.49.126.204,"Anvil is Divmod's planned issues tracker.

We have tried Roundup, RT and now Trac and while each of them is great in some ways but they each have some shortcomings. Anvil will be tailored for Divmod's development process and will integrate with QuotientProject so team members have a unified view of their tasks and messages.

Anvil will be built on MantissaProject.",',0
137,5,1129305860.59249,exarkun,198.49.126.204,"Anvil is Divmod's planned issues tracker.

We have tried Roundup, RT and now Trac and while each of them is great in some ways but they each have some shortcomings. Anvil will be tailored for Divmod's development process and will integrate with QuotientProject so team members have a unified view of their tasks and messages.

Anvil will be built on MantissaProject.

Anvil is a collaborative issue tracker.  Anvil places high value on person-oriented interactions.  It understands ownership, relationships, and the concept that a particular task may have different priorities to different people.  Anvil understands that time passes.  It provides deadlines that loom and alter task priority.  It can summarize and report on task completion over time.  It expects estimates from owners of tasks and can provide feedback for the estimation process based on past performance for individuals.  Anvil understands perspectives.  Tasks are shared among team members, with different views given onto them based on each member's role with respect to that task.  Similarly, plans are shared and merged, and overall or individual schedules can be created from tasks in Anvil.
",',0
138,11,1129306066.08488,amir,198.49.126.204,"= Welcome To Divmod's Trac Installation =

== Ticket Queries ==

 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]

== Projects ==

 * AnvilProject
 * AxiomProject
 * ClickChronicleProject
 * CombinatorProject
 * EpsilonProject
 * MantissaProject
 * NevowProject
 * PyflakesProject
 * RadicalProject
 * VertexProject

== Potentially Interesting Ideas ==

 * ClickChronicleAlpha
 * MantissaIsTheDeploymentTarget

== Trac Starting Points ==

 * TracGuide --  Built-in Documentation
 * [http://projects.edgewall.com/trac/ The Trac project] -- Trac Open Source Project
 * [http://projects.edgewall.com/trac/wiki/TracFaq Trac FAQ] -- Frequently Asked Questions
 * TracSupport --  Trac Support

For a complete list of local wiki pages, see TitleIndex.

Trac is brought to you by [http://www.edgewall.com/ Edgewall Software],
providing professional Linux and software development services to clients
worldwide. Visit http://www.edgewall.com/ for more information.

","add nevow tickets",0
139,12,1129559248.97451,amir,198.49.126.204,"= Welcome To Divmod's Trac Installation =

== Ticket Queries ==

 * [http://divmod.org/trac/report/8 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]

== Projects ==

 * AnvilProject
 * AxiomProject
 * ClickChronicleProject
 * CombinatorProject
 * EpsilonProject
 * MantissaProject
 * NevowProject
 * PyflakesProject
 * RadicalProject
 * VertexProject

== Potentially Interesting Ideas ==

 * ClickChronicleAlpha
 * MantissaIsTheDeploymentTarget

== Trac Starting Points ==

 * TracGuide --  Built-in Documentation
 * [http://projects.edgewall.com/trac/ The Trac project] -- Trac Open Source Project
 * [http://projects.edgewall.com/trac/wiki/TracFaq Trac FAQ] -- Frequently Asked Questions
 * TracSupport --  Trac Support

For a complete list of local wiki pages, see TitleIndex.

Trac is brought to you by [http://www.edgewall.com/ Edgewall Software],
providing professional Linux and software development services to clients
worldwide. Visit http://www.edgewall.com/ for more information.

",',0
140,1,1129560607.62368,amir,198.49.126.204,"Divmod is PeopleCentric.
Mantissa's Person object allows functionality to be added to people over time.
A person may have many facets such as their home address and their amazon wishlist.
A person may have zero, one or more of any field.",',0
141,13,1129561831.03507,amir,198.49.126.204,"= Welcome To Divmod's Trac Installation =

== Ticket Queries ==

 * [http://divmod.org/trac/report/8 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]

== Projects ==

 * FonanzaService
 * AnvilProject
 * AxiomProject
 * ClickChronicleProject
 * CombinatorProject
 * EpsilonProject
 * MantissaProject
 * NevowProject
 * PyflakesProject
 * RadicalProject
 * VertexProject

== Potentially Interesting Ideas ==

 * ClickChronicleAlpha
 * MantissaIsTheDeploymentTarget

== Trac Starting Points ==

 * TracGuide --  Built-in Documentation
 * [http://projects.edgewall.com/trac/ The Trac project] -- Trac Open Source Project
 * [http://projects.edgewall.com/trac/wiki/TracFaq Trac FAQ] -- Frequently Asked Questions
 * TracSupport --  Trac Support

For a complete list of local wiki pages, see TitleIndex.

Trac is brought to you by [http://www.edgewall.com/ Edgewall Software],
providing professional Linux and software development services to clients
worldwide. Visit http://www.edgewall.com/ for more information.

",',0
142,1,1129562228.78415,amir,198.49.126.204,"Fonanza is a community for the provision and consumption of services.

The focus is services that can be delivered online over chat or voice.

Typical services include system administration, technical support, language instruction, talk therapy and adult chat/phone.

Service providers and consumers have a reputation.

A person may have several service provider personalities each with its own reputation.

Services are exchanged for a fee. The fee can be very low when a provider is building their reputation.

Services may have an introductory offer e.g. 5 minutes free for language instruction.
",',0
143,14,1129568887.68913,amir,198.49.126.204,"= Welcome To Divmod's Trac Installation =

== Ticket Queries ==

 * [http://divmod.org/trac/report/8 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]

== Projects ==

 * AnvilProject
 * AxiomProject
 * ClickChronicleProject
 * CombinatorProject
 * EpsilonProject
 * MantissaProject
 * NevowProject
 * PyflakesProject
 * RadicalProject
 * VertexProject

== Potentially Interesting Ideas ==

 * ClickChronicleAlpha
 * MantissaIsTheDeploymentTarget

== Trac Starting Points ==

 * TracGuide --  Built-in Documentation
 * [http://projects.edgewall.com/trac/ The Trac project] -- Trac Open Source Project
 * [http://projects.edgewall.com/trac/wiki/TracFaq Trac FAQ] -- Frequently Asked Questions
 * TracSupport --  Trac Support

For a complete list of local wiki pages, see TitleIndex.

Trac is brought to you by [http://www.edgewall.com/ Edgewall Software],
providing professional Linux and software development services to clients
worldwide. Visit http://www.edgewall.com/ for more information.

",',0
144,1,1129591258.26068,glyph,198.49.126.204,,,
145,8,1129591276.7816,glyph,198.49.126.204,'"One potato, two potato, three potato, four....'

The sort of programming that encourages you to write your own 'for' loops and build up / tear down data structures, rather than passing vectors or iterators down through an interface in such a way that would allow a smarter version of that interface to be more efficient.

In other words, this is the PotatoProgramming way to add numbers:

{{{
#!python
def sum(numbers):

    total = 0
    for number in numbers:
        total += number
    return total
}}}

Contrast this with:

{{{
#!python
import operator
def sum(numbers):
    return reduce(operator.__add__, numbers)

}}}

This term was coined by R0mlLefkowitz.

(Discussion on PotatoProgrammingDiscussion)","Moving discussion to 'PotatoProgrammingDiscussion'",0
146,9,1129591573.59637,glyph,198.49.126.204,'"One potato, two potato, three potato, four....'

The sort of programming that encourages you to write your own 'for' loops and build up / tear down data structures, rather than passing vectors or iterators down through an interface in such a way that would allow a smarter version of that interface to be more efficient.

In other words, this is the PotatoProgramming way to add a file containing lines of numbers:

{{{
#!python
f = file('test.numbers')
accum = 0.
for line in f.readlines():
    accum += float(line)
print accum
}}}

Contrast this with:

{{{
#!python
f = file('test.numbers')
print sum(map(float, f.readlines()))
}}}

This term was coined by R0mlLefkowitz.

(Discussion on PotatoProgrammingDiscussion)
","Change the type of the input to make the distinction clearer.",0
147,2,1129594257.02751,glyph,198.49.126.204,"The comparison in PotatoProgramming could be made more fair by allowing the first example to encapsulate its accumulator (like {{{reduce}}} already does) using MergerDecorator:

{{{
#!python
@merger
def sum(numbers):
    for total, number in numbers:
        yield total + number
}}}

The nice thing about the PotatoProgramming approach is that ''you'' control the 'potato' (iterator/data structure), instead of the other way around.  This makes it much easier and more natural to express problems that involve complex state or work across multiple data structures.

''This is still really slow, and is not the sort of thing that application programmers should concern themselves with.  The term is entirely pejorative.''


In this case, it's slower only because the time spent summing is dwarfed by the outer accumulation loop, which is Python in {{{@merger}}}, but C in {{{reduce}}}.

However, as problems grow larger and more complex, PotatoProgramming solutions generally tend to be ''more'' efficient than 'no potato' code.  Consider the following (finding all usernames in {{{/etc/password}}} having UIDs below 1000):

{{{
#!python
def system_users(lines):
    for line in lines:
        if len(line[:line.find('#')].strip()):
            fields = line.split(':')
            if int(fields[2]) < 1000:
                yield fields[0]
}}}
''{{{timeit.py}}} result:  100000 loops, best of 3: 5.25 usec per loop''

{{{
#!python
def system_users(lines):
    return imap(lambda fields: fields[0],
            ifilter(lambda fields: int(fields[2]) < 1000,
                imap(lambda line: line.split(':'),
                    ifilter(lambda line: len(line[:line.find('#')].strip()),
                        lines))))
}}}
''{{{timeit.py}}} result:  100000 loops, best of 3: 10.9 usec per loop''

Even though the itertools solution is hand-optimized C, the PotatoProgramming solution takes just under half the time, because it preserves the state of the program in one place, instead of fracturing it across many small objects that have to work in isolation.

Not apparent in the above examples is how, for the same reason, PotatoProgramming usually makes it much easier to implement more complex operations, where some parts depend on the state of others.  And ''this'' is exactly what application programmers should be concerning themselves with.

''All you've done above is rewrite the potato program using some constructs sometimes loosely associated with non-potato code.  Using imap() and ifilter() with a PotatoLambda means this is just as much PotatoProgramming as the original version.  Worse, it does things that are *particularly* inefficient in Python, so it's even slower than the naive PotatoProgramming solution.  Consider an implementation of system_users which uses Numeric Python and you may get a better idea of the advantages of non-potato programming.

-exarkun''

----

Here is a more realistic potato/non-potato version:

Potato (cribbed from yours, but reading /etc/passwd instead of a set of lines):

{{{
#!python
def system_users():
    lines = file('/etc/passwd').readlines()
    for line in lines:
        if len(line[:line.find('#')].strip()):
            fields = line.split(':')
            if int(fields[2]) < 1000:
                yield fields[0]
}}}

''{{{timeit.py}}} result: 100000 loops, best of 3: 187 usec per loop''

Non-potato:

{{{
#!python
import pwd
import operator
def system_users():
    users = pwd.getpwall()
    users.sort(key=operator.itemgetter(2))
    for user in users:
        if user[2] < 1000:
            yield user[0]
        else:
            return
}}}

''100000 loops, best of 3: 137 usec per loop''

(I assume your comparisons were not with an actual user database, or you have a CRAZY fast computer...)

Now, you might say, 'That's not fair!  You're using a library for this while I'm implementing it from scratch!'

However, if 'pwd' did not exist, it would be necessary to invent it.  It might not be any faster than your version if the pwd library were in python, but ''that's the whole point'' -- when you optimize your code, you don't want to do it across boundaries which require the caller to make loops; you want the interface to be expressive so that the loops can be optimized within your interface.  For an ''extreme'' version of PP, implement readline yourself with a {{{for c in string: if c == '\n'...}}}

Ideally, you wouldn't even have to write the 'for user in users' loop yourself.  For example, here's an Axiom snippet to do a similar thing implemented potato-style:

{{{
#!python
def axiom_users(s):
    for u in s.query(User):
        if u.uid < 1000:
            yield u.name
}}}

And here is the non-potato version:

{{{
#!python
def axiom_users(s):
    for u in s.query(User, User.uid < 1000):
        yield u.name
}}}

In other words: force as much work down into the optimizeable guts of the library as possible, then use the interface that way, rather than doing additional iteration and testing yourself.

-glyph
----
","Explain in more detail.  Provide example that runs 30% faster.  Add axiom stuff.",0
148,3,1129595052.56783,glyph,198.49.126.204,"The comparison in PotatoProgramming could be made more fair by allowing the first example to encapsulate its accumulator (like {{{reduce}}} already does) using MergerDecorator:

{{{
#!python
@merger
def sum(numbers):
    for total, number in numbers:
        yield total + number
}}}

The nice thing about the PotatoProgramming approach is that ''you'' control the 'potato' (iterator/data structure), instead of the other way around.  This makes it much easier and more natural to express problems that involve complex state or work across multiple data structures.

''This is still really slow, and is not the sort of thing that application programmers should concern themselves with.  The term is entirely pejorative.''


In this case, it's slower only because the time spent summing is dwarfed by the outer accumulation loop, which is Python in {{{@merger}}}, but C in {{{reduce}}}.

However, as problems grow larger and more complex, PotatoProgramming solutions generally tend to be ''more'' efficient than 'no potato' code.  Consider the following (finding all usernames in {{{/etc/password}}} having UIDs below 1000):

{{{
#!python
def system_users(lines):
    for line in lines:
        if len(line[:line.find('#')].strip()):
            fields = line.split(':')
            if int(fields[2]) < 1000:
                yield fields[0]
}}}
''{{{timeit.py}}} result:  100000 loops, best of 3: 5.25 usec per loop''

{{{
#!python
def system_users(lines):
    return imap(lambda fields: fields[0],
            ifilter(lambda fields: int(fields[2]) < 1000,
                imap(lambda line: line.split(':'),
                    ifilter(lambda line: len(line[:line.find('#')].strip()),
                        lines))))
}}}
''{{{timeit.py}}} result:  100000 loops, best of 3: 10.9 usec per loop''

Even though the itertools solution is hand-optimized C, the PotatoProgramming solution takes just under half the time, because it preserves the state of the program in one place, instead of fracturing it across many small objects that have to work in isolation.

Not apparent in the above examples is how, for the same reason, PotatoProgramming usually makes it much easier to implement more complex operations, where some parts depend on the state of others.  And ''this'' is exactly what application programmers should be concerning themselves with.

''All you've done above is rewrite the potato program using some constructs sometimes loosely associated with non-potato code.  Using imap() and ifilter() with a PotatoLambda means this is just as much PotatoProgramming as the original version.  Worse, it does things that are *particularly* inefficient in Python, so it's even slower than the naive PotatoProgramming solution.  Consider an implementation of system_users which uses Numeric Python and you may get a better idea of the advantages of non-potato programming.

-exarkun''

----

Here is a more realistic potato/non-potato version:

Potato (cribbed from yours, but reading /etc/passwd instead of a set of lines):

{{{
#!python
def system_users():
    lines = file('/etc/passwd').readlines()
    for line in lines:
        if len(line[:line.find('#')].strip()):
            fields = line.split(':')
            if int(fields[2]) < 1000:
                yield fields[0]
}}}

''{{{timeit.py}}} result: 100000 loops, best of 3: 187 usec per loop''

Non-potato:

{{{
#!python
import pwd
import operator
def system_users():
    users = pwd.getpwall()
    users.sort(key=operator.itemgetter(2))
    for user in users:
        if user[2] < 1000:
            yield user[0]
        else:
            return
}}}

''100000 loops, best of 3: 137 usec per loop''

(I assume your comparisons were not with an actual user database, or you have a CRAZY fast computer...)

Now, you might say, 'That's not fair!  You're using a library for this while I'm implementing it from scratch!'

''As an afterthought, I tested that idea, and wrote this:''

{{{
#!python
import operator

def my_getpwall():
    lines = file('/etc/passwd').readlines()
    for line in lines:
        uncommline = line[:line.find('#')].strip()
        fields = uncommline.split(':')
        yield fields

def smart_users():
    users = list(my_getpwall())
    users.sort(key=operator.itemgetter(2))
    for user in users:
        if user[2] < 1000:
            yield user[0]
        else:
            return
}}}
''10000 loops, best of 3: 168 usec per loop -- It's faster even if you ''don't'' write pwd in C...''

However, if 'pwd' did not exist, it would be necessary to invent it.  It might not be any faster than your version if the pwd library were in python, but ''that's the whole point'' -- when you optimize your code, you don't want to do it across boundaries which require the caller to make loops; you want the interface to be expressive so that the loops can be optimized within your interface.  For an ''extreme'' version of PP, implement readline yourself with a {{{for c in string: if c == '\n'...}}}

Ideally, you wouldn't even have to write the 'for user in users' loop yourself.  For example, here's an Axiom snippet to do a similar thing implemented potato-style:

{{{
#!python
def axiom_users(s):
    for u in s.query(User):
        if u.uid < 1000:
            yield u.name
}}}

And here is the non-potato version:

{{{
#!python
def axiom_users(s):
    for u in s.query(User, User.uid < 1000):
        yield u.name
}}}

In other words: force as much work down into the optimizeable guts of the library as possible, then use the interface that way, rather than doing additional iteration and testing yourself.

-glyph
----
","huh, guess it's *still* faster",0
149,4,1129602228.76709,glyph,198.49.126.204,"The comparison in PotatoProgramming could be made more fair by allowing the first example to encapsulate its accumulator (like {{{reduce}}} already does) using MergerDecorator:

{{{
#!python
@merger
def sum(numbers):
    for total, number in numbers:
        yield total + number
}}}

The nice thing about the PotatoProgramming approach is that ''you'' control the 'potato' (iterator/data structure), instead of the other way around.  This makes it much easier and more natural to express problems that involve complex state or work across multiple data structures.

''This is still really slow, and is not the sort of thing that application programmers should concern themselves with.  The term is entirely pejorative.''


In this case, it's slower only because the time spent summing is dwarfed by the outer accumulation loop, which is Python in {{{@merger}}}, but C in {{{reduce}}}.

However, as problems grow larger and more complex, PotatoProgramming solutions generally tend to be ''more'' efficient than 'no potato' code.  Consider the following (finding all usernames in {{{/etc/password}}} having UIDs below 1000):

{{{
#!python
def system_users(lines):
    for line in lines:
        if len(line[:line.find('#')].strip()):
            fields = line.split(':')
            if int(fields[2]) < 1000:
                yield fields[0]
}}}
''{{{timeit.py}}} result:  100000 loops, best of 3: 5.25 usec per loop''

{{{
#!python
def system_users(lines):
    return imap(lambda fields: fields[0],
            ifilter(lambda fields: int(fields[2]) < 1000,
                imap(lambda line: line.split(':'),
                    ifilter(lambda line: len(line[:line.find('#')].strip()),
                        lines))))
}}}
''{{{timeit.py}}} result:  100000 loops, best of 3: 10.9 usec per loop''

Even though the itertools solution is hand-optimized C, the PotatoProgramming solution takes just under half the time, because it preserves the state of the program in one place, instead of fracturing it across many small objects that have to work in isolation.

Not apparent in the above examples is how, for the same reason, PotatoProgramming usually makes it much easier to implement more complex operations, where some parts depend on the state of others.  And ''this'' is exactly what application programmers should be concerning themselves with.

''All you've done above is rewrite the potato program using some constructs sometimes loosely associated with non-potato code.  Using imap() and ifilter() with a PotatoLambda means this is just as much PotatoProgramming as the original version.  Worse, it does things that are *particularly* inefficient in Python, so it's even slower than the naive PotatoProgramming solution.  Consider an implementation of system_users which uses Numeric Python and you may get a better idea of the advantages of non-potato programming.

-exarkun''

----

Here is a more realistic potato/non-potato version:

Potato (cribbed from yours, but reading /etc/passwd instead of a set of lines):

{{{
#!python
def system_users():
    lines = file('/etc/passwd').readlines()
    for line in lines:
        if len(line[:line.find('#')].strip()):
            fields = line.split(':')
            if int(fields[2]) < 1000:
                yield fields[0]
}}}

''{{{timeit.py}}} result: 100000 loops, best of 3: 187 usec per loop''

Non-potato:

{{{
#!python
import pwd
import operator
def system_users():
    users = pwd.getpwall()
    users.sort(key=operator.itemgetter(2))
    for user in users:
        if user[2] < 1000:
            yield user[0]
        else:
            return
}}}

''100000 loops, best of 3: 137 usec per loop''

(I assume your comparisons were not with an actual user database, or you have a CRAZY fast computer...)

Now, you might say, 'That's not fair!  You're using a library for this while I'm implementing it from scratch!'

''As an afterthought, I tested that idea, and wrote this:''

{{{
#!python
import operator

def my_getpwall():
    lines = file('/etc/passwd').readlines()
    for line in lines:
        uncommline = line[:line.find('#')].strip()
        fields = uncommline.split(':')
        yield fields

def system_users():
    users = list(my_getpwall())
    users.sort(key=operator.itemgetter(2))
    for user in users:
        if user[2] < 1000:
            yield user[0]
        else:
            return
}}}
''10000 loops, best of 3: 168 usec per loop -- It's faster even if you ''don't'' write pwd in C...''

However, if 'pwd' did not exist, it would be necessary to invent it.  It might not be any faster than your version if the pwd library were in python, but ''that's the whole point'' -- when you optimize your code, you don't want to do it across boundaries which require the caller to make loops; you want the interface to be expressive so that the loops can be optimized within your interface.  For an ''extreme'' version of PP, implement readline yourself with a {{{for c in string: if c == '\n'...}}}

Ideally, you wouldn't even have to write the 'for user in users' loop yourself.  For example, here's an Axiom snippet to do a similar thing implemented potato-style:

{{{
#!python
def axiom_users(s):
    for u in s.query(User):
        if u.uid < 1000:
            yield u.name
}}}

And here is the non-potato version:

{{{
#!python
def axiom_users(s):
    for u in s.query(User, User.uid < 1000):
        yield u.name
}}}

In other words: force as much work down into the optimizeable guts of the library as possible, then use the interface that way, rather than doing additional iteration and testing yourself.

-glyph
----
",',0
150,10,1129647952.80083,grubert@users.sourceforge.net,198.49.126.204,,,
151,2,1129653749.62213,anonymous,198.49.126.204,,,
152,11,1129654260.93424,glyph,198.49.126.204,'"One potato, two potato, three potato, four....'

The sort of programming that encourages you to write your own 'for' loops and build up / tear down data structures, rather than passing vectors or iterators down through an interface in such a way that would allow a smarter version of that interface to be more efficient.

In other words, this is the PotatoProgramming way to add a file containing lines of numbers:

{{{
#!python
f = file('test.numbers')
accum = 0.
for line in f.readlines():
    accum += float(line)
print accum
}}}

Contrast this with:

{{{
#!python
f = file('test.numbers')
print sum(map(float, f.readlines()))
}}}

This term was coined by R0mlLefkowitz.

(Discussion on PotatoProgrammingDiscussion)",'"Discussion on PotatoProgrammingDiscussion'",0
153,15,1129729619.34627,exarkun,198.49.126.204,"= Welcome To Divmod's Trac Installation =

== Ticket Queries ==

 * [http://divmod.org/trac/report/8 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]

== Projects ==

 * AnvilProject
 * AxiomProject
 * ClickChronicleProject
 * CombinatorProject
 * EpsilonProject
 * MantissaProject
 * NevowProject
 * PyflakesProject
 * RadicalProject
 * VertexProject

== Potentially Interesting Ideas ==

 * ClickChronicleAlpha
 * MantissaIsTheDeploymentTarget
 * BranchBasedDevelopment

== Trac Starting Points ==

 * TracGuide --  Built-in Documentation
 * [http://projects.edgewall.com/trac/ The Trac project] -- Trac Open Source Project
 * [http://projects.edgewall.com/trac/wiki/TracFaq Trac FAQ] -- Frequently Asked Questions
 * TracSupport --  Trac Support

For a complete list of local wiki pages, see TitleIndex.

Trac is brought to you by [http://www.edgewall.com/ Edgewall Software],
providing professional Linux and software development services to clients
worldwide. Visit http://www.edgewall.com/ for more information.

",',0
154,1,1129731306.4933,exarkun,198.49.126.204,,,
155,1,1129732335.60765,exarkun,198.49.126.204,"Merging forward is a way to keep old branches fresh and up-to-date.  It consists of this process:

  * Make sure your trunk working copy is clean
  * Make sure all your existing branch changes are checked in
  * Unbranch your existing branch.  eg, for sprocket-212, you would execute:
{{{
chbranch Divmod yourname/sprocket-212
unbranch Divmod
}}}
  * Create a new branch.  eg:
{{{
mkbranch Divmod yourname/sprocket-212-2
}}}
  * Commit the new branch.
",',0
156,16,1129747414.40617,exarkun,198.49.126.204,"= Welcome To Divmod's Trac Installation =

== Ticket Queries ==

 * [http://divmod.org/trac/report/8 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]

== Projects ==

 * AnvilProject
 * AxiomProject
 * ClickChronicleProject
 * CombinatorProject
 * EpsilonProject
 * MantissaProject
 * NevowProject
 * PyflakesProject
 * RadicalProject
 * VertexProject

== Potentially Interesting Ideas ==

 * ClickChronicleAlpha
 * MantissaIsTheDeploymentTarget
 * BranchBasedDevelopment
 * MantissaUserConfigurationAdministration

== Trac Starting Points ==

 * TracGuide --  Built-in Documentation
 * [http://projects.edgewall.com/trac/ The Trac project] -- Trac Open Source Project
 * [http://projects.edgewall.com/trac/wiki/TracFaq Trac FAQ] -- Frequently Asked Questions
 * TracSupport --  Trac Support

For a complete list of local wiki pages, see TitleIndex.

Trac is brought to you by [http://www.edgewall.com/ Edgewall Software],
providing professional Linux and software development services to clients
worldwide. Visit http://www.edgewall.com/ for more information.

",',0
157,1,1129747979.86745,exarkun,198.49.126.204,,,
158,2,1129810208.45197,moe,198.49.126.204,"= !PyFlakes =
is a Lint-like tool for Python, like [http://pychecker.sourceforge.net PyChecker].  It is focused on identifying common errors quickly without executing Python code.

Its primary advantage over [http://pychecker.sourceforge.net PyChecker] is that it is ''fast''.  You don't have to sit around for minutes waiting for the checker to run; it runs on most large projects in only a few seconds.

== Links ==
 * [http://www.freshmeat.net/projects/pyflakes Pyflakes on freshmeat]
 * [http://www.swik.net/pyflakes Pyflakes on swik]
 * [http://divmod.org/projects/pyflakes Pyflakes' divmod project page]
",',0
159,2,1129810599.82863,moe,198.49.126.204,"= Vertex =
is Divmod's implementation of [wiki:QuotientToQuotient Q2Q].

== Links ==
 * [http://divmod.org/projects/vertex Divmod project page for Vertex]
 * [http://www.swik.net/vertex Vertex on swik]",',0
160,1,1129810837.63449,moe,198.49.126.204,"= Q2Q =

is a protocol for:
 * opening authenticated connections, even through NAT
 * allowing a user to reliably demonstrate their identity (for distributed authentication)
 * receiving real-time data directly from other users

Q2Q provides a mechanism for a user to decide whether they want to expose their IP address to a third party *before* accepting a peer-to-peer connection.

It is byte-stream oriented and application-agnostic.  Any peer-to-peer application can use Q2Q to open connections and deliver messages.

VertexProject is the Divmod implemention of Q2Q

== Exits ==
[http://swik.net/q2q Q2Q tag on swik]
",',0
161,3,1129810883.55336,moe,198.49.126.204,"= Vertex =
is Divmod's implementation of [wiki:QuotientToQuotient Q2Q].

== Exits ==
 * [http://divmod.org/projects/vertex Divmod project page for Vertex]
 * [http://www.swik.net/vertex Vertex on swik]",',0
162,3,1129810927.3159,moe,198.49.126.204,"= !PyFlakes =
is a Lint-like tool for Python, like [http://pychecker.sourceforge.net PyChecker].  It is focused on identifying common errors quickly without executing Python code.

Its primary advantage over [http://pychecker.sourceforge.net PyChecker] is that it is ''fast''.  You don't have to sit around for minutes waiting for the checker to run; it runs on most large projects in only a few seconds.

== Exits ==
 * [http://www.freshmeat.net/projects/pyflakes Pyflakes on freshmeat]
 * [http://www.swik.net/pyflakes Pyflakes on swik]
 * [http://divmod.org/projects/pyflakes Pyflakes' divmod project page]
",',0
163,2,1129830003.82462,amir,198.49.126.204,"Merging forward is a way to keep old branches fresh and up-to-date.  It consists of this process:

  * Make sure your trunk working copy is clean
  * Make sure all your existing branch changes are checked in
  * Unbranch your existing branch.  eg, for sprocket-212, you would execute:
{{{
chbranch Divmod yourname/sprocket-212
unbranch Divmod
}}}
  * Resolve any conflicts and use 'svn resolve'
  * Create a new branch.  eg:
{{{
mkbranch Divmod yourname/sprocket-212-2
}}}
  * Commit the new branch.
",',0
164,3,1129830117.90598,amir,198.49.126.204,"Merging forward is a way to keep old branches fresh and up-to-date.  It consists of this process:

  * Make sure your trunk working copy is clean
  * Make sure all your existing branch changes are checked in
  * Unbranch your existing branch.  eg, for sprocket-212, you would execute:
{{{
chbranch Divmod yourname/sprocket-212
unbranch Divmod
}}}
  * Resolve any conflicts and use 'svn resolve'
  * Create a new branch.  eg:
{{{
mkbranch Divmod yourname/sprocket-212-2
}}}
  * Commit the new branch.
  * Make sure to revert trunk by changing to trunk and issuing:
{{{
svn revert . -R
}}}
",',0
165,17,1129933854.12005,washort,198.49.126.204,"= Welcome To Divmod's Trac Installation =

== Ticket Queries ==

 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]

== Projects ==

 * AnvilProject
 * AxiomProject
 * ClickChronicleProject
 * CombinatorProject
 * EpsilonProject
 * MantissaProject
 * NevowProject
 * PyflakesProject
 * RadicalProject
 * VertexProject

== Potentially Interesting Ideas ==

 * ClickChronicleAlpha
 * MantissaIsTheDeploymentTarget
 * BranchBasedDevelopment
 * MantissaUserConfigurationAdministration

== Trac Starting Points ==

 * TracGuide --  Built-in Documentation
 * [http://projects.edgewall.com/trac/ The Trac project] -- Trac Open Source Project
 * [http://projects.edgewall.com/trac/wiki/TracFaq Trac FAQ] -- Frequently Asked Questions
 * TracSupport --  Trac Support

For a complete list of local wiki pages, see TitleIndex.

Trac is brought to you by [http://www.edgewall.com/ Edgewall Software],
providing professional Linux and software development services to clients
worldwide. Visit http://www.edgewall.com/ for more information.

",',0
166,18,1129942916.81406,moe,198.49.126.204,"= Welcome To Divmod's Trac Installation =

== Ticket Queries ==

 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&group=component&order=priority Active Tickets By Component]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]

== Projects ==

 * AnvilProject
 * AxiomProject
 * ClickChronicleProject
 * CombinatorProject
 * EpsilonProject
 * MantissaProject
 * NevowProject
 * PyflakesProject
 * RadicalProject
 * VertexProject

== Potentially Interesting Ideas ==

 * ClickChronicleAlpha
 * MantissaIsTheDeploymentTarget
 * BranchBasedDevelopment
 * MantissaUserConfigurationAdministration

== Trac Starting Points ==

 * TracGuide --  Built-in Documentation
 * [http://projects.edgewall.com/trac/ The Trac project] -- Trac Open Source Project
 * [http://projects.edgewall.com/trac/wiki/TracFaq Trac FAQ] -- Frequently Asked Questions
 * TracSupport --  Trac Support

For a complete list of local wiki pages, see TitleIndex.

Trac is brought to you by [http://www.edgewall.com/ Edgewall Software],
providing professional Linux and software development services to clients
worldwide. Visit http://www.edgewall.com/ for more information.

",',0
167,19,1130030450.90201,amir,198.49.126.204,"= Welcome To Divmod's Trac Installation =

== Ticket Queries ==

 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&group=component&order=priority Active Tickets By Component]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]

== Projects ==

 * AnvilProject
 * AxiomProject
 * ClickChronicleProject
 * CombinatorProject
 * EpsilonProject
 * MantissaProject
 * NevowProject
 * PyflakesProject
 * RadicalProject
 * VertexProject

== Potentially Interesting Ideas ==

 * ClickChronicleAlpha
 * MantissaIsTheDeploymentTarget
 * BranchBasedDevelopment
 * MantissaUserConfigurationAdministration

","remove trac stuff. it's available in the help/guide section",0
168,4,1130092581.90134,exarkun,198.49.126.204,"Merging forward is a way to keep old branches fresh and up-to-date.  It consists of this process:

  * Make sure your trunk working copy is clean
  * Make sure all your existing branch changes are checked in
  * Unbranch your existing branch.  eg, for sprocket-212, you would execute:
{{{
chbranch Divmod yourname/sprocket-212
unbranch Divmod
}}}
  * Resolve any conflicts and use 'svn resolved'
  * Create a new branch.  eg:
{{{
mkbranch Divmod yourname/sprocket-212-2
}}}
  * Commit the new branch.
  * Make sure to revert trunk by changing to trunk and issuing:
{{{
svn revert . -R
}}}
",',0
169,2,1130161618.3885,amir,198.49.126.204,"Divmod uses branches for all development.  The lifetime of a task looks something like this:

  * A  ticket is created in an IssueTracker
  * For features, a specification is attached to the ticket
  * A branch is created in Subversion.  The branch is named with the convention <descriptive word>-<issue number>[-<branch number>].  For the first branch of any feature, the branch number is omitted.
  * Development occurs on the feature in the branch.
  * When the feature is deemed ready by the developer, it is given to another developer for review. The ticket should be moved to the Reviews component, assigned to the reviewer and the priority set to high.
  * When the reviewer is satisfied, the branch is merged into trunk.

Branch lifetimes should be short.  If trunk moves very far from the branch, the branch should be MergedForward to pick up bug fixes and feature enhancements which might be useful.  Doing this also makes the final merge easier, by keeping conflicts small and bringing them to the developer's attention before they become unmanageable.
",',0
170,20,1130164305.95442,amir,198.49.126.204,"= Welcome To Divmod's Trac Installation =

== Ticket Queries ==

 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&group=component&order=priority Active Tickets By Component]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Reviews&order=priority Review tickets]

== Projects ==

 * AnvilProject
 * AxiomProject
 * ClickChronicleProject
 * CombinatorProject
 * EpsilonProject
 * MantissaProject
 * NevowProject
 * PyflakesProject
 * RadicalProject
 * VertexProject

== Potentially Interesting Ideas ==

 * ClickChronicleAlpha
 * MantissaIsTheDeploymentTarget
 * BranchBasedDevelopment
 * MantissaUserConfigurationAdministration

",',0
171,1,1130221252.52694,glyph,198.49.126.204,,,
172,2,1130221470.92093,glyph,198.49.126.204,,,
173,3,1130222101.65253,glyph,198.49.126.204,,,
174,4,1130222997.10984,glyph,198.49.126.204,,,
175,2,1130264463.41188,amir,198.49.126.204,"ClickChronicle is an application and service for recording and indexing your clicks, i.e. URLs that you visit with your web browser.

It's available at http://clickchronicle.com/

See the ClickChronicleChangeLog.

See ClickChronicleAlpha for more information.",',0
176,1,1130264571.21101,amir,198.49.126.204,"=== 25 October 2005 ===
 * Ability to view clickchronicle.com home page and recent clicks when logged in",',0
177,2,1130269495.08991,amir,198.49.126.204,"=== 25 October 2005 ===
 * Ability to view clickchronicle.com home page and recent clicks when logged in.
 * Added a preference to stop clicks being anonymously shared on clickchronilce.com front page.",',0
178,1,1130281062.71048,glyph,198.49.126.204,http://www.paypal.com/,',0
179,3,1130298370.19111,amir,198.49.126.204,"=== 25 October 2005 II ===
 * Added new preferences system.
 * UI tweaks.

=== 25 October 2005 ===
 * Ability to view clickchronicle.com home page and recent clicks when logged in.
 * Added a preference to stop clicks being anonymously shared on clickchronilce.com front page.",',0
180,4,1130298400.50687,amir,198.49.126.204,"=== 25 October 2005 II ===
 * Added new preferences system under 'My Account'.
 * UI tweaks.

=== 25 October 2005 ===
 * Ability to view clickchronicle.com home page and recent clicks when logged in.
 * Added a preference to stop clicks being anonymously shared on clickchronilce.com front page.",',0
181,6,1130298923.02991,amir,198.49.126.204,"Anvil is Divmod's planned issues tracker.

We have tried Roundup, RT and now Trac and while each of them is great in some ways but they each have some shortcomings. Anvil will be tailored for Divmod's development process and will integrate with QuotientProject so team members have a unified view of their tasks and messages.

Anvil will be built on MantissaProject.

Anvil is a collaborative issue tracker.  Anvil places high value on person-oriented interactions.  It understands ownership, relationships, and the concept that a particular task may have different priorities to different people.  Anvil understands that time passes.  It provides deadlines that loom and alter task priority.  It can summarize and report on task completion over time.  It expects estimates from owners of tasks and can provide feedback for the estimation process based on past performance for individuals.  Anvil understands perspectives.  Tasks are shared among team members, with different views given onto them based on each member's role with respect to that task.  Similarly, plans are shared and merged, and overall or individual schedules can be created from tasks in Anvil.

Some features we want from Anvil:
 * High level view of what's going on and what's coming up e.g. who's working on what
 * Dependenncies
 * Task tagging",',0
182,5,1130358074.71637,amir,198.49.126.204,"=== 26 October 2005 ===
 * Page loading speedups
 * Behind the scenes indexing goodness

=== 25 October 2005 II ===
 * Added new preferences system under 'My Account'.
 * UI tweaks.

=== 25 October 2005 ===
 * Ability to view clickchronicle.com home page and recent clicks when logged in.
 * Added a preference to stop clicks being anonymously shared on clickchronilce.com front page.",',0
183,1,1130360338.86463,glyph,198.49.126.204,"Looks like hierarchy is possible.  DivmodNevow/HomePage, maybe?",',0
184,1,1130360400.3713,glyph,198.49.126.204,"Hooray!  It's a website!",',0
185,3,1130364409.8967,glyph,198.49.126.204,DivmodAxiom,',0
186,1,1130364416.87977,glyph,198.49.126.204,,,
187,21,1130364442.07506,glyph,198.49.126.204,"= Welcome To Divmod's Trac Installation =

== Ticket Queries ==

 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&group=component&order=priority Active Tickets By Component]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Reviews&order=priority Review tickets]

== Projects ==

 * DivmodAnvil
 * DivmodAxiom
 * ClickChronicleProject
 * CombinatorProject
 * EpsilonProject
 * MantissaProject
 * NevowProject
 * PyflakesProject
 * RadicalProject
 * VertexProject

== Potentially Interesting Ideas ==

 * ClickChronicleAlpha
 * MantissaIsTheDeploymentTarget
 * BranchBasedDevelopment
 * MantissaUserConfigurationAdministration

",',0
188,22,1130364481.86448,glyph,198.49.126.204,"= Welcome To Divmod's Trac Installation =

== Ticket Queries ==

 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&group=component&order=priority Active Tickets By Component]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Reviews&order=priority Review tickets]

== Projects ==

 * DivmodAnvil
 * DivmodAxiom
 * ClickChronicleProject
 * DivmodCombinator
 * DivmodEpsilon
 * DivmodMantissa
 * DivmodNevow
 * DivmodPyflakes
 * DivmodRadical
 * DivmodVertex

== Potentially Interesting Ideas ==

 * ClickChronicleAlpha
 * MantissaIsTheDeploymentTarget
 * BranchBasedDevelopment
 * MantissaUserConfigurationAdministration

",',0
189,13,1130364719.33728,exarkun,198.49.126.204,"= ClickChronicle Alpha =
  Welcome intrepid alpha tester and Divmod fan!
  We hope you enjoy our latest offering.

== Disclaimer ==
  This is alpha software and it may break. We have tested the software, but during the alpha period we may have to restart the service erasing your account and data. We will do our best to avoid this but you have been warned.

= Overview =

From the ClickChronicle [http://clickchronicle.com/faq FAQ]

  1. What is ClickChronicle?
  ClickChronicle keeps a record of your web browsing and allows you to search all the web pages that you have visited.

  We are staring Alpha testing and would appreciate your help in shaking down any bugs and enhancing the product.

  The service is ''Firefox only'' and  has 2 parts: a click recorder and the clickchronicle.com service. The click recorder is currently a [http://greasemonkey.mozdev.org/ Greasemonkey] script, so you'll have to download and install the Greasemonkey extension; restart your browser and then install the [http://clickchronicle.com/static/js/clickchronicle.user.js ClickChronicle Greasemonkey script]. Instructions follow.

= Getting started =

 * Go to http://clickchronicle.com/signup
 * Enter your email address
 * Check your email for registration confirmation
 * Follow the link in the email to activate your account
 * Select a password
 * Make sure [http://greasemonkey.mozdev.org/ Greasemonkey] is installed and running (e.g. install it and restart Firefox)
 * When logged into [http://www.clickchronicle.com/ ClickChronicle], right-click the 'Get greasemonkey script' link ([http://www.clickchronicle.com/static/js/clickchronicle.user.js or right-click here]), and select 'Install User Script...' from the context menu
 * Open a new browser window or tab
 * Notice the small ClickChronicle on/off button at the bottom right hand corner of the browser window. This shows the current state of the click recorder and allows you toggle recording on and off.
 * When recording is off (clicks not recorded to clickchronicle.com) the button display 'CC Off' and is grey: http://divmod.org/users/amir/screenshots/ccoff.png
 * Clicking on the button starts recording clicks to clickchronicle.com and displays 'CC On' on a dark blue background: http://divmod.org/users/amir/screenshots/ccon.png
 * In order for clicks to be succesffully recorded to your account, you must be logged in to clickchronicle.com. The easiest way to ensure that you are always logged in is to logout (!) and the login again and check the 'Remember me' box. This sets a 2 week cookie. You don't want to check this box if you are using someone else's machine or a public machine in a library or internet cafe since it will allow others to see you clicks.
 * Once you have switched click recording on you should visit a few sites and then go to clickchronicle to ensure that the clicks have got through.

= Reporting bugs and requesting features =
  If you have problems, suggestion or feedback please create a [http://divmod.org/trac/newticket?component=ClickChronicle new ticket]. Don't be shy! We love to hear from you.

= What's next? =
  We will be soon be releasing the click chronicle recording extension that is self contained and does not rely on Greasemonkey. We are looking forward to your help in testing this spiffy new extension.","Fix type in 'Don't be shy!'",0
190,23,1130365266.19441,glyph,198.49.126.204,"= Welcome To the Divmod Community =

divmod.org is the offical open-source outlet for Divmod, Inc. and the Divmod open-source community.

We have a variety of PythonLanguage open source projects to share with you.

== Projects ==

First, our applications:

=== ClickChronicle ===

A click-recording application.

=== DivmodRadical ===

A 3rd-person isometric roleplaying game.

Next, our infrastructure:

=== DivmodAxiom ===

An object database implemented on top of SqLite.

=== DivmodNevow ===

A web templating framework that provides LivePage, an automatic AJAX toolkit.

=== DivmodCombinator ===

A branch-management tool to assist with BranchBasedDevelopment, useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.

=== DivmodEpsilon ===

A Python utilities package, most famous for its ExtimeDotTime class.

=== DivmodMantissa ===

An application server.

=== DivmodPyflakes ===

A lint-like tool for quickly checking your Python code for sanity.

=== DivmodVertex ===

An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind NetworkAddressTranslators.

== Ideas ==

DivmodAnvil will one day be a task tracker that replaces trac.  Sorry, trac.

You can sign up for the ClickChronicleAlpha ''now''!.

MantissaIsTheDeploymentTarget, the web is not.

Here at divmod we use BranchBasedDevelopment to ensure quality and freshness of our software at all times.

MantissaUserConfigurationAdministration



== Ticket Queries ==

 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&group=component&order=priority Active Tickets By Component]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Reviews&order=priority Review tickets]
",',0
191,7,1130365359.14368,glyph,198.49.126.204,DivmodAnvil,',0
192,1,1130365366.99345,glyph,198.49.126.204,"Anvil is Divmod's planned issues tracker.

We have tried Roundup, RT and now Trac and while each of them is great in some ways but they each have some shortcomings. Anvil will be tailored for Divmod's development process and will integrate with QuotientProject so team members have a unified view of their tasks and messages.

Anvil will be built on MantissaProject.

Anvil is a collaborative issue tracker.  Anvil places high value on person-oriented interactions.  It understands ownership, relationships, and the concept that a particular task may have different priorities to different people.  Anvil understands that time passes.  It provides deadlines that loom and alter task priority.  It can summarize and report on task completion over time.  It expects estimates from owners of tasks and can provide feedback for the estimation process based on past performance for individuals.  Anvil understands perspectives.  Tasks are shared among team members, with different views given onto them based on each member's role with respect to that task.  Similarly, plans are shared and merged, and overall or individual schedules can be created from tasks in Anvil.

Some features we want from Anvil:
 * High level view of what's going on and what's coming up e.g. who's working on what
 * Dependenncies
 * Task tagging",',0
193,1,1130365386.96631,glyph,198.49.126.204,"Anvil is Divmod's planned issues tracker.

We have tried Roundup, RT and now Trac and while each of them is great in some ways but they each have some shortcomings. Anvil will be tailored for Divmod's development process and will integrate with QuotientProject so team members have a unified view of their tasks and messages.

Anvil will be built on MantissaProject.

Anvil is a collaborative issue tracker.  Anvil places high value on person-oriented interactions.  It understands ownership, relationships, and the concept that a particular task may have different priorities to different people.  Anvil understands that time passes.  It provides deadlines that loom and alter task priority.  It can summarize and report on task completion over time.  It expects estimates from owners of tasks and can provide feedback for the estimation process based on past performance for individuals.  Anvil understands perspectives.  Tasks are shared among team members, with different views given onto them based on each member's role with respect to that task.  Similarly, plans are shared and merged, and overall or individual schedules can be created from tasks in Anvil.

Some features we want from Anvil:
 * High level view of what's going on and what's coming up e.g. who's working on what
 * Dependenncies
 * Task tagging",',0
194,2,1130365410.05125,glyph,198.49.126.204,"Radical is an interactive, 2D, isometric client/server game platform, delivered using nothing but a web browser, written using MantissaProject and LivePage.

Seriously.  It actually does that.  You can move your little guy around on the screen, talk, and pick up items (there are even walls!)

It is still in the very early stages of development; there is a mostly-working demonstration in SVN, but there is no release, and it is not being actively maintained due to lack of time.

If you find this interesting, please contribute!",',0
196,1,1130365440.32559,glyph,198.49.126.204,"Nevow is a web templating framework and AJAX application server.

It is comprised of FormLess, StAn, and LivePage.

Divmod uses it in MantissaProject for the web user-interface layer.",',0
197,2,1130365445.81357,glyph,198.49.126.204,DivmodNevow,',0
198,1,1130365491.64961,glyph,198.49.126.204,"Combinator is a tool that Divmod Python programmers use to manage multiple branches of our software.  It integrates with Subversion.

It can be used to manage any number of branches with any number of projects.  It sets up your Python sys.path to point at the appropriate directories for the set of branches you are currently working on.

It is mainly of interest if you are checking code out of SVN: users of installed versions of Divmod software can probably ignore this project (for now).",',0
199,2,1130365547.87757,glyph,198.49.126.204,DivmodCombinator,',0
200,1,1130365615.13641,glyph,198.49.126.204,"Epsilon is a small utility package; it depends on tools too recent for Twisted (like datetime in python2.4) but performs generic enough functions that it can be used in projects that don't want to share Divmod's other projects' large footprint.

Currently it includes a powerful date/time formatting and import/export class, for exchanging date and time information between all Python's various ways to interpret objects as times or time deltas, and some tools for managing concurrent asynchronous processes within Twisted.",',0
201,3,1130365627.73915,glyph,198.49.126.204,DivmodEpsilon,',0
202,1,1130365663.08238,glyph,198.49.126.204,"Mantissa is an application server.

It provides integration between the AxiomProject object database, and the TwistedFramework, as well as web user-interface utilities.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicleAlpha), and if you want to write something that hooks into our network, Mantissa is how you do it.",',0
203,2,1130365677.38507,glyph,198.49.126.204,DivmodMantissa,',0
204,4,1130365724.43285,glyph,198.49.126.204,DivmodPyflakes,',0
205,1,1130365730.95844,glyph,198.49.126.204,"= !PyFlakes =
is a Lint-like tool for Python, like [http://pychecker.sourceforge.net PyChecker].  It is focused on identifying common errors quickly without executing Python code.

Its primary advantage over [http://pychecker.sourceforge.net PyChecker] is that it is ''fast''.  You don't have to sit around for minutes waiting for the checker to run; it runs on most large projects in only a few seconds.

== Exits ==
 * [http://www.freshmeat.net/projects/pyflakes Pyflakes on freshmeat]
 * [http://www.swik.net/pyflakes Pyflakes on swik]",',0
206,4,1130365761.0806,glyph,198.49.126.204,DivmodVertex,',0
207,1,1130365763.56923,glyph,198.49.126.204,"= Vertex =
is Divmod's implementation of [wiki:QuotientToQuotient Q2Q].

== Exits ==
 * [http://divmod.org/projects/vertex Divmod project page for Vertex]
 * [http://www.swik.net/vertex Vertex on swik]",',0
208,24,1130365850.8347,glyph,198.49.126.204,"= Welcome To the Divmod Community =

divmod.org is the offical open-source outlet for Divmod, Inc. and the Divmod open-source community.

We have a variety of PythonLanguage open source projects to share with you.

== Applications ==
=== ClickChronicle ===

A click-recording application.

=== DivmodRadical ===

A 3rd-person isometric roleplaying game.

== Infrastructure ==
=== DivmodAxiom ===

An object database implemented on top of SqLite.

=== DivmodNevow ===

A web templating framework that provides LivePage, an automatic AJAX toolkit.

=== DivmodCombinator ===

A branch-management tool to assist with BranchBasedDevelopment, useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.

=== DivmodEpsilon ===

A Python utilities package, most famous for its ExtimeDotTime class.

=== DivmodMantissa ===

An application server.

=== DivmodPyflakes ===

A lint-like tool for quickly checking your Python code for sanity.

=== DivmodVertex ===

An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind NetworkAddressTranslators.

== Ideas ==

DivmodAnvil will one day be a task tracker that replaces trac.  Sorry, trac.

You can sign up for the ClickChronicleAlpha ''now''!.

MantissaIsTheDeploymentTarget, the web is not.

Here at divmod we use BranchBasedDevelopment to ensure quality and freshness of our software at all times.

MantissaUserConfigurationAdministration



== Ticket Queries ==

 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&group=component&order=priority Active Tickets By Component]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Reviews&order=priority Review tickets]
",',0
209,2,1130365867.64897,glyph,198.49.126.204,"Nevow is a web templating framework and AJAX application server.

It is comprised of FormLess, StAn, and LivePage.

Divmod uses it in MantissaProject for the web user-interface layer.

Nevow/TestPage",',0
210,3,1130365873.63961,glyph,198.49.126.204,"Nevow is a web templating framework and AJAX application server.

It is comprised of FormLess, StAn, and LivePage.

Divmod uses it in MantissaProject for the web user-interface layer.

wiki:Nevow/TestPage",',0
211,4,1130365880.37993,glyph,198.49.126.204,"Nevow is a web templating framework and AJAX application server.

It is comprised of FormLess, StAn, and LivePage.

Divmod uses it in MantissaProject for the web user-interface layer.

DivmodNevow/TestPage",',0
212,5,1130365887.31882,glyph,198.49.126.204,"Nevow is a web templating framework and AJAX application server.

It is comprised of FormLess, StAn, and LivePage.

Divmod uses it in MantissaProject for the web user-interface layer.

",',0
213,25,1130366348.13546,glyph,198.49.126.204,"= Welcome To the Divmod Community =

You are at http://divmod.org/, the offical open-source outlet for DivmodInc and the Divmod open-source community.  We have a variety of PythonLanguage open source projects to share with you:

== Applications ==
=== ClickChronicle ===

A click-recording application.

=== DivmodRadical ===

A 3rd-person isometric roleplaying game.

== Infrastructure ==
=== DivmodAxiom ===

An object database implemented on top of SqLite.

=== DivmodNevow ===

A web templating framework that provides LivePage, an automatic AJAX toolkit.

=== DivmodCombinator ===

A branch-management tool to assist with BranchBasedDevelopment, useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.

=== DivmodEpsilon ===

A Python utilities package, most famous for its ExtimeDotTime class.

=== DivmodMantissa ===

An application server.

=== DivmodPyflakes ===

A lint-like tool for quickly checking your Python code for sanity.

=== DivmodVertex ===

An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind NetworkAddressTranslators.

== Ideas ==

DivmodAnvil will one day be a task tracker that replaces trac.  Sorry, trac.

You can sign up for the ClickChronicleAlpha ''now''!.

MantissaIsTheDeploymentTarget, the web is not.

Here at divmod we use BranchBasedDevelopment to ensure quality and freshness of our software at all times.

MantissaUserConfigurationAdministration



== Ticket Queries ==

 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&group=component&order=priority Active Tickets By Component]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Reviews&order=priority Review tickets]
",',0
214,1,1130366567.04726,glyph,198.49.126.204,,,
215,2,1130366582.52803,glyph,198.49.126.204,,,
216,3,1130366592.88508,glyph,198.49.126.204,,,
217,26,1130366627.36324,glyph,198.49.126.204,"= Welcome To the Divmod Community =

You are at http://divmod.org/, the offical open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of PythonLanguage open source projects to share with you:

== Applications ==
=== ClickChronicle ===

A click-recording application.

=== DivmodRadical ===

A 3rd-person isometric roleplaying game.

== Infrastructure ==
=== DivmodAxiom ===

An object database implemented on top of SqLite.

=== DivmodNevow ===

A web templating framework that provides LivePage, an automatic AJAX toolkit.

=== DivmodCombinator ===

A branch-management tool to assist with BranchBasedDevelopment, useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.

=== DivmodEpsilon ===

A Python utilities package, most famous for its ExtimeDotTime class.

=== DivmodMantissa ===

An application server.

=== DivmodPyflakes ===

A lint-like tool for quickly checking your Python code for sanity.

=== DivmodVertex ===

An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind NetworkAddressTranslators.

== Ideas ==

DivmodAnvil will one day be a task tracker that replaces trac.  Sorry, trac.

You can sign up for the ClickChronicleAlpha ''now''!.

MantissaIsTheDeploymentTarget, the web is not.

Here at divmod we use BranchBasedDevelopment to ensure quality and freshness of our software at all times.

MantissaUserConfigurationAdministration



== Ticket Queries ==

 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&group=component&order=priority Active Tickets By Component]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets] ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Reviews&order=priority Review tickets]
",',0
218,2,1130366726.44064,glyph,198.49.126.204,"== DivmodNevow's 'LivePage' ==

A client/server asynchronous communication mechanism that is embedded in a web page.  It consists of a Twisted server component written in Python and a client component written in javascript.

A two-way real-time chat application is an example of something that might take advantage of LivePage's capabilities.",',0
219,3,1130366731.66652,glyph,198.49.126.204,"== DivmodNevow 's 'LivePage' ==

A client/server asynchronous communication mechanism that is embedded in a web page.  It consists of a Twisted server component written in Python and a client component written in javascript.

A two-way real-time chat application is an example of something that might take advantage of LivePage's capabilities.",',0
220,4,1130366742.11979,glyph,198.49.126.204,"== DivmodNevow  'LivePage' ==

A client/server asynchronous communication mechanism that is embedded in a web page.  It consists of a Twisted server component written in Python and a client component written in javascript.

A two-way real-time chat application is an example of something that might take advantage of LivePage's capabilities.",',0
221,2,1130366789.22029,glyph,198.49.126.204,,,
222,1,1130367101.63397,glyph,198.49.126.204,"Here is an expanded realistic potato/non-potato comparison, reading a list of system users.

Potato:

{{{
#!python
def system_users():
    lines = file('/etc/passwd').readlines()
    for line in lines:
        if len(line[:line.find('#')].strip()):
            fields = line.split(':')
            if int(fields[2]) < 1000:
                yield fields[0]
}}}

''{{{timeit.py}}} result: 100000 loops, best of 3: 187 usec per loop''

Vector:

{{{
#!python
import pwd
import operator
def system_users():
    users = pwd.getpwall()
    users.sort(key=operator.itemgetter(2))
    for user in users:
        if user[2] < 1000:
            yield user[0]
        else:
            return
}}}

''100000 loops, best of 3: 137 usec per loop''

Now, you might say, 'That's not a fair comparison!  The 'VectorProgramming' example is using a library for this while PotatoProgramming is implementing it from scratch!'

The comparison still holds, however:

{{{
#!python
import operator

def my_getpwall():
    lines = file('/etc/passwd').readlines()
    for line in lines:
        uncommline = line[:line.find('#')].strip()
        fields = uncommline.split(':')
        yield fields

def system_users():
    users = list(my_getpwall())
    users.sort(key=operator.itemgetter(2))
    for user in users:
        if user[2] < 1000:
            yield user[0]
        else:
            return
}}}
''10000 loops, best of 3: 168 usec per loop''

In other words, if 'pwd' did not exist, it would be necessary to invent it.  When you optimize your code, you don't want to do it across boundaries which require the caller to make loops; you want the interface to be expressive so that the loops can be optimized within your interface.  For an ''extreme'' version of PP, implement readline yourself with a {{{for c in string: if c == '\n'...}}}

Ideally, you wouldn't even have to write the 'for user in users' loop yourself.  For example, here's an Axiom snippet to do a similar thing implemented potato-style:

{{{
#!python
def axiom_users(s):
    for u in s.query(User):
        if u.uid < 1000:
            yield u.name
}}}

vector style:

{{{
#!python
def axiom_users(s):
    for u in s.query(User, User.uid < 1000):
        yield u.name
}}}

Axiom aims to force as much work down into the optimizeable guts of the library as possible, then use the interface that way, rather than doing additional iteration and testing in application code.
",',0
223,5,1130367107.45362,glyph,198.49.126.204,',',0
224,12,1130367156.21283,glyph,198.49.126.204,'"One potato, two potato, three potato, four....'

The sort of programming that encourages you to write your own 'for' loops and build up / tear down data structures, rather than passing vectors or iterators down through an interface in such a way that would allow a smarter version of that interface to be more efficient.

In other words, this is the PotatoProgramming way to add a file containing lines of numbers:

{{{
#!python
f = file('test.numbers')
accum = 0.
for line in f.readlines():
    accum += float(line)
print accum
}}}

Contrast this with:

{{{
#!python
f = file('test.numbers')
print sum(map(float, f.readlines()))
}}}

This term was coined by R0mlLefkowitz.

More on PotatoProgrammingExplained.","Since this is our website now with no public comments, remove the appearance of an internal argument.",0
225,27,1130367376.08269,glyph,198.49.126.204,"= Welcome To the Divmod Community =

You are at http://divmod.org/, the offical open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of PythonLanguage open source projects to share with you:

== Applications ==
=== ClickChronicle ===

A click-recording application.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets]

=== DivmodRadical ===

A 3rd-person isometric roleplaying game.

== Infrastructure ==
=== DivmodAxiom ===

An object database implemented on top of SqLite.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]

=== DivmodNevow ===

A web templating framework that provides LivePage, an automatic AJAX toolkit.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]

=== DivmodCombinator ===

A branch-management tool to assist with BranchBasedDevelopment, useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.

=== DivmodEpsilon ===

A Python utilities package, most famous for its ExtimeDotTime class.

=== DivmodMantissa ===

An application server.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]

=== DivmodPyflakes ===

A lint-like tool for quickly checking your Python code for sanity.

=== DivmodVertex ===

An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind NetworkAddressTranslators.

== Ideas ==

DivmodAnvil will one day be a task tracker that replaces trac.  Sorry, trac.

You can sign up for the ClickChronicleAlpha ''now''!.

MantissaIsTheDeploymentTarget, the web is not.

Here at divmod we use BranchBasedDevelopment to ensure quality and freshness of our software at all times.

MantissaUserConfigurationAdministration

== Ticket Queries ==

 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&group=component&order=priority Active Tickets By Component]
 * ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Reviews&order=priority Review tickets]
",',0
226,1,1130367511.64156,glyph,198.49.126.204,"= Python =

A pretty good programming language.

If you don't know it, learn it.

http://www.python.org/",',0
227,28,1130368707.39291,glyph,198.49.126.204,"= Welcome To the Divmod Community =

You are at http://divmod.org/, the offical open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of PythonLanguage open source projects to share with you:

== Applications ==
=== ClickChronicle ===

A click-recording application.

You can sign up for the ClickChronicleAlpha ''now''!.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets]

=== DivmodRadical ===

A 3rd-person isometric roleplaying game.

== Infrastructure ==
=== DivmodAxiom ===

An object database implemented on top of SqLite.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]

=== DivmodNevow ===

A web templating framework that provides LivePage, an automatic AJAX toolkit.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]

=== DivmodCombinator ===

A branch-management tool to assist with BranchBasedDevelopment, useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.

=== DivmodEpsilon ===

A Python utilities package, most famous for its ExtimeDotTime class.

=== DivmodMantissa ===

An application server.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]

=== DivmodPyflakes ===

A lint-like tool for quickly checking your Python code for sanity.

=== DivmodVertex ===

An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind NetworkAddressTranslators.

== Ideas ==

DivmodAnvil will one day be a task tracker that replaces trac.  Sorry, trac.

MantissaIsTheDeploymentTarget, the web is not.

Here at divmod we use BranchBasedDevelopment to ensure quality and freshness of our software at all times.

MantissaUserConfigurationAdministration

== Ticket Queries ==

 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&group=component&order=priority Active Tickets By Component]
 * ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Reviews&order=priority Review tickets]
",',0
228,29,1130368719.53947,glyph,198.49.126.204,"= Welcome To the Divmod Community =

You are at http://divmod.org/, the offical open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of PythonLanguage open source projects to share with you:

== Applications ==
=== ClickChronicle ===

A click-recording application.

You can sign up for the ClickChronicleAlpha ''now''!

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets]

=== DivmodRadical ===

A 3rd-person isometric roleplaying game.

== Infrastructure ==
=== DivmodAxiom ===

An object database implemented on top of SqLite.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]

=== DivmodNevow ===

A web templating framework that provides LivePage, an automatic AJAX toolkit.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]

=== DivmodCombinator ===

A branch-management tool to assist with BranchBasedDevelopment, useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.

=== DivmodEpsilon ===

A Python utilities package, most famous for its ExtimeDotTime class.

=== DivmodMantissa ===

An application server.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]

=== DivmodPyflakes ===

A lint-like tool for quickly checking your Python code for sanity.

=== DivmodVertex ===

An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind NetworkAddressTranslators.

== Ideas ==

DivmodAnvil will one day be a task tracker that replaces trac.  Sorry, trac.

MantissaIsTheDeploymentTarget, the web is not.

Here at divmod we use BranchBasedDevelopment to ensure quality and freshness of our software at all times.

MantissaUserConfigurationAdministration

== Ticket Queries ==

 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&group=component&order=priority Active Tickets By Component]
 * ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Reviews&order=priority Review tickets]
",',0
229,1,1130369526.62533,moe,198.49.126.204,"= Attach Files Here =",',0
230,2,1130371023.99423,moe,198.49.126.204,"= ClickChronicle =

Is the first publicly-released Divmod application.  It consists of a DivmodMantissa server and a FirefoxExtension that communicate in order to record web pages you visit and index their content for easy searching.  See ClickChronicleAlpha for signup information.
",',0
231,3,1130371262.29862,moe,198.49.126.204,"= ClickChronicle =

Is the first publicly-released Divmod application.  It consists of a DivmodMantissa server and a FirefoxExtension that communicate in order to record web pages you visit and index their content for easy searching.  See ClickChronicleAlpha for signup information.

ClickChronicle also uses DivmodXapwrap and makes extensive use of LivePage
",',0
232,30,1130372939.76766,glyph,198.49.126.204,"= Welcome To the Divmod Community =

You are at http://divmod.org/, the offical open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of PythonLanguage open source projects to share with you:

== Applications ==
=== ClickChronicle ===

A click-recording application.

You can sign up for the ClickChronicleAlpha ''now''!

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets]

=== DivmodRadical ===

A 3rd-person isometric roleplaying game.

== Infrastructure ==
=== DivmodAxiom ===

An object database implemented on top of SqLite.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]

=== DivmodNevow ===

A web templating framework that provides LivePage, an automatic AJAX toolkit.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]

=== DivmodCombinator ===

A branch-management tool to assist with BranchBasedDevelopment, useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.

=== DivmodEpsilon ===

A Python utilities package, most famous for its ExtimeDotTime class.

=== DivmodMantissa ===

An application server.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]

=== DivmodPyflakes ===

A lint-like tool for quickly checking your Python code for sanity.

=== DivmodVertex ===

An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind NetworkAddressTranslators.

== Ideas ==

DivmodAnvil will one day be a task tracker that replaces trac.  Sorry, trac.

MantissaIsTheDeploymentTarget, the web is not.

Here at divmod we use BranchBasedDevelopment to ensure quality and freshness of our software at all times.

MantissaUserConfigurationAdministration

== Ticket Queries ==

 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&group=component&order=priority Active Tickets By Component]
 * ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Reviews&order=priority Review tickets]

== Old Stuff ==

WhitherAtop

WhitherQuotient


",',0
233,1,1130373047.28983,glyph,198.49.126.204,"Glyph blogged this a little while ago: http://www.livejournal.com/users/glyf/42483.html

The short version is: Quotient is being ported to Axiom and (the new) Mantissa.  There is a bit of code from JP available already that does mail.

We don't have a timeline for the transition, since it depends heavily on external factors.  However, our existing customer base ''will'' be taken care of, and we will begin accepting new users shortly after the transition.

There is no planned future development on the old Quotient or the old Mantissa.",',0
234,1,1130374176.77598,moe,198.49.126.204,"= !ExtimeDotTime =

'''extime.Time''' lives in DivmodEpsilon ([http://divmod.org/trac/browser/trunk/Epsilon/epsilon browse the source]) - its a class that represents an instant or span of time - unambiguously and consistently, and provides some utility methods for converting to, from and between various representations.

{{{
#!python
from epsilon.extime import Time
from pytz import timezone

noon = Time.fromHumanly('noon')
print 'doc, be at the saloon at', noon.asHumanly() 
# prints 'doc, be at the saloon at 12:00 pm'
print 'tim, be at the standards meeting at', noon.asISO8601TimeAndDate()
# prints 'tim, be at the standards meeting at 2005-10-27T12:00+00:00'
print 'hal, be at the holodeck at', noon.asPOSIXTimestamp()
# prints 'hal, be at the holodeck at 1130414400.0'

noonGMT = Time.fromHumanly('noon', tzinfo=timezone('GMT'))
noonEST = Time.fromHumanly('noon', tzinfo=timezone('EST'))

def getHourDifference(t1, t2):
   (small, big) = sorted((t1, t2))
   seconds = (big.asDatetime() - small.asDatetime()).seconds
   return seconds / 60 ** 2
   
message = '''sam, the flight leaves from greenwich at %s, i guess that is
%s in new york.  wow, %d hours apart, who would have thought'''

print message % (noonGMT.asHumanly(), 
                 noonEST.asHumanly(),
                 getHourDifference(noonGMT, noonEST))

# will print:
# sam, the flight leaves from greenwich at 12:00 pm, i guess that is
# 05:00 pm in new york.  wow, 5 hours apart, who would have thought
}}}       
       
put more examples here.",',0
235,2,1130374779.10326,moe,198.49.126.204,"= Epsilon =
is a small utility package; it depends on tools too recent for Twisted (like datetime in python2.4) but performs generic enough functions that it can be used in projects that don't want to share Divmod's other projects' large footprint.

Currently it includes a powerful date/time formatting and import/export class (ExtimeDotTime), for exchanging date and time information between all Python's various ways to interpret objects as times or time deltas, and some tools for managing concurrent asynchronous processes within Twisted.",',0
236,2,1130375168.2059,moe,198.49.126.204,"= !ExtimeDotTime =

'''extime.Time''' lives in DivmodEpsilon ([http://divmod.org/trac/browser/trunk/Epsilon/epsilon browse the source]) - its a class that represents an instant or span of time - unambiguously and consistently, and provides some utility methods for converting to, from and between various representations.  Values of [wiki:DivmodAxiom DivmodAxiom]'s timestamp attribute type are stored internally as {{{Time.asPOSIXTimestamp()}}},  and mapped to ExtimeDotTime instances when accessed from PythonLanguage.

{{{
#!python
from epsilon.extime import Time
from pytz import timezone

noon = Time.fromHumanly('noon')
print 'doc, be at the saloon at', noon.asHumanly() 
# prints 'doc, be at the saloon at 12:00 pm'
print 'tim, be at the standards meeting at', noon.asISO8601TimeAndDate()
# prints 'tim, be at the standards meeting at 2005-10-27T12:00+00:00'
print 'hal, be at the holodeck at', noon.asPOSIXTimestamp()
# prints 'hal, be at the holodeck at 1130414400.0'

noonGMT = Time.fromHumanly('noon', tzinfo=timezone('GMT'))
noonEST = Time.fromHumanly('noon', tzinfo=timezone('EST'))

def getHourDifference(t1, t2):
   (small, big) = sorted((t1, t2))
   seconds = (big.asDatetime() - small.asDatetime()).seconds
   return seconds / 60 ** 2
   
message = '''sam, the flight leaves from greenwich at %s, i guess that is
%s in new york.  wow, %d hours apart, who would have thought'''

print message % (noonGMT.asHumanly(), 
                 noonEST.asHumanly(),
                 getHourDifference(noonGMT, noonEST))

# will print:
# sam, the flight leaves from greenwich at 12:00 pm, i guess that is
# 05:00 pm in new york.  wow, 5 hours apart, who would have thought
}}}       
       
put more examples here.","mention usage of extime.Time in Axiom",0
237,31,1130381685.58632,amir,198.49.126.204,"= Welcome To the Divmod Community =

You are at http://divmod.org/, the offical open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of PythonLanguage open source projects to share with you:

== Applications ==
=== ClickChronicle ===

A click-recording application.

You can sign up for the ClickChronicleAlpha ''now''!

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets]

=== DivmodRadical ===

A 3rd-person isometric roleplaying game.

== Infrastructure ==
=== DivmodAxiom ===

An object database implemented on top of SqLite.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]

=== DivmodNevow ===

A web templating framework that provides LivePage, an automatic AJAX toolkit.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]

=== DivmodCombinator ===

A branch-management tool to assist with BranchBasedDevelopment, useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.

=== DivmodEpsilon ===

A Python utilities package, most famous for its ExtimeDotTime class.

=== DivmodMantissa ===

An application server.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]

=== DivmodPyflakes ===

A lint-like tool for quickly checking your Python code for sanity.

=== DivmodReverend ===

Reverend is a general purpose Bayesian classifier, named after Rev. Thomas Bayes.

=== DivmodVertex ===

An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind NetworkAddressTranslators.

== Ideas ==

DivmodAnvil will one day be a task tracker that replaces trac.  Sorry, trac.

MantissaIsTheDeploymentTarget, the web is not.

Here at divmod we use BranchBasedDevelopment to ensure quality and freshness of our software at all times.

MantissaUserConfigurationAdministration

== Ticket Queries ==

 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&group=component&order=priority Active Tickets By Component]
 * ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Reviews&order=priority Review tickets]

== Old Stuff ==

WhitherAtop

WhitherQuotient


",',0
238,1,1130381705.49703,amir,198.49.126.204,"Reverend is a general purpose Bayesian classifier, named after Rev. Thomas Bayes. Use the Reverend to quickly add Bayesian smarts to your app. To use it in your own application, you either subclass Bayes or pass it a tokenizing function. Bayesian fun has never been so quick and easy. Many thanks for Christophe Delord for his well written PopF. Orange also looks good. If you are looking for a spam filter take a look at SpamBayes and POPFile.

The Reverend package requires Python 2.3 or later. Leonard Richardson has back-ported Reverend for use with Python 1.5.2. You can find his version here.

Some fun stuff is starting to pop up that uses the Reverend: http://jrhicks.net/reverend and Newsbruiser.

Stuff you can do with the Reverend:

    * classify RSS stories
    * classify recipes by cuisine
    * who do you write like? Shakespeare, Dickens or Austen
    * detect the language of a document
    * is your code more like Guido's or Peter's

Think about how you want your data tokenized! You can write a custom tokenizer and pass it to Bayes at instance creation. The default tokenizer is named Splitter and is like a glorified version of string.split(): it breaks words/tokens on space and other non-alphanumeric characters. This is fine for many apps, particularly apps around texts in western languages. However, if characters like #!$&, or Unicode are important to your application, you may want to provide you own tokenizer. Also, by default the Reverend expects a string for both training and guessing. If you want to pass it an object, you need to write a tokenizer that knows how to get the tokens out of your object.

Here's some code:

from reverend.thomas import Bayes
guesser = Bayes()
guesser.train('french', 'le la les du un une je il elle de en')
guesser.train('german', 'der die das ein eine')
guesser.train('spanish', 'el uno una las de la en')
guesser.train('english', 'the it she he they them are were to')
guesser.guess('they went to el cantina')
guesser.guess('they were flying planes')
guesser.train('english', 'the rain in spain falls mainly on the plain')
guesser.save('my_guesser.bay')",',0
239,2,1130382299.5501,amir,198.49.126.204,"Reverend is a general purpose Bayesian classifier, named after Rev. Thomas Bayes. Use the Reverend to quickly add Bayesian smarts to your app. To use it in your own application, you either subclass Bayes or pass it a tokenizing function. Bayesian fun has never been so quick and easy. Many thanks for [http://christophe.delord.free.fr/ Christophe Delord] for his well written PopF. [http://magix.fri.uni-lj.si/orange/ Orange] also looks good. If you are looking for a spam filter take a look at SpamBayes and POPFile.

The Reverend package requires Python 2.3 or later. [http://www.advogato.org/person/leonardr/ Leonard Richardson] has back-ported Reverend for use with Python 1.5.2. You can find his version [http://newsbruiser.tigris.org/source/browse/newsbruiser/nb/lib/reverend/ here].

Some fun stuff is starting to pop up that uses the Reverend: http://jrhicks.net/reverend and [http://newsbruiser.tigris.org/ Newsbruiser].

[http://matt.blogs.it/ Matt Mower] has ported Reverend to Ruby and named it [http://rubyforge.org/projects/bishop/ Bishop].

Stuff you can do with the Reverend:

    * classify RSS stories
    * classify recipes by cuisine
    * who do you write like? Shakespeare, Dickens or Austen
    * detect the language of a document
    * is your code more like Guido's or Peter's

Think about how you want your data tokenized! You can write a custom tokenizer and pass it to Bayes at instance creation. The default tokenizer is named Splitter and is like a glorified version of string.split(): it breaks words/tokens on space and other non-alphanumeric characters. This is fine for many apps, particularly apps around texts in western languages. However, if characters like #!$&, or Unicode are important to your application, you may want to provide you own tokenizer. Also, by default the Reverend expects a string for both training and guessing. If you want to pass it an object, you need to write a tokenizer that knows how to get the tokens out of your object.

Here's some code:

from reverend.thomas import Bayes
guesser = Bayes()
guesser.train('french', 'le la les du un une je il elle de en')
guesser.train('german', 'der die das ein eine')
guesser.train('spanish', 'el uno una las de la en')
guesser.train('english', 'the it she he they them are were to')
guesser.guess('they went to el cantina')
guesser.guess('they were flying planes')
guesser.train('english', 'the rain in spain falls mainly on the plain')
guesser.save('my_guesser.bay')",',0
240,3,1130382326.99741,amir,198.49.126.204,"Reverend is a general purpose Bayesian classifier, named after Rev. Thomas Bayes. Use the Reverend to quickly add Bayesian smarts to your app. To use it in your own application, you either subclass Bayes or pass it a tokenizing function. Bayesian fun has never been so quick and easy. Many thanks for [http://christophe.delord.free.fr/ Christophe Delord] for his well written PopF. [http://magix.fri.uni-lj.si/orange/ Orange] also looks good. If you are looking for a spam filter take a look at SpamBayes and POPFile.

The Reverend package requires Python 2.3 or later. [http://www.advogato.org/person/leonardr/ Leonard Richardson] has back-ported Reverend for use with Python 1.5.2. You can find his version [http://newsbruiser.tigris.org/source/browse/newsbruiser/nb/lib/reverend/ here].

Some fun stuff is starting to pop up that uses the Reverend: http://jrhicks.net/reverend and [http://newsbruiser.tigris.org/ Newsbruiser].

[http://matt.blogs.it/ Matt Mower] has ported Reverend to Ruby and named it [http://rubyforge.org/projects/bishop/ Bishop].

Stuff you can do with the Reverend:
 * classify RSS stories
 * classify recipes by cuisine
 * who do you write like? Shakespeare, Dickens or Austen
 * detect the language of a document
 * is your code more like Guido's or Peter's

Think about how you want your data tokenized! You can write a custom tokenizer and pass it to Bayes at instance creation. The default tokenizer is named Splitter and is like a glorified version of string.split(): it breaks words/tokens on space and other non-alphanumeric characters. This is fine for many apps, particularly apps around texts in western languages. However, if characters like #!$&, or Unicode are important to your application, you may want to provide you own tokenizer. Also, by default the Reverend expects a string for both training and guessing. If you want to pass it an object, you need to write a tokenizer that knows how to get the tokens out of your object.

Here's some code:

from reverend.thomas import Bayes
guesser = Bayes()
guesser.train('french', 'le la les du un une je il elle de en')
guesser.train('german', 'der die das ein eine')
guesser.train('spanish', 'el uno una las de la en')
guesser.train('english', 'the it she he they them are were to')
guesser.guess('they went to el cantina')
guesser.guess('they were flying planes')
guesser.train('english', 'the rain in spain falls mainly on the plain')
guesser.save('my_guesser.bay')",',0
241,4,1130382344.31254,amir,198.49.126.204,"Reverend is a general purpose Bayesian classifier, named after Rev. Thomas Bayes. Use the Reverend to quickly add Bayesian smarts to your app. To use it in your own application, you either subclass Bayes or pass it a tokenizing function. Bayesian fun has never been so quick and easy. Many thanks for [http://christophe.delord.free.fr/ Christophe Delord] for his well written PopF. [http://magix.fri.uni-lj.si/orange/ Orange] also looks good. If you are looking for a spam filter take a look at SpamBayes and POPFile.

The Reverend package requires Python 2.3 or later. [http://www.advogato.org/person/leonardr/ Leonard Richardson] has back-ported Reverend for use with Python 1.5.2. You can find his version [http://newsbruiser.tigris.org/source/browse/newsbruiser/nb/lib/reverend/ here].

Some fun stuff is starting to pop up that uses the Reverend: http://jrhicks.net/reverend and [http://newsbruiser.tigris.org/ Newsbruiser].

[http://matt.blogs.it/ Matt Mower] has ported Reverend to Ruby and named it [http://rubyforge.org/projects/bishop/ Bishop].

Stuff you can do with the Reverend:
 * classify RSS stories
 * classify recipes by cuisine
 * who do you write like? Shakespeare, Dickens or Austen
 * detect the language of a document
 * is your code more like Guido's or Peter's

Think about how you want your data tokenized! You can write a custom tokenizer and pass it to Bayes at instance creation. The default tokenizer is named Splitter and is like a glorified version of string.split(): it breaks words/tokens on space and other non-alphanumeric characters. This is fine for many apps, particularly apps around texts in western languages. However, if characters like #!$&, or Unicode are important to your application, you may want to provide you own tokenizer. Also, by default the Reverend expects a string for both training and guessing. If you want to pass it an object, you need to write a tokenizer that knows how to get the tokens out of your object.

Here's some code:
{{{
from reverend.thomas import Bayes
guesser = Bayes()
guesser.train('french', 'le la les du un une je il elle de en')
guesser.train('german', 'der die das ein eine')
guesser.train('spanish', 'el uno una las de la en')
guesser.train('english', 'the it she he they them are were to')
guesser.guess('they went to el cantina')
guesser.guess('they were flying planes')
guesser.train('english', 'the rain in spain falls mainly on the plain')
guesser.save('my_guesser.bay')
}}}",',0
242,4,1130389374.80236,glyph,198.49.126.204,"= Divmod, Inc. =

http://divmod.org/trac/chrome/common/divmod.png [wiki:DivmodOrg divmod.org] is a community dedciated to producing high quality, open source Python code.

http://divmod.com/ximages/small_logo.png [wiki:DivmodInc Divmod, Inc.], is the company that substantially funds divmod.org, employs many of the programmers writing code on these projects, and created these projects to support our applications.

Here at Divmod (both of them) we strongly believe in honesty and transparency.  Our code and our tasks are right here for you to see.  We are gearing up to provide several different online services, some of which will be free and some of which will be subscription-based, but all of which will place a premium on user satisfaction.  Here is where you can see how we're doing it and know that we really mean it when we say that we value your privacy and security.

If you're an open source programmer and also a Divmod customer or user, contribute some patches!  If you can make the service better we will include your patches and include them on the live service.
",',0
243,1,1130390291.25934,glyph,198.49.126.204,"Releases of all Divmod software on this page.",',0
244,3,1130390374.58675,glyph,198.49.126.204,"= Divmod Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as PotatoProgramming.

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.

[http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.2.0.tar.gz?format=raw Download the latest release - 0.2.0!]",',0
245,5,1130400743.92368,glyph,198.49.126.204,,,
246,1,1130402476.41033,glyph,198.49.126.204,"= Why use Axiom? =

Because it's great, of course!  More specifically, it's an object-relational database that's ...

== Actually Relational ==

Axiom imposes an ''extremely'' straightforward mapping between tables and classes: 1 to 1.  Your tables get behavior.  They can refer to each other.  If you're familiar with the relational model but are learning OO and want some of its features, Axiom won't explode your brain with a million new concepts.  After learning how a few simple Python expressions work, you can get up and running.

Axiom also respects the relational model and allows you to perform queries (and before 1.0, also updates and deletes) on groups of items at once, without loading them first.  You don't need to resort to writing your own 'for' loops or your own SQL code in order to load a joined query.  No PotatoProgramming.

== Actually Object-Oriented ==

Tables have behavior.  You can have a reference to an arbitrary item.  Items can exist outside the database.  You can mix in code from utility classes to give your items additional methods, without affecting its schema.  Simple database types like strings and integers can be mapped into complex, rich Python values, such as email addresses or a fixed-point decimal class.

== Extensible ==

Axiom's 'Powerup' mechanism allows you enhance a database, or a row within a database, 

== Future-Proof ==

Axiom applications can keep running while they're being upgraded from one schema to another (with a partial dataset available).  Upgrades are handled automatically, and the code for upgrading can be kept separate from your application code.  You can even write upgraders which involve complex relationships between multiple rows.

== Simple ==

Axiom gives you the power of an SQL database without the hassle of generating code from within code.

Working with Axiom databases is easy.  The underlying SQLite engine is pretty simple to use already, but Axiom doesn't add layers of complexity that get in your way.  Compare loading a row and manipulating it with a Python class:

{{{
#!python
from axiom.store import Store
s = Store('store.axiom')
x = s.getItemByID(0)
}}}

{{{
#!python
from pysqlite2 import dbapi2
from mymodule import MyClass
con = dbapi2.connect('store.sqlite')
con.cursor()
con.execute('select * from my_table where oid = 0')
row = con.fetchall()[0]
x = MyClass(row)
}}}

In this case the Axiom example is actually quite a lot shorter!

== Safe ==

Axiom keeps your in-memory objects up to date with what's happening in the database, even when transactions have to be rolled back.  No need to manage connections of your own.  No more forgetting to commit a transaction, or forgetting to roll back in an error handler.

Axiom doesn't expose ANY SQL to the developer.  This means that your site will be completely secure against SQL injection attacks.
",',0
247,2,1130402812.96847,glyph,198.49.126.204,"= Why use Axiom? =

Because it's great, of course!  More specifically, it's an object-relational database that's ...

== Actually Relational ==

Axiom imposes an ''extremely'' straightforward mapping between tables and classes: 1 to 1.  Your tables get behavior.  They can refer to each other.  If you're familiar with the relational model but are learning OO and want some of its features, Axiom won't explode your brain with a million new concepts.  After learning how a few simple Python expressions work, you can get up and running.

Axiom also respects the relational model and allows you to perform queries (and before 1.0, also updates and deletes) on groups of items at once, without loading them first.  You don't need to resort to writing your own 'for' loops or your own SQL code in order to load a joined query.  No PotatoProgramming.

== Actually Object-Oriented ==

Tables have behavior.  You can have a reference to an arbitrary item.  Items can exist outside the database.  You can mix in code from utility classes to give your items additional methods, without affecting its schema.  Simple database types like strings and integers can be mapped into complex, rich Python values, such as email addresses or a fixed-point decimal class.

== Extensible ==

Axiom's 'Powerup' mechanism allows you enhance a database, or ''any row'' within a database, with additional functionality.

== Active ==

Axiom isn't a static database.  It is dynamic, it contains behaviors.

You can, for example, install a scheduler which will run tasks at specific times when the database is open.

== Twisted-friendly ==

The aforementioned scheduler is implemented using Twisted's reactor.  Axiom was explicitly designed for use with events and integrates nicely into a Twisted-based environment. 

== Future-Proof ==

Axiom applications can keep running while they're being upgraded from one schema to another (with a partial dataset available).  Upgrades are handled automatically, and the code for upgrading can be kept separate from your application code.  You can even write upgraders which involve complex relationships between multiple rows.

== Simple ==

Axiom gives you the power of an SQL database without the hassle of generating code from within code.

Working with Axiom databases is easy.  The underlying SQLite engine is pretty simple to use already, but Axiom doesn't add layers of complexity that get in your way.  Compare loading a row and manipulating it with a Python class:

{{{
#!python
from axiom.store import Store
s = Store('store.axiom')
x = s.getItemByID(0)
}}}

{{{
#!python
from pysqlite2 import dbapi2
from mymodule import MyClass
con = dbapi2.connect('store.sqlite')
con.cursor()
con.execute('select * from my_table where oid = 0')
row = con.fetchall()[0]
x = MyClass(row)
}}}

In this case the Axiom example is actually quite a lot shorter!

== Safe ==

Axiom keeps your in-memory objects up to date with what's happening in the database, even when transactions have to be rolled back.  No need to manage connections of your own.  No more forgetting to commit a transaction, or forgetting to roll back in an error handler.

Axiom doesn't expose ANY SQL to the developer.  This means that your site will be completely secure against SQL injection attacks.
",',0
248,5,1130410135.01205,moe,198.49.126.204,"= Divmod, Inc. =

http://divmod.org/trac/chrome/common/divmod.png [wiki:DivmodOrg divmod.org] is a community dedicated to producing high quality, open source Python code.

http://divmod.com/ximages/small_logo.png [wiki:DivmodInc Divmod, Inc.], is the company that substantially funds divmod.org, employs many of the programmers writing code on these projects, and created these projects to support our applications.

Here at Divmod (both of them) we strongly believe in honesty and transparency.  Our code and our tasks are right here for you to see.  We are gearing up to provide several different online services, some of which will be free and some of which will be subscription-based, but all of which will place a premium on user satisfaction.  Here is where you can see how we're doing it and know that we really mean it when we say that we value your privacy and security.

If you're an open source programmer and also a Divmod customer or user, contribute some patches!  If you can make the service better we will include your patches and include them on the live service.
",',0
249,32,1130425956.38234,amir,198.49.126.204,"= Welcome To the Divmod Community =

You are at http://divmod.org/, the offical open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of PythonLanguage open source projects to share with you.

{{{
foo bar baz
}}}

== Infrastructure ==
=== DivmodAxiom ===

An object database implemented on top of SqLite.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]

=== DivmodNevow ===

A web templating framework that provides LivePage, an automatic AJAX toolkit.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]

=== DivmodCombinator ===

A branch-management tool to assist with BranchBasedDevelopment, useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.

=== DivmodEpsilon ===

A Python utilities package, most famous for its ExtimeDotTime class.

=== DivmodMantissa ===

An application server.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]

=== DivmodPyflakes ===

A lint-like tool for quickly checking your Python code for sanity.

=== DivmodReverend ===

Reverend is a general purpose Bayesian classifier, named after Rev. Thomas Bayes.

=== DivmodVertex ===

An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind NetworkAddressTranslators.

== Applications ==
=== ClickChronicle ===

A click-recording application.

You can sign up for the ClickChronicleAlpha ''now''!

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets]

=== DivmodRadical ===

A 3rd-person isometric roleplaying game.

== Ideas ==

DivmodAnvil will one day be a task tracker that replaces trac.  Sorry, trac.

MantissaIsTheDeploymentTarget, the web is not.

Here at divmod we use BranchBasedDevelopment to ensure quality and freshness of our software at all times.

MantissaUserConfigurationAdministration

== Ticket Queries ==

 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&group=component&order=priority Active Tickets By Component]
 * ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Reviews&order=priority Review tickets]

== Old Stuff ==

WhitherAtop

WhitherQuotient


",',0
250,33,1130425989.40338,amir,198.49.126.204,"= Welcome To the Divmod Community =

You are at http://divmod.org/, the offical open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of PythonLanguage open source projects to share with you.

{{{
You can sign up for the ClickChronicleAlpha ''now''!
}}}

== Infrastructure ==
=== DivmodAxiom ===

An object database implemented on top of SqLite.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]

=== DivmodNevow ===

A web templating framework that provides LivePage, an automatic AJAX toolkit.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]

=== DivmodCombinator ===

A branch-management tool to assist with BranchBasedDevelopment, useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.

=== DivmodEpsilon ===

A Python utilities package, most famous for its ExtimeDotTime class.

=== DivmodMantissa ===

An application server.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]

=== DivmodPyflakes ===

A lint-like tool for quickly checking your Python code for sanity.

=== DivmodReverend ===

Reverend is a general purpose Bayesian classifier, named after Rev. Thomas Bayes.

=== DivmodVertex ===

An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind NetworkAddressTranslators.

== Applications ==
=== ClickChronicle ===

A click-recording application.

You can sign up for the ClickChronicleAlpha ''now''!

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets]

=== DivmodRadical ===

A 3rd-person isometric roleplaying game.

== Ideas ==

DivmodAnvil will one day be a task tracker that replaces trac.  Sorry, trac.

MantissaIsTheDeploymentTarget, the web is not.

Here at divmod we use BranchBasedDevelopment to ensure quality and freshness of our software at all times.

MantissaUserConfigurationAdministration

== Ticket Queries ==

 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&group=component&order=priority Active Tickets By Component]
 * ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Reviews&order=priority Review tickets]

== Old Stuff ==

WhitherAtop

WhitherQuotient


",',0
251,34,1130426029.91956,amir,198.49.126.204,"= Welcome To the Divmod Community =

You are at http://divmod.org/, the offical open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of PythonLanguage open source projects to share with you.

== Infrastructure ==
=== DivmodAxiom ===

An object database implemented on top of SqLite.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]

=== DivmodNevow ===

A web templating framework that provides LivePage, an automatic AJAX toolkit.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]

=== DivmodCombinator ===

A branch-management tool to assist with BranchBasedDevelopment, useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.

=== DivmodEpsilon ===

A Python utilities package, most famous for its ExtimeDotTime class.

=== DivmodMantissa ===

An application server.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]

=== DivmodPyflakes ===

A lint-like tool for quickly checking your Python code for sanity.

=== DivmodReverend ===

Reverend is a general purpose Bayesian classifier, named after Rev. Thomas Bayes.

=== DivmodVertex ===

An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind NetworkAddressTranslators.

== Applications ==
=== ClickChronicle ===

A click-recording application.

You can sign up for the ClickChronicleAlpha ''now''!

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets]

=== DivmodRadical ===

A 3rd-person isometric roleplaying game.

== Ideas ==

DivmodAnvil will one day be a task tracker that replaces trac.  Sorry, trac.

MantissaIsTheDeploymentTarget, the web is not.

Here at divmod we use BranchBasedDevelopment to ensure quality and freshness of our software at all times.

MantissaUserConfigurationAdministration

== Ticket Queries ==

 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&group=component&order=priority Active Tickets By Component]
 * ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Reviews&order=priority Review tickets]

== Old Stuff ==

WhitherAtop

WhitherQuotient


",',0
252,35,1130426809.29588,amir,198.49.126.204,"= Welcome To the Divmod Community =

You are at http://divmod.org/, the offical open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of PythonLanguage open source projects to share with you.

== Infrastructure ==
=== DivmodAxiom ===

An object database implemented on top of SqLite.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]

=== DivmodNevow ===

A web templating framework that provides LivePage, an automatic AJAX toolkit.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]

=== DivmodCombinator ===

A branch-management tool to assist with BranchBasedDevelopment, useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.

=== DivmodEpsilon ===

A Python utilities package, most famous for its ExtimeDotTime class.

=== DivmodMantissa ===

An application server.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]

=== DivmodPyflakes ===

A lint-like tool for quickly checking your Python code for sanity.

=== DivmodReverend ===

Reverend is a general purpose Bayesian classifier, named after Rev. Thomas Bayes.

=== DivmodVertex ===

An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind NetworkAddressTranslators.

== Applications ==
=== ClickChronicle ===

A click-recording application.

You can sign up for the ClickChronicleAlpha ''now''!

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets]

=== DivmodRadical ===

A 3rd-person isometric roleplaying game.

=== Third Party Projects ===

Learn about other PeopleUsingDivmod.

== Ideas ==

DivmodAnvil will one day be a task tracker that replaces trac.  Sorry, trac.

MantissaIsTheDeploymentTarget, the web is not.

Here at divmod we use BranchBasedDevelopment to ensure quality and freshness of our software at all times.

MantissaUserConfigurationAdministration

== Ticket Queries ==

 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&group=component&order=priority Active Tickets By Component]
 * ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Reviews&order=priority Review tickets]

== Old Stuff ==

WhitherAtop

WhitherQuotient


",',0
253,1,1130427003.78895,amir,198.49.126.204,"=== People Using Divmod Softeware ===
 * [http://www.superleague.co.uk/ Rugby Super League] uses NevowProject.
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop.",',0
254,2,1130433312.67176,mizzen,198.49.126.204,"=== People Using Divmod Software ===
 * [http://www.superleague.co.uk/ Rugby Super League] uses NevowProject.
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop.
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use NevowProject.
","Testing my new account, fixing spelling and adding another cpushare",0
255,1,1130433621.2285,washort,198.49.126.204,"Page for fiddling with Trac features.

here's a TicketBox!


[[TicketBox(245,217)]]",',0
256,1,1130447191.06803,washort,198.49.126.204,"= Useful Links =

 *[http://divmod.org/Home/Projects/Nevow/ Nevow Project page on divmod.org]
 *[http://nevow.com/ Nevow page]
 *GettingNevow and InstallingNevow
 *[http://nevow.com/Nevow2004Tutorial.html Nevow tutorial]
 *Nevow wiki FrontPage
 *[http://divmod.org/users/roundup.twistd/nevow/ Nevow issue tracker]
 *CalculatorExample
 *[http://pbp.berlios.de/ PBP (MFen's test tool)]
 *svn://svn.twistedmatrix.com/svn/Twisted/branches/new-web for the very very very very extremely brave.
 *NewToNevow - Temporary resting place for a useful guide to Nevow
 *Also try QuickGuide (warning! WIP)
 *[http://aspn.activestate.com/ASPN/Cookbook/Python?author=199559 ASPN recipes by Valentino Volonghi]
 *[http://svn.twistedmatrix.com/cvs/trunk/?root=Payago Payago (mesozoic's lightweight website management system)]
 *[http://wiki.loopysoft.com/moin.cgi/NevowStuff Third party resources]
 *[http://divmod.org/cvs/trunk/doc/?root=Nevow Nevow offcial documentation in svn]
 *[http://divmod.org/users/mg/nevow-api/ Nevow API Documentation (Unoffical)]
 *[http://srid.bsdnerds.org/hacking/nevowdoc/ Nevow Manual from SVN (Unoffical)]
",',0
257,2,1130447260.46895,washort,198.49.126.204,"= Useful Links =

 * [http://divmod.org/Home/Projects/Nevow/ Nevow Project page on divmod.org]
 * [http://nevow.com/ Nevow page]
 * GettingNevow and InstallingNevow
 * [http://nevow.com/Nevow2004Tutorial.html Nevow tutorial]
 * Nevow wiki FrontPage
 * [http://divmod.org/users/roundup.twistd/nevow/ Nevow issue tracker]
 * CalculatorExample
 * [http://pbp.berlios.de/ PBP (MFen's test tool)]
 * svn://svn.twistedmatrix.com/svn/Twisted/branches/new-web for the very very very very extremely brave.
 * NewToNevow - Temporary resting place for a useful guide to Nevow
 * Also try QuickGuide (warning! WIP)
 * [http://aspn.activestate.com/ASPN/Cookbook/Python?author=199559 ASPN recipes by Valentino Volonghi]
 * [http://svn.twistedmatrix.com/cvs/trunk/?root=Payago Payago (mesozoic's lightweight website management system)]
 * [http://wiki.loopysoft.com/moin.cgi/NevowStuff Third party resources]
 * [http://divmod.org/cvs/trunk/doc/?root=Nevow Nevow offcial documentation in svn]
 * [http://divmod.org/users/mg/nevow-api/ Nevow API Documentation (Unoffical)]
 * [http://srid.bsdnerds.org/hacking/nevowdoc/ Nevow Manual from SVN (Unoffical)]
",',0
258,3,1130447371.46343,washort,198.49.126.204,,,
259,1,1130449799.87233,washort,198.49.126.204,"= Future Plans =

== Switch to new Components System ==

Nevow currently uses nevow.compy which supports twisted.python.components. Nevow will be switching to either zope.interface (as Twisted is doing for the upcoming 2.0 release) or use an alternative, simpler implementation that looks like PEP 246 (Object Adaptation).


== Session Management Overhaul ==

Session management in Nevow and twisted.web is OK but not great.

Goals:

  * Create a session server interface.
  * Provide in-memory and file system (and maybe SQL) session server implementations.

It will probably be necessary to review the ISession interface too.

For more details read SessionServer.


== Formless and HTML Form Generation ==

My initial thoughts go something like this ...

Formless can be a great tool for exposing objects and other application interfaces on the web but it does have limitations. Right now, the only real choice is to write the form in HTML and handle all POST, validation etc manually. Yuck!

Goals:

  * Extract/steal formless.webform into a more general purpose nevow.form (?) package with the sole purpose of generating and validating HTML forms.
  * Simplify formless.webform to generate forms using the new nevow.form package.


== Context-specific Adaption ==

Provide PEP 246-like adaption and adapter registration facilities on the context so that instead of doing ISomething(someObj) you do ctx.adapt(someObj, ISomething). That would allow site- or resource- specific adaption to take place; resorting to the normal adaption mechanism if there is nothing in the context's registry.

There are a couple of use cases for this:

  * ''Overide'' standard Nevow/Formless adapters, i.e. change the default HTML renderer for formless Typed subclasses.
  * Allow multiple instances of an application's root resource to be deployed within a single site. If the application makes extensive use of adaption to locate resources and renderers for objects, the ctx.adapt trick will allow the instance to be customised. i.e. the abc root resource's context tree adapts a Foo to IBar using the FooBar adapter; the xyz root resource adapts Foo to IBar using
the XYZFooBar adapter.
",',0
260,1,1130462243.08629,washort,198.49.126.204,"Currently the Divmod SIP stack is being developed in DivmodMantissa. 

Right now it features an [http://zvon.org/tmRFC/RFC3261/Output/ RFC3261] compliant SIP proxy, based on the transport and transaction layers described therein.

Things it is missing that we plan to add, in no particular order:

 * User agent client and server functionality. 
 * Dialog support.
 * an RTP proxy.
 * Third-party call control 
[[TicketBox(232,234, 236)]]",',0
261,5,1130472722.80396,glyph,198.49.126.204,"= What does it mean to 'Merge a Branch Forward'? =

Merging forward is a way to keep old branches fresh and up-to-date.  It consists of this process:

  * Make sure your trunk working copy is clean
  * Make sure all your existing branch changes are checked in
  * Unbranch your existing branch.  eg, for sprocket-212, you would execute:
{{{
chbranch Divmod yourname/sprocket-212
unbranch Divmod
}}}
  * Resolve any conflicts and use 'svn resolved'
  * Create a new branch.  eg:
{{{
mkbranch Divmod yourname/sprocket-212-2
}}}
  * Commit the new branch.
  * Make sure to revert trunk by changing to trunk and issuing:
{{{
svn revert . -R
}}}

Merging forward is a component of [wiki:BranchBasedDevelopment branch based development].",',0
262,3,1130472735.58576,glyph,198.49.126.204,"= Branch Based Development =

Divmod uses branches for all development.  The lifetime of a task looks something like this:

  * A  ticket is created in an IssueTracker
  * For features, a specification is attached to the ticket
  * A branch is created in Subversion.  The branch is named with the convention <descriptive word>-<issue number>[-<branch number>].  For the first branch of any feature, the branch number is omitted.
  * Development occurs on the feature in the branch.
  * When the feature is deemed ready by the developer, it is given to another developer for review. The ticket should be moved to the Reviews component, assigned to the reviewer and the priority set to high.
  * When the reviewer is satisfied, the branch is merged into trunk.

Branch lifetimes should be short.  If trunk moves very far from the branch, the branch should be MergedForward to pick up bug fixes and feature enhancements which might be useful.  Doing this also makes the final merge easier, by keeping conflicts small and bringing them to the developer's attention before they become unmanageable.
",',0
263,4,1130472749.35425,glyph,198.49.126.204,"= Branch Based Development =

Divmod uses branches for all development.  The lifetime of a task looks something like this:

  * A  ticket is created in the issue tracker.
  * For features, a specification is attached to the ticket
  * A branch is created in Subversion.  The branch is named with the convention <descriptive word>-<issue number>[-<branch number>].  For the first branch of any feature, the branch number is omitted.
  * Development occurs on the feature in the branch.
  * When the feature is deemed ready by the developer, it is given to another developer for review. The ticket should be moved to the Reviews component, assigned to the reviewer and the priority set to high.
  * When the reviewer is satisfied, the branch is merged into trunk.

Branch lifetimes should be short.  If trunk moves very far from the branch, the branch should be MergedForward to pick up bug fixes and feature enhancements which might be useful.  Doing this also makes the final merge easier, by keeping conflicts small and bringing them to the developer's attention before they become unmanageable.
",',0
264,2,1130472808.53104,glyph,198.49.126.204,"= Divmod Combinator =

Combinator is a tool that Divmod Python programmers use to manage multiple branches of our software.  It integrates with Subversion.

It can be used to manage any number of branches with any number of projects.  It sets up your Python sys.path to point at the appropriate directories for the set of branches you are currently working on.

It is mainly of interest if you are checking code out of SVN: users of installed versions of Divmod software can probably ignore this project (for now).",',0
265,36,1130473183.00417,glyph,198.49.126.204,"= Welcome To the Divmod Community =

You are at http://divmod.org/, the offical open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of [wiki:PythonLanguage Python] open source projects to share with you.

== Infrastructure ==
=== [wiki:DivmodAxiom Divmod Axiom] ===

[wiki:DivmodAxiom Axiom] is an object database implemented on top of [wiki:SqLite SQLite].

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]

=== [wiki:DivmodNevow Divmod Nevow] ===

[wiki:DivmodNevow Nevow] is a web templating framework that provides LivePage, an automatic AJAX toolkit.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Nevow&order=priority Nevow tickets]

=== [wiki:DivmodCombinator Divmod Combinator] ===

[wiki:DivmodCombinator Combinator] is a branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.

=== [wiki:DivmodEpsilon Divmod Epsilon] ===

[wiki:DivmodEpsilon Epsilon] is a Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.

=== [wiki:DivmodMantissa Divmod Mantissa] ===

[wiki:DivmodMantissa Mantissa] is an extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Mantissa&order=priority Mantissa tickets]

=== [wiki:DivmodPyflakes Divmod Pyflakes] ===

[wiki:DivmodPyflakes Pyflakes] is a lint-like tool for quickly checking your Python code for sanity.

=== [wiki:DivmodReverend Divmod Reverend] ===

[wiki:DivmodReverend Reverend] is a general purpose Bayesian classifier, named after Rev. Thomas Bayes.

=== [wiki:DivmodVertex Divmod Vertex] ===

[wiki:DivmodVertex Vertex] is an implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind NetworkAddressTranslators.

== Applications ==
=== ClickChronicle ===

A click-recording application.

You can sign up for the ClickChronicleAlpha ''now''!

[query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=ClickChronicle&order=priority ClickChronicle tickets]

=== [wiki:DivmodRadical Divmod Radical] ===

[wiki:DivmodRadical Radical] is a web-based, interactive, 3rd-person, isometric roleplaying game.

=== Third Party Projects ===

Learn about [wiki:PeopleUsingDivmod other people using Divmod products].

== Ideas ==

[wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.  Sorry, trac.

[wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.

Here at divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.

MantissaUserConfigurationAdministration

== Ticket Queries ==

 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&group=component&order=priority Active Tickets By Component]
 * ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Reviews&order=priority Review tickets]

== Old Stuff ==

[wiki:WhitherAtop What happened to Atop?]

[wiki:WhitherQuotient What's happening with Quotient?]
",',0
266,1,1130473272.43435,glyph,198.49.126.204,"SQLite is an embedded object database.

You can find a copy at http://sqlite.org/, and Python bindings at http://pysqlite.org/ or http://www.rogerbinns.com/apsw.html

[wiki:DivmodAxiom Axiom] currently uses SQLite exclusively as its backend.",',0
267,2,1130473282.22825,glyph,198.49.126.204,"= SQLite =

SQLite is an embedded object database.

You can find a copy at http://sqlite.org/, and Python bindings at http://pysqlite.org/ or http://www.rogerbinns.com/apsw.html

[wiki:DivmodAxiom Axiom] currently uses SQLite exclusively as its backend.",',0
268,4,1130473304.93663,glyph,198.49.126.204,"= Divmod Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.

[http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.2.0.tar.gz?format=raw Download the latest release - 0.2.0!]",',0
269,13,1130473334.73366,glyph,198.49.126.204,"'''One potato, two potato, three potato, four....'''

= Potato Programming =

Potato programming is the sort of programming that encourages you to write your own 'for' loops and build up / tear down data structures, rather than passing vectors or iterators down through an interface in such a way that would allow a smarter version of that interface to be more efficient.

In other words, this is the PotatoProgramming way to add a file containing lines of numbers:

{{{
#!python
f = file('test.numbers')
accum = 0.
for line in f.readlines():
    accum += float(line)
print accum
}}}

Contrast this with:

{{{
#!python
f = file('test.numbers')
print sum(map(float, f.readlines()))
}}}

This term was coined by R0mlLefkowitz.

More on PotatoProgrammingExplained.",',0
270,2,1130473363.84248,glyph,198.49.126.204,"= Why is potato programming a bad idea?  It seems normal to me. =

Here is an expanded realistic potato/non-potato comparison, reading a list of system users.

Potato:

{{{
#!python
def system_users():
    lines = file('/etc/passwd').readlines()
    for line in lines:
        if len(line[:line.find('#')].strip()):
            fields = line.split(':')
            if int(fields[2]) < 1000:
                yield fields[0]
}}}

''{{{timeit.py}}} result: 100000 loops, best of 3: 187 usec per loop''

Vector:

{{{
#!python
import pwd
import operator
def system_users():
    users = pwd.getpwall()
    users.sort(key=operator.itemgetter(2))
    for user in users:
        if user[2] < 1000:
            yield user[0]
        else:
            return
}}}

''100000 loops, best of 3: 137 usec per loop''

Now, you might say, 'That's not a fair comparison!  The 'VectorProgramming' example is using a library for this while PotatoProgramming is implementing it from scratch!'

The comparison still holds, however:

{{{
#!python
import operator

def my_getpwall():
    lines = file('/etc/passwd').readlines()
    for line in lines:
        uncommline = line[:line.find('#')].strip()
        fields = uncommline.split(':')
        yield fields

def system_users():
    users = list(my_getpwall())
    users.sort(key=operator.itemgetter(2))
    for user in users:
        if user[2] < 1000:
            yield user[0]
        else:
            return
}}}
''10000 loops, best of 3: 168 usec per loop''

In other words, if 'pwd' did not exist, it would be necessary to invent it.  When you optimize your code, you don't want to do it across boundaries which require the caller to make loops; you want the interface to be expressive so that the loops can be optimized within your interface.  For an ''extreme'' version of PP, implement readline yourself with a {{{for c in string: if c == '\n'...}}}

Ideally, you wouldn't even have to write the 'for user in users' loop yourself.  For example, here's an Axiom snippet to do a similar thing implemented potato-style:

{{{
#!python
def axiom_users(s):
    for u in s.query(User):
        if u.uid < 1000:
            yield u.name
}}}

vector style:

{{{
#!python
def axiom_users(s):
    for u in s.query(User, User.uid < 1000):
        yield u.name
}}}

Axiom aims to force as much work down into the optimizeable guts of the library as possible, then use the interface that way, rather than doing additional iteration and testing in application code.
",',0
271,6,1130473427.00502,glyph,198.49.126.204,,,
272,2,1130473999.92896,glyph,198.49.126.204,"= Future Plans =

== Switch to new Components System ==

Nevow currently uses nevow.compy which supports twisted.python.components. Nevow will be switching to either zope.interface (as Twisted did in its 2.0 release) or use an alternative, simpler implementation that looks like PEP 246 (Object Adaptation).


== Session Management Overhaul ==

Session management in Nevow and twisted.web is OK but not great.

Goals:

  * Create a session server interface.
  * Provide in-memory and file system (and maybe SQL) session server implementations.

It will probably be necessary to review the ISession interface too.

For more details read SessionServer.


== Formless and HTML Form Generation ==

My initial thoughts go something like this ...

Formless can be a great tool for exposing objects and other application interfaces on the web but it does have limitations. Right now, the only real choice is to write the form in HTML and handle all POST, validation etc manually. Yuck!

Goals:

  * Extract/steal formless.webform into a more general purpose nevow.form (?) package with the sole purpose of generating and validating HTML forms.
  * Simplify formless.webform to generate forms using the new nevow.form package.


== Context-specific Adaption ==

Provide PEP 246-like adaption and adapter registration facilities on the context so that instead of doing ISomething(someObj) you do ctx.adapt(someObj, ISomething). That would allow site- or resource- specific adaption to take place; resorting to the normal adaption mechanism if there is nothing in the context's registry.

There are a couple of use cases for this:

  * ''Overide'' standard Nevow/Formless adapters, i.e. change the default HTML renderer for formless Typed subclasses.
  * Allow multiple instances of an application's root resource to be deployed within a single site. If the application makes extensive use of adaption to locate resources and renderers for objects, the ctx.adapt trick will allow the instance to be customised. i.e. the abc root resource's context tree adapts a Foo to IBar using the FooBar adapter; the xyz root resource adapts Foo to IBar using
the XYZFooBar adapter.
",',0
273,3,1130480333.81115,washort,198.49.126.204,"=== People Using Divmod Software ===
 * [http://www.superleague.co.uk/ Rugby Super League] uses DivmodNevow.
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop.
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use DivmodNevow.
","linky rename",0
274,7,1130493586.64889,glyph,198.49.126.204,"= Divmod, Inc. =

http://divmod.org/trac/chrome/common/divmod.png Divmod.org is a community dedicated to producing high quality, open source Python code.

http://divmod.com/ximages/anonymous_logo.png [wiki:DivmodInc Divmod, Inc.] is the company that substantially funds divmod.org, employs many of the programmers writing code on these projects, and created these projects to support our applications.

Here at Divmod (both of them) we strongly believe in honesty and transparency.  Our code and our tasks are right here for you to see.  We are gearing up to provide several different online services, some of which will be free and some of which will be subscription-based, but all of which will place a premium on user satisfaction.  Here is where you can see how we're doing it and know that we really mean it when we say that we value your privacy and security.

If you're an open source programmer and also a Divmod customer or user, contribute some patches!  If you can make the service better we will include your patches and include them on the live service.
",',0
275,1,1130624550.35077,mizzen,198.49.126.204,"= Powerups =
A powerup is a type of Axiom plugin. Zero or more powerups (Axiom items) can be registered to another axiom item (as long as it is in the same store) and can be retrieved according to their interface, either by normal adaption of the subject (in which case the highest priority powerup is returned), or as a group (in order of priority) by using the axiom.item.Item.powerupsFor method.

== See Also == 
 * [http://divmod.org/trac/browser/trunk/Axiom/axiom/item.py class axiom.item.Empowered]",created,0
276,1,1130624583.41862,mizzen,198.49.126.204," Powerup::
  A type of Axiom plugin. See [wiki:DivmodAxiom/Powerups Powerups]","added powerup",0
277,2,1130624746.36551,mizzen,198.49.126.204,"= DivmodAxiom : Glossary =
 Powerup::
  A type of Axiom plugin. See [wiki:DivmodAxiom/Powerups Powerups]",',0
278,2,1130624802.0294,mizzen,198.49.126.204,"= DivmodAxiom : Powerups =
A powerup is a type of Axiom plugin. Zero or more powerups (Axiom items) can be registered to another axiom item (as long as it is in the same store) and can be retrieved according to their interface, either by normal adaption of the subject (in which case the highest priority powerup is returned), or as a group (in order of priority) by using the axiom.item.Item.powerupsFor method.

== See Also == 
 * [http://divmod.org/trac/browser/trunk/Axiom/axiom/item.py class axiom.item.Empowered]","added parent link to heading",0
279,5,1130625119.3073,mizzen,198.49.126.204,"= Divmod Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.

[http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.2.0.tar.gz?format=raw Download the latest release - 0.2.0!]

== See Also ==
 * [wiki:DivmodAxiom/Powerups Powerups]
 * [http://moxn.net/~mesozoic/axiom-howto/ Axiom Howto]","See also links",0
280,6,1130625248.67297,mizzen,198.49.126.204,"= Divmod Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.

[http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.2.0.tar.gz?format=raw Download the latest release - 0.2.0!]

== See Also ==
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]
 * [http://moxn.net/~mesozoic/axiom-howto/ Axiom Howto]
 * [wiki:DivmodAxiom/Powerups Powerups]
 * [wiki:DivmodAxiom/Glossary Glossary]","more links",0
281,3,1130625308.9086,mizzen,198.49.126.204,"= DivmodAxiom : Why use Axiom? =

Because it's great, of course!  More specifically, it's an object-relational database that's ...

== Actually Relational ==

Axiom imposes an ''extremely'' straightforward mapping between tables and classes: 1 to 1.  Your tables get behavior.  They can refer to each other.  If you're familiar with the relational model but are learning OO and want some of its features, Axiom won't explode your brain with a million new concepts.  After learning how a few simple Python expressions work, you can get up and running.

Axiom also respects the relational model and allows you to perform queries (and before 1.0, also updates and deletes) on groups of items at once, without loading them first.  You don't need to resort to writing your own 'for' loops or your own SQL code in order to load a joined query.  No PotatoProgramming.

== Actually Object-Oriented ==

Tables have behavior.  You can have a reference to an arbitrary item.  Items can exist outside the database.  You can mix in code from utility classes to give your items additional methods, without affecting its schema.  Simple database types like strings and integers can be mapped into complex, rich Python values, such as email addresses or a fixed-point decimal class.

== Extensible ==

Axiom's 'Powerup' mechanism allows you enhance a database, or ''any row'' within a database, with additional functionality.

== Active ==

Axiom isn't a static database.  It is dynamic, it contains behaviors.

You can, for example, install a scheduler which will run tasks at specific times when the database is open.

== Twisted-friendly ==

The aforementioned scheduler is implemented using Twisted's reactor.  Axiom was explicitly designed for use with events and integrates nicely into a Twisted-based environment. 

== Future-Proof ==

Axiom applications can keep running while they're being upgraded from one schema to another (with a partial dataset available).  Upgrades are handled automatically, and the code for upgrading can be kept separate from your application code.  You can even write upgraders which involve complex relationships between multiple rows.

== Simple ==

Axiom gives you the power of an SQL database without the hassle of generating code from within code.

Working with Axiom databases is easy.  The underlying SQLite engine is pretty simple to use already, but Axiom doesn't add layers of complexity that get in your way.  Compare loading a row and manipulating it with a Python class:

{{{
#!python
from axiom.store import Store
s = Store('store.axiom')
x = s.getItemByID(0)
}}}

{{{
#!python
from pysqlite2 import dbapi2
from mymodule import MyClass
con = dbapi2.connect('store.sqlite')
con.cursor()
con.execute('select * from my_table where oid = 0')
row = con.fetchall()[0]
x = MyClass(row)
}}}

In this case the Axiom example is actually quite a lot shorter!

== Safe ==

Axiom keeps your in-memory objects up to date with what's happening in the database, even when transactions have to be rolled back.  No need to manage connections of your own.  No more forgetting to commit a transaction, or forgetting to roll back in an error handler.

Axiom doesn't expose ANY SQL to the developer.  This means that your site will be completely secure against SQL injection attacks.
","added parent link to heading",0
282,4,1130625519.07601,mizzen,198.49.126.204,"= DivmodAxiom : Why use Axiom? =

Because it's great, of course!  More specifically, it's an object-relational database that's ...

== Actually Relational ==

Axiom imposes an ''extremely'' straightforward mapping between tables and classes: 1 to 1.  Your tables get behavior.  They can refer to each other.  If you're familiar with the relational model but are learning OO and want some of its features, Axiom won't explode your brain with a million new concepts.  After learning how a few simple Python expressions work, you can get up and running.

Axiom also respects the relational model and allows you to perform queries (and before 1.0, also updates and deletes) on groups of items at once, without loading them first.  You don't need to resort to writing your own 'for' loops or your own SQL code in order to load a joined query.  No PotatoProgramming.

== Actually Object-Oriented ==

Tables have behavior.  You can have a reference to an arbitrary item.  Items can exist outside the database.  You can mix in code from utility classes to give your items additional methods, without affecting its schema.  Simple database types like strings and integers can be mapped into complex, rich Python values, such as email addresses or a fixed-point decimal class.

== Extensible ==

Axiom's '[wiki:DivmodAxiom/Powerups Powerup]' mechanism] allows you enhance a database, or ''any row'' within a database, with additional functionality.

== Active ==

Axiom isn't a static database.  It is dynamic, it contains behaviors.

You can, for example, install a scheduler which will run tasks at specific times when the database is open.

== Twisted-friendly ==

The aforementioned scheduler is implemented using Twisted's reactor.  Axiom was explicitly designed for use with events and integrates nicely into a Twisted-based environment. 

== Future-Proof ==

Axiom applications can keep running while they're being upgraded from one schema to another (with a partial dataset available).  Upgrades are handled automatically, and the code for upgrading can be kept separate from your application code.  You can even write upgraders which involve complex relationships between multiple rows.

== Simple ==

Axiom gives you the power of an SQL database without the hassle of generating code from within code.

Working with Axiom databases is easy.  The underlying SQLite engine is pretty simple to use already, but Axiom doesn't add layers of complexity that get in your way.  Compare loading a row and manipulating it with a Python class:

{{{
#!python
from axiom.store import Store
s = Store('store.axiom')
x = s.getItemByID(0)
}}}

{{{
#!python
from pysqlite2 import dbapi2
from mymodule import MyClass
con = dbapi2.connect('store.sqlite')
con.cursor()
con.execute('select * from my_table where oid = 0')
row = con.fetchall()[0]
x = MyClass(row)
}}}

In this case the Axiom example is actually quite a lot shorter!

== Safe ==

Axiom keeps your in-memory objects up to date with what's happening in the database, even when transactions have to be rolled back.  No need to manage connections of your own.  No more forgetting to commit a transaction, or forgetting to roll back in an error handler.

Axiom doesn't expose ANY SQL to the developer.  This means that your site will be completely secure against SQL injection attacks.
","Powerups link",0
283,3,1130628080.2146,mizzen,198.49.126.204,"= DivmodAxiom : Glossary =
 [wiki:DivmodAxiom/Reference#Item Item]::
  An object in an Axiom Store.
 [wiki:DivmodAxiom/Reference#Powerup Powerup]::
  An Axiom Item that acts as a type of Axiom plugin.
 [wiki:DivmodAxiom/Reference#Store Store]::
  A database that Axiom Items can be stored in.
 [wiki:DivmodAxiom/Reference#SubStore SubStore]::
  A Store that also exists as an Item in a parent Store.","Added Item, Store and SubStore + some rearrangement",0
284,1,1130628835.22248,mizzen,198.49.126.204,,,
285,7,1130628926.157,mizzen,198.49.126.204,"= Divmod Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.

[http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.2.0.tar.gz?format=raw Download the latest release - 0.2.0!]

== See Also ==
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]
 * [http://moxn.net/~mesozoic/axiom-howto/ Axiom Howto]
 * [wiki:DivmodAxiom/Reference Reference]
 * [wiki:DivmodAxiom/Glossary Glossary]",',0
286,2,1130630768.1469,mizzen,198.49.126.204,"= DivmodAxiom : Reference =
== Item ==
A class describing an object in an Axiom Store. Your subclass of axiom.item.Item must define the following attributes:
 * typeName: A string uniquely identifying this class schema in the store.
 * schemaVersion: An integer denoting the schema version. See [wiki:DivmodAxiom/Reference#Upgraders].
You will also want to define other attributes and these must be special Axiom class attributes. A selection of standard types are already defined in the [http://divmod.org/trac/browser/trunk/Axiom/axiom/attributes.py axiom.attributes] module.
A simple example:
{{{
class Person(axiom.item.Item):
    typeName = 'Person'
    schemaVersion = 1

    name = attributes.text()
    age = attributes.integer()
    dob = attributes.timestamp()
}}}

 * [http://divmod.org/trac/browser/trunk/Axiom/axiom/item.py class axiom.item.Item]

== Powerup ==
A powerup is a type of Axiom plugin. Zero or more powerups (Axiom items) can be registered to another axiom item (as long as it is in the same store) and can be retrieved according to their interface, either by normal adaption of the subject (in which case the highest priority powerup is returned), or as a group (in order of priority) by using the axiom.item.Item.powerupsFor method.
 * [http://divmod.org/trac/browser/trunk/Axiom/axiom/item.py class axiom.item.Empowered]

== Store ==
A database that Axiom Items can be stored in.
 * [http://divmod.org/trac/browser/trunk/Axiom/axiom/store.py class axiom.store.Store]

== Substore ==
A Store that also exists as an Item in a parent Store.
 * [http://divmod.org/trac/browser/trunk/Axiom/axiom/substore.py class axiom.substore.SubStore]

== Upgraders ==
?","More on Items",0
287,3,1130632372.47072,glyph,198.49.126.204,"= DivmodAxiom : Reference =
== Item ==
A class describing an object in an Axiom Store. Your subclass of axiom.item.Item must define the following attributes:
 * typeName: A string uniquely identifying this class schema in the store.
 * schemaVersion: An integer denoting the schema version. See [wiki:DivmodAxiom/Reference#Upgraders].
You will also want to define other attributes and these must be special Axiom class attributes. A selection of standard types are already defined in the [http://divmod.org/trac/browser/trunk/Axiom/axiom/attributes.py axiom.attributes] module.
A simple example:
{{{
class Person(axiom.item.Item):
    typeName = 'Person'
    schemaVersion = 1

    name = attributes.text()
    dob = attributes.timestamp()
}}}

 * [http://divmod.org/trac/browser/trunk/Axiom/axiom/item.py class axiom.item.Item]

== Powerup ==
A powerup is a type of Axiom plugin. Zero or more powerups (Axiom items) can be registered to another axiom item (as long as it is in the same store) and can be retrieved according to their interface, either by normal adaption of the subject (in which case the highest priority powerup is returned), or as a group (in order of priority) by using the axiom.item.Item.powerupsFor method.
 * [http://divmod.org/trac/browser/trunk/Axiom/axiom/item.py class axiom.item.Empowered]

== Store ==
A database that Axiom Items can be stored in.
 * [http://divmod.org/trac/browser/trunk/Axiom/axiom/store.py class axiom.store.Store]

== Substore ==
A Store that also exists as an Item in a parent Store.
 * [http://divmod.org/trac/browser/trunk/Axiom/axiom/substore.py class axiom.substore.SubStore]

== Upgraders ==
?","Pet peeve - don't ever put 'age' into a database, since it changes over time",0
288,4,1130632463.6505,glyph,198.49.126.204,"= DivmodAxiom : Reference =
== Item ==
A class describing an object in an Axiom Store. Your subclass of axiom.item.Item must define the following attributes:
 * typeName: A string uniquely identifying this class schema in the store.
 * schemaVersion: An integer denoting the schema version. See [wiki:DivmodAxiom/Reference#Upgraders].
You will also want to define other attributes and these must be special Axiom class attributes. A selection of standard types are already defined in the [http://divmod.org/trac/browser/trunk/Axiom/axiom/attributes.py axiom.attributes] module.
A simple example:
{{{
#!python
class Person(axiom.item.Item):
    typeName = 'Person'
    schemaVersion = 1

    name = attributes.text()
    dob = attributes.timestamp()
}}}

 * [http://divmod.org/trac/browser/trunk/Axiom/axiom/item.py class axiom.item.Item]

== Powerup ==
A powerup is a type of Axiom plugin. Zero or more powerups (Axiom items) can be registered to another axiom item (as long as it is in the same store) and can be retrieved according to their interface, either by normal adaption of the subject (in which case the highest priority powerup is returned), or as a group (in order of priority) by using the axiom.item.Item.powerupsFor method.
 * [http://divmod.org/trac/browser/trunk/Axiom/axiom/item.py class axiom.item.Empowered]

== Store ==
A database that Axiom Items can be stored in.
 * [http://divmod.org/trac/browser/trunk/Axiom/axiom/store.py class axiom.store.Store]

== Substore ==
A Store that also exists as an Item in a parent Store.
 * [http://divmod.org/trac/browser/trunk/Axiom/axiom/substore.py class axiom.substore.SubStore]

== Upgraders ==
?","Oh yeah, it's Python code.",0
289,8,1130665026.81692,mizzen,198.49.126.204,"= Divmod Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.

[http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.2.0.tar.gz?format=raw Download the latest release - 0.2.0!]

== See Also ==
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]
 * [wiki:DivmodAxiom/Reference Reference]
 * [wiki:DivmodAxiom/Glossary Glossary]
 * [http://moxn.net/~mesozoic/axiom-howto/ Mesozoic's Axiom Howto]
 * [http://www.livejournal.com/users/jcalderone/12221.html Exarkun's Axiom 0.1 announcement]
 * [http://www.livejournal.com/users/glyf/44772.html Glyph's Axiom 0.2 announcement]","Added two more external links",0
290,9,1130666409.97947,mizzen,198.49.126.204,"= Divmod Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.

[http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.2.0.tar.gz?format=raw Download the latest release - 0.2.0!]

== See Also ==
 * [http://moxn.net/~mesozoic/axiom-howto/ Mesozoic's Axiom Howto]: This is essential reading. A step by step guide to writing your first Axiom application
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Glossary Glossary]
 * [http://www.livejournal.com/users/jcalderone/12221.html Exarkun's Axiom 0.1 announcement]
 * [http://www.livejournal.com/users/glyf/44772.html Glyph's Axiom 0.2 announcement]","moved axiom tutorial link to top of list.",0
291,5,1130678839.91259,mizzen,198.49.126.204,"= DivmodAxiom : Reference =
== [source:trunk/Axiom/axiom/item.py item.Item](store=store.Store, **kw) ==
A class describing an object in an Axiom Store. Your subclass of axiom.item.Item must define the following attributes:
 * typeName: A string uniquely identifying this class schema in the store.
 * schemaVersion: An integer denoting the schema version. See [wiki:DivmodAxiom/Reference#Upgraders].
You will also want to define other attributes and these must be special Axiom class attributes. A selection of standard types are already defined in the [source:trunk/Axiom/axiom/attributes.py axiom.attributes] module.
A simple example:
{{{
#!python
from axiom import item, attributes
from epsilon.extime import Time
class Person(item.Item):
    typeName = 'Person'
    schemaVersion = 1

    name = attributes.text(allowNone=False)
    dob = attributes.timestamp(allowNone=False)

    def ageInYears(self):
        return Time().asDatetime().year-self.dob.asDatetime().year
}}}
=== Limitations ===
 * Axiom Items only support one level of inheritance. You could not for example write a subclass of the Person class above.

== [source:trunk/Axiom/axiom/store.py store.Store]([dbdir=None[, debug=False[, parent=None[, idInParent=None]]]]) ==
A database in which Axiom Items can be stored. An Axiom Store can be instantiated with a dbdir parameter, in which case it will be persisted to the filesystem at the given path. Alternatively, if instantiated without a dbdir parameter, the store will exist inmemory only for the lifetime of the python process.
{{{
#!python
from axiom import store

s = store.Store('/tmp/example.axiom')
s = store.Store() # An inmemory store 
}}}
If debug=True, the store will print out all sql commands as they are issued to the underlying Sqlite database.

=== Add Items to the Store ===
{{{
#!python
from epsilon.extime import Time

p = Person(store=s, name=u'Joe Bloggs', dob=Time.fromISO8601TimeAndDate('1977-05-08'))
}}}
That's all there is to it. The returned item can be treated just like any other python object. Changes made to it are automatically persisted to the store. 
{{{
#!python
>>> p.name
u'Joe Bloggs'
>>> p.ageInYears()
28
>>> p.dob = Time.fromISO8601TimeAndDate('1980-04-14')
>>> p.ageInYears()
25
}}}
If you want to avoid duplicate items you can instead use the findOrCreate method (see below)

=== Retrieve Items from the Store ===
 '''getItemByID'''(storeID[, default=_noItem])::
  Returns the item with the given 'storeID'. If no matching item raises KeyError or 'default' if given. Every item in the store has a unique 'storeID' attribute.
 '''findFirst'''(userItemClass[, **attrs])::
  Returns the first item of class 'userItemClass' or None. The query can be further narrowed by specifying 'attrs', eg 
{{{
#!python
>>> s.findFirst(Person, name=u'Joe Bloggs')
<__main__.Person object at 0xb7cff92c>
}}}
 '''findOrCreate(userItemClass[, **attrs])'''::
  Returns the first item of class 'userItemClass' or creates the item if it doesn't already exist. eg. 
{{{
#!python
>>> s.findOrCreate(Person, name=u'Oliver Twist')
TypeError: attribute [Person.dob = timestamp()] must not be None
}}}
  but remember, that in this case we must give all required attributes
{{{
#!python
>>> s.findOrCreate(Person, name=u'Oliver Twist', dob=Time.fromISO8601TimeAndDate('1800-07-25'))
<__main__.Person object at 0xb782b9bc>
}}}
 '''query(tableClass[, comparison=None[, limit=None[, offset=None[, sort=None[, justCount=False[, sumAttribute=None]]]]]])'''::
  Return generator of items matching class 'tableClass' and 'comparison'. Limited to length 'limit' beyond 'offset'. Sorted by attribute 'sort'. Examples:
{{{
#!python
>>> [x.name for x in s.query(Person)]
[u'Joe Bloggs', u'Oliver Twist']
>>> [x.name for x in s.query(Person, Person.dob < Time.fromISO8601TimeAndDate('1900-01-01'))]
[u'Oliver Twist']
>>> [x.name for x in s.query(Person, sort='ORDER BY dob ASC')]
[u'Oliver Twist', u'Joe Bloggs']
}}}
  XXX: More examples needed
  XXX: What's the problem with dates prior to 1900?

== Substore ==
A Store that also exists as an Item in a parent Store.
 * [source:trunk/Axiom/axiom/substore.py class axiom.substore.SubStore]

== Powerups ==
A powerup is a type of Axiom plugin. Zero or more powerups (Axiom items) can be registered to another axiom item (as long as it is in the same store) and can be retrieved according to their interface, either by normal adaption of the subject (in which case the highest priority powerup is returned), or as a group (in order of priority) by using the axiom.item.Item.powerupsFor method.
 * [source:trunk/Axiom/axiom/item.py class axiom.item.Empowered]

== Upgraders ==
?","more detail, better layout.",0
292,3,1130681818.70737,mizzen,198.49.126.204,"= Moved = 
see DivmodAxiom/Reference","This page was a mistake but I don't have any way to delete it.",0
293,6,1130722942.88775,mizzen,198.49.126.204,"= DivmodAxiom : Reference =
== [source:trunk/Axiom/axiom/item.py item.Item](store=store.Store, **kw) ==
A class describing an object in an Axiom Store. Your subclass of axiom.item.Item must define the following attributes:
 * typeName: A string uniquely identifying this class schema in the store.
 * schemaVersion: An integer denoting the schema version. See [wiki:DivmodAxiom/Reference#Upgraders].
You will also want to define other attributes and these must be special Axiom class attributes. A selection of standard types are already defined in the [source:trunk/Axiom/axiom/attributes.py axiom.attributes] module.
A simple example:
{{{
#!python
from axiom import item, attributes

class ShopProduct(item.Item):
    typeName = 'ShopProduct'
    schemaVersion = 1

    name = attributes.text(allowNone=False)
    price = attributes.integer(allowNone=False)
    stock = attributes.integer(default=0)
    
    def __repr__(self):
        return '<ShopProduct name='%s' price='%d' stock='%d'>' % (self.name, self.price, self.stock)
}}}
=== Limitations ===
 * Axiom Items only support one level of inheritance. You could not for example write a subclass of the ShopProduct class above. This is by design, and you are encouraged to explore object composition and adaption instead.

== [source:trunk/Axiom/axiom/store.py store.Store]([dbdir=None[, debug=False[, parent=None[, idInParent=None]]]]) ==
A database in which Axiom Items can be stored. An Axiom Store can be instantiated with a dbdir parameter, in which case it will be persisted to the filesystem at the given path. Alternatively, if instantiated without a dbdir parameter, the store will exist inmemory only for the lifetime of the python process.
{{{
#!python
from axiom import store

s = store.Store('/tmp/example.axiom')
s = store.Store() # An inmemory store 
}}}
If debug=True, the store will print out all sql commands as they are issued to the underlying Sqlite database.

=== Add Items to the Store ===
{{{
#!python
p = ShopProduct(store=s, name=u'Tea Bags', price=2)
}}}
That's all there is to it. The returned item can be treated just like any other python object. Changes made to it are automatically persisted to the store. 
{{{
#!python
>>> p.name
u'Tea Bags'
>>> p.stock
0
>>> p.stock += 20
>>> p.stock
20
}}}
If you want to avoid duplicate items you can instead use the findOrCreate method (see below)

=== Retrieve Items from the Store ===
 '''getItemByID'''(storeID[, default=_noItem])::
  Returns the item with the given 'storeID'. If no matching item raises KeyError or 'default' if given. Every item in the store has a unique 'storeID' attribute.
 '''findFirst'''(userItemClass[, **attrs])::
  Returns the first item of class 'userItemClass' or None. The query can be further narrowed by specifying 'attrs', eg 
{{{
#!python
>>> s.findFirst(ShopProduct, name=u'Tea Bags')
<ShopProduct name='Tea Bags' price='2' stock='20'>
}}}
 '''findOrCreate(userItemClass[, **attrs])'''::
  Returns the first item of class 'userItemClass' or creates it if it doesn't already exist. eg. 
{{{
#!python
>>> s.findOrCreate(ShopProduct, name=u'Pot Noodle')
TypeError: attribute [ShopProduct.price = integer()] must not be None
}}}
  but we must give all attributes required to create the new item
{{{
#!python
>>> s.findOrCreate(ShopProduct, name=u'Pot Noodle', price=3)
<ShopProduct name='Pot Noodle' price='3' stock='0'>
}}}
 '''query(tableClass[, comparison=None[, limit=None[, offset=None[, sort=None[, justCount=False[, sumAttribute=None]]]]]])'''::
  Return generator of items matching class 'tableClass' and 'comparison'. Limited to length 'limit' beyond 'offset'. Sorted by attribute 'sort'. Examples:
{{{
#!python
>>> 'All products'
>>> [x.name for x in s.query(ShopProduct)]
[u'Tea Bags', u'Pot Noodle']
>>> 'Products in stock'
>>> [x.name for x in s.query(ShopProduct, ShopProduct.stock > 0)]
[u'Tea Bags']
>>> 'Products in stock AND which cost less than 5'
>>> from axiom.attributes import AND, OR
>>> [x.name for x in s.query(ShopProduct, AND(ShopProduct.stock > 0, ShopProduct.price < 5))]
[u'Tea Bags']
}}}
  You get the idea. Try turning on store debugging and you will get an idea of what is going on behind the scenes.
{{{
#!python
>>> s.debug = True
>>> [x.name for x in s.query(ShopProduct, sort=ShopProduct.stock.ascending)]
** SELECT item_ShopProduct_v1 .oid, item_ShopProduct_v1 .* FROM item_ShopProduct_v1 ORDER BY item_ShopProduct_v1.[stock] ASC --
********** COMMIT **********
  lastrow: None
  result: [(4, u'Pot Noodle', 3, 0), (3, u'Tea Bags', 2, 20)]
[u'Pot Noodle', u'Tea Bags']
}}}
  Axiom is also capable of constructing more complex queries involving table joins behind the scenes. For more complete examples see [DivmodAxiom/Examples]

== Substore ==
A Store that also exists as an Item in a parent Store.
 * [source:trunk/Axiom/axiom/substore.py class axiom.substore.SubStore]

== Powerups ==
A powerup is a type of Axiom plugin. Zero or more powerups (Axiom items) can be registered to another axiom item (as long as it is in the same store) and can be retrieved according to their interface, either by normal adaption of the subject (in which case the highest priority powerup is returned), or as a group (in order of priority) by using the axiom.item.Item.powerupsFor method.
 * [source:trunk/Axiom/axiom/item.py class axiom.item.Empowered]

== Upgraders ==
?","More straight forward example without timestamp",0
294,1,1130730550.93939,mizzen,198.49.126.204,"= DivmodAxiom/Examples : Shop =
{{{
#!python
from axiom.attributes import AND, OR
from axiom import item, attributes, sequence
from epsilon.extime import Time

class Person(item.Item):
    '''A person here is assumed to be a purchaser. 
    In a real app though a person might be more generic eg having registered for an enquiries system. 
    Would this be a good use case for powerups, adding the purchaser interface only when the person
    completes a purchase. Or am I confused?
    Eg IPurchaser(person) why not just registerAdaptor(Purchaser, Person, IPurchaser)
    '''
    
    typeName = 'Person'
    schemaVersion = 1

    name = attributes.text(allowNone=False)
    dob = attributes.timestamp(allowNone=False)

    def getProductsOrdered(self):
        # An example of an inner join query
        return self.store.query(
            ShopProduct,
            AND(
                ShopOrder.person == self,
                ShopProductOrdered.order==ShopOrder.storeID,
                ShopProductOrdered.product==ShopProduct.storeID
            )
        )
    
    def getOrders(self):
        return self.store.query(
            ShopOrder,
            ShopOrder.person == self
        )
    
    def __repr__(self):
        return '<Person name='%s' dob='%s'>' % (self.name, self.dob.asISO8601TimeAndDate())

class ShopProduct(item.Item):
    typeName = 'ShopProduct'
    schemaVersion = 1

    name = attributes.text(allowNone=False)
    price = attributes.integer(allowNone=False)
    stock = attributes.integer(default=0)
    
    def __repr__(self):
        return '<ShopProduct name='%s' price='%d' stock='%d'>' % (self.name, self.price, self.stock)

class ShopProductOrdered(item.Item):
    typeName = 'ShopProductOrdered'
    schemaVersion = 1

    order = attributes.reference(allowNone=False)
    product = attributes.reference(allowNone=False)
    quantity = attributes.integer(default=1)

class ShopOrder(item.Item):
    typeName = 'ShopOrder'
    schemaVersion = 1
    
    person = attributes.reference(allowNone=False)
    purchaseDate = attributes.timestamp(allowNone=False)
    
    def addProduct(self, product, quantity=1):
        po = self.store.findOrCreate(
            ShopProductOrdered, 
            order=self,
            product=product)
        po.quantity = quantity
    
    def getProducts(self):
        return self.store.query(ShopProductOrdered, ShopProductOrdered.order == self)
    
    def getTotalPrice(self):
        #XXX: This could be done in one SQL query. Is there a way to issue such a query?
        total = 0
        for p in self.getProducts():
            total += p.product.price*p.quantity
        return total
    
    def __repr__(self):
        return '<ShopOrder owner='%s' purchaseDate='%s' items='%s'>' % (self.owner.name, self.purchaseDate.asISO8601TimeAndDate(), self.items)

def populateStore(s):
    customers = [
        Person(store=s, name=u'Joe Bloggs', dob=Time.fromISO8601TimeAndDate('1977-05-08')),
        Person(store=s, name=u'Jane Doe', dob=Time.fromISO8601TimeAndDate('1959-05-22')),
    ]
    products = [
        ShopProduct(store=s, name=u'Tea Bags', price=2),
        ShopProduct(store=s, name=u'Cornflakes', price=3),
        ShopProduct(store=s, name=u'Lemonade', price=4),
        ShopProduct(store=s, name=u'Peanuts', price=5),
    ]
    
    quantities = [1,2,4]
    
    for c in customers:
        o = ShopOrder(store=s, person=c, purchaseDate=Time())
        o.addProduct(random.choice(products), random.choice(quantities))
        o.addProduct(random.choice(products), random.choice(quantities))
        
if __name__ == '__main__':
    import random
    from axiom import store
    
    s = store.Store(debug=False)
    populateStore(s)
    p = s.findFirst(Person)
    print '%s has ordered the following products since registering:' % p.name
    print [x.name for x in p.getProductsOrdered()]
    print 'A breakdown of %s's orders' % p.name
    print ['Items: %s, Total: %d'%(['%s X %d'%(y.product.name, y.quantity) for y in x.getProducts()], x.getTotalPrice()) for x in p.getOrders()]

}}}
",Created,0
295,1,1130730688.97979,mizzen,198.49.126.204,"= DivmodAxiom : Examples =
 * [wiki:DivmodAxiom/Examples/Shop Shop]: A simple example of how axiom might be used to track stock and orders in a shopping app. (Work in progress)",created,0
296,5,1130732838.98575,exarkun,198.49.126.204,"= DivmodAxiom : Why use Axiom? =

Because it's great, of course!  More specifically, it's an object-relational database that's ...

== Actually Relational ==

Axiom imposes an ''extremely'' straightforward mapping between tables and classes: 1 to 1.  Your tables get behavior.  They can refer to each other.  If you're familiar with the relational model but are learning OO and want some of its features, Axiom won't explode your brain with a million new concepts.  After learning how a few simple Python expressions work, you can get up and running.

Axiom also respects the relational model and allows you to perform queries (and before 1.0, also updates and deletes) on groups of items at once, without loading them first.  You don't need to resort to writing your own 'for' loops or your own SQL code in order to load a joined query.  No PotatoProgramming.

== Actually Object-Oriented ==

Tables have behavior.  You can have a reference to an arbitrary item.  Items can exist outside the database.  You can mix in code from utility classes to give your items additional methods, without affecting its schema.  Simple database types like strings and integers can be mapped into complex, rich Python values, such as email addresses or a fixed-point decimal class.

== Extensible ==

Axiom's '[wiki:DivmodAxiom/Powerups Powerup]' mechanism allows you enhance a database, or ''any row'' within a database, with additional functionality.

== Active ==

Axiom isn't a static database.  It is dynamic, it contains behaviors.

You can, for example, install a scheduler which will run tasks at specific times when the database is open.

== Twisted-friendly ==

The aforementioned scheduler is implemented using Twisted's reactor.  Axiom was explicitly designed for use with events and integrates nicely into a Twisted-based environment. 

== Future-Proof ==

Axiom applications can keep running while they're being upgraded from one schema to another (with a partial dataset available).  Upgrades are handled automatically, and the code for upgrading can be kept separate from your application code.  You can even write upgraders which involve complex relationships between multiple rows.

== Simple ==

Axiom gives you the power of an SQL database without the hassle of generating code from within code.

Working with Axiom databases is easy.  The underlying SQLite engine is pretty simple to use already, but Axiom doesn't add layers of complexity that get in your way.  Compare loading a row and manipulating it with a Python class:

{{{
#!python
from axiom.store import Store
s = Store('store.axiom')
x = s.getItemByID(0)
}}}

{{{
#!python
from pysqlite2 import dbapi2
from mymodule import MyClass
con = dbapi2.connect('store.sqlite')
con.cursor()
con.execute('select * from my_table where oid = 0')
row = con.fetchall()[0]
x = MyClass(row)
}}}

In this case the Axiom example is actually quite a lot shorter!

== Safe ==

Axiom keeps your in-memory objects up to date with what's happening in the database, even when transactions have to be rolled back.  No need to manage connections of your own.  No more forgetting to commit a transaction, or forgetting to roll back in an error handler.

Axiom doesn't expose ANY SQL to the developer.  This means that your site will be completely secure against SQL injection attacks.
","remove stray ]",0
297,6,1130733145.26081,exarkun,198.49.126.204,"= DivmodAxiom : Why use Axiom? =

Because it's great, of course!  More specifically, it's an object-relational database that's ...

== Actually Relational ==

Axiom imposes an ''extremely'' straightforward mapping between tables and classes: 1 to 1.  Your tables get behavior.  They can refer to each other.  If you're familiar with the relational model but are learning OO and want some of its features, Axiom won't explode your brain with a million new concepts.  After learning how a few simple Python expressions work, you can get up and running.

Axiom also respects the relational model and allows you to perform queries (and before 1.0, also updates and deletes) on groups of items at once, without loading them first.  You don't need to resort to writing your own 'for' loops or your own SQL code in order to load a joined query.  No PotatoProgramming.

== Actually Object-Oriented ==

Tables have behavior.  You can have a reference to an arbitrary item.  Items can exist outside the database.  You can mix in code from utility classes to give your items additional methods, without affecting its schema.  Simple database types like strings and integers can be mapped into complex, rich Python values, such as email addresses or a fixed-point decimal class.

== Extensible ==

Axiom's '[wiki:DivmodAxiom/Powerups Powerup]' mechanism allows you enhance a database, or ''any row'' within a database, with additional functionality.

== Active ==

Axiom isn't a static database.  It is dynamic, it contains behaviors.

You can, for example, install a scheduler which will run tasks at specific times when the database is open.

== Twisted-friendly ==

The aforementioned scheduler is implemented using Twisted's reactor.  Axiom was explicitly designed for use with events and integrates nicely into a Twisted-based environment. 

== Future-Proof ==

Axiom applications can keep running while they're being upgraded from one schema to another (with a partial dataset available).  Upgrades are handled automatically, and the code for upgrading can be kept separate from your application code.  You can even write upgraders which involve complex relationships between multiple rows.

== Simple ==

Axiom gives you the power of an SQL database without the hassle of generating code from within code.

Working with Axiom databases is easy.  The underlying SQLite engine is pretty simple to use already, but Axiom doesn't add layers of complexity that get in your way.  Compare loading a row and manipulating it with a Python class:

{{{
#!python
from axiom.store import Store
s = Store('store.axiom')
x = s.getItemByID(0)
}}}

{{{
#!python
from pysqlite2 import dbapi2
from mymodule import MyClass
con = dbapi2.connect('store.sqlite')
cur = con.cursor()
cur.execute('select * from my_table where oid = 0')
row = con.fetchall()[0]
x = MyClass(row)
}}}

In this case the Axiom example is actually quite a lot shorter!

== Safe ==

Axiom keeps your in-memory objects up to date with what's happening in the database, even when transactions have to be rolled back.  No need to manage connections of your own.  No more forgetting to commit a transaction, or forgetting to roll back in an error handler.

Axiom doesn't expose ANY SQL to the developer.  This means that your site will be completely secure against SQL injection attacks.
","execute is a method on a cursor, not on a connection",0
298,4,1130741844.94721,radix,198.49.126.204,"=== People Using Divmod Software ===
 * [http://www.superleague.co.uk/ Rugby Super League] uses DivmodNevow.
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and DivmodNevow.
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use DivmodNevow.
",',0
299,2,1130766362.77921,mizzen,198.49.126.204,"= DivmodAxiom/Examples : Shop =
{{{
#!python
from zope.interface import Interface, implements

from axiom.attributes import AND, OR
from axiom import item, attributes, sequence
from epsilon.extime import Time

class Person(item.Item):
    '''A person here is not specific to the shopping part of the application. 
    It may have been defined elsewhere eg during registration for an enquiries system.
    We can't subclass Person but we can plugin our shop specific attributes and methods using
    the Axiom powerup pattern. 
    '''
    
    typeName = 'Person'
    schemaVersion = 1

    name = attributes.text(allowNone=False)
    dob = attributes.timestamp(allowNone=False)
    
    def __repr__(self):
        return '<Person name='%s' dob='%s'>' % (self.name, self.dob.asISO8601TimeAndDate())

class IShopCustomer(Interface):
    pass

class ShopCustomer(item.Item):
    '''A ShopCustomer is a powerup for person.'''
    implements(IShopCustomer)
    
    typeName = 'ShopCustomer'
    schemaVersion = 1
    
    installedOn = attributes.reference()
    
    def installOn(self, other):
        assert self.installedOn is None, 'cannot install ShopCustomer on more than one person'
        self.installedOn = other
        other.powerUp(self, IShopCustomer)
    
    '''Customer specific methods'''
    def getProductsOrdered(self):
        # An example of an inner join query
        return self.store.query(
            ShopProduct,
            AND(
                ShopOrder.customer == self.installedOn,
                ShopProductOrdered.order==ShopOrder.storeID,
                ShopProductOrdered.product==ShopProduct.storeID
            )
        )
    
    def getOrders(self):
        return self.store.query(
            ShopOrder,
            ShopOrder.customer == self.installedOn
        )

class ShopProduct(item.Item):
    typeName = 'ShopProduct'
    schemaVersion = 1

    name = attributes.text(allowNone=False)
    price = attributes.integer(allowNone=False)
    stock = attributes.integer(default=0)
    
    def __repr__(self):
        return '<ShopProduct name='%s' price='%d' stock='%d'>' % (self.name, self.price, self.stock)

class ShopProductOrdered(item.Item):
    '''Links a product and quantity of product to an order.'''
    typeName = 'ShopProductOrdered'
    schemaVersion = 1

    order = attributes.reference(allowNone=False)
    product = attributes.reference(allowNone=False)
    quantity = attributes.integer(default=1)

class ShopOrder(item.Item):
    typeName = 'ShopOrder'
    schemaVersion = 1
    
    customer = attributes.reference(allowNone=False)
    purchaseDate = attributes.timestamp(allowNone=False)
    
    def __init__(self, **kw):
        IShopCustomer(kw['customer'])
        super(ShopOrder, self).__init__(**kw)
        
    def addProduct(self, product, quantity=1):
        po = self.store.findOrCreate(
            ShopProductOrdered, 
            order=self,
            product=product)
        po.quantity = quantity
    
    def getProducts(self):
        return self.store.query(ShopProductOrdered, ShopProductOrdered.order == self)
    
    def getTotalPrice(self):
        #XXX: Axiom will issue multiple queries here, but it could be done in one SQL query. Is there a way to issue such a query?
        total = 0
        for p in self.getProducts():
            total += p.product.price*p.quantity
        return total
    
    def __repr__(self):
        return '<ShopOrder customer='%s' purchaseDate='%s' items='%s'>' % (self.customer.name, self.purchaseDate.asISO8601TimeAndDate(), self.items)

def populateStore(s):
    
    customerDetails = [
        (u'Joe Bloggs', '1977-05-08'),
        (u'Jane Doe', '1959-05-22'),
    ]
    
    for name, dob in customerDetails:
        p = Person(store=s, name=name, dob=Time.fromISO8601TimeAndDate(dob))
        
        # This is where we powerup the Person with additional ShopCustomer bits
        ShopCustomer(store=s).installOn(p)

    products = [
        ShopProduct(store=s, name=u'Tea Bags', price=2),
        ShopProduct(store=s, name=u'Cornflakes', price=3),
        ShopProduct(store=s, name=u'Lemonade', price=4),
        ShopProduct(store=s, name=u'Peanuts', price=5),
    ]
    
    quantities = [1,2,4]
    
    for c in s.query(ShopCustomer):
        o = ShopOrder(store=s, customer=c.installedOn, purchaseDate=Time())
        o.addProduct(random.choice(products), random.choice(quantities))
        o.addProduct(random.choice(products), random.choice(quantities))
        
if __name__ == '__main__':
    import random
    from axiom import store
    
    s = store.Store(debug=False)
    populateStore(s)
    
    '''We only want a Person who is also a ShopCustomer. 
    We therefore search for ShopCustomer but grab a reference to the person within (installedOn)
    When you want the person reference to behave like a shopcustomer 
    adapt it to the IShopCustomer interface'''
    p = s.findFirst(ShopCustomer).installedOn
    
    print [x.name for x in IShopCustomer(p).getProductsOrdered()]
    print '%s has ordered the following products since registering:' % p.name
    
    print 'A breakdown of %s's orders' % p.name
    print ['Items: %s, Total: %d'%(['%s X %d'%(y.product.name, y.quantity) for y in x.getProducts()], x.getTotalPrice()) for x in IShopCustomer(p).getOrders()]
}}}
","Updated to demonstrate powerups (I think)",0
300,10,1130804604.54304,oubiwann,198.49.126.204,"= Divmod Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.

[http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.2.0.tar.gz?format=raw Download the latest release - 0.2.0!] (Requires Epsilon)

== See Also ==
 * [http://moxn.net/~mesozoic/axiom-howto/ Mesozoic's Axiom Howto]: This is essential reading. A step by step guide to writing your first Axiom application
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Glossary Glossary]
 * [http://www.livejournal.com/users/jcalderone/12221.html Exarkun's Axiom 0.1 announcement]
 * [http://www.livejournal.com/users/glyf/44772.html Glyph's Axiom 0.2 announcement]",',0
301,7,1130814879.93374,mizzen,198.49.126.204,,,
302,11,1130815008.8551,mizzen,198.49.126.204,"= Divmod Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.

[http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.2.0.tar.gz?format=raw Download the latest release - 0.2.0!] (Requires Epsilon)

== See Also ==
 * [http://moxn.net/~mesozoic/axiom-howto/ Mesozoic's Axiom Howto]: This is essential reading. A step by step guide to writing your first Axiom application
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [http://www.livejournal.com/users/jcalderone/12221.html Exarkun's Axiom 0.1 announcement]
 * [http://www.livejournal.com/users/glyf/44772.html Glyph's Axiom 0.2 announcement]","removed glossary added examples link",0
303,2,1130925221.54671,mizzen,198.49.126.204,"= DivmodAxiom : Examples =
 * [source:trunk/Axiom/axiom/examples Axiom's builtin examples]
 * [wiki:DivmodAxiom/Examples/Shop Very Simple Shop]: An example of how axiom might be used to track stock and orders in a shopping app. (Work in progress, demonstrates one aspect of the powerup mechanism)","Added the axiom examples first",0
304,12,1130928883.44566,mizzen,198.49.126.204,"= Divmod Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.

[http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.2.0.tar.gz?format=raw Download the latest release - 0.2.0!] (Requires Epsilon)

== See Also ==
 * [http://moxn.net/~mesozoic/axiom-howto/ Mesozoic's Axiom Howto]: This is essential reading. A step by step guide to writing your first Axiom application
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [http://www.livejournal.com/users/jcalderone/12221.html Exarkun's Axiom 0.1 announcement]
 * [http://www.livejournal.com/users/glyf/44772.html Glyph's Axiom 0.2 announcement]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]","Added axiom tickets link",0
305,2,1130929848.67119,mizzen,198.49.126.204,"= Welcome To the Divmod Community =

You are at http://divmod.org/, the offical open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of [wiki:PythonLanguage Python] open source projects to share with you.

== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind NetworkAddressTranslators.

== Applications ==
 '''ClickChronicle'''::
  A click-recording application. You can sign up for the ClickChronicleAlpha ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric roleplaying game.
== Third Party Projects ==
Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.  Sorry, trac.
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
== Ticket Queries ==
 * [report:7 My Tickets]
 * [query:?status=new&status=assigned&status=reopened&group=component&order=priority Active Tickets By Component]
 * ([query:?status=new&status=assigned&status=reopened&group=milestone&component=ClickChronicle&order=priority grouped by milestone])
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Reviews&order=priority Review tickets]

== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]","Experimental tidy up of the front page",0
306,3,1130931448.91151,mizzen,198.49.126.204,,,
307,13,1130931814.94875,mizzen,198.49.126.204,"= [wiki:WikiStart Divmod] Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.

[http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.2.0.tar.gz?format=raw Download the latest release - 0.2.0!] (Requires Epsilon)

== See Also ==
 * [http://moxn.net/~mesozoic/axiom-howto/ Mesozoic's Axiom Howto]: This is essential reading. A step by step guide to writing your first Axiom application
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [http://www.livejournal.com/users/jcalderone/12221.html Exarkun's Axiom 0.1 announcement]
 * [http://www.livejournal.com/users/glyf/44772.html Glyph's Axiom 0.2 announcement]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]","added link to parent",0
308,4,1130931928.30192,mizzen,198.49.126.204,,,
309,6,1130940502.56245,mizzen,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow is a web templating framework and AJAX application server.
It is comprised of Formless, Stan, and LivePage.
Divmod uses it in MantissaProject for the web user-interface layer.
== Download ==
 * Stable: [http://divmod.org/static/projects/nevow/Nevow-0.5.0.tar.gz Latest release - 0.5.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Documentation ==
 * [source:trunk/Nevow/doc/txt]
 * [http://divmod.org/users/exarkun/nevow-doc/]
 * [http://divmod.org/users/exarkun/nevow-api/]
== Examples ==
 * [source:trunk/Nevow/examples]
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Members of the Nevow developer community can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://ulaluma.com/pyx/ fzZzy]

","tidied up with links to docs and examples",0
310,7,1130940637.49713,mizzen,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow is a web templating framework and AJAX application server.
It is comprised of Formless, Stan, and LivePage.
Divmod uses it in MantissaProject for the web user-interface layer.
== Download ==
 * Stable: [http://divmod.org/static/projects/nevow/Nevow-0.5.0.tar.gz Latest release - 0.5.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Documentation ==
 * [source:trunk/Nevow/doc/txt]
 * [http://divmod.org/users/exarkun/nevow-doc/]
 * [http://divmod.org/users/exarkun/nevow-api/]
== Examples ==
 * [source:trunk/Nevow/examples]
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://ulaluma.com/pyx/ fzZzy]

","members of the nevow developer community? what the hell am i on about",0
311,8,1130941740.73815,mizzen,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow (pronounced nou-veau) is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.co.uk/search?q=xmlhttprequest XmlHttpRequest].

 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Download ==
 * Stable: [http://divmod.org/static/projects/nevow/Nevow-0.5.0.tar.gz Latest release - 0.5.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Documentation ==
 * [source:trunk/Nevow/doc/txt]
 * [http://divmod.org/users/exarkun/nevow-doc/]
 * [http://divmod.org/users/exarkun/nevow-api/]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland

== Examples ==
 * [source:trunk/Nevow/examples]
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://ulaluma.com/pyx/ fzZzy]","added content from nevow.com and added some more links",0
312,5,1130941997.97991,mizzen,198.49.126.204,,,
313,9,1130943734.2159,mizzen,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow (pronounced nou-veau) is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.co.uk/search?q=xmlhttprequest XmlHttpRequest].

 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Download ==
 * Stable: [http://divmod.org/static/projects/nevow/Nevow-0.5.0.tar.gz Latest release - 0.5.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Documentation ==
 * [source:trunk/Nevow/doc/txt]
 * [http://divmod.org/users/exarkun/nevow-doc/]
 * [http://divmod.org/users/exarkun/nevow-api/]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
== Examples ==
 * [source:trunk/Nevow/examples]
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://ulaluma.com/pyx/ fzZzy]","Added components link",0
314,10,1130945051.02421,mizzen,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow (pronounced nou-veau) is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.co.uk/search?q=xmlhttprequest XmlHttpRequest].

 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Download ==
 * Stable: [http://divmod.org/static/projects/nevow/Nevow-0.5.0.tar.gz Latest release - 0.5.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
== Examples ==
 * [source:trunk/Nevow/examples Nevow Examples]: If you have installed Nevow, one of the first things you should do is run the Nevow examples. 
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://ulaluma.com/pyx/ fzZzy]","removed the duplicate docs link",0
315,6,1130945363.94569,mizzen,198.49.126.204,,,
316,11,1130946558.41089,mizzen,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow (pronounced nou-veau) is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.co.uk/search?q=xmlhttprequest XmlHttpRequest].

 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Download ==
 * Stable: [http://divmod.org/static/projects/nevow/Nevow-0.5.0.tar.gz Latest release - 0.5.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
== Examples ==
 * [source:trunk/Nevow/examples Nevow Examples]: If you have installed Nevow, one of the first things you should do is run the Nevow examples. 
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://ulaluma.com/pyx/ fzZzy]

== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","Added related projects section",0
317,37,1130946951.37291,amir,198.49.126.204,,,
318,38,1130947151.82122,amir,198.49.126.204,,,
319,39,1130948816.73638,amir,198.49.126.204,"= Welcome To the Divmod Community =
You are at http://divmod.org/, the offical open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of [wiki:PythonLanguage Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
=== Help and Support ===
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc: 
== Divmod Inc Applications ==
 '''[wiki:ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleAlpha ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric roleplaying game.
=== Projects Planned ===
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.  Sorry, trac.
== Third Party Projects ==
Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]",',0
320,5,1130948847.23905,Brendon,198.49.126.204,"=== People Using Divmod Software ===
 * [http://www.superleague.co.uk/ Rugby Super League] uses DivmodNevow.
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and DivmodNevow.
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use DivmodNevow.

 * [http://www.hess.com.tw/en/ Hess Educational Organization] use DivmodNevow and DivmodMantissa.
 * [http://www.organizedflirting.com/ Organized Flirting] use DivmodMantissa and DivmodAxiom.",Usage!,0
321,6,1130967980.56183,amir,198.49.126.204,"=== People Using Divmod Software ===
 * [http://www.superleague.co.uk/ Rugby Super League] uses DivmodNevow.
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and DivmodNevow.
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use DivmodNevow.

 * [http://www.hess.com.tw/en/ Hess Educational Organization] use DivmodNevow and DivmodMantissa.
 * [http://www.organizedflirting.com/ Organized Flirting] use DivmodMantissa and DivmodAxiom.
 * [http://jotlive.com/ JotSpot Live] use Nevow and LivePage.",',0
322,7,1130968135.56036,amir,198.49.126.204,"=== People Using Divmod Software ===
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].

 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/ Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa]and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow]and LivePage.",',0
323,8,1130968145.66322,amir,198.49.126.204,"=== People Using Divmod Software ===
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/ Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa]and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow]and LivePage.",',0
324,9,1130968168.51333,amir,198.49.126.204,"=== People Using Divmod Software ===
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/ Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.",',0
325,40,1130968970.95922,amir,198.49.126.204,"= Welcome To the Divmod Community =
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of [wiki:PythonLanguage Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
=== Help and Support ===
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc:
== Divmod Inc Applications ==
 '''[wiki:ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleAlpha ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric roleplaying game.
=== Projects Planned ===
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.  Sorry, trac.
== Third Party Projects ==
Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]","fix typo",0
326,1,1130973199.23557,glyph,198.49.126.204,"= Divmod Xapwrap =

Enhancements to the Python bindings for the [http://www.xapian.org Xapian] full-text indexing library.

While Xapian comes with bindings, they are hard to work with, and being SWIG'd, a literal translation of a C++ API.  Xapwrap simplifies working with Xapian databases in Python.

This is implemented as a second layer of wrapping, so Xapian's bindings are still required.

Divmod uses Xapian (and Xapwrap) for of our products' full-text indexing needs.",',0
327,14,1130981820.98847,glyph,198.49.126.204,"= [wiki:WikiStart Divmod] Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.

[http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.3.0.tar.gz?format=raw Download the latest release - 0.3.0!] (Requires [wiki:DivmodEpsilon Epsilon])

== See Also ==
 * [http://moxn.net/~mesozoic/axiom-howto/ Mesozoic's Axiom Howto]: This is essential reading. A step by step guide to writing your first Axiom application
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [http://www.livejournal.com/users/jcalderone/12221.html Exarkun's Axiom 0.1 announcement]
 * [http://www.livejournal.com/users/glyf/44772.html Glyph's Axiom 0.2 announcement]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]",',0
328,3,1130981897.71607,glyph,198.49.126.204,"= Epsilon =
is a small utility package; it depends on tools too recent for Twisted (like datetime in python2.4) but performs generic enough functions that it can be used in projects that don't want to share Divmod's other projects' large footprint.

Currently it includes a powerful date/time formatting and import/export class (ExtimeDotTime), for exchanging date and time information between all Python's various ways to interpret objects as times or time deltas, and some tools for managing concurrent asynchronous processes within Twisted.

[http://divmod.org/trac/attachment/wiki/SoftwareReleases/Epsilon-0.3.0.tar.gz?format=raw Get the most recent release - 0.3.0!]",',0
329,12,1130982075.32109,glyph,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow (pronounced nou-veau) is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].

== Download ==
 * Stable: [http://divmod.org/trac/wiki/SoftwareReleases/Nevow-0.6.0.tar.gz?format=raw Latest release - 0.6.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
== Examples ==
 * [source:trunk/Nevow/examples Nevow Examples]: If you have installed Nevow, one of the first things you should do is run the Nevow examples. 
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://ulaluma.com/pyx/ fzZzy]

== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.",',0
330,13,1130982164.98981,glyph,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow (pronounced nou-veau) is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.6.0.tar.gz?format=raw Latest release - 0.6.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
== Examples ==
 * [source:trunk/Nevow/examples Nevow Examples]: If you have installed Nevow, one of the first things you should do is run the Nevow examples. 
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://ulaluma.com/pyx/ fzZzy]

== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.",',0
331,2,1130982270.60241,glyph,198.49.126.204,"= Divmod Xapwrap =

Enhancements to the Python bindings for the [http://www.xapian.org Xapian] full-text indexing library.

While Xapian comes with bindings, they are hard to work with, and being SWIG'd, a literal translation of a C++ API.  Xapwrap simplifies working with Xapian databases in Python.

This is implemented as a second layer of wrapping, so Xapian's bindings are still required.

Divmod uses Xapian (and Xapwrap) for of our products' full-text indexing needs.

[http://divmod.org/trac/attachment/wiki/SoftwareReleases/Xapwrap-0.3.1.tar.gz?format=raw Get the most recent release - 0.3.1!]",',0
332,2,1130982306.30251,glyph,198.49.126.204,"= Divmod Mantissa =

Mantissa is an application server.

It provides integration between the AxiomProject object database, and the TwistedFramework, as well as web user-interface utilities.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicleAlpha), and if you want to write something that hooks into our network, Mantissa is how you do it.

[http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.3.0.tar.gz?format=raw Get the most recent release - 0.3.0!]",',0
333,4,1130982375.84431,glyph,198.49.126.204,"= ClickChronicle =

Is the first publicly-released Divmod application.  It consists of a DivmodMantissa server and a FirefoxExtension that communicate in order to record web pages you visit and index their content for easy searching.  See ClickChronicleAlpha for signup information.

ClickChronicle also uses DivmodXapwrap and makes extensive use of LivePage.

You can [http://clickchronicle.com try it online], or [http://divmod.org/trac/attachment/wiki/SoftwareReleases/ClickChronicle-0.1.0.tar.gz?format=raw download the most recently released code - 0.1.0!]",',0
334,5,1130982402.04876,glyph,198.49.126.204,"= ClickChronicle =

Is the first publicly-released Divmod application.  It consists of a DivmodMantissa server and a Firefox™ extension that communicate in order to record web pages you visit and index their content for easy searching.  See ClickChronicleAlpha for signup information.

ClickChronicle also uses DivmodXapwrap and makes extensive use of LivePage.

You can [http://clickchronicle.com try it online], or [http://divmod.org/trac/attachment/wiki/SoftwareReleases/ClickChronicle-0.1.0.tar.gz?format=raw download the most recently released code - 0.1.0!]",',0
335,4,1130995473.96664,glyph,198.49.126.204,"= Epsilon =
is a small utility package; it depends on tools too recent for Twisted (like datetime in python2.4) but performs generic enough functions that it can be used in projects that don't want to share Divmod's other projects' large footprint.

Currently it includes a powerful date/time formatting and import/export class (ExtimeDotTime), for exchanging date and time information between all Python's various ways to interpret objects as times or time deltas, and some tools for managing concurrent asynchronous processes within Twisted.

[http://divmod.org/trac/attachment/wiki/SoftwareReleases/Epsilon-0.3.1.tar.gz?format=raw Get the most recent release - 0.3.1!]",',0
336,5,1131034038.47499,mizzen,198.49.126.204,"= [wiki:WikiStart Divmod] : Epsilon =
A small utility package that depends on tools too recent for Twisted (like datetime in python2.4) but performs generic enough functions that it can be used in projects that don't want to share Divmod's other projects' large footprint.

Currently it includes a powerful date/time formatting and import/export class (ExtimeDotTime), for exchanging date and time information between all Python's various ways to interpret objects as times or time deltas, and some tools for managing concurrent asynchronous processes within Twisted.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Epsilon-0.3.1.tar.gz?format=raw Get the most recent release - 0.3.1!]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Epsilon Epsilon","Added a parent Divmod link, a Download heading and svn link",0
337,15,1131034340.58288,mizzen,198.49.126.204,"= [wiki:WikiStart Divmod] : Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.3.0.tar.gz?format=raw Download the latest release - 0.3.0!] (Requires [wiki:DivmodEpsilon Epsilon]) [http://www.livejournal.com/users/glyf/45332.html Release announcement]
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [http://moxn.net/~mesozoic/axiom-howto/ Mesozoic's Axiom Howto]: This is essential reading. A step by step guide to writing your first Axiom application
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [http://www.livejournal.com/users/jcalderone/12221.html Exarkun's Axiom 0.1 announcement]
 * [http://www.livejournal.com/users/glyf/44772.html Glyph's Axiom 0.2 announcement]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]","Added heading separator, Download heading, svn link and announcement blog link",0
338,16,1131034412.48486,mizzen,198.49.126.204,,,
339,3,1131034553.6395,mizzen,198.49.126.204,"= [wiki:WikiStart Divmod] : Combinator =

Combinator is a tool that Divmod Python programmers use to manage multiple branches of our software.  It integrates with Subversion.

It can be used to manage any number of branches with any number of projects.  It sets up your Python sys.path to point at the appropriate directories for the set of branches you are currently working on.

It is mainly of interest if you are checking code out of SVN: users of installed versions of Divmod software can probably ignore this project (for now).

== Download ==
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Combinator Combinator","Added download heading and link",0
340,6,1131034794.53367,mizzen,198.49.126.204,"= [wiki:WikiStart Divmod] : Epsilon =
A small utility package that depends on tools too recent for Twisted (like datetime in python2.4) but performs generic enough functions that it can be used in projects that don't want to share Divmod's other projects' large footprint.

Currently it includes a powerful date/time formatting and import/export class (ExtimeDotTime), for exchanging date and time information between all Python's various ways to interpret objects as times or time deltas, and some tools for managing concurrent asynchronous processes within Twisted.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Epsilon-0.3.1.tar.gz?format=raw Get the most recent release - 0.3.1!] ([http://www.livejournal.com/users/glyf/45135.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Epsilon Epsilon","Added release announcement",0
341,41,1131034933.88091,amir,198.49.126.204,"= Welcome To the Divmod Community =
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of [wiki:PythonLanguage Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
=== Help and Support ===
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc:
== Divmod Inc Applications ==
 '''[wiki:ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleAlpha ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric roleplaying game.
=== Projects Planned ===
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.  Sorry, trac.
== Third Party Projects ==
Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]",',0
342,3,1131035008.90192,mizzen,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantiss",,
343,2,1131035449.13397,mizzen,198.49.126.204,"= [wiki:WikiStart Divmod] : !PyFlakes =
is a Lint-like tool for Python, like [http://pychecker.sourceforge.net PyChecker].  It is focused on identifying common errors quickly without executing Python code.

Its primary advantage over [http://pychecker.sourceforge.net PyChecker] is that it is ''fast''.  You don't have to sit around for minutes waiting for the checker to run; it runs on most large projects in only a few seconds.

== Exits ==
 * [http://www.freshmeat.net/projects/pyflakes Pyflakes on freshmeat]
 * [http://www.swik.net/pyflakes Pyflakes on swik]

== Download ==
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Pyflakes Pyflakes","parent link and svn download link",0
344,5,1131035651.73679,mizzen,198.49.126.204,"= [wiki:WikiStart Divmod] : Reverend =
Reverend is a general purpose Bayesian classifier, named after Rev. Thomas Bayes. Use the Reverend to quickly add Bayesian smarts to your app. To use it in your own application, you either subclass Bayes or pass it a tokenizing function. Bayesian fun has never been so quick and easy. Many thanks for [http://christophe.delord.free.fr/ Christophe Delord] for his well written PopF. [http://magix.fri.uni-lj.si/orange/ Orange] also looks good. If you are looking for a spam filter take a look at SpamBayes and POPFile.

The Reverend package requires Python 2.3 or later. [http://www.advogato.org/person/leonardr/ Leonard Richardson] has back-ported Reverend for use with Python 1.5.2. You can find his version [http://newsbruiser.tigris.org/source/browse/newsbruiser/nb/lib/reverend/ here].

Some fun stuff is starting to pop up that uses the Reverend: http://jrhicks.net/reverend and [http://newsbruiser.tigris.org/ Newsbruiser].

[http://matt.blogs.it/ Matt Mower] has ported Reverend to Ruby and named it [http://rubyforge.org/projects/bishop/ Bishop].

Stuff you can do with the Reverend:
 * classify RSS stories
 * classify recipes by cuisine
 * who do you write like? Shakespeare, Dickens or Austen
 * detect the language of a document
 * is your code more like Guido's or Peter's

Think about how you want your data tokenized! You can write a custom tokenizer and pass it to Bayes at instance creation. The default tokenizer is named Splitter and is like a glorified version of string.split(): it breaks words/tokens on space and other non-alphanumeric characters. This is fine for many apps, particularly apps around texts in western languages. However, if characters like #!$&, or Unicode are important to your application, you may want to provide you own tokenizer. Also, by default the Reverend expects a string for both training and guessing. If you want to pass it an object, you need to write a tokenizer that knows how to get the tokens out of your object.

Here's some code:
{{{
from reverend.thomas import Bayes
guesser = Bayes()
guesser.train('french', 'le la les du un une je il elle de en')
guesser.train('german', 'der die das ein eine')
guesser.train('spanish', 'el uno una las de la en')
guesser.train('english', 'the it she he they them are were to')
guesser.guess('they went to el cantina')
guesser.guess('they were flying planes')
guesser.train('english', 'the rain in spain falls mainly on the plain')
guesser.save('my_guesser.bay')
}}}

== Download ==
 * Trunk: svn co http://divmod.org/trac/browser/trunk/Reverend Reverend","parent link and svn download link",0
345,2,1131035741.5971,mizzen,198.49.126.204,"= [wiki:WikiStart Divmod] : Vertex =
Divmod's implementation of [wiki:QuotientToQuotient Q2Q].

== Exits ==
 * [http://divmod.org/projects/vertex Divmod project page for Vertex]
 * [http://www.swik.net/vertex Vertex on swik]

== Download ==
 * svn co http://divmod.org/trac/browser/trunk/Vertex Vertex","parent link and svn download link",0
346,3,1131035793.41021,mizzen,198.49.126.204,"= [wiki:WikiStart Divmod] : Vertex =
Divmod's implementation of [wiki:QuotientToQuotient Q2Q].

== Exits ==
 * [http://divmod.org/projects/vertex Divmod project page for Vertex]
 * [http://www.swik.net/vertex Vertex on swik]

== Download ==
 * Trunk: svn co http://divmod.org/trac/browser/trunk/Vertex Vertex","correct svn link format",0
347,14,1131035916.81867,mizzen,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow (pronounced nou-veau) is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.6.0.tar.gz?format=raw Latest release - 0.6.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
== Examples ==
 * [source:trunk/Nevow/examples Nevow Examples]: If you have installed Nevow, one of the first things you should do is run the Nevow examples. 
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://ulaluma.com/pyx/ fzZzy]

== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","Added Mantissa to related projects",0
348,3,1131049263.08323,tekNico,198.49.126.204,,,
349,10,1131050292.38731,amir,198.49.126.204,"=== People Using Divmod Software ===
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/ Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.",',0
350,42,1131050383.53168,amir,198.49.126.204,"= Welcome To the Divmod Community =
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of [wiki:PythonLanguage Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
=== Help and Support ===
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc:
== Divmod Inc Applications ==
 '''[wiki:ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleAlpha ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric roleplaying game.
=== Projects Planned ===
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.  Sorry, trac.
== Divmod Users ==
Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]",',0
351,43,1131050455.51079,amir,198.49.126.204,,,
352,1,1131051136.34764,amir,198.49.126.204,"The Mantissa NEAT stack consists of:
 * Nevow
 * Epsilon
 * Axiom
 * Twisted",',0
353,1,1131051146.07528,amir,198.49.126.204,"The META stack is a complete application server that uses 
 * Mantissa
 * Epsilon
 * Twisted
 * Axiom
 * Nevow",',0
354,2,1131051158.33241,amir,198.49.126.204,"The META stack is a complete application server that uses 
 * Mantissa
 * Epsilon
 * Twisted
 * Axiom",',0
355,44,1131051702.55046,amir,198.49.126.204,"= Welcome To the Divmod Community =
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of [wiki:PythonLanguage Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
=== Help and Support ===
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc:
== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleAlpha ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric roleplaying game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]",',0
356,45,1131051943.67212,amir,198.49.126.204,"= Welcome to the Divmod Community =
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of [wiki:PythonLanguage Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
=== Help and Support ===
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc:
== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleAlpha ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric roleplaying game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]",',0
357,8,1131052223.49165,amir,198.49.126.204,"= Divmod, Inc. =

http://divmod.org/trac/chrome/common/divmod.png Divmod.org is a community dedicated to producing high quality, open source Python code.

http://divmod.com/ximages/anonymous_logo.png [wiki:DivmodInc Divmod, Inc.] is the company that substantially funds divmod.org, employs many of the programmers writing code on these projects, and created these projects to support our applications.

Here at Divmod (both of them) we strongly believe in honesty and transparency.  Our code and our tasks are right here for you to see.  We are gearing up to provide several different online services, some of which will be free and some of which will be subscription-based, but all of which will place a premium on user satisfaction.  Here is where you can see how we're doing it and know that we really mean it when we say that we value your privacy and security.

If you're an open source programmer and also a Divmod customer or user, contribute some patches!  If you can make the service better we will include your patches and include them on the live service.

Our team:
 * Amir Bakhtiar, irc: amiramir, [http://www.livejournal.com/users/amiramir blog]
 * Glyph Lefkowitz, irc: glyph, [http://www.livejournal.com/users/glyf blog]
 * JP Calderone, irc: exarkun, [http://www.livejournal.com/users/jcalderone blog]
 * Allen Short, irc: dash
 * Moe Aboulkheir, irc: washort

Alumni:
 * Donovan Preston, irc: fzZzy, [http://ulaluma.com/pyx/ blog]
 * Mike Salib, irc: msalib
 * Mark Wittner
 * Jonathan Simms",',0
358,1,1131058135.18044,amir,198.49.126.204," * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&component=Reviews&order=priority Reviews]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyphs&order=priority glyphs's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]",',0
359,46,1131058255.80138,amir,198.49.126.204,"= Welcome to the Divmod Community =
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of [wiki:PythonLanguage Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
=== Help and Support ===
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * UsefulQueries
== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleAlpha ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric roleplaying game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
","Add UsefulQueries to Help section",0
360,2,1131058340.60022,amir,198.49.126.204," * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&component=Reviews&order=priority Reviews]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]",',0
361,1,1131103396.38965,mizzen,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodCombinator Combinator] : Quick Start =
 0. Checkout the Divmod trunk branch using svn
{{{
#!sh
richard@vito:~/workspace/Divmod$ svn co http://divmod.org/svn/Divmod/trunk
<snip>
A    trunk/Nevow/examples/image_uploader/imagination.tac
A    trunk/Nevow/examples/image_uploader/imagination.py
A    trunk/Nevow/examples/image_uploader/images.py
Checked out revision 2889.
}}}
 0. Check that the Combinator environment generator script is working:
{{{
#!sh
richard@vito:~/workspace/Divmod$ python trunk/Combinator/environment.py
export PATH='/home/richard/workspace/Divmod/trunk/Combinator/bin:/bin:/usr/bin:/usr/bin/X11:/usr/games:/usr/local/bin'
export PYTHONPATH='/home/richard/workspace/Divmod/trunk/Combinator'
}}}
 0. Add it to your .bashrc file:
{{{
#!sh
richard@vito:~/workspace/Divmod$ echo 'eval `python ${HOME}/workspace/Divmod/trunk/Combinator/environment.py`' >> ~/.bashrc
richard@vito:~/workspace/Divmod$ tail -n1 ~/.bashrc
eval `python ${HOME}/workspace/Divmod/trunk/Combinator/environment.py`
richard@vito:~/workspace/Divmod$ source ~/.bashrc
richard@vito:~/workspace/Divmod$ echo $PYTHONPATH
/home/richard/workspace/Divmod/trunk/Combinator
richard@vito:~/workspace/Divmod$ echo $PATH
/home/richard/workspace/Divmod/trunk/Combinator/bin:/bin:/usr/bin:/usr/bin/X11:/usr/games:/usr/local/bin
}}}
 0. If you want to work with Divmod trunk add it to the Combinator paths:
{{{
#!sh
richard@vito:~$ chbranch Divmod trunk
richard@vito:~$ source .bashrc
richard@vito:~$ echo $PATH
/home/richard/workspace/Divmod/trunk/Axiom/bin:/home/richard/workspace/Divmod/trunk/Combinator/bin:/home/richard/workspace/Divmod/trunk/Nevow/bin:/home/richard/workspace/Divmod/trunk/Pyflakes/bin:/home/richard/workspace/Divmod/trunk/Vertex/bin:/bin:/usr/bin:/usr/bin/X11:/usr/games:/usr/local/bin
}}}
{{{
#!python
richard@vito:~$ python -c 'import sys; print sys.path'
['', '/home/richard/.local/lib/python2.3/site-packages', '/home/richard/workspace/Divmod/trunk', '/home/richard/workspace/Divmod/trunk/Combinator', '/usr/lib/python23.zip', '/usr/lib/python2.3', '/usr/lib/python2.3/plat-linux2', '/usr/lib/python2.3/lib-tk', '/usr/lib/python2.3/lib-dynload', '/usr/local/lib/python2.3/site-packages', '/usr/lib/python2.3/site-packages', '/home/richard/workspace/Divmod/trunk/Axiom', '/home/richard/workspace/Divmod/trunk/Mantissa', '/home/richard/workspace/Divmod/trunk/Vertex', '/home/richard/workspace/Divmod/trunk/Radical', '/home/richard/workspace/Divmod/trunk/Epsilon', '/home/richard/workspace/Divmod/trunk/ClickChronicle', '/home/richard/workspace/Divmod/trunk/Pyflakes', '/home/richard/workspace/Divmod/trunk/Quotient', '/home/richard/workspace/Divmod/trunk/Nevow', '/home/richard/workspace/Divmod/trunk/Xapwrap', '/home/richard/.local/lib/python2.3/site-packages']
}}}
 0. Alternatively you may want to quickly try out another branch eg 
{{{
#!sh
richard@vito:~$ chbranch Divmod tdb-139 http://divmod.org/svn/Divmod/branches/tdb-139
<snip>
C: U    Nevow/nevow/__init__.py
C: U    Nevow/setupcommon.py
C: Updated to revision 2889.
richard@vito:~$ source .bashrc
richard@vito:~$ echo $PATH
/home/richard/workspace/Divmod/branches/tdb-139/Axiom/bin:/home/richard/workspace/Divmod/branches/tdb-139/Nevow/bin:/home/richard/workspace/Divmod/branches/tdb-139/Pyflakes/bin:/home/richard/workspace/Divmod/branches/tdb-139/Vertex/bin:/home/richard/workspace/Divmod/trunk/Combinator/bin:/bin:/home/richard/workspace/Divmod/trunk/Axiom/bin:/home/richard/workspace/Divmod/trunk/Nevow/bin:/home/richard/workspace/Divmod/trunk/Pyflakes/bin:/home/richard/workspace/Divmod/trunk/Vertex/bin:/usr/bin:/usr/bin/X11:/usr/games:/usr/local/bin
}}}
{{{
#!python
richard@vito:~$ python -c 'import sys; print sys.path'
['', '/home/richard/.local/lib/python2.3/site-packages', '/home/richard/workspace/Divmod/branches/tdb-139', '/home/richard/workspace/Divmod/trunk/Combinator', '/usr/lib/python23.zip', '/usr/lib/python2.3', '/usr/lib/python2.3/plat-linux2', '/usr/lib/python2.3/lib-tk', '/usr/lib/python2.3/lib-dynload', '/usr/local/lib/python2.3/site-packages', '/usr/lib/python2.3/site-packages', '/home/richard/workspace/Divmod/branches/tdb-139/Axiom', '/home/richard/workspace/Divmod/branches/tdb-139/Mantissa', '/home/richard/workspace/Divmod/branches/tdb-139/Vertex', '/home/richard/workspace/Divmod/branches/tdb-139/Radical', '/home/richard/workspace/Divmod/branches/tdb-139/Epsilon', '/home/richard/workspace/Divmod/branches/tdb-139/ClickChronicle', '/home/richard/workspace/Divmod/branches/tdb-139/Pyflakes', '/home/richard/workspace/Divmod/branches/tdb-139/Quotient', '/home/richard/workspace/Divmod/branches/tdb-139/Nevow', '/home/richard/workspace/Divmod/branches/tdb-139/Xapwrap', '/home/richard/.local/lib/python2.3/site-packages']
}}}
 0. Finally it is easy to switch back
{{{
#!sh
richard@vito:~$ chbranch Divmod trunk && source .bashrc
}}}","created, but not linked",0
362,7,1131107271.27067,mizzen,198.49.126.204,"= The Sandbox =

This is just a page to practice and learn WikiFormatting. 

Go ahead, edit it freely.","reset the sandbox",0
363,8,1131109634.14093,mizzen,198.49.126.204,"= Getting Started With Mantissa =
Here I will describe how to write a simple Mantissa app.
== Get Mantissa and Dependencies ==
 * Install Zope Interfaces and Twisted if you have not already done so.
 * Setup Mantissa - You don't need to *install* the Divmod infrastructure you just need to make sure that all the modules are on your python path. The simplest way to set everything up for development is to use Combinator, which will download everything and setup your PATH and PYTHONPATH. See [wiki:DivmodCombinator/Examples/QuickStart Combinator Quickstart] then switch to the trunk branch.
 * Test - If you have set everything up correctly you should now be able to run the following commands and see similar output
{{{
#!sh
richard@lazar:/tmp$ axiomatic -d test.axiom mantissa
Password:
Confirm:
richard@lazar:/tmp$ axiomatic -d test.axiom start -n
2005/11/04 12:59 GMT [-] Log opened.
2005/11/04 12:59 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/04 12:59 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/04 12:59 GMT [-] xmantissa.website.AxiomSite starting on 8080
2005/11/04 12:59 GMT [-] Starting factory <xmantissa.website.AxiomSite instance at 0xb6f75e2c>
}}}
 Now visit http://localhost:8080/","Trying to learn Mantissa by writing this tutorial.",0
364,9,1131114235.47385,amir,198.49.126.204,"= Divmod, Inc. =

http://divmod.org/trac/chrome/common/divmod.png Divmod.org is a community dedicated to producing high quality, open source Python code.

http://divmod.com/ximages/anonymous_logo.png [wiki:DivmodInc Divmod, Inc.] is the company that substantially funds divmod.org, employs many of the programmers writing code on these projects, and created these projects to support our applications.

Here at Divmod (both of them) we strongly believe in honesty and transparency.  Our code and our tasks are right here for you to see.  We are gearing up to provide several different online services, some of which will be free and some of which will be subscription-based, but all of which will place a premium on user satisfaction.  Here is where you can see how we're doing it and know that we really mean it when we say that we value your privacy and security.

If you're an open source programmer and also a Divmod customer or user, contribute some patches!  If you can make the service better we will include your patches and include them on the live service.

Our team:
 * Amir Bakhtiar, irc: amiramir, [http://www.livejournal.com/users/amiramir blog]
 * Glyph Lefkowitz, irc: glyph, [http://www.livejournal.com/users/glyf blog]
 * JP Calderone, irc: exarkun, [http://www.livejournal.com/users/jcalderone blog]
 * Allen Short, irc: dash
 * Moe Aboulkheir, irc: moea

Alumni:
 * Donovan Preston, irc: fzZzy, [http://ulaluma.com/pyx/ blog]
 * Mike Salib, irc: msalib
 * Mark Wittner
 * Jonathan Simms",',0
365,6,1131128669.62614,moe,198.49.126.204,"=== 4 November 2005 ===
 * Remove reporting of repeated visits to same urls on the front page
 * Add paging summary to click browser
 
=== 26 October 2005 ===
 * Page loading speedups
 * Behind the scenes indexing goodness

=== 25 October 2005 II ===
 * Added new preferences system under 'My Account'.
 * UI tweaks.

=== 25 October 2005 ===
 * Ability to view clickchronicle.com home page and recent clicks when logged in.
 * Added a preference to stop clicks being anonymously shared on clickchronilce.com front page.",',0
366,9,1131136932.37438,mizzen,198.49.126.204,"= Getting Started With Mantissa =
Here I will describe how to write a simple Mantissa app.
== Get Mantissa and Dependencies ==
 * Install Zope Interfaces and Twisted if you have not already done so.
 * Setup Mantissa - You don't need to *install* the Divmod infrastructure you just need to make sure that all the modules are on your python path. The simplest way to set everything up for development is to use Combinator, which will download everything and setup your PATH and PYTHONPATH. See [wiki:DivmodCombinator/Examples/QuickStart Combinator Quickstart] then switch to the trunk branch.
 * Test - If you have set everything up correctly you should now be able to run the following commands and see similar output
{{{
#!sh
richard@lazar:/tmp$ axiomatic -d test.axiom mantissa
Password:
Confirm:
richard@lazar:/tmp$ axiomatic -d test.axiom start -n
2005/11/04 12:59 GMT [-] Log opened.
2005/11/04 12:59 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/04 12:59 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/04 12:59 GMT [-] xmantissa.website.AxiomSite starting on 8080
2005/11/04 12:59 GMT [-] Starting factory <xmantissa.website.AxiomSite instance at 0xb6f75e2c>
}}}
 Now visit http://localhost:8080/
== Create Project Structure ==
 * ./KBase/kbase
 * ./KBase/axiom/plugins/kb.axiomaticcmd.py
 * ./KBase/xmantissa/plugins/kb.theme.py
== Axiomatic Application Commander == 
Before we can start writing our app, we need a way of installing it into an axiom database, so first lets look at the axiomatic command plugin. 
 * [http://twistedmatrix.com/projects/core/documentation/howto/options.html usage.Options]: Might be worth reading before continuing
 ","getting my head round axiomatic",0
367,10,1131155531.00447,mizzen,198.49.126.204,"= Getting Started With Mantissa =
Here I will describe how to write a simple Mantissa app.
== Get Mantissa and Dependencies ==
 * Install Zope Interfaces and Twisted if you have not already done so.
 * Setup Mantissa - You don't need to *install* the Divmod infrastructure you just need to make sure that all the modules are on your python path. The simplest way to set everything up for development is to use Combinator, which will download everything and setup your PATH and PYTHONPATH. See [wiki:DivmodCombinator/Examples/QuickStart Combinator Quickstart] then switch to the trunk branch.
 * Test - If you have set everything up correctly you should now be able to run the following commands and see similar output
{{{
#!sh
richard@lazar:/tmp$ axiomatic -d test.axiom mantissa
Password:
Confirm:
richard@lazar:/tmp$ axiomatic -d test.axiom start -n
2005/11/04 12:59 GMT [-] Log opened.
2005/11/04 12:59 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/04 12:59 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/04 12:59 GMT [-] xmantissa.website.AxiomSite starting on 8080
2005/11/04 12:59 GMT [-] Starting factory <xmantissa.website.AxiomSite instance at 0xb6f75e2c>
}}}
 Now visit http://localhost:8080/
== Create Project Structure ==
 * ./KBase/kbase
 * ./KBase/axiom/plugins/kb.axiomaticcmd.py
 * ./KBase/xmantissa/plugins/kb.theme.py
== Axiomatic Application Commander == 
Before we can start writing our app, we need a way of installing it into an axiom database, so first lets look at the axiomatic command plugin. 
 * [http://twistedmatrix.com/projects/core/documentation/howto/options.html usage.Options]: Might be worth reading before continuing
 * [http://deadbeefbabe.org/paste/2040 A skeleton axiomatic command for installing an INavigableElement]",',0
368,47,1131223670.9189,exarkun,198.49.126.204,"= Welcome to the Divmod Community =
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of [wiki:PythonLanguage Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
=== Help and Support ===
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * UsefulQueries
== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleAlpha ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric roleplaying game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
",',0
369,7,1131231738.18461,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Epsilon =
A small utility package that depends on tools too recent for Twisted (like datetime in python2.4) but performs generic enough functions that it can be used in projects that don't want to share Divmod's other projects' large footprint.

Currently it includes a powerful date/time formatting and import/export class (ExtimeDotTime), for exchanging date and time information between all Python's various ways to interpret objects as times or time deltas, and some tools for managing concurrent asynchronous processes within Twisted.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Epsilon-0.3.2.tar.gz?format=raw Get the most recent release - 0.3.2!] ([http://www.livejournal.com/users/glyf/45135.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Epsilon Epsilon",',0
370,4,1131231753.0387,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the AxiomProject object database, and the TwistedFramework, as well as web user-interface utilities.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicleAlpha), and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.3.1.tar.gz?format=raw Get the most recent release - 0.3.1!] ([http://www.livejournal.com/users/glyf/45801.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa",',0
371,6,1131231767.40967,exarkun,198.49.126.204,"= ClickChronicle =

Is the first publicly-released Divmod application.  It consists of a DivmodMantissa server and a Firefox™ extension that communicate in order to record web pages you visit and index their content for easy searching.  See ClickChronicleAlpha for signup information.

ClickChronicle also uses DivmodXapwrap and makes extensive use of LivePage.

You can [http://clickchronicle.com try it online], or [http://divmod.org/trac/attachment/wiki/SoftwareReleases/ClickChronicle-0.2.0.tar.gz?format=raw download the most recently released code - 0.2.0!]",',0
372,7,1131385357.02697,amir,198.49.126.204,"= ClickChronicle =

Is the first publicly-released Divmod application.  It consists of a DivmodMantissa server and a Firefox™ extension that communicate in order to record web pages you visit and index their content for easy searching.  See ClickChronicleAlpha for signup information.

ClickChronicle also uses DivmodXapwrap and makes extensive use of LivePage.

You can [http://clickchronicle.com try it online], or [http://divmod.org/trac/attachment/wiki/SoftwareReleases/ClickChronicle-0.2.0.tar.gz?format=raw download the most recently released code - 0.2.0!]

= Testing =

ClickChronicleTestScript",',0
373,1,1131386336.59498,amir,198.49.126.204,"Using a backup from cc.com

= New User =
 * Signup
   * Enter invalid address (error)
   * Enter existing email address (error)
   * Enter new address (ok)
   * Check email (ok)
   * Enter password
     * Enter mismatched password (error)
     * Enter matching password (ok)
     * Redirected to My Clicks

 * Click Recording
   * Point extension at test server
   * Record clicks (make sure to visit a few pages in one domain for testing blocking in subsequent phase)
   * Ensure clicks show up in my clicks
   * Ensure clicks show up on front page
   * Ensure click counter on front page increment
   * Visit the same page more than once
   * Ensure that the click is only recorded once
   * Ensure timestamp is updated (reload page and see it change in sort order)
   * Click count on front page should increment

 * Search
   * Search for a word and phrase on one of the pages visited in the click recording phase
   * Ensure search results include visited page

 * Click actions
   * Delete
     * Click delete
     * Click should be delete and feeback string should appear
   * Bookmark
     * Click bookmark icon
     * Feedback string should appear
     * Bookmark icon should go grey
     * Click on bookmarks in left nav and ensure that click appears in bookmarks
   * Block a domain
     * Click block icon
     * Feedback string should appear
     * All visits from that site should be deleted
     * Visit the site and ensure the click does not get recorded
   * Info
     * Click on info
     * Info box should appear
     * Click on info
     * Inof box shoudl disappear

 * My Account/Prefs
   * Change items per page and check expected result
   * Set 'Share Clicks Anonymously' to 'No'
   * Record clicks and ensure they do not show up on the front page
   * Counter should increment on front page
   * Change password
   * Provide incorrect current password (error)

 * Logout/Login
   * Sign out of the sytem
   * Sign back in
   * Redirected to my clicks

= Existing User =
 * Sign in to existing account
 * Page through clicks (first/last/forward/back)
 * Test search",',0
374,2,1131386419.07511,amir,198.49.126.204,"Using a backup from cc.com

= New User =
 * Signup
   * Enter invalid address (error)
   * Enter existing email address (error)
   * Enter new address (ok)
   * Check email (ok)
   * Enter password
     * Enter mismatched password (error)
     * Enter matching password (ok)
     * Redirected to My Clicks

 * Click Recording
   * Point extension at test server
   * Record clicks (make sure to visit a few pages in one domain for testing blocking in subsequent phase)
   * Ensure clicks show up in my clicks
   * Ensure clicks show up on front page
   * Ensure click counter on front page increment
   * Visit the same page more than once
   * Ensure that the click is only recorded once
   * Ensure timestamp is updated (reload page and see it change in sort order)
   * Click count on front page should increment

 * Search
   * Search for a word and phrase on one of the pages visited in the click recording phase
   * Ensure search results include visited page

 * Click actions
   * Delete
     * Click delete
     * Click should be delete and feedback string should appear
   * Bookmark
     * Click bookmark icon
     * Feedback string should appear
     * Bookmark icon should go gray
     * Click on bookmarks in left nav and ensure that click appears in bookmarks
   * Block a domain
     * Click block icon
     * Feedback string should appear
     * All visits from that site should be deleted
     * Visit the site and ensure the click does not get recorded
   * Info
     * Click on info
     * Info box should appear
     * Click on info
     * Info box should disappear

 * My Account/Prefs
   * Change items per page and check expected result
   * Set 'Share Clicks Anonymously' to 'No'
   * Record clicks and ensure they do not show up on the front page
   * Counter should increment on front page
   * Change password
   * Provide incorrect current password (error)

 * Logout/Login
   * Sign out of the system
   * Sign back in
   * Redirected to my clicks

= Existing User =
 * Sign in to existing account
 * Page through clicks (first/last/forward/back)
 * Test search",',0
375,48,1131556644.43714,amir,198.49.126.204,"= Welcome to the Divmod Community =
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of [wiki:PythonLanguage Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
=== Help and Support ===
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * UsefulQueries
== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleAlpha ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric roleplaying game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
",',0
376,1,1131556674.35283,amir,198.49.126.204,"A voice over IP application server.",',0
377,1,1131556808.80144,amir,198.49.126.204,"=== Shtoom ===

Vercotti: (Michael Palin) Well, I had been running a successful escort agency - high class, no really, high class girls... we didn't have any of that. That was right out. And I decided. (phone rings on desk) Excuse me. (he answers it) Hello... no, not now... shtoom... shtoom... right... yes we'll have the watch ready for you at midnight... the watch... the Chinese watch... yes, right oh, bye bye... Mother.
-- Ethel the Frog


Shtoom is a open-source, cross-platform VoIP softphone, implemented in Python. As well as the basic phone, the package also includes a number of other applications -

    * shtoomphone - the end-user phone
    * doug - a framework for writing server-side voip applications.

There's a number of applications implemented using doug that ship with shtoom.

    * shtam - a simple answering machine/voicemail application
    * shmessage - an announcement server
    * shtoomcu - a simple conferencing server

Shtoom works on Windows, Linux/Unix and Mac OS X. The phone has a number of user interfaces - Qt/KDE, Gtk/GNOME, wxWidgets, Cocoa (OS X), Tk and a command line.

The phone has audio support on Linux using OSS or ALSA, on OS X using native CoreAudio, and on all other platforms using the PortAudio library. A native sound drivers for Windows has been implemented as part of Pythonwin, and needs to be hooked up.

Shtoom requires Python 2.3 or later, and Twisted 1.3 or later.

= Availability =

Shtoom 0.2 is the last 'release'. It's very old now, and a new release should be soon. Really. You can still get 0.2 from the Sourceforge Files page.

You really want to be using the current version, available via subversion. You can fetch the code from svn://divmod.org/svn/Shtoom/trunk/shtoom.

A 0.3 release is not too far in the future. This includes a vast number of new features over the last (0.2 release) including:

    * Greatly improved NAT/firewall traversal, using either STUN or Universal Plug'n'Play (UPnP)
    * Address book support
    * Native ALSA audio support
    * Speex codec support
    * Native OS X user interface and audio
    * DTMF detection and generation
    * Doug, the shtoom application framework
    * Outbound proxy support
    * A wxWidgets user interface
    * Completely rewritten Gnome and Qt user interfaces
    * A large amount of refactoring to make the code more sane

= Participate =

There's a #shtoom channel on irc.freenode.net, and a mailing list for shtoom - shtoom@python.org. The mailing list is quite low volume.

= Release history =

    * Release 0.3
      Real Soon Now.
    * Release 0.2
      22nd March 2004

      Registration. Much more of SIP is supported. Preferences GUI. Lots of other stuff.
      Tested against FWD, Divmod Quotient, and a host of other clients (including kphone, linphone and xten)
    * Release 0.1
      1st November 2003

      First release. Very basic call functionality, but this release really isn't usable. If you must have this, it's available from this project's Sourceforge Files page.

= License =

Shtoom is (C) Copyright 2004 Anthony Baxter, and is made available under the GNU LGPL.
",',0
378,2,1131556838.05758,amir,198.49.126.204,"=== Shtoom ===

 Vercotti: (Michael Palin) Well, I had been running a successful escort agency - high class, no really, high class girls... we didn't have any of that. That was right out. And I decided. (phone rings on desk) Excuse me. (he answers it) Hello... no, not now... shtoom... shtoom... right... yes we'll have the watch ready for you at midnight... the watch... the Chinese watch... yes, right oh, bye bye... Mother.
-- Ethel the Frog


Shtoom is a open-source, cross-platform VoIP softphone, implemented in Python. As well as the basic phone, the package also includes a number of other applications -

    * shtoomphone - the end-user phone
    * doug - a framework for writing server-side voip applications.

There's a number of applications implemented using doug that ship with shtoom.

    * shtam - a simple answering machine/voicemail application
    * shmessage - an announcement server
    * shtoomcu - a simple conferencing server

Shtoom works on Windows, Linux/Unix and Mac OS X. The phone has a number of user interfaces - Qt/KDE, Gtk/GNOME, wxWidgets, Cocoa (OS X), Tk and a command line.

The phone has audio support on Linux using OSS or ALSA, on OS X using native CoreAudio, and on all other platforms using the PortAudio library. A native sound drivers for Windows has been implemented as part of Pythonwin, and needs to be hooked up.

Shtoom requires Python 2.3 or later, and Twisted 1.3 or later.

= Availability =

Shtoom 0.2 is the last 'release'. It's very old now, and a new release should be soon. Really. You can still get 0.2 from the Sourceforge Files page.

You really want to be using the current version, available via subversion. You can fetch the code from svn://divmod.org/svn/Shtoom/trunk/shtoom.

A 0.3 release is not too far in the future. This includes a vast number of new features over the last (0.2 release) including:

    * Greatly improved NAT/firewall traversal, using either STUN or Universal Plug'n'Play (UPnP)
    * Address book support
    * Native ALSA audio support
    * Speex codec support
    * Native OS X user interface and audio
    * DTMF detection and generation
    * Doug, the shtoom application framework
    * Outbound proxy support
    * A wxWidgets user interface
    * Completely rewritten Gnome and Qt user interfaces
    * A large amount of refactoring to make the code more sane

= Participate =

There's a #shtoom channel on irc.freenode.net, and a mailing list for shtoom - shtoom@python.org. The mailing list is quite low volume.

= Release history =

    * Release 0.3
      Real Soon Now.
    * Release 0.2
      22nd March 2004

      Registration. Much more of SIP is supported. Preferences GUI. Lots of other stuff.
      Tested against FWD, Divmod Quotient, and a host of other clients (including kphone, linphone and xten)
    * Release 0.1
      1st November 2003

      First release. Very basic call functionality, but this release really isn't usable. If you must have this, it's available from this project's Sourceforge Files page.

= License =

Shtoom is (C) Copyright 2004 Anthony Baxter, and is made available under the GNU LGPL.
",',0
379,49,1131556882.54856,amir,198.49.126.204,"= Welcome to the Divmod Community =
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of [wiki:PythonLanguage Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
=== Help and Support ===
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * UsefulQueries
== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleAlpha ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric roleplaying game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
",',0
380,50,1131556953.94497,amir,198.49.126.204,"= Welcome to the Divmod Community =
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of [wiki:PythonLanguage Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
=== Help and Support ===
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * UsefulQueries
== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleAlpha ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric roleplaying game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
",',0
381,1,1131557094.29794,amir,198.49.126.204,"The Lupy project has been RETIRED! For full-text indexing and search we recommend [wiki:DivmodXapwrap Divmod Xapwrap] or [http://pylucene.osafoundation.org/ PyLucene] instead.

Lupy is a is a full-text indexer and search engine written in Python. It is a port of Jakarta Lucene 1.2 to Python. Specifically, it reads and writes indexes in Lucene binary format. Like Lucene, it is sophisticated and scalable. Lucene is a polished and mature project and you are encouraged to read the documentation found at the Lucene home page.

Lupy requires Python 2.3 or greater.",',0
382,51,1131557131.39444,amir,198.49.126.204,"= Welcome to the Divmod Community =
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of [wiki:PythonLanguage Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
=== Help and Support ===
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * UsefulQueries
== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleAlpha ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric roleplaying game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]",',0
383,1,1131557180.15948,amir,198.49.126.204,"== Pyndex ==
The Pyndex project has been RETIRED! For full-text indexing and search we recommend [wiki:DivmodXapwrap Divmod Xapwrap] or [http://pylucene.osafoundation.org/ PyLucene] instead.",',0
384,2,1131557188.12789,amir,198.49.126.204,"== Lupy ==

The Lupy project has been RETIRED! For full-text indexing and search we recommend [wiki:DivmodXapwrap Divmod Xapwrap] or [http://pylucene.osafoundation.org/ PyLucene] instead.

Lupy is a is a full-text indexer and search engine written in Python. It is a port of Jakarta Lucene 1.2 to Python. Specifically, it reads and writes indexes in Lucene binary format. Like Lucene, it is sophisticated and scalable. Lucene is a polished and mature project and you are encouraged to read the documentation found at the Lucene home page.

Lupy requires Python 2.3 or greater.",',0
385,2,1131557222.91467,amir,198.49.126.204,"== Pyndex ==
The Pyndex project has been RETIRED! For full-text indexing and search we recommend [wiki:DivmodXapwrap Divmod Xapwrap] or [http://pylucene.osafoundation.org/ PyLucene] instead.

Pyndex is a simple and fast full-text indexer (aka search engine) implemented in Python. It uses Metakit as its storage back-end. It works well for quickly adding search to an application, and is also well suited to in-memory indexing and search. It performs best in applications involving a few thousand documents. Pyndex can handle AND, OR and phrase queries.",',0
386,2,1131557239.82341,amir,198.49.126.204,"== Sine ==

A voice over IP application server.",',0
387,15,1131643894.35481,mizzen,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow (pronounced nou-veau) is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.6.0.tar.gz?format=raw Latest release - 0.6.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
== Examples ==
 * [source:trunk/Nevow/examples Nevow Examples]: If you have installed Nevow, one of the first things you should do is run the Nevow examples. 
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://ulaluma.com/pyx/ fzZzy]
 * [query:?group=&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","added links to tickets",0
388,4,1131693590.47038,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Vertex =
Vertex is an implementation of the Q2Q protocol (sort of like P2P, but one better). There are a few moving parts in Vertex:

    * PTCP: a protocol which is nearly identical to TCP, but which runs over UDP. This lets Q2Q penetrate most NAT configurations.
    * JUICE ([JU]ice [I]s [C]oncurrent [E]vents): a very simple but immensely flexible protocol which forms the basis of the high-level aspects of Q2Q
    * vertex: a command line tool which exposes a few features useful in many situations (such as registration and authentication)

Q2Q is a very high-level protocol (alternatively, transport) the goal of which is to make communication over the internet a possibility (if you enjoy setting up tunnels or firewall rules whenever you need to transfer a file between two computers, Q2Q may not be for you). Q2Q endpoints aren't hardware addresses or network addresses. They look a lot like email addresses and they act a lot like instant message addresses. You can hook into yours wherever you can access the internet, and you can be online or offline as you choose (Q2Q supports multiple unrelated protocols, so you also might be online for some services but offline for others). Two people with Q2Q addresses can easily communicate without out-of-band negotiation of their physical locations or the topology of their networks. If Alice wants to talk to Bob, Alice will always just open a connection to bob@divmod.com/chat. If Bob is online anywhere at all, the connection will have an opportunity to succeed (Bob might be busy or not want to talk to Alice, but that is another matter ;). The connection is authenticated in both directions, so if it does succeed Alice knows she is talking to the real Bob and vice versa.

The Q2Q network has some decentralized features (there is no one server or company which can control all Q2Q addresses) and features of centralization (addresses beneath a particular domain are issued by a server for that domain; once issued, some activities require the server to be contacted again, while others do not). Vertex includes an identity server capable of hosting Q2Q addresses. Once you've installed the 0.1 release, you can run it like this:
{{{
exarkun@boson:~$ cat > q2q-standalone.tac
from vertex.q2qstandalone import defaultConfig
application = defaultConfig()
exarkun@boson:~$ twistd -noy q2q-standalone.tac 
2005/10/15 00:12 EDT [-] Log opened.
2005/10/15 00:12 EDT [-] twistd 2.0.1 (/usr/bin/python2.4 2.4.1) starting up
2005/10/15 00:12 EDT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/10/15 00:12 EDT [-] Loading q2q-standalone.tac...
2005/10/15 00:12 EDT [-] Loaded.
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QService starting on 8788
2005/10/15 00:12 EDT [-] Starting factory <Q2QService 'service'@-488b6a34>
2005/10/15 00:12 EDT [-] vertex.ptcp.PTCP starting on 8788
2005/10/15 00:12 EDT [-] Starting protocol <vertex.ptcp.PTCP instance at 0xb777884c>
2005/10/15 00:12 EDT [-] Binding PTCP/UDP 8788=8788
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QBootstrapFactory starting on 8789
2005/10/15 00:12 EDT [-] Starting factory <vertex.q2q.Q2QBootstrapFactory instance at 0xb77787cc>
}}}
You can acquire a new Q2Q address using the vertex command line tool:
{{{
exarkun@boson:~$ vertex register exarkun@boson password
}}}
boson is a name on my local network, making this address rather useless. On the other hand, no one will be able to pretend to be me by cracking my hopelessly weak password ;) If you set up a Vertex server on a public host, you will be able to register a real, honest-to-goodness Q2Q address beneath its domain (careful - so will anyone else).

vertex also offers a tool for requesting a signed certificate from the server. These certificates can be used to prove ones identity to foreign domains without involving ones home server. Another feature vertex provides is a toy file transfer application. Bob can issue a vertex receive while Alice issues a vertex send pointed at him, and the file will be transferred.

Much of the real power of Q2Q is exposed to developers using two methods: listenQ2Q and connectQ2Q. These work in roughly the same way Twisted's listenTCP and connectTCP work: they offer support for writing servers and clients that operate on the Q2Q network.

== Exits ==
 * [http://divmod.org/projects/vertex Divmod project page for Vertex]
 * [http://www.swik.net/vertex Vertex on swik]

== Download ==
 * Trunk: svn co http://divmod.org/trac/browser/trunk/Vertex Vertex",',0
389,5,1131693611.17025,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Vertex =
Vertex is an implementation of the Q2Q protocol (sort of like P2P, but one better). There are a few moving parts in Vertex:

  * PTCP: a protocol which is nearly identical to TCP, but which runs over UDP. This lets Q2Q penetrate most NAT configurations.
  * JUICE ([JU]ice [I]s [C]oncurrent [E]vents): a very simple but immensely flexible protocol which forms the basis of the high-level aspects of Q2Q
  * vertex: a command line tool which exposes a few features useful in many situations (such as registration and authentication)

Q2Q is a very high-level protocol (alternatively, transport) the goal of which is to make communication over the internet a possibility (if you enjoy setting up tunnels or firewall rules whenever you need to transfer a file between two computers, Q2Q may not be for you). Q2Q endpoints aren't hardware addresses or network addresses. They look a lot like email addresses and they act a lot like instant message addresses. You can hook into yours wherever you can access the internet, and you can be online or offline as you choose (Q2Q supports multiple unrelated protocols, so you also might be online for some services but offline for others). Two people with Q2Q addresses can easily communicate without out-of-band negotiation of their physical locations or the topology of their networks. If Alice wants to talk to Bob, Alice will always just open a connection to bob@divmod.com/chat. If Bob is online anywhere at all, the connection will have an opportunity to succeed (Bob might be busy or not want to talk to Alice, but that is another matter ;). The connection is authenticated in both directions, so if it does succeed Alice knows she is talking to the real Bob and vice versa.

The Q2Q network has some decentralized features (there is no one server or company which can control all Q2Q addresses) and features of centralization (addresses beneath a particular domain are issued by a server for that domain; once issued, some activities require the server to be contacted again, while others do not). Vertex includes an identity server capable of hosting Q2Q addresses. Once you've installed the 0.1 release, you can run it like this:
{{{
exarkun@boson:~$ cat > q2q-standalone.tac
from vertex.q2qstandalone import defaultConfig
application = defaultConfig()
exarkun@boson:~$ twistd -noy q2q-standalone.tac 
2005/10/15 00:12 EDT [-] Log opened.
2005/10/15 00:12 EDT [-] twistd 2.0.1 (/usr/bin/python2.4 2.4.1) starting up
2005/10/15 00:12 EDT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/10/15 00:12 EDT [-] Loading q2q-standalone.tac...
2005/10/15 00:12 EDT [-] Loaded.
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QService starting on 8788
2005/10/15 00:12 EDT [-] Starting factory <Q2QService 'service'@-488b6a34>
2005/10/15 00:12 EDT [-] vertex.ptcp.PTCP starting on 8788
2005/10/15 00:12 EDT [-] Starting protocol <vertex.ptcp.PTCP instance at 0xb777884c>
2005/10/15 00:12 EDT [-] Binding PTCP/UDP 8788=8788
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QBootstrapFactory starting on 8789
2005/10/15 00:12 EDT [-] Starting factory <vertex.q2q.Q2QBootstrapFactory instance at 0xb77787cc>
}}}
You can acquire a new Q2Q address using the vertex command line tool:
{{{
exarkun@boson:~$ vertex register exarkun@boson password
}}}
boson is a name on my local network, making this address rather useless. On the other hand, no one will be able to pretend to be me by cracking my hopelessly weak password ;) If you set up a Vertex server on a public host, you will be able to register a real, honest-to-goodness Q2Q address beneath its domain (careful - so will anyone else).

vertex also offers a tool for requesting a signed certificate from the server. These certificates can be used to prove ones identity to foreign domains without involving ones home server. Another feature vertex provides is a toy file transfer application. Bob can issue a vertex receive while Alice issues a vertex send pointed at him, and the file will be transferred.

Much of the real power of Q2Q is exposed to developers using two methods: listenQ2Q and connectQ2Q. These work in roughly the same way Twisted's listenTCP and connectTCP work: they offer support for writing servers and clients that operate on the Q2Q network.

== Exits ==
 * [http://divmod.org/projects/vertex Divmod project page for Vertex]
 * [http://www.swik.net/vertex Vertex on swik]

== Download ==
 * Trunk: svn co http://divmod.org/trac/browser/trunk/Vertex Vertex",',0
390,6,1131713728.37692,tekNico,198.49.126.204,,,
391,6,1131772764.94111,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Vertex =
Vertex is an implementation of the Q2Q protocol (sort of like P2P, but one better). There are a few moving parts in Vertex:

  * PTCP: a protocol which is nearly identical to TCP, but which runs over UDP. This lets Q2Q penetrate most NAT configurations.
  * JUICE ([JU]ice [I]s [C]oncurrent [E]vents): a very simple but immensely flexible protocol which forms the basis of the high-level aspects of Q2Q
  * vertex: a command line tool which exposes a few features useful in many situations (such as registration and authentication)

Q2Q is a very high-level protocol (alternatively, transport) the goal of which is to make communication over the internet a possibility (if you enjoy setting up tunnels or firewall rules whenever you need to transfer a file between two computers, Q2Q may not be for you). Q2Q endpoints aren't hardware addresses or network addresses. They look a lot like email addresses and they act a lot like instant message addresses. You can hook into yours wherever you can access the internet, and you can be online or offline as you choose (Q2Q supports multiple unrelated protocols, so you also might be online for some services but offline for others). Two people with Q2Q addresses can easily communicate without out-of-band negotiation of their physical locations or the topology of their networks. If Alice wants to talk to Bob, Alice will always just open a connection to bob@divmod.com/chat. If Bob is online anywhere at all, the connection will have an opportunity to succeed (Bob might be busy or not want to talk to Alice, but that is another matter ;). The connection is authenticated in both directions, so if it does succeed Alice knows she is talking to the real Bob and vice versa.

The Q2Q network has some decentralized features (there is no one server or company which can control all Q2Q addresses) and features of centralization (addresses beneath a particular domain are issued by a server for that domain; once issued, some activities require the server to be contacted again, while others do not). Vertex includes an identity server capable of hosting Q2Q addresses. Once you've installed the 0.1 release, you can run it like this:
{{{
exarkun@boson:~$ cat > q2q-standalone.tac
from vertex.q2qstandalone import defaultConfig
application = defaultConfig()
exarkun@boson:~$ twistd -noy q2q-standalone.tac 
2005/10/15 00:12 EDT [-] Log opened.
2005/10/15 00:12 EDT [-] twistd 2.0.1 (/usr/bin/python2.4 2.4.1) starting up
2005/10/15 00:12 EDT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/10/15 00:12 EDT [-] Loading q2q-standalone.tac...
2005/10/15 00:12 EDT [-] Loaded.
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QService starting on 8788
2005/10/15 00:12 EDT [-] Starting factory <Q2QService 'service'@-488b6a34>
2005/10/15 00:12 EDT [-] vertex.ptcp.PTCP starting on 8788
2005/10/15 00:12 EDT [-] Starting protocol <vertex.ptcp.PTCP instance at 0xb777884c>
2005/10/15 00:12 EDT [-] Binding PTCP/UDP 8788=8788
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QBootstrapFactory starting on 8789
2005/10/15 00:12 EDT [-] Starting factory <vertex.q2q.Q2QBootstrapFactory instance at 0xb77787cc>
}}}
You can acquire a new Q2Q address using the vertex command line tool:
{{{
exarkun@boson:~$ vertex register exarkun@boson password
}}}
boson is a name on my local network, making this address rather useless. On the other hand, no one will be able to pretend to be me by cracking my hopelessly weak password ;) If you set up a Vertex server on a public host, you will be able to register a real, honest-to-goodness Q2Q address beneath its domain (careful - so will anyone else).

vertex also offers a tool for requesting a signed certificate from the server. These certificates can be used to prove ones identity to foreign domains without involving ones home server. Another feature vertex provides is a toy file transfer application. Bob can issue a vertex receive while Alice issues a vertex send pointed at him, and the file will be transferred.

Much of the real power of Q2Q is exposed to developers using two methods: listenQ2Q and connectQ2Q. These work in roughly the same way Twisted's listenTCP and connectTCP work: they offer support for writing servers and clients that operate on the Q2Q network.

== Exits ==
 * [http://divmod.org/projects/vertex Divmod project page for Vertex]
 * [http://www.swik.net/vertex Vertex on swik]

== Download ==
 * Trunk: svn co http://divmod.org/trac/browser/trunk/Vertex Vertex
 * [http://divmod.org/static/projects/vertex/Vertex-0.1.tar.gz Latest release: 0.1]",',0
392,7,1131774389.7415,glyph,198.49.126.204,"= [wiki:WikiStart Divmod] : Vertex =
Vertex is an implementation of the Q2Q protocol (sort of like P2P, but one better). There are a few moving parts in Vertex:

  * PTCP: a protocol which is nearly identical to TCP, but which runs over UDP. This lets Q2Q penetrate most NAT configurations.
  * JUICE ([JU]ice [I]s [C]oncurrent [E]vents): a very simple but immensely flexible protocol which forms the basis of the high-level aspects of Q2Q
  * vertex: a command line tool which exposes a few features useful in many situations (such as registration and authentication)

Q2Q is a very high-level protocol (alternatively, transport) the goal of which is to make communication over the internet a possibility (if you enjoy setting up tunnels or firewall rules whenever you need to transfer a file between two computers, Q2Q may not be for you). Q2Q endpoints aren't hardware addresses or network addresses. They look a lot like email addresses and they act a lot like instant message addresses. You can hook into yours wherever you can access the internet, and you can be online or offline as you choose (Q2Q supports multiple unrelated protocols, so you also might be online for some services but offline for others). Two people with Q2Q addresses can easily communicate without out-of-band negotiation of their physical locations or the topology of their networks. If Alice wants to talk to Bob, Alice will always just open a connection to bob@divmod.com/chat. If Bob is online anywhere at all, the connection will have an opportunity to succeed (Bob might be busy or not want to talk to Alice, but that is another matter ;). The connection is authenticated in both directions, so if it does succeed Alice knows she is talking to the real Bob and vice versa.

The Q2Q network has some decentralized features (there is no one server or company which can control all Q2Q addresses) and features of centralization (addresses beneath a particular domain are issued by a server for that domain; once issued, some activities require the server to be contacted again, while others do not). Vertex includes an identity server capable of hosting Q2Q addresses. Once you've installed the 0.1 release, you can run it like this:
{{{
exarkun@boson:~$ cat > q2q-standalone.tac
from vertex.q2qstandalone import defaultConfig
application = defaultConfig()
exarkun@boson:~$ twistd -noy q2q-standalone.tac 
2005/10/15 00:12 EDT [-] Log opened.
2005/10/15 00:12 EDT [-] twistd 2.0.1 (/usr/bin/python2.4 2.4.1) starting up
2005/10/15 00:12 EDT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/10/15 00:12 EDT [-] Loading q2q-standalone.tac...
2005/10/15 00:12 EDT [-] Loaded.
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QService starting on 8788
2005/10/15 00:12 EDT [-] Starting factory <Q2QService 'service'@-488b6a34>
2005/10/15 00:12 EDT [-] vertex.ptcp.PTCP starting on 8788
2005/10/15 00:12 EDT [-] Starting protocol <vertex.ptcp.PTCP instance at 0xb777884c>
2005/10/15 00:12 EDT [-] Binding PTCP/UDP 8788=8788
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QBootstrapFactory starting on 8789
2005/10/15 00:12 EDT [-] Starting factory <vertex.q2q.Q2QBootstrapFactory instance at 0xb77787cc>
}}}
You can acquire a new Q2Q address using the vertex command line tool:
{{{
exarkun@boson:~$ vertex register exarkun@boson password
}}}
boson is a name on my local network, making this address rather useless. On the other hand, no one will be able to pretend to be me by cracking my hopelessly weak password ;) If you set up a Vertex server on a public host, you will be able to register a real, honest-to-goodness Q2Q address beneath its domain (careful - so will anyone else).

vertex also offers a tool for requesting a signed certificate from the server. These certificates can be used to prove ones identity to foreign domains without involving ones home server. Another feature vertex provides is a toy file transfer application. Bob can issue a vertex receive while Alice issues a vertex send pointed at him, and the file will be transferred.

Much of the real power of Q2Q is exposed to developers using two methods: listenQ2Q and connectQ2Q. These work in roughly the same way Twisted's listenTCP and connectTCP work: they offer support for writing servers and clients that operate on the Q2Q network.

== Exits ==
 * [http://divmod.org/projects/vertex Old Divmod project page for Vertex]
 * [http://www.swik.net/vertex Vertex on swik]

== Download ==
 * Trunk: svn co http://divmod.org/trac/browser/trunk/Vertex Vertex
 * [http://divmod.org/static/projects/vertex/Vertex-0.1.tar.gz Latest release: 0.1]",',0
393,8,1131774418.52949,glyph,198.49.126.204,"= [wiki:WikiStart Divmod] : Vertex =
Vertex is an implementation of the Q2Q protocol (sort of like P2P, but one better). There are a few moving parts in Vertex:

  * PTCP: a protocol which is nearly identical to TCP, but which runs over UDP. This lets Q2Q penetrate most NAT configurations.
  * JUICE ([JU]ice [I]s [C]oncurrent [E]vents): a very simple but immensely flexible protocol which forms the basis of the high-level aspects of Q2Q
  * vertex: a command line tool which exposes a few features useful in many situations (such as registration and authentication)

Q2Q is a very high-level protocol (alternatively, transport) the goal of which is to make communication over the internet a possibility (if you enjoy setting up tunnels or firewall rules whenever you need to transfer a file between two computers, Q2Q may not be for you). Q2Q endpoints aren't hardware addresses or network addresses. They look a lot like email addresses and they act a lot like instant message addresses. You can hook into yours wherever you can access the internet, and you can be online or offline as you choose (Q2Q supports multiple unrelated protocols, so you also might be online for some services but offline for others). Two people with Q2Q addresses can easily communicate without out-of-band negotiation of their physical locations or the topology of their networks. If Alice wants to talk to Bob, Alice will always just open a connection to bob@divmod.com/chat. If Bob is online anywhere at all, the connection will have an opportunity to succeed (Bob might be busy or not want to talk to Alice, but that is another matter ;). The connection is authenticated in both directions, so if it does succeed Alice knows she is talking to the real Bob and vice versa.

The Q2Q network has some decentralized features (there is no one server or company which can control all Q2Q addresses) and features of centralization (addresses beneath a particular domain are issued by a server for that domain; once issued, some activities require the server to be contacted again, while others do not). Vertex includes an identity server capable of hosting Q2Q addresses. Once you've installed the 0.1 release, you can run it like this:
{{{
exarkun@boson:~$ cat > q2q-standalone.tac
from vertex.q2qstandalone import defaultConfig
application = defaultConfig()
exarkun@boson:~$ twistd -noy q2q-standalone.tac 
2005/10/15 00:12 EDT [-] Log opened.
2005/10/15 00:12 EDT [-] twistd 2.0.1 (/usr/bin/python2.4 2.4.1) starting up
2005/10/15 00:12 EDT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/10/15 00:12 EDT [-] Loading q2q-standalone.tac...
2005/10/15 00:12 EDT [-] Loaded.
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QService starting on 8788
2005/10/15 00:12 EDT [-] Starting factory <Q2QService 'service'@-488b6a34>
2005/10/15 00:12 EDT [-] vertex.ptcp.PTCP starting on 8788
2005/10/15 00:12 EDT [-] Starting protocol <vertex.ptcp.PTCP instance at 0xb777884c>
2005/10/15 00:12 EDT [-] Binding PTCP/UDP 8788=8788
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QBootstrapFactory starting on 8789
2005/10/15 00:12 EDT [-] Starting factory <vertex.q2q.Q2QBootstrapFactory instance at 0xb77787cc>
}}}
You can acquire a new Q2Q address using the vertex command line tool:
{{{
exarkun@boson:~$ vertex register exarkun@boson password
}}}
boson is a name on my local network, making this address rather useless. On the other hand, no one will be able to pretend to be me by cracking my hopelessly weak password ;) If you set up a Vertex server on a public host, you will be able to register a real, honest-to-goodness Q2Q address beneath its domain (careful - so will anyone else).

vertex also offers a tool for requesting a signed certificate from the server. These certificates can be used to prove ones identity to foreign domains without involving ones home server. Another feature vertex provides is a toy file transfer application. Bob can issue a vertex receive while Alice issues a vertex send pointed at him, and the file will be transferred.

Much of the real power of Q2Q is exposed to developers using two methods: listenQ2Q and connectQ2Q. These work in roughly the same way Twisted's listenTCP and connectTCP work: they offer support for writing servers and clients that operate on the Q2Q network.

== Exits ==
 * [http://divmod.org/projects/vertex Old Divmod project page for Vertex]
 * [http://www.swik.net/vertex Vertex on swik]

== Download ==
 * Trunk: svn co http://divmod.org/svn/trunk/Vertex Vertex
 * [http://divmod.org/static/projects/vertex/Vertex-0.1.tar.gz Latest release: 0.1]",',0
394,9,1131774435.84171,glyph,198.49.126.204,"= [wiki:WikiStart Divmod] : Vertex =
Vertex is an implementation of the Q2Q protocol (sort of like P2P, but one better). There are a few moving parts in Vertex:

  * PTCP: a protocol which is nearly identical to TCP, but which runs over UDP. This lets Q2Q penetrate most NAT configurations.
  * JUICE ([JU]ice [I]s [C]oncurrent [E]vents): a very simple but immensely flexible protocol which forms the basis of the high-level aspects of Q2Q
  * vertex: a command line tool which exposes a few features useful in many situations (such as registration and authentication)

Q2Q is a very high-level protocol (alternatively, transport) the goal of which is to make communication over the internet a possibility (if you enjoy setting up tunnels or firewall rules whenever you need to transfer a file between two computers, Q2Q may not be for you). Q2Q endpoints aren't hardware addresses or network addresses. They look a lot like email addresses and they act a lot like instant message addresses. You can hook into yours wherever you can access the internet, and you can be online or offline as you choose (Q2Q supports multiple unrelated protocols, so you also might be online for some services but offline for others). Two people with Q2Q addresses can easily communicate without out-of-band negotiation of their physical locations or the topology of their networks. If Alice wants to talk to Bob, Alice will always just open a connection to bob@divmod.com/chat. If Bob is online anywhere at all, the connection will have an opportunity to succeed (Bob might be busy or not want to talk to Alice, but that is another matter ;). The connection is authenticated in both directions, so if it does succeed Alice knows she is talking to the real Bob and vice versa.

The Q2Q network has some decentralized features (there is no one server or company which can control all Q2Q addresses) and features of centralization (addresses beneath a particular domain are issued by a server for that domain; once issued, some activities require the server to be contacted again, while others do not). Vertex includes an identity server capable of hosting Q2Q addresses. Once you've installed the 0.1 release, you can run it like this:
{{{
exarkun@boson:~$ cat > q2q-standalone.tac
from vertex.q2qstandalone import defaultConfig
application = defaultConfig()
exarkun@boson:~$ twistd -noy q2q-standalone.tac 
2005/10/15 00:12 EDT [-] Log opened.
2005/10/15 00:12 EDT [-] twistd 2.0.1 (/usr/bin/python2.4 2.4.1) starting up
2005/10/15 00:12 EDT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/10/15 00:12 EDT [-] Loading q2q-standalone.tac...
2005/10/15 00:12 EDT [-] Loaded.
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QService starting on 8788
2005/10/15 00:12 EDT [-] Starting factory <Q2QService 'service'@-488b6a34>
2005/10/15 00:12 EDT [-] vertex.ptcp.PTCP starting on 8788
2005/10/15 00:12 EDT [-] Starting protocol <vertex.ptcp.PTCP instance at 0xb777884c>
2005/10/15 00:12 EDT [-] Binding PTCP/UDP 8788=8788
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QBootstrapFactory starting on 8789
2005/10/15 00:12 EDT [-] Starting factory <vertex.q2q.Q2QBootstrapFactory instance at 0xb77787cc>
}}}
You can acquire a new Q2Q address using the vertex command line tool:
{{{
exarkun@boson:~$ vertex register exarkun@boson password
}}}
boson is a name on my local network, making this address rather useless. On the other hand, no one will be able to pretend to be me by cracking my hopelessly weak password ;) If you set up a Vertex server on a public host, you will be able to register a real, honest-to-goodness Q2Q address beneath its domain (careful - so will anyone else).

vertex also offers a tool for requesting a signed certificate from the server. These certificates can be used to prove ones identity to foreign domains without involving ones home server. Another feature vertex provides is a toy file transfer application. Bob can issue a vertex receive while Alice issues a vertex send pointed at him, and the file will be transferred.

Much of the real power of Q2Q is exposed to developers using two methods: listenQ2Q and connectQ2Q. These work in roughly the same way Twisted's listenTCP and connectTCP work: they offer support for writing servers and clients that operate on the Q2Q network.

== Exits ==
 * [http://divmod.org/projects/vertex Old Divmod project page for Vertex]
 * [http://www.swik.net/vertex Vertex on swik]

== Download ==
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Vertex Vertex
 * [http://divmod.org/static/projects/vertex/Vertex-0.1.tar.gz Latest release: 0.1]",',0
395,16,1132110271.14028,washort,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow (pronounced nou-veau) is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.6.0.tar.gz?format=raw Latest release - 0.6.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
== Examples ==
 * [http://divmod.org:8081 Nevow Examples]: If you have installed Nevow, one of the first things you should do is run the Nevow examples. (Source here: [source:trunk/Nevow/examples])
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://ulaluma.com/pyx/ fzZzy]
 * [query:?group=&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.",',0
396,17,1132150296.66386,amir,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow (pronounced nou-veau) is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.6.0.tar.gz?format=raw Latest release - 0.6.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
== Examples ==
 * You can see the Nevow examples running here: [http://divmod.org:8081 Nevow Examples].
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://ulaluma.com/pyx/ fzZzy]
 * [query:?group=&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","tweak pointers to examples",0
397,7,1132163650.67696,glyph,198.49.126.204,"= DivmodAxiom : Why use Axiom? =

Because it's great, of course!  More specifically, it's an object-relational database that's ...

== Actually Relational ==

Axiom imposes an ''extremely'' straightforward mapping between tables and classes: 1 to 1.  Your tables get behavior.  They can refer to each other.  If you're familiar with the relational model but are learning OO and want some of its features, Axiom won't explode your brain with a million new concepts.  After learning how a few simple Python expressions work, you can get up and running.

Axiom also respects the relational model and allows you to perform queries (and before 1.0, also updates and deletes) on groups of items at once, without loading them first.  You don't need to resort to writing your own 'for' loops or your own SQL code in order to load a joined query.  No PotatoProgramming.

== Actually Object-Oriented ==

Tables have behavior.  You can have a reference to an arbitrary item.  Items can exist outside the database.  You can mix in code from utility classes to give your items additional methods, without affecting its schema.  Simple database types like strings and integers can be mapped into complex, rich Python values, such as email addresses or a fixed-point decimal class.

== Extensible ==

Axiom's '[wiki:DivmodAxiom/Powerups Powerup]' mechanism allows you enhance a database, or ''any row'' within a database, with additional functionality.

== Active ==

Axiom isn't a static database.  It is dynamic, it contains behaviors.

You can, for example, install a scheduler which will run tasks at specific times when the database is open.

== Twisted-friendly ==

The aforementioned scheduler is implemented using Twisted's reactor.  Axiom was explicitly designed for use with events and integrates nicely into a Twisted-based environment. 

== Future-Proof ==

Axiom applications can keep running while they're being upgraded from one schema to another (with a partial dataset available).  Upgrades are handled automatically, and the code for upgrading can be kept separate from your application code.  You can even write upgraders which involve complex relationships between multiple rows.

== Simple ==

Axiom gives you the power of an SQL database without the hassle of generating code from within code.

Working with Axiom databases is easy.  The underlying SQLite engine is pretty simple to use already, but Axiom doesn't add layers of complexity that get in your way.  Compare loading a row and manipulating it with a Python class:

{{{
#!python
from axiom.store import Store
s = Store('store.axiom')
x = s.getItemByID(0)
}}}

{{{
#!python
from pysqlite2 import dbapi2
from mymodule import MyClass
con = dbapi2.connect('store.sqlite')
cur = con.cursor()
cur.execute('select * from my_table where oid = 0')
row = con.fetchall()[0]
x = MyClass(row)
}}}

In this case the Axiom example is actually quite a lot shorter!

== Safe ==

Axiom keeps your in-memory objects up to date with what's happening in the database, even when transactions have to be rolled back.  No need to manage connections of your own.  No more forgetting to commit a transaction, or forgetting to roll back in an error handler.

Axiom doesn't expose ''any'' SQL to the application developer.  Internally Axiom is also very careful about SQL generation: it doesn't use string concatenation except where absolutely necessary, and instead uses {{{?}}} interpolation.  This means that your site will be completely secure against SQL injection attacks.

Axiom also makes sure that your objects in memory correspond to what's in the database.  If a transaction fails, Axiom will log the error and revert all the Python objects involved in the transaction to the state they are in after reverting.  This brings the safety of database transactions into your Python code.
",',0
398,8,1132179764.24188,moe,198.49.126.204,,,
399,9,1132195169.75211,amir,198.49.126.204,,,
400,17,1132506812.11174,amir,198.49.126.204,,,
401,1,1132507197.81486,amir,198.49.126.204,"=== Axiom Tutorial ===
JP Calederon's occasional series on Axiom and Mantissa usage. Via [http://www.livejournal.com/users/jcalderone/ JP's blog].

 * [http://www.livejournal.com/users/jcalderone/15217.html How to create a Mantissa Server]
 * [http://www.livejournal.com/users/jcalderone/15551.html Configuring HTTP and HTTPS ports, and static content]
 * [http://www.livejournal.com/users/jcalderone/15928.html Configuring Static Resources on a Mantissa Server]
 * [http://www.livejournal.com/users/jcalderone/16249.html Redirecting HTTP request logs]
 * [http://www.livejournal.com/users/jcalderone/16404.html Adding Axiomatic plugins]
 * [http://www.livejournal.com/users/jcalderone/16888.html Axiom Queries]
 * [http://www.livejournal.com/users/jcalderone/17138.html Axiom Powerups]",',0
402,18,1132507223.30676,amir,198.49.126.204,,,
403,2,1132507993.51966,exarkun,198.49.126.204,"=== Axiom Tutorial ===
JP Calderone's occasional series on Axiom and Mantissa usage. Via [http://www.livejournal.com/users/jcalderone/ JP's blog].

 * [http://www.livejournal.com/users/jcalderone/15217.html How to create a Mantissa Server]
 * [http://www.livejournal.com/users/jcalderone/15551.html Configuring HTTP and HTTPS ports, and static content]
 * [http://www.livejournal.com/users/jcalderone/15928.html Configuring Static Resources on a Mantissa Server]
 * [http://www.livejournal.com/users/jcalderone/16249.html Redirecting HTTP request logs]
 * [http://www.livejournal.com/users/jcalderone/16404.html Adding Axiomatic plugins]
 * [http://www.livejournal.com/users/jcalderone/16888.html Axiom Queries]
 * [http://www.livejournal.com/users/jcalderone/17138.html Axiom Powerups]",',0
404,11,1132674441.78674,lbolognini,198.49.126.204,"=== People Using Divmod Software ===
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/ Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + CherryPy",',0
405,12,1132674500.66308,lbolognini,198.49.126.204,"=== People Using Divmod Software ===
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/ Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + !CherryPy",',0
406,4,1133176636.94486,jml,198.49.126.204,"= [wiki:WikiStart Divmod] : Combinator =

Combinator is a tool that Divmod Python programmers use to manage multiple branches of our software.  It integrates with Subversion.

It can be used to manage any number of branches with any number of projects.  It sets up your Python sys.path to point at the appropriate directories for the set of branches you are currently working on.

It is mainly of interest if you are checking code out of SVN: users of installed versions of Divmod software can probably ignore this project (for now).

== Download ==
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Combinator Combinator
 * mkdir -p Divmod/trunk
 * mv Combinator Divmod/trunk/",',0
407,10,1133419076.85387,glyph,198.49.126.204,"= Divmod, Inc. =

http://divmod.org/trac/chrome/common/divmod.png Divmod.org is a community dedicated to producing high quality, open source Python code.

http://divmod.com/ximages/anonymous_logo.png [wiki:DivmodInc Divmod, Inc.] is the company that substantially funds divmod.org, employs many of the programmers writing code on these projects, and created these projects to support our applications.

Here at Divmod (both of them) we strongly believe in honesty and transparency.  Our code and our tasks are right here for you to see.  We are gearing up to provide several different online services, some of which will be free and some of which will be subscription-based, but all of which will place a premium on user satisfaction.  Here is where you can see how we're doing it and know that we really mean it when we say that we value your privacy and security.

If you're an open source programmer and also a Divmod customer or user, contribute some patches!  If you can make the service better we will include your patches and include them on the live service.

Our team:
 * Amir Bakhtiar, irc: amiramir, [http://www.livejournal.com/users/amiramir blog]
 * Glyph Lefkowitz, irc: glyph, [http://www.livejournal.com/users/glyf blog]
 * JP Calderone, irc: exarkun, [http://www.livejournal.com/users/jcalderone blog]
 * Allen Short, irc: dash
 * Moe Aboulkheir, irc: moea

Alumni:
 * Donovan Preston, irc: fzZzy, [http://ulaluma.com/pyx/ blog]
 * Mike Salib, irc: msalib
 * Mark Wittner, irc: token
 * Jonathan Simms, irc: slyphon",',0
408,11,1133419317.85461,glyph,198.49.126.204,"= Divmod, Inc. =

http://divmod.org/trac/chrome/common/divmod.png Divmod.org is a community dedicated to producing high quality, open source Python code.

http://divmod.com/ximages/anonymous_logo.png [wiki:DivmodInc Divmod, Inc.] is the company that substantially funds divmod.org, employs many of the programmers writing code on these projects, and created these projects to support our applications.

Here at Divmod (both of them) we strongly believe in honesty and transparency.  Our code and our tasks are right here for you to see.  We are gearing up to provide several different online services, some of which will be free and some of which will be subscription-based, but all of which will place a premium on user satisfaction.  Here is where you can see how we're doing it and know that we really mean it when we say that we value your privacy and security.

If you're an open source programmer and also a Divmod customer or user, contribute some patches!  If you can make the service better we will include your patches and include them on the live service.

Our team:
 * [wiki:People/AmirBakhtiar Amir Bakhtiar], irc: amiramir, [http://www.livejournal.com/users/amiramir blog]
 * [wiki:People/GlyphLefkowitz Glyph Lefkowitz], irc: glyph, [http://www.livejournal.com/users/glyf blog]
 * [wiki:People/JeanPaulCalderone JP Calderone], irc: exarkun, [http://www.livejournal.com/users/jcalderone blog]
 * [wiki:People/AllenShort Allen Short], irc: dash
 * [wiki:People/MoeAboulkheir Moe Aboulkheir], irc: moea

Alumni:
 * [wiki:People/DonovanPreston Donovan Preston], irc: fzZzy, [http://ulaluma.com/pyx/ blog]
 * [wiki:People/MikeSalib Mike Salib], irc: msalib
 * [wiki:People/MarkWittner Mark Wittner], irc: token
 * [wiki:People/JonathanSimms Jonathan Simms], irc: slyphon

",',0
409,1,1133420310.14539,glyph,198.49.126.204,"= Glyph Lefkowitz =

Although scientists agree he was a danger even before his days at [http://origin.ea.com/ Origin Systems] working on the never-released sequel to Ultima Online, popular concern about the threat posed by Glyph Lefkowitz began when it became clear he was the author of the [http://www.twistedmatrix.com/ Twisted Framework].  Perception of the threat has been elevated since he began publishing subversive thoughts through the channel known cryptically as [http://www.livejournal.com/users/glyf/ 'Handwriting on the Sky'].

Allegedly raised by a [http://r0ml.net/blog/ 'computer programmer'], rumours have circulated that he was completely removed from human society as a child, and there is some speculation that [http://yellow5.com/pokey/archive/pokey52_4.gif he is not human himself].  Sources who have asked not to be named claim he is referred to by relatives as an 'alien mutant'.

Since he can make up any title he wants and write it here, Glyph is Divmod's Chief Architect.  That means he is responsible for coordinating the technology that glues the various parts of Divmod's applications and infrastructure together, such as [wiki:DivmodAxiom Axiom] and [wiki:DivmodMantissa Mantissa].",',0
410,2,1133420323.85456,glyph,198.49.126.204,"= Glyph Lefkowitz =

Although scientists agree he was a danger even before his days at [http://origin.ea.com/ Origin Systems] working on the never-released sequel to Ultima Online, popular concern about the threat posed by Glyph Lefkowitz began when it became clear he was the author of the [http://www.twistedmatrix.com/ Twisted Framework].  Perception of the threat has been elevated since he began publishing subversive thoughts through the channel known cryptically as [http://www.livejournal.com/users/glyf/ 'Handwriting on the Sky'].

Allegedly raised by a [http://r0ml.net/blog/ 'computer programmer'], rumours have circulated that he was completely removed from human society as a child, and there is some speculation that [http://yellow5.com/pokey/archive/pokey52_4.gif? he is not human himself].  Sources who have asked not to be named claim he is referred to by relatives as an 'alien mutant'.

Since he can make up any title he wants and write it here, Glyph is Divmod's Chief Architect.  That means he is responsible for coordinating the technology that glues the various parts of Divmod's applications and infrastructure together, such as [wiki:DivmodAxiom Axiom] and [wiki:DivmodMantissa Mantissa].",',0
411,3,1133420395.72432,glyph,198.49.126.204,"= Glyph Lefkowitz =

Although scientists agree he was a danger even before his days at [http://origin.ea.com/ Origin Systems] working on the never-released sequel to Ultima Online, popular concern about the threat posed by Glyph Lefkowitz began when it became clear he was the author of the [http://www.twistedmatrix.com/ Twisted Framework].  Perception of the threat has been elevated since he began publishing subversive thoughts through the channel known cryptically as [http://www.livejournal.com/users/glyf/ 'Handwriting on the Sky'].

Allegedly raised by a [http://r0ml.net/blog/ 'computer programmer'], rumours have circulated that he was completely removed from human society as a child, and there is some speculation that [http://yellow5.com/pokey/archive/index52.html he is not human himself].  Sources who have asked not to be named claim he is referred to by relatives as an 'alien mutant'.

Since he can make up any title he wants and write it here, Glyph is Divmod's Chief Architect.  That means he is responsible for coordinating the technology that glues the various parts of Divmod's applications and infrastructure together, such as [wiki:DivmodAxiom Axiom] and [wiki:DivmodMantissa Mantissa].",',0
412,4,1133420440.9263,glyph,198.49.126.204,"= Glyph Lefkowitz =

Although scientists agree he was a danger even before his days at [http://origin.ea.com/ Origin Systems] working on the never-released sequel to Ultima Online, popular concern about the threat posed by Glyph Lefkowitz began when it became clear he was the author of the [http://www.twistedmatrix.com/ Twisted Framework].  Widespread panic has escalated since he began publishing subversive thoughts through the channel known cryptically as [http://www.livejournal.com/users/glyf/ 'Handwriting on the Sky'].

Allegedly raised by a [http://r0ml.net/blog/ 'computer programmer'], rumours have circulated that he was completely removed from human society as a child, and there is some speculation that [http://yellow5.com/pokey/archive/index52.html he is not human himself].  Sources who have asked not to be named claim he is referred to by relatives as an 'alien mutant'.

Since he can make up any title he wants and write it here, Glyph is Divmod's Chief Architect.  That means he is responsible for coordinating the technology that glues the various parts of Divmod's applications and infrastructure together, such as [wiki:DivmodAxiom Axiom] and [wiki:DivmodMantissa Mantissa].",',0
413,1,1133449926.1444,amir,198.49.126.204,"=== A place to capture some of the next coarse chunks of work ===
 * Performance measurement
 * Usage stats
 * Tech stats - coverage",',0
414,2,1133537055.86997,amir,198.49.126.204,"=== A place to capture some of the next coarse chunks of work ===
 * Performance measurement
 * Usage stats
 * Tech stats - coverage
 * Backup",',0
415,3,1133537673.18733,amir,198.49.126.204,"== A place to capture some of the next coarse chunks of work ==
 * Performance measurement
 * Usage stats
 * Tech stats - coverage
 * Backup

=== Quotient ===
 * Compose
 * Addressbook
 * Threading
 * Spam filtering
 * Search
 * Grabbers
 * Servers
 * Reader
 * Later
   * Rules
   * Gallery

",',0
416,4,1133538045.9665,amir,198.49.126.204,"== A place to capture some of the next coarse chunks of work ==
 * Performance measurement
 * Usage stats
 * Tech stats - coverage
 * Backup

=== Quotient ===
 * Compose
 * Addressbook
 * Threading
 * Spam filtering
 * Search
 * Grabbers
 * Servers
 * Reader
 * Mailing lists
 * Later
   * Rules
   * Gallery

",',0
417,12,1133538563.95788,exarkun,198.49.126.204,"= Divmod, Inc. =

http://divmod.org/trac/chrome/common/divmod.png Divmod.org is a community dedicated to producing high quality, open source Python code.

http://divmod.com/ximages/anonymous_logo.png [wiki:DivmodInc Divmod, Inc.] is the company that substantially funds divmod.org, employs many of the programmers writing code on these projects, and created these projects to support our applications.

Here at Divmod (both of them) we strongly believe in honesty and transparency.  Our code and our tasks are right here for you to see.  We are gearing up to provide several different online services, some of which will be free and some of which will be subscription-based, but all of which will place a premium on user satisfaction.  Here is where you can see how we're doing it and know that we really mean it when we say that we value your privacy and security.

If you're an open source programmer and also a Divmod customer or user, contribute some patches!  If you can make the service better we will include your patches in our source distributions and on our live service.

Our team:
 * [wiki:People/AmirBakhtiar Amir Bakhtiar], irc: amiramir, [http://www.livejournal.com/users/amiramir blog]
 * [wiki:People/GlyphLefkowitz Glyph Lefkowitz], irc: glyph, [http://www.livejournal.com/users/glyf blog]
 * [wiki:People/JeanPaulCalderone JP Calderone], irc: exarkun, [http://www.livejournal.com/users/jcalderone blog]
 * [wiki:People/AllenShort Allen Short], irc: dash
 * [wiki:People/MoeAboulkheir Moe Aboulkheir], irc: moea

Alumni:
 * [wiki:People/DonovanPreston Donovan Preston], irc: fzZzy, [http://ulaluma.com/pyx/ blog]
 * [wiki:People/MikeSalib Mike Salib], irc: msalib
 * [wiki:People/MarkWittner Mark Wittner], irc: token
 * [wiki:People/JonathanSimms Jonathan Simms], irc: slyphon

","slightly smoother language",0
418,14,1133547513.4758,amir,198.49.126.204,"= ClickChronicle Alpha =
  Welcome intrepid alpha tester and Divmod fan!
  We hope you enjoy our latest offering.

== Disclaimer ==
  This is alpha software and it may break. We have tested the software, but during the alpha period we may have to restart the service erasing your account and data. We will do our best to avoid this but you have been warned.

= Overview =

From the ClickChronicle [http://clickchronicle.com/faq FAQ]

  1. What is ClickChronicle?
  ClickChronicle keeps a record of your web browsing and allows you to search all the web pages that you have visited.

  We are staring Alpha testing and would appreciate your help in shaking down any bugs and enhancing the product.

  The service is ''Firefox only'' and  has 2 parts: a click recorder and the clickchronicle.com service. The click recorder is a Firefox extension and can be installed by following the instructions below.

= Getting started =

 * Go to http://clickchronicle.com/signup
 * Enter your email address
 * Check your email for registration confirmation
 * Follow the link in the email to activate your account
 * Select a password
 * Click on 'My Clicks' in the navigation on the left hand side
 * Click on 'Get Extension'
 * Go through the 'Edit Options' > 'Allow' extension installation dance
 * Open a new browser window or tab
 * Notice the small ClickChronicle pause/record button in the Navigation Toolbar
 * When the extension is recording a pause button will display. Clicking on it will suspend the sending of clicks to ClickChronicle.
 * When the extension is paused a record button will display. Clicking on it will start recording clicks to ClickChronicle.
 * By default, all recorded clicks are anonymously published and tallied on the front page. We encourage you to share you clicks since it makes the front page more useful and fun. However if you do not feel comfortable with anonymously publishing you clicks you can disable it by clicking on 'My account' and setting the 'Share Clicks (Anonymously) to 'No'.
 * Clicking on the button starts recording clicks to clickchronicle.com and displays 'CC On' on a dark blue background: http://divmod.org/users/amir/screenshots/ccon.png
 * Once you have switched click recording on you should visit a few sites and then go to clickchronicle to ensure that the clicks have got through.

= Reporting bugs and requesting features =
  If you have problems, suggestion or feedback please create a [http://divmod.org/trac/newticket?component=ClickChronicle new ticket]. Don't be shy! We love to hear from you.
",',0
419,15,1133548141.89205,amir,198.49.126.204,"= ClickChronicle Alpha =
  Welcome intrepid alpha tester and Divmod fan!
  We hope you enjoy our latest offering.

== Disclaimer ==
  This is alpha software and it may break. We have tested the software, but during the alpha period we may have to restart the service erasing your account and data. We will do our best to avoid this but you have been warned.

= Overview =

From the ClickChronicle [http://clickchronicle.com/faq FAQ]

  1. What is ClickChronicle?
  ClickChronicle keeps a record of your web browsing and allows you to search all the web pages that you have visited.

  We are staring Alpha testing and would appreciate your help in shaking down any bugs and enhancing the product.

  The service is ''Firefox only'' and  has 2 parts: a click recorder and the clickchronicle.com service. The click recorder is a Firefox extension and can be installed by following the instructions below.

= Getting started =

 * Go to http://clickchronicle.com/signup
 * Enter your email address
 * Check your email for registration confirmation
 * Follow the link in the email to activate your account
 * Select a password
 * Click on 'My Clicks' in the navigation on the left hand side
 * Click on 'Get Extension'
 * Go through the 'Edit Options' > 'Allow' extension installation dance
 * Open a new browser window or tab
 * Notice the small ClickChronicle pause/record button in the Navigation Toolbar
 * When the extension is recording a pause button will display http://divmod.org/users/amir/screenshots/ext.pause.png. Clicking on it will suspend the sending of clicks to ClickChronicle.
 * When the extension is paused a record button will display http://divmod.org/users/amir/screenshots/ext.record.png. Clicking on it will start recording clicks to ClickChronicle.
 * By default, all recorded clicks are anonymously published and tallied on the front page. We encourage you to share you clicks since it makes the front page more useful and fun. However if you do not feel comfortable with anonymously publishing you clicks you can disable it by clicking on 'My account' and setting the 'Share Clicks (Anonymously) to 'No'.
 * Clicking on the button starts recording clicks to clickchronicle.com and displays 'CC On' on a dark blue background: http://divmod.org/users/amir/screenshots/ext.pause.png
 * Once you have switched click recording on you should visit a few sites and then go to clickchronicle to ensure that the clicks have got through.

= Reporting bugs and requesting features =
  If you have problems, suggestion or feedback please create a [http://divmod.org/trac/newticket?component=ClickChronicle new ticket]. Don't be shy! We love to hear from you.
",',0
420,16,1133548366.5525,amir,198.49.126.204,"= ClickChronicle Alpha =
  Welcome intrepid alpha tester and Divmod fan!
  We hope you enjoy our latest offering.

== Disclaimer ==
  This is alpha software and it may break. We have tested the software, but during the alpha period we may have to restart the service erasing your account and data. We will do our best to avoid this but you have been warned.

= Overview =

From the ClickChronicle [http://clickchronicle.com/faq FAQ]

  1. What is ClickChronicle?
  ClickChronicle keeps a record of your web browsing and allows you to search all the web pages that you have visited.

  We are staring Alpha testing and would appreciate your help in shaking down any bugs and enhancing the product.

  The service is ''Firefox only'' and  has 2 parts: a click recorder and the clickchronicle.com service. The click recorder is a Firefox extension and can be installed by following the instructions below.

= Getting started =

 * Go to http://clickchronicle.com/signup
 * Enter your email address
 * Check your email for registration confirmation
 * Follow the link in the email to activate your account
 * Select a password
 * Click on 'My Clicks' in the navigation on the left hand side
 * Click on 'Get Extension'
 * Go through the 'Edit Options' > 'Allow' extension installation dance
 * Open a new browser window or tab
 * Notice the small ClickChronicle pause/record button in the Navigation Toolbar
 * When the extension is recording a pause button will display http://divmod.org/users/amir/screenshots/ext.pause.png. Clicking on it will suspend the sending of clicks to ClickChronicle.
 * When the extension is paused a record button will display http://divmod.org/users/amir/screenshots/ext.record.png. Clicking on it will start recording clicks to ClickChronicle.
 * By default, all recorded clicks are anonymously published and tallied on the front page. We encourage you to share you clicks since it makes the front page more useful and fun. However if you do not feel comfortable with anonymously publishing you clicks you can disable it by clicking on 'My account' and setting the 'Share Clicks (Anonymously) to 'No'.
 * Once you have switched click recording on you should visit a few sites and then go to clickchronicle to ensure that the clicks have got through.

= Reporting bugs and requesting features =
  If you have problems, suggestion or feedback please create a [http://divmod.org/trac/newticket?component=ClickChronicle new ticket]. Don't be shy! We love to hear from you.
",',0
421,52,1133604871.96279,glyph,198.49.126.204,"= Welcome to the Divmod Community =
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of [wiki:PythonLanguage Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

= Here to help out? =
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The divmod company] would like our software to do anything and everything, but with a fledgeling business to run, we have to make some tough choices with our tiem.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
=== Help and Support ===
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * UsefulQueries
== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleAlpha ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric roleplaying game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]",',0
422,1,1133605268.21589,glyph,198.49.126.204,"= Community Goals =

These are tickets that nobody in Divmod, Inc. proper is working on, but we'd love to see done for personal reasons.  Here are a few:

For finger exercises, you might want to attempt #398 and #399; these should be trivial but a good exercise for a beginner to find the right place to commit.  #400 isn't quite as simple, but it still shouldn't make your brain explode.  #324, a last updated attribute (or feature of the timestamp attribute type), also shouldn't be a huge amount of work.

Also on the easy side would be tickets like #3, detecting whether cookies can be set and doing something meaningful with that information.

We really need more ways to keep track of what's going on in an Axiom server.  #262 - upgrade status tracking - is a good example of a feature in that vein that's missing.

For those of you interested in database work, some challenging tickets: live queries that you can watch as they change, through the web: #161.  You could fix a highly subtle failure mode of the upgrade process, #301.  Or, you could implement proper nested transactions on top of Axiom's existing transaction support: #252.  Constraints might also be interesting: #366.",',0
423,53,1133625513.02415,amir,198.49.126.204,"= Welcome to the Divmod Community =
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of [wiki:PythonLanguage Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

= Here to help out? =
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgeling business to run, we have to make some tough choices with our tiem.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
=== Help and Support ===
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * UsefulQueries
== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleAlpha ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric roleplaying game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]","upper case Divmod",0
424,54,1133717305.20936,exarkun,198.49.126.204,"= Welcome to the Divmod Community =
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of [wiki:PythonLanguage Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

= Here to help out? =
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgeling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
=== Help and Support ===
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * UsefulQueries
== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleAlpha ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric roleplaying game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]","fix typo",0
425,55,1133758147.37959,amir,198.49.126.204,"= Welcome to the Divmod Community =
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of [wiki:PythonLanguage Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

= Here to help out? =
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
=== Help and Support ===
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * UsefulQueries
== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleAlpha ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]",typos,0
426,2,1133990051.661,njs@pobox.com,198.49.126.204,"= Community Goals =

These are tickets that nobody in Divmod, Inc. proper is working on, but we'd love to see done for personal reasons.  Here are a few:

For finger exercises, you might want to attempt #398 and #399; these should be trivial but a good exercise for a beginner to find the right place to commit.  #400 isn't quite as simple, but it still shouldn't make your brain explode.  #324, a last updated attribute (or feature of the timestamp attribute type), also shouldn't be a huge amount of work.

Also on the easy side would be tickets like #3, detecting whether cookies can be set and doing something meaningful with that information.

We really need more ways to keep track of what's going on in an Axiom server.  #262 - upgrade status tracking - is a good example of a feature in that vein that's missing.

For those of you interested in database work, some challenging tickets: live queries that you can watch as they change, through the web: #161.  You could fix a highly subtle failure mode of the upgrade process, #301.  Or, you could implement proper nested transactions on top of Axiom's existing transaction support: #252.  Or support important missing parts of the relational model: add constraints: #366, or complex indices: #461, or the ability to join multiply against the same table: #453.",',0
427,5,1134010351.50194,njs@pobox.com,198.49.126.204,"= [wiki:WikiStart Divmod] : Combinator =

Combinator is a tool that Divmod Python programmers use to manage multiple branches of our software.  It integrates with Subversion.

It can be used to manage any number of branches with any number of projects.  It sets up your Python sys.path to point at the appropriate directories for the set of branches you are currently working on.

It is mainly of interest if you are checking code out of SVN: users of installed versions of Divmod software can probably ignore this project (for now).

== Download ==
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Combinator Combinator
 * mkdir -p Divmod/trunk
 * mv Combinator Divmod/trunk/

== Use ==

Start with README.txt to get your environment set up.

=== chbranch ===

=== mkbranch ===

=== unbranch ===
",',0
428,5,1134013930.28041,njs@pobox.com,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the AxiomProject object database, and the TwistedFramework, as well as web user-interface utilities.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicleAlpha), and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.3.1.tar.gz?format=raw Get the most recent release - 0.3.1!] ([http://www.livejournal.com/users/glyf/45801.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality",',0
429,1,1134021402.17443,njs@pobox.com,198.49.126.204,"== Roles ==

A Role is the core concept of the permissions system; when we want to find out whether someone has permission to do something, we actually find their Role, and then we ask whether that Role has permission to do whatever it is.

One Role can be a member of another Role; this means it can do do anything that other Role can do, and possibly more.

There are two basic Roles built in.  The first is the 'Everybody' Role, which everyone is a member of -- even anonymous users who don't have an account at all.  If you want to make something totally public, give the Everybody Role permission to access it.

The second basic Role is the 'Authenticated' Role; everyone who has an account is a member of this Role.  If you want something to require that someone is logged in to see it -- you don't care who they are, just so long as they have _some_ sort of account -- then grant the Authenticated Role permission to access it.  The Authenticated Role is a member of the Everybody Role.

Finally, there are per-user Role's -- each user has their own Role, that is theirs and theirs alone.  This is used to grant permissions to particular individuals.  These Roles are members of the Authenticated Role.

Arbitrary other Role's can also be created.  These have no special meaning associated with them; that's up to you to define.  They can be granted permissions like any other Role's; and, other Role's can be added to them.  (Which is useful, or no-one would ever have one of these Role's, so granting the Role permissions would be of little practical benefit.)  The simplest case would be to create a new Role and then add various users's Roles to it; this would emulate a traditional unix group.  However, it is more flexible; Mantissa Role's can contain _arbitrary_ other Role's; it is as if you could put one unix group inside another, and then both of them inside a third.",',0
430,2,1134021581.52647,njs@pobox.com,198.49.126.204,"== Roles ==

A Role is the core concept of the permissions system; when we want to find out whether someone has permission to do something, we actually find their Role, and then we ask whether that Role has permission to do whatever it is.

One Role can be a member of another Role; this means it can do do anything that other Role can do, and possibly more.

There are two basic Roles built in.  The first is the 'Everybody' Role, which everyone is a member of -- even anonymous users who don't have an account at all.  If you want to make something totally public, give the Everybody Role permission to access it.

The second basic Role is the 'Authenticated' Role; everyone who has an account is a member of this Role.  If you want something to require that someone is logged in to see it -- you don't care who they are, just so long as they have _some_ sort of account -- then grant the Authenticated Role permission to access it.  The Authenticated Role is a member of the Everybody Role.

Finally, there are per-user Role's -- each user has their own Role, that is theirs and theirs alone.  This is used to grant permissions to particular individuals.  These Roles are members of the Authenticated Role.  (NB: These Role's are created lazily.  If you want to check someone's permissions, just call getPrimaryRole(username); if you want to modify their permissions somehow, e.g. by granting them access to something or giving them another Role, call getPrimaryRole(username, True).  This could perhaps be simplified...)

Arbitrary other Role's can also be created.  These have no special meaning associated with them; that's up to you to define.  They can be granted permissions like any other Role's; and, other Role's can be added to them.  (Which is useful, or no-one would ever have one of these Role's, so granting the Role permissions would be of little practical benefit.)  The simplest case would be to create a new Role and then add various users's Roles to it; this would emulate a traditional unix group.  However, it is more flexible; Mantissa Role's can contain _arbitrary_ other Role's; it is as if you could put one unix group inside another, and then both of them inside a third.",',0
431,3,1134059593.97448,exarkun,198.49.126.204,"== Roles ==

A Role is the core concept of the permissions system; when we want to find out whether someone has permission to do something, we actually find their Role, and then we ask whether that Role has permission to do whatever it is.

One Role can be a member of another Role; this means it can do do anything that other Role can do, and possibly more.

There are two basic Roles built in.  The first is the 'Everybody' Role, which everyone is a member of -- even anonymous users who don't have an account at all.  If you want to make something totally public, give the Everybody Role permission to access it.

The second basic Role is the 'Authenticated' Role; everyone who has an account is a member of this Role.  If you want something to require that someone is logged in to see it -- you don't care who they are, just so long as they have _some_ sort of account -- then grant the Authenticated Role permission to access it.  The Authenticated Role is a member of the Everybody Role.

Finally, there are per-user Roles -- each user has their own Role, that is theirs and theirs alone.  This is used to grant permissions to particular individuals.  These Roles are members of the Authenticated Role.  (NB: These Roles are created lazily.  If you want to check someone's permissions, just call getPrimaryRole(username); if you want to modify their permissions somehow, e.g. by granting them access to something or giving them another Role, call getPrimaryRole(username, True).  This could perhaps be simplified...)

Arbitrary other Roles can also be created.  These have no special meaning associated with them; that's up to you to define.  They can be granted permissions like any other Roles; and, other Roles can be added to them.  (Which is useful, or no-one would ever have one of these Roles, so granting the Role permissions would be of little practical benefit.)  The simplest case would be to create a new Role and then add various users' Roles to it; this would emulate a traditional unix group.  However, it is more flexible; Mantissa Roles can contain _arbitrary_ other Roles; it is as if you could put one unix group inside another, and then both of them inside a third.",',0
432,11,1134408796.35088,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Deployment Techniques =
A summary of Nevow deployment techniques
== Reverse Proxy with [http://lighttpd.net/ Lighttpd] and VHostMonsterResource ==
 '''Rationale'''::
  I have a server running Lighttpd on port 80, doing [http://httpd.apache.org/docs/2.0/vhosts/name-based.html name based virtual hosting] of several existing websites. I want to add a new Nevow based website (www.example.com).
 '''Solution'''::
  Lighttpd provides a [http://lighttpd.net/documentation/proxy.html proxy module] which can forward incoming requests to a slave webserver. The resulting content may contain absolute urls which must be rewritten before being returned to the client. This is handled by Nevow.vhost.VHostMonsterResource.
  === Nevow App: ===
  {{{
#!python
from twisted.application import service, strports
 
from nevow import appserver, rend, tags, loaders, vhost

class MyPage(rend.Page):
    addSlash = True
    def __init__(self, *args, **kw):
        content = kw.get('content', '')
        del kw['content']
        self.docFactory = loaders.stan(
            tags.html[
                tags.head[tags.title[content]],
                tags.body[
                    tags.h1[content]
                ]
            ]
        )
        rend.Page.__init__(self, *args, **kw)

siteRoot = MyPage(content='My Root Page')
siteRoot.putChild('vhost', vhost.VHostMonsterResource())
application = service.Application('reverse proxy / vhost example')
strports.service('8080', appserver.NevowSite(siteRoot)).setServiceParent(application)
}}}
  === Lighttpd Config: ===
  {{{
$HTTP['host'] =~ '^(www.example.com)$' {
        url.rewrite-once = ('^/(.*)' => '/vhost/http/%0/$1')
        proxy.server = ( '' =>
                ( (
                'host' => '127.0.0.1',
                'port' => 8080
                ) )
        )
}
}}}
== See Also ==
 * http://divmod.org/users/exarkun/nevow-doc/nevow-deployment.html
 * http://divmod.org/users/wiki.twistd/nevow/moin.cgi/ApacheSetup
 * http://old.bougyman.com/RailsonDebian.html (You're not going to bother with Rails obviously, but this is a useful guide to installing lighttpd)","Created a Nevow deployment page",0
433,10,1134420143.21425,moe,198.49.126.204,,,
434,13,1134627385.0888,Brendon,198.49.126.204,"=== People Using Divmod Software ===
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + !CherryPy","Straight to English OF site.",0
435,13,1134693351.74517,glyph,198.49.126.204,"= Divmod, Inc. =

http://divmod.org/trac/chrome/common/divmod.png Divmod.org is a community dedicated to producing high quality, open source Python code.

http://divmod.com/ximages/anonymous_logo.png [wiki:DivmodInc Divmod, Inc.] is the company that substantially funds divmod.org, employs many of the programmers writing code on these projects, and created these projects to support our applications.

Here at Divmod (both of them) we strongly believe in honesty and transparency.  Our code and our tasks are right here for you to see.  We are gearing up to provide several different online services, some of which will be free and some of which will be subscription-based, but all of which will place a premium on user satisfaction.  Here is where you can see how we're doing it and know that we really mean it when we say that we value your privacy and security.

If you're an open source programmer and also a Divmod customer or user, contribute some patches!  If you can make the service better we will include your patches in our source distributions and on our live service.

Our team:
 * [wiki:People/AmirBakhtiar Amir Bakhtiar], irc: amiramir, [http://www.livejournal.com/users/amiramir blog]
 * [wiki:People/GlyphLefkowitz Glyph Lefkowitz], irc: glyph, [http://www.livejournal.com/users/glyf blog]
 * [wiki:People/JeanPaulCalderone JP Calderone], irc: exarkun, [http://www.livejournal.com/users/jcalderone blog]
 * [wiki:People/AllenShort Allen Short], irc: dash
 * [wiki:People/MoeAboulkheir Moe Aboulkheir], irc: moea

Alumni:
 * [wiki:People/DonovanPreston Donovan Preston], irc: fzZzy, [http://ulaluma.com/pyx/ blog]
 * [wiki:People/MikeSalib Mike Salib], irc: msalib
 * [wiki:People/MarkWittner Mark Wittner], irc: token
 * [wiki:People/PhilFrost Phil Frost], irc: indigo, [http://bitglue.com/ website]
 * [wiki:People/JonathanSimms Jonathan Simms], irc: slyphon

","Forgot phil!",0
436,1,1134776026.24898,mg,198.49.126.204,,,
437,2,1134776150.12762,mg,198.49.126.204,"= Combinator Tutorial =

[http://divmod.org/trac/wiki/DivmodCombinator Combinator] is a tool to help
developers use and manage multiple branches of software hosted in a
[http://subversion.tigris.org/ Subversion] (SVN from now on) repository.

== Let's Play ==

The last thing you want to do while following this tutorial is scatter files
all over your disk and make changes to a real SVN repository so we'll start by
creating a directory on your disk to play in and a test SVN repository.

Combinator expects the trunk/branches/tags repository structure recommended by the
[http://svnbook.red-bean.com/ Version Control with Subversion] book.

{{{
$ mkdir CombinatorTutorial
$ cd CombinatorTutorial
$ svnadmin create repository
$ svn mkdir -m 'trunk/branches/tags structure' file://`pwd`/repository/trunk file://`pwd`/repository/branches file://`pwd`/repository/tags
$
}}}

== Install Combinator (sort of) ==

Combinator is current only available from Divmod's Subversion repository but
you've already got Subversion installed so it's easy to fetch.

{{{
$ pwd
/home/matt/CombinatorTutorial
$ mkdir -p Divmod/trunk
$ cd Divmod/trunk
$ svn co -q http://divmod.org/svn/Divmod/trunk/Combinator
$ cd ../..
$
}}}

{{{
$ pwd
/home/matt/CombinatorTutorial
$ eval `python Divmod/trunk/Combinator/environment.py`
[...]
$ ls
combinator_paths  Divmod repository
$
}}}

The eval line installs Combinator into your environment. If you like
Combinator you'll probably want to add that line to your shell's startup file
but it's a bit early for that right now ;-).

combinator_paths is a directory that Combinator uses to record what branches
you're working on and any binaries/scripts the branch provides.

(You may be wondering why I created the Divmod/trunk directory. The truth is I
don't know but Combinator seems to need those directories to work out where
your project directory is. Perhaps Combinator's environment.py will accept a
project directory argument one day.)

== Starting work on the Project ==

If you're still with me then this is where we actually start using Combinator.
We need to fetch the project trunk from the SVN repository and register it
with Combinator.

{{{
$ chbranch Project trunk file://`pwd`/repository/trunk
C: Checked out revision 1.
$ ls
combinator_paths  Divmod  Project  repository
$ ls Project/
trunk
$
}}}

Using all the powers my imagination can muster on a Friday evening, I called
the project Project. As you can hopefully see Combinator created the main
directory for Project development and checked out trunk.

Obviously, this is going to be a Twisted project ;-) so we'll get Twisted from
SVN too. (Don't worry, I just want another respository checked out really.)

{{{
$ pwd
/home/matt/CombinatorTutorial
$ chbranch Twisted trunk svn://svn.twistedmatrix.com/svn/Twisted/trunk
[...]
$ ls
combinator_paths  Divmod  Project  repository  Twisted
$ ls Twisted/
trunk
}}}

I mentioned above that Combinator records what branches you're currently
working on. Let's find out what Combinator thinks I'm working on.

{{{
$ whbranch
Project: trunk
Twisted: trunk
$
}}}

== Create a Development Branch ==

At some point we decide to add a substantial new feature to Project.
Obviously, we'd never work directly on trunk so we need a branch to work in.

{{{
$ mkbranch Project say-hello
[...]
$ ls Project/
branches  trunk
$ ls Project/branches/
say-hello
$ whbranch
Project: say-hello
Twisted: trunk
$
}}}

Let's add the exciting new feature.

{{{
$ pwd
/home/matt/CombinatorTutorial
$ cd Project/branches/say-hello/
$ echo 'print 'Hello, Combinator.'' > test.py
$ svn add test.py
$ svn commit -m ''
$
}}}

Hurray, done already! Merge back to trunk so we can roll this out to our eager
customers.

{{{
$ unbranch Project
[...]
$ 
}}}

That actually merges to the local copy of trunk. Check the changes look sane
and then commit.

{{{
$ cd ../../trunk/
$ svn status
A  +   test.py
$ svn commit -m 'Merged say-hello to trunk.'
$ whbranch
Project: trunk
Twisted: trunk
$
}}}",',0
438,3,1134778414.81764,mg,198.49.126.204,"= Combinator Tutorial =

[http://divmod.org/trac/wiki/DivmodCombinator Combinator] is a tool to help
developers use and manage multiple branches of software hosted in a
[http://subversion.tigris.org/ Subversion] (SVN from now on) repository.

== Let's Play ==

The last thing you want to do while following this tutorial is scatter files
all over your disk and make changes to a real SVN repository so we'll start by
creating a directory on your disk to play in and a test SVN repository.

Combinator expects the trunk/branches/tags repository structure recommended by the
[http://svnbook.red-bean.com/ Version Control with Subversion] book.

{{{
$ mkdir CombinatorTutorial
$ cd CombinatorTutorial
$ svnadmin create repository
$ svn mkdir -m 'trunk/branches/tags structure' file://`pwd`/repository/trunk file://`pwd`/repository/branches file://`pwd`/repository/tags
$
}}}

== Install Combinator (sort of) ==

Combinator is current only available from Divmod's Subversion repository but
you've already got Subversion installed so it's easy to fetch.

{{{
$ pwd
/home/matt/CombinatorTutorial
$ mkdir -p Divmod/trunk
$ cd Divmod/trunk
$ svn co -q http://divmod.org/svn/Divmod/trunk/Combinator
$ cd ../..
$
}}}

{{{
$ pwd
/home/matt/CombinatorTutorial
$ eval `python Divmod/trunk/Combinator/environment.py`
[...]
$ ls
combinator_paths  Divmod repository
$
}}}

The eval line installs Combinator into your environment. If you like
Combinator you'll probably want to add that line to your shell's startup file
but it's a bit early for that right now ;-).

combinator_paths is a directory that Combinator uses to record what branches
you're working on and any binaries/scripts the branch provides.

(You may be wondering why I created the Divmod/trunk directory. The truth is I
don't know but Combinator seems to need those directories to work out where
your project directory is. Perhaps Combinator's environment.py will accept a
project directory argument one day.)

== Starting work on the Project ==

If you're still with me then this is where we actually start using Combinator.
We need to fetch the project trunk from the SVN repository and register it
with Combinator.

{{{
$ chbranch Project trunk file://`pwd`/repository/trunk
C: Checked out revision 1.
$ ls
combinator_paths  Divmod  Project  repository
$ ls Project/
trunk
$
}}}

Using all the powers my imagination can muster on a Friday evening, I called
the project Project. As you can hopefully see Combinator created the main
directory for Project development and checked out trunk.

Obviously, this is going to be a Twisted project ;-) so we'll get Twisted from
SVN too. (Don't worry, I just want another respository checked out really.)

{{{
$ pwd
/home/matt/CombinatorTutorial
$ chbranch Twisted trunk svn://svn.twistedmatrix.com/svn/Twisted/trunk
[...]
$ ls
combinator_paths  Divmod  Project  repository  Twisted
$ ls Twisted/
trunk
}}}

I mentioned above that Combinator records what branches you're currently
working on. Let's find out what Combinator thinks I'm working on.

{{{
$ whbranch
Project: trunk
Twisted: trunk
$
}}}

== Create a Development Branch ==

At some point we decide to add a substantial new feature to Project.
Obviously, we'd never work directly on trunk so we need a branch to work in.

{{{
$ mkbranch Project say-hello
[...]
$ ls Project/
branches  trunk
$ ls Project/branches/
say-hello
$ whbranch
Project: say-hello
Twisted: trunk
$
}}}

Let's add the exciting new feature.

{{{
$ pwd
/home/matt/CombinatorTutorial
$ cd Project/branches/say-hello/
$ echo 'print 'Hello, Combinator.'' > test.py
$ svn add test.py
$ svn commit -m ''
$
}}}

Hurray, done already! Merge back to trunk so we can roll this out to our eager
customers.

{{{
$ unbranch Project
[...]
$ 
}}}

That actually merges to the local copy of trunk. Check the changes look sane
and then commit.

{{{
$ cd ../../trunk/
$ svn status
A  +   test.py
$ svn commit -m 'Merged say-hello to trunk.'
$ whbranch
Project: trunk
Twisted: trunk
$
}}}

== Merging Forward ==

A new feature means a new branch.

{{{
$ pwd
/home/matt/CombinatorTutorial/Project
$ mkbranch Project another-feature
[...]
$ whbranch
Project: another-feature
Twisted: trunk
$ cd branches/another-feature/
$ echo 'print 'Hello, Bloatware.'' > test.py
$ svn commit -m ''
[...]
$
}}}

Half way through development someone merges new code to trunk that would be
really useful to this branch too.

{{{
$ cd ../../trunk/
$ touch another.py
$ svn add another.py
$ svn commit -m ''
$ cd ../branches/another-feature/
$
}}}

We can pick up the changes to trunk and continue development on the branch by
'merging forward'.

{{{
$ unbranch Project; mkbranch Project another-feature-2
$ whbranch
Project: another-feature-2
Twisted: trunk
$ cd ../another-feature-2/
$ svn status
M      test.py
$ ls
another.py  test.py
$
}}}

We complete the development of the new feature, commit and merge to trunk as
before.

{{{
$ svn commit -m ''
$ unbranch Project
$ cd ../../trunk/
$ svn status
M      test.py
$ svn commit -m 'Merged another-feature-2'
$
}}}",',0
439,4,1134779010.62388,mg,198.49.126.204,"= Combinator Tutorial =

[http://divmod.org/trac/wiki/DivmodCombinator Combinator] is a tool to help
developers use and manage multiple branches of software hosted in a
[http://subversion.tigris.org/ Subversion] (SVN from now on) repository.

== Let's Play ==

The last thing you want to do while following this tutorial is scatter files
all over your disk and make changes to a real SVN repository so we'll start by
creating a directory on your disk to play in and a test SVN repository.

Combinator expects the trunk/branches/tags repository structure recommended by the
[http://svnbook.red-bean.com/ Version Control with Subversion] book.

{{{
$ mkdir CombinatorTutorial
$ cd CombinatorTutorial
$ svnadmin create repository
$ svn mkdir -m 'trunk/branches/tags structure' file://`pwd`/repository/trunk file://`pwd`/repository/branches file://`pwd`/repository/tags
$
}}}


== Install Combinator (sort of) ==

Combinator is current only available from Divmod's Subversion repository but
you've already got Subversion installed so it's easy to fetch.

{{{
$ pwd
/home/matt/CombinatorTutorial
$ mkdir -p Divmod/trunk
$ cd Divmod/trunk
$ svn co -q http://divmod.org/svn/Divmod/trunk/Combinator
$ cd ../..
$
}}}

{{{
$ pwd
/home/matt/CombinatorTutorial
$ eval `python Divmod/trunk/Combinator/environment.py`
[...]
$ ls
combinator_paths  Divmod repository
$
}}}

The eval line installs Combinator into your environment. If you like
Combinator you'll probably want to add that line to your shell's startup file
but it's a bit early for that right now ;-).

combinator_paths is a directory that Combinator uses to record what branches
you're working on and any binaries/scripts the branch provides.

(You may be wondering why I created the Divmod/trunk directory. The truth is I
don't know but Combinator seems to need those directories to work out where
your project directory is. Perhaps Combinator's environment.py will accept a
project directory argument one day.)

== Starting work on the Project ==

If you're still with me then this is where we actually start using Combinator.
We need to fetch the project trunk from the SVN repository and register it
with Combinator.

{{{
$ chbranch Project trunk file://`pwd`/repository/trunk
C: Checked out revision 1.
$ ls
combinator_paths  Divmod  Project  repository
$ ls Project/
trunk
$
}}}

Using all the powers my imagination can muster on a Friday evening, I called
the project Project. As you can hopefully see Combinator created the main
directory for Project development and checked out trunk.

Obviously, this is going to be a Twisted project ;-) so we'll get Twisted from
SVN too. (Don't worry, I just want another respository checked out really.)

{{{
$ pwd
/home/matt/CombinatorTutorial
$ chbranch Twisted trunk svn://svn.twistedmatrix.com/svn/Twisted/trunk
[...]
$ ls
combinator_paths  Divmod  Project  repository  Twisted
$ ls Twisted/
trunk
}}}

I mentioned above that Combinator records what branches you're currently
working on. Let's find out what Combinator thinks I'm working on.

{{{
$ whbranch
Project: trunk
Twisted: trunk
$
}}}

== Create a Development Branch ==

At some point we decide to add a substantial new feature to Project.
Obviously, we'd never work directly on trunk so we need a branch to work in.

{{{
$ mkbranch Project say-hello
[...]
$ ls Project/
branches  trunk
$ ls Project/branches/
say-hello
$ whbranch
Project: say-hello
Twisted: trunk
$
}}}

Let's add the exciting new feature.

{{{
$ pwd
/home/matt/CombinatorTutorial
$ cd Project/branches/say-hello/
$ echo 'print 'Hello, Combinator.'' > test.py
$ svn add test.py
$ svn commit -m ''
$
}}}

Hurray, done already! Merge back to trunk so we can roll this out to our eager
customers.

{{{
$ unbranch Project
[...]
$ 
}}}

That actually merges to the local copy of trunk. Check the changes look sane
and then commit.

{{{
$ cd ../../trunk/
$ svn status
A  +   test.py
$ svn commit -m 'Merged say-hello to trunk.'
$ whbranch
Project: trunk
Twisted: trunk
$
}}}

== Merging Forward ==

A new feature means a new branch.

{{{
$ pwd
/home/matt/CombinatorTutorial/Project
$ mkbranch Project another-feature
[...]
$ whbranch
Project: another-feature
Twisted: trunk
$ cd branches/another-feature/
$ echo 'print 'Hello, Bloatware.'' > test.py
$ svn commit -m ''
[...]
$
}}}

Half way through development someone merges new code to trunk that would be
really useful to this branch too.

{{{
$ cd ../../trunk/
$ touch another.py
$ svn add another.py
$ svn commit -m ''
$ cd ../branches/another-feature/
$
}}}

We can pick up the changes to trunk and continue development on the branch by
'merging forward'.

{{{
$ unbranch Project; mkbranch Project another-feature-2
$ whbranch
Project: another-feature-2
Twisted: trunk
$ cd ../another-feature-2/
$ svn status
M      test.py
$ ls
another.py  test.py
$
}}}

We complete the development of the new feature, commit and merge to trunk as
before.

{{{
$ svn commit -m ''
$ unbranch Project
$ cd ../../trunk/
$ svn status
M      test.py
$ svn commit -m 'Merged another-feature-2'
$
}}}

= Final Notes =

Combinator is a useful tool for BranchBasedDevelopment although I think it's still in its infancy. There are other aspects of merging that Combinator could manage that could make it more useful. For instance, some assistance with finalising (commitbranch?) and aborting (rmbranch?) a branch might be nice.

If I ever work out for sure what additional features are required I will [http://divmod.org/trac/newticket create a ticket].",',0
440,6,1134779234.49473,mg,198.49.126.204,"= [wiki:WikiStart Divmod] : Combinator =

Combinator is a tool that Divmod Python programmers use to manage multiple branches of our software.  It integrates with Subversion.

It can be used to manage any number of branches with any number of projects.  It sets up your Python sys.path to point at the appropriate directories for the set of branches you are currently working on.

It is mainly of interest if you are checking code out of SVN: users of installed versions of Divmod software can probably ignore this project (for now).

== Download ==
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Combinator Combinator
 * mkdir -p Divmod/trunk
 * mv Combinator Divmod/trunk/

== Use ==

Start with README.txt to get your environment set up.

CombinatorTutorial is a guide to typical Combinator use including setting up an SVN repository to play with.

=== chbranch ===

=== mkbranch ===

=== unbranch ===
",',0
441,5,1134779307.8683,mg,198.49.126.204,"= Combinator Tutorial =

[http://divmod.org/trac/wiki/DivmodCombinator Combinator] is a tool to help
developers use and manage multiple branches of software hosted in a
[http://subversion.tigris.org/ Subversion] (SVN from now on) repository.

== Let's Play ==

The last thing you want to do while following this tutorial is scatter files
all over your disk and make changes to a real SVN repository so we'll start by
creating a directory on your disk to play in and a test SVN repository.

Combinator expects the trunk/branches/tags repository structure recommended by the
[http://svnbook.red-bean.com/ Version Control with Subversion] book.

{{{
$ mkdir CombinatorTutorial
$ cd CombinatorTutorial
$ svnadmin create repository
$ svn mkdir -m 'trunk/branches/tags structure' file://`pwd`/repository/trunk file://`pwd`/repository/branches file://`pwd`/repository/tags
$
}}}


== Install Combinator (sort of) ==

Combinator is current only available from Divmod's Subversion repository but
you've already got Subversion installed so it's easy to fetch.

{{{
$ pwd
/home/matt/CombinatorTutorial
$ mkdir -p Divmod/trunk
$ cd Divmod/trunk
$ svn co -q http://divmod.org/svn/Divmod/trunk/Combinator
$ cd ../..
$
}}}

{{{
$ pwd
/home/matt/CombinatorTutorial
$ eval `python Divmod/trunk/Combinator/environment.py`
[...]
$ ls
combinator_paths  Divmod repository
$
}}}

The eval line installs Combinator into your environment. If you like
Combinator you'll probably want to add that line to your shell's startup file
but it's a bit early for that right now ;-).

combinator_paths is a directory that Combinator uses to record what branches
you're working on and any binaries/scripts the branch provides.

(You may be wondering why I created the Divmod/trunk directory. The truth is I
don't know but Combinator seems to need those directories to work out where
your project directory is. Perhaps Combinator's environment.py will accept a
project directory argument one day.)

== Starting work on the Project ==

If you're still with me then this is where we actually start using Combinator.
We need to fetch the project trunk from the SVN repository and register it
with Combinator.

{{{
$ chbranch Project trunk file://`pwd`/repository/trunk
C: Checked out revision 1.
$ ls
combinator_paths  Divmod  Project  repository
$ ls Project/
trunk
$
}}}

Using all the powers my imagination can muster on a Friday evening, I called
the project Project. As you can hopefully see Combinator created the main
directory for Project development and checked out trunk.

Obviously, this is going to be a Twisted project ;-) so we'll get Twisted from
SVN too. (Don't worry, I just want another respository checked out really.)

{{{
$ pwd
/home/matt/CombinatorTutorial
$ chbranch Twisted trunk svn://svn.twistedmatrix.com/svn/Twisted/trunk
[...]
$ ls
combinator_paths  Divmod  Project  repository  Twisted
$ ls Twisted/
trunk
}}}

I mentioned above that Combinator records what branches you're currently
working on. Let's find out what Combinator thinks I'm working on.

{{{
$ whbranch
Project: trunk
Twisted: trunk
$
}}}

== Create a Development Branch ==

At some point we decide to add a substantial new feature to Project.
Obviously, we'd never work directly on trunk so we need a branch to work in.

{{{
$ mkbranch Project say-hello
[...]
$ ls Project/
branches  trunk
$ ls Project/branches/
say-hello
$ whbranch
Project: say-hello
Twisted: trunk
$
}}}

Let's add the exciting new feature.

{{{
$ pwd
/home/matt/CombinatorTutorial
$ cd Project/branches/say-hello/
$ echo 'print 'Hello, Combinator.'' > test.py
$ svn add test.py
$ svn commit -m ''
$
}}}

Hurray, done already! Merge back to trunk so we can roll this out to our eager
customers.

{{{
$ unbranch Project
[...]
$ 
}}}

That actually merges to the local copy of trunk. Check the changes look sane
and then commit.

{{{
$ cd ../../trunk/
$ svn status
A  +   test.py
$ svn commit -m 'Merged say-hello to trunk.'
$ whbranch
Project: trunk
Twisted: trunk
$
}}}

== Merging Forward ==

A new feature means a new branch.

{{{
$ pwd
/home/matt/CombinatorTutorial/Project
$ mkbranch Project another-feature
[...]
$ whbranch
Project: another-feature
Twisted: trunk
$ cd branches/another-feature/
$ echo 'print 'Hello, Bloatware.'' > test.py
$ svn commit -m ''
[...]
$
}}}

Half way through development someone merges new code to trunk that would be
really useful to this branch too.

{{{
$ cd ../../trunk/
$ touch another.py
$ svn add another.py
$ svn commit -m ''
$ cd ../branches/another-feature/
$
}}}

We can pick up the changes to trunk and continue development on the branch by
'merging forward'.

{{{
$ unbranch Project; mkbranch Project another-feature-2
$ whbranch
Project: another-feature-2
Twisted: trunk
$ cd ../another-feature-2/
$ svn status
M      test.py
$ ls
another.py  test.py
$
}}}

We complete the development of the new feature, commit and merge to trunk as
before.

{{{
$ svn commit -m ''
$ unbranch Project
$ cd ../../trunk/
$ svn status
M      test.py
$ svn commit -m 'Merged another-feature-2'
$
}}}

= Final Notes =

Combinator is a useful tool for BranchBasedDevelopment although I think it's still in its infancy. There are other aspects of merging that Combinator could manage that may make it more useful. For instance, some assistance with finalising (commitbranch?) and aborting (rmbranch?) a branch might be nice.

If I ever work out for sure what additional features are required I will [http://divmod.org/trac/newticket create a ticket].",',0
442,1,1134817740.64168,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Deployment Techniques =
A summary of Nevow deployment techniques

== See Also ==
 * http://divmod.org/users/exarkun/nevow-doc/nevow-deployment.html",created,0
443,1,1134821280.93944,rwall,198.49.126.204,"= [wiki:DivmodNevow/Deployment Nevow Deployment] : Reverse Proxy =
A Reverse Proxy forwards the requests it receives from the internet to one or more slave webservers. Lighttpd and Apache both provide reverse proxy modules. Any absolute urls in the response will contain the [http://en.wikipedia.org/wiki/URL#URL_scheme scheme] (possibly the hostname) and port number on which the slave is running. These must be rewritten before being returned to the client. In Nevow this can be handled by [source:trunk/Nevow/nevow/vhost.py vhost.VHostMonsterResource]. 
== Example 1 ==
You have an existing webserver running on port 80, doing [http://httpd.apache.org/docs/2.0/vhosts/name-based.html name based virtual hosting] of several existing websites and want to run a Nevow based site alongside them on the same IP.
== Solution ==
Forward all requests at this virtual host to the Nevow slave server.
=== Sample Nevow App ===
{{{
#!python
from twisted.application import service, strports
 
from nevow import appserver, rend, tags, loaders, vhost

class MyPage(rend.Page):
    addSlash = True
    def __init__(self, *args, **kw):
        content = kw.get('content', '')
        del kw['content']
        self.docFactory = loaders.stan(
            tags.html[
                tags.head[tags.title[content]],
                tags.body[
                    tags.h1[content]
                ]
            ]
        )
        rend.Page.__init__(self, *args, **kw)

siteRoot = MyPage(content='My Root Page')
siteRoot.putChild('vhost', vhost.VHostMonsterResource())
application = service.Application('reverse proxy / vhost example')
strports.service('8080', appserver.NevowSite(siteRoot)).setServiceParent(application)
}}}
Save as eg sample.tac and run using twistd -noy sample.tac
=== Sample Lighttpd Config: ===
{{{
$HTTP['host'] =~ '^(www.example.com)$' {
        url.rewrite-once = ('^/(.*)' => '/vhost/http/%0/$1')
        # In lighttpd we alter the path manually using rewrite rule. %0 refers to the hostname and $1 is the path.
        proxy.server = ( '' =>
                ( (
                'host' => '127.0.0.1',
                'port' => 8080
                ) )
        )
}
}}}
=== Sample Apache Config ([http://divmod.org/users/wiki.twistd/nevow/moin.cgi/ApacheSetup Ref]) ===
{{{
<VirtualHost www.example.com>
ProxyPass / http://localhost:8080/vhost/http/www.example.com/
ServerName www.example.com
</VirtualHost>
}}}
== Example 2 ==
Nevow is only to be used for part of an existing static site at a non-root url
=== Sample Lighttpd Config: ===
TODO
=== Sample Apache Config ===
TODO
== See Also ==
 * http://lighttpd.net/documentation/proxy.html
 * http://httpd.apache.org/docs/2.0/mod/mod_proxy.html#proxypass",created,0
444,2,1134821495.44433,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Deployment Techniques =
A summary of Nevow deployment techniques:
 '''[wiki:DivmodNevow/Deployment/ReverseProxy Reverse Proxy]'''::
  How to run Nevow apps behind an existing webserver; alongside, or as part of existing web sites.

== See Also ==
 * http://divmod.org/users/exarkun/nevow-doc/nevow-deployment.html","Added reverse proxy item",0
445,18,1134821621.18607,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow (pronounced nou-veau) is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.6.0.tar.gz?format=raw Latest release - 0.6.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * You can see the Nevow examples running here: [http://divmod.org:8081 Nevow Examples].
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://ulaluma.com/pyx/ fzZzy]
 * [query:?group=&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","added deployment techniques",0
446,17,1135004761.56746,amir,198.49.126.204,"= ClickChronicle Alpha =
  Welcome intrepid alpha tester and Divmod fan!
  We hope you enjoy our latest offering.

== Disclaimer ==
  This is alpha software and it may break. We have tested the software, but during the alpha period we may have to restart the service erasing your account and data. We will do our best to avoid this but you have been warned.

= Overview =

From the ClickChronicle [http://clickchronicle.com/faq FAQ]

  1. What is ClickChronicle?
  ClickChronicle keeps a record of your web browsing and allows you to search all the web pages that you have visited.

  We are staring Alpha testing and would appreciate your help in shaking down any bugs and enhancing the product.

  The service is ''Firefox only'' and  has 2 parts: a click recorder and the clickchronicle.com service. The click recorder is a Firefox extension and can be installed by following the instructions below.

= Getting started =

 * Go to http://clickchronicle.com/signup
 * Enter your email address
 * Check your email for registration confirmation
 * Follow the link in the email to activate your account
 * Select a password
 * Click on 'My Clicks' in the navigation on the left hand side
 * Click on 'Get Extension'
 * Go through the 'Edit Options' > 'Allow' extension installation dance
 * Open a new browser window or tab
 * Notice the small ClickChronicle pause/record button in the Navigation Toolbar
 * When the extension is recording a pause button will display http://divmod.org/users/amir/screenshots/ext.pause.png. Clicking on it will suspend the sending of clicks to ClickChronicle.
 * When the extension is paused a record button will display http://divmod.org/users/amir/screenshots/ext.record.png. Clicking on it will start recording clicks to ClickChronicle.
 * By default, all recorded clicks are anonymously published and tallied on the front page. We encourage you to share you clicks since it makes the front page more useful and fun. However if you do not feel comfortable with anonymously publishing you clicks you can disable it by clicking on 'My account' and setting the 'Share Clicks (Anonymously) to 'No'.
 * Once you have switched click recording on you should visit a few sites and then go to clickchronicle to ensure that the clicks have got through.

= Bookmarking =

You can bookmark the current page to your ClickChronicle by dragging clicking on the following 'bookmarklet'. Drag the link named 'CC Bookmark' below to your browser toolbar and click it when logged in to CC and viewing a page. A link to that page will be saved to the Bookmarks section of your ClickChronicle and the page will be indexed for ClickChronicle search. Right now, clicking on the bookmarklet silently bookmarks the page; we will add tagging soon.
{{{
#!html
<a class='bml'
href='javascript:(function(){ javascript:location.href='http://clickchronicle.com/private/record?bookmark=true&url='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title);'
>CC Bookmark</a>
}}}

= Reporting bugs and requesting features =
  If you have problems, suggestion or feedback please create a [http://divmod.org/trac/newticket?component=ClickChronicle new ticket]. Don't be shy! We love to hear from you.
","add bookmarklet",0
447,1,1135005827.64406,amir,198.49.126.204,"= ClickChronicle Beta =
  Welcome intrepid Divmod fan!
  We hope you enjoy our latest offering.

== Disclaimer ==
  This is beta software and it may break. We have tested the software, but during the beta period we may have to restart the service erasing your account and data. We will do our best to avoid this but you have been warned.

= Overview =

From the ClickChronicle [http://clickchronicle.com/faq FAQ]

  1. What is ClickChronicle?
  ClickChronicle keeps a record of your web browsing and allows you to search all the web pages that you have visited.

  We are in our beta period and would appreciate your help in shaking down any bugs and enhancing the product.

  The service is ''Firefox only'' and  has 2 parts: a click recorder and the clickchronicle.com service. The click recorder is a Firefox extension and can be installed by following the instructions below.

= Getting started =

 * Go to http://clickchronicle.com/signup
 * Enter your email address
 * Check your email for registration confirmation
 * Follow the link in the email to activate your account
 * Select a password
 * Click on 'My Clicks' in the navigation on the left hand side
 * Click on 'Get Extension'
 * Go through the 'Edit Options' > 'Allow' extension installation dance
 * Open a new browser window or tab
 * Notice the small ClickChronicle pause/record button in the Navigation Toolbar
 * When the extension is recording a pause button will display http://divmod.org/users/amir/screenshots/ext.pause.png. Clicking on it will suspend the sending of clicks to ClickChronicle.
 * When the extension is paused a record button will display http://divmod.org/users/amir/screenshots/ext.record.png. Clicking on it will start recording clicks to ClickChronicle.
 * By default, all recorded clicks are anonymously published and tallied on the front page. We encourage you to share you clicks since it makes the front page more useful and fun. However if you do not feel comfortable with anonymously publishing you clicks you can disable it by clicking on 'My account' and setting the 'Share Clicks (Anonymously) to 'No'.
 * Once you have switched click recording on you should visit a few sites and then go to clickchronicle to ensure that the clicks have got through.

= Bookmarking =

You can bookmark the current page to your ClickChronicle by dragging clicking on the following 'bookmarklet'. Drag the link named 'CC Bookmark' below to your browser toolbar and click it when logged in to CC and viewing a page. A link to that page will be saved to the Bookmarks section of your ClickChronicle and the page will be indexed for ClickChronicle search. Right now, clicking on the bookmarklet silently bookmarks the page; we will add tagging soon.
{{{
#!html
<a class='bml'
href='javascript:(function(){ javascript:location.href='http://clickchronicle.com/private/record?bookmark=true&url='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title);'
>CC Bookmark</a>
}}}

= Reporting bugs and requesting features =
  If you have problems, suggestion or feedback please create a [http://divmod.org/trac/newticket?component=ClickChronicle new ticket]. Don't be shy! We love to hear from you.
",create,0
448,56,1135005922.93111,amir,198.49.126.204,"= Welcome to the Divmod Community =
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.  We have a variety of [wiki:PythonLanguage Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

= Featured Application =
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 

= Here to help out? =
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
=== Help and Support ===
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * UsefulQueries
== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]","feature cc. move to beta",0
449,2,1135006412.06316,amir,198.49.126.204,"= ClickChronicle Beta =
  Welcome intrepid Divmod fan!
  We hope you enjoy our latest offering.

== Disclaimer ==
  This is beta software and it may break. We have tested the software, but during the beta period we may have to restart the service erasing your account and data. We will do our best to avoid this but you have been warned.

== Requirements ==
  '''ClickChronicle click recoding currently only works with Firefox'''. The ClickChronicle experience is currently optimized for Firefox. You can view and search your clicks using most other browsers including Internet Explorer and Opera however some pages look a little strange ...

= Overview =

From the ClickChronicle [http://clickchronicle.com/faq FAQ]

  1. What is ClickChronicle?
  ClickChronicle keeps a record of your web browsing and allows you to search all the web pages that you have visited.

  We are in our beta period and would appreciate your help in shaking down any bugs and enhancing the product.

  The service is ''Firefox only'' and  has 2 parts: a click recorder and the clickchronicle.com service. The click recorder is a Firefox extension and can be installed by following the instructions below.

= Getting started =

 * Go to http://clickchronicle.com/signup
 * Enter your email address
 * Check your email for registration confirmation
 * Follow the link in the email to activate your account
 * Select a password
 * Click on 'My Clicks' in the navigation on the left hand side
 * Click on 'Get Extension'
 * Go through the 'Edit Options' > 'Allow' extension installation dance
 * Open a new browser window or tab
 * Notice the small ClickChronicle pause/record button in the Navigation Toolbar
 * When the extension is recording a pause button will display http://divmod.org/users/amir/screenshots/ext.pause.png. Clicking on it will suspend the sending of clicks to ClickChronicle.
 * When the extension is paused a record button will display http://divmod.org/users/amir/screenshots/ext.record.png. Clicking on it will start recording clicks to ClickChronicle.
 * By default, all recorded clicks are anonymously published and tallied on the front page. We encourage you to share you clicks since it makes the front page more useful and fun. However if you do not feel comfortable with anonymously publishing you clicks you can disable it by clicking on 'My account' and setting the 'Share Clicks (Anonymously) to 'No'.
 * Once you have switched click recording on you should visit a few sites and then go to clickchronicle to ensure that the clicks have got through.

= Bookmarking =

You can bookmark the current page to your ClickChronicle by dragging clicking on the following 'bookmarklet'. Drag the link named 'CC Bookmark' below to your browser toolbar and click it when logged in to CC and viewing a page. A link to that page will be saved to the Bookmarks section of your ClickChronicle and the page will be indexed for ClickChronicle search. Right now, clicking on the bookmarklet silently bookmarks the page; we will add tagging soon.
{{{
#!html
<a class='bml'
href='javascript:(function(){ javascript:location.href='http://clickchronicle.com/private/record?bookmark=true&url='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title);'
>CC Bookmark</a>
}}}

= Reporting bugs and requesting features =
  If you have problems, suggestion or feedback please create a [http://divmod.org/trac/newticket?component=ClickChronicle new ticket]. Don't be shy! We love to hear from you.
","metion firefox onlyness",0
450,3,1135009051.14014,amir,198.49.126.204,,,
451,4,1135009785.74914,amir,198.49.126.204,"= ClickChronicle Beta =
  Welcome intrepid Divmod fan!
  We hope you enjoy our latest offering.

== Disclaimer ==
  This is beta software and it may break. We have tested the software, but during the beta period we may have to restart the service erasing your account and data. We will do our best to avoid this but you have been warned.

== Requirements ==
  '''ClickChronicle click recoding currently only works with Firefox'''. The ClickChronicle experience is currently optimized for Firefox. You can view and search your clicks using most other browsers including Internet Explorer and Opera however some pages look a little strange ...

= Overview =

From the ClickChronicle [http://clickchronicle.com/faq FAQ]

  1. What is ClickChronicle?
  ClickChronicle keeps a record of your web browsing and allows you to search all the web pages that you have visited.

  We are in our beta period and would appreciate your help in shaking down any bugs and enhancing the product.

  The service is ''Firefox only'' and  has 2 parts: a click recorder and the clickchronicle.com service. The click recorder is a Firefox extension and can be installed by following the instructions below.

= Getting started =

 * Go to http://clickchronicle.com/signup
 * Enter your email address
 * Check your email for registration confirmation
 * Follow the link in the email to activate your account
 * Select a password
 * Click on 'My Clicks' in the navigation on the left hand side
 * Click on 'Get Extension'
 * Go through the 'Edit Options' > 'Allow' extension installation dance
 * Open a new browser window or tab
 * Notice the small ClickChronicle pause/record button in the Navigation Toolbar
 * When the extension is recording a pause button will display http://divmod.org/users/amir/screenshots/ext.pause.png. Clicking on it will suspend the sending of clicks to ClickChronicle.
 * When the extension is paused a record button will display http://divmod.org/users/amir/screenshots/ext.record.png. Clicking on it will start recording clicks to ClickChronicle.
 * By default, all recorded clicks are anonymously published and tallied on the front page. We encourage you to share you clicks since it makes the front page more useful and fun. However if you do not feel comfortable with anonymously publishing you clicks you can disable it by clicking on 'My account' and setting the 'Share Clicks (Anonymously) to 'No'.
 * Once you have switched click recording on you should visit a few sites and then go to ClickChronicle to ensure that the clicks have got through.

= Click actions =
When viewing clicks you will see a number of icons in the 'Actions' column on the right hand side of that clicks list.

 http://divmod.org/users/amir/screenshots/ccicons/bookmark.png
 http://divmod.org/users/amir/screenshots/ccicons/delete.png
 http://divmod.org/users/amir/screenshots/ccicons/ignore_link.png

 http://divmod.org/users/amir/screenshots/ccicons/bookmark.png - Clicking on this icon will bookmark the click. It will now appear in the Bookmarks section of your ClickChronicle. Unlike normal clicks that eventually get forgotten, bookmarks are stored permanently. Once a click has been bookmarked the bookmark icon will be grayed-out.

 http://divmod.org/users/amir/screenshots/ccicons/delete.png - Clicking on this icon will delete the click/domain/bookmark. This action is immediate, permanent and can not be undone.

 http://divmod.org/users/amir/screenshots/ccicons/ignore_link.png - Clicking on this icon will first delete all clicks to the ''domain'' of the click and will ignore all subsequent clicks to this ''domain''. This is useful for ignoring domains that are either repetitive, have no useful content for later search or you simply don't want to be stored and anonymously reported. Once a click or domain has been ignored the icon will be grayed-out.

 Unblocking blocked domains is currently a little involved and unintuitive: to unblock a domain, find it in the domain browser and delete it. Clicks to the domain will no longer be ignored. We will soon add a blocked-domain browser to ease this task.

= Bookmarking =

You can bookmark the current page to your ClickChronicle by dragging clicking on the following 'bookmarklet'. Drag the link named 'CC Bookmark' below to your browser toolbar and click it when logged in to CC and viewing a page. A link to that page will be saved to the Bookmarks section of your ClickChronicle and the page will be indexed for ClickChronicle search. Right now, clicking on the bookmarklet silently bookmarks the page; we will add tagging soon.
{{{
#!html
<a class='bml'
href='javascript:(function(){ javascript:location.href='http://clickchronicle.com/private/record?bookmark=true&url='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title);'
>CC Bookmark</a>
}}}

= Your clicks and the ClickChronicle front page =

Your clicks get anonymously posted to the ClickChronicle front page. There is no way for anyone (not even the Divmod team) to know which clicks on the front page came from which user. Note that each URL that you visit is only posted once to the front page in a 24 hour period. Clicks will not get posted to the front page in the following circumstances:
 * You have paused click recording in Firefox (see Getting Started section above)
 * You have selected to disable anonymous click sharing in your preferences
 * You have chosen to ignore clicks for the domain you are visiting (see Click Actions section above)
 * You have already visited an URL once during a 24 hour period

Note that even when clicks are not posted to the front page, the click count is incremented.

= Reporting bugs and requesting features =
  If you have problems, suggestion or feedback please create a [http://divmod.org/trac/newticket?component=ClickChronicle new ticket]. Don't be shy! We love to hear from you.
","add section about clicks and the public page",0
452,8,1135132445.56925,exarkun,198.49.126.204,,,
453,19,1135138759.47227,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow (pronounced nou-veau) is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.7.0.tar.gz?format=raw Latest release - 0.7.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * You can see the Nevow examples running here: [http://divmod.org:8081 Nevow Examples].
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://ulaluma.com/pyx/ fzZzy]
 * [query:?group=&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","Bump version",0
454,19,1135140031.05055,exarkun,198.49.126.204,,,
455,6,1135142275.76226,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the AxiomProject object database, and the TwistedFramework, as well as web user-interface utilities.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicleAlpha), and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.4.1.tar.gz?format=raw Get the most recent release - 0.4.1!] ([http://www.livejournal.com/users/jcalderone/18622.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality","Bump version",0
456,20,1135185858.67879,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow (pronounced nou-veau) is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.7.0.tar.gz?format=raw Latest release - 0.7.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * You can see the Nevow examples running here: [http://divmod.org:8081 Nevow Examples].
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?group=&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","Added Tv's blog link",0
457,21,1135186128.95366,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow (pronounced nou-veau) is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.7.0.tar.gz?format=raw Latest release - 0.7.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * You can see the Nevow examples running here: [http://divmod.org:8081 Nevow Examples].
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?group=&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","Added dialtone's blog",0
458,22,1135186866.22656,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow (pronounced nou-veau) is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.7.0.tar.gz?format=raw Latest release - 0.7.0] ([http://www.livejournal.com/users/jcalderone/18096.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * You can see the Nevow examples running here: [http://divmod.org:8081 Nevow Examples].
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?group=&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","Added link to exarkun's release announcement.",0
459,6,1135211775.02509,PenguinOfDoom,198.49.126.204,"= Combinator Tutorial =

[http://divmod.org/trac/wiki/DivmodCombinator Combinator] is a tool to help
developers use and manage multiple branches of software hosted in a
[http://subversion.tigris.org/ Subversion] (SVN from now on) repository.

== Let's Play ==

The last thing you want to do while following this tutorial is scatter files
all over your disk and make changes to a real SVN repository so we'll start by
creating a directory on your disk to play in and a test SVN repository.

Combinator expects the trunk/branches/tags repository structure recommended by the
[http://svnbook.red-bean.com/ Version Control with Subversion] book.

{{{
$ mkdir CombinatorTutorial
$ cd CombinatorTutorial
$ svnadmin create repository
$ svn mkdir -m 'trunk/branches/tags structure' file://`pwd`/repository/trunk file://`pwd`/repository/branches file://`pwd`/repository/tags
$
}}}


== Install Combinator (sort of) ==

Combinator is current only available from Divmod's Subversion repository but
you've already got Subversion installed so it's easy to fetch.

{{{
$ pwd
/home/matt/CombinatorTutorial
$ mkdir -p Divmod/trunk
$ cd Divmod/trunk
$ svn co -q http://divmod.org/svn/Divmod/trunk/Combinator
$ cd ../..
$
}}}

{{{
$ pwd
/home/matt/CombinatorTutorial
$ eval `python Divmod/trunk/Combinator/environment.py`
[...]
$ ls
combinator_paths  Divmod repository
$
}}}

The eval line installs Combinator into your environment. If you like
Combinator you'll probably want to add that line to your shell's startup file
but it's a bit early for that right now ;-).

combinator_paths is a directory that Combinator uses to record what branches
you're working on and any binaries/scripts the branch provides.

(You may be wondering why I created the Divmod/trunk directory. The truth is I
don't know but Combinator seems to need those directories to work out where
your project directory is. Perhaps Combinator's environment.py will accept a
project directory argument one day.)

== Starting work on the Project ==

If you're still with me then this is where we actually start using Combinator.
We need to fetch the project trunk from the SVN repository and register it
with Combinator.

{{{
$ chbranch Project trunk file://`pwd`/repository/trunk
C: Checked out revision 1.
$ ls
combinator_paths  Divmod  Project  repository
$ ls Project/
trunk
$
}}}

Using all the powers my imagination can muster on a Friday evening, I called
the project Project. As you can hopefully see Combinator created the main
directory for Project development and checked out trunk.

Obviously, this is going to be a Twisted project ;-) so we'll get Twisted from
SVN too. (Don't worry, I just want another respository checked out really.)

{{{
$ pwd
/home/matt/CombinatorTutorial
$ chbranch Twisted trunk svn://svn.twistedmatrix.com/svn/Twisted/trunk
[...]
$ ls
combinator_paths  Divmod  Project  repository  Twisted
$ ls Twisted/
trunk
}}}

I mentioned above that Combinator records what branches you're currently
working on. Let's find out what Combinator thinks I'm working on.

{{{
$ whbranch
Project: trunk
Twisted: trunk
$
}}}

== Create a Development Branch ==

At some point we decide to add a substantial new feature to Project.
Obviously, we'd never work directly on trunk so we need a branch to work in.

{{{
$ mkbranch Project say-hello
[...]
$ ls Project/
branches  trunk
$ ls Project/branches/
say-hello
$ whbranch
Project: say-hello
Twisted: trunk
$
}}}

Let's add an exciting new feature.

{{{
$ pwd
/home/matt/CombinatorTutorial
$ cd Project/branches/say-hello/
$ echo 'print 'Hello, Combinator.'' > test.py
$ svn add test.py
$ svn commit -m ''
$
}}}

Hurray, done already! Merge back to trunk so we can roll this out to our eager
customers.

{{{
$ unbranch Project
[...]
$ 
}}}

That actually merges to the local copy of trunk. Check the changes look sane
and then commit.

{{{
$ cd ../../trunk/
$ svn status
A  +   test.py
$ svn commit -m 'Merged say-hello to trunk.'
$ whbranch
Project: trunk
Twisted: trunk
$
}}}

== Merging Forward ==

A new feature means a new branch.

{{{
$ pwd
/home/matt/CombinatorTutorial/Project
$ mkbranch Project another-feature
[...]
$ whbranch
Project: another-feature
Twisted: trunk
$ cd branches/another-feature/
$ echo 'print 'Hello, Bloatware.'' > test.py
$ svn commit -m ''
[...]
$
}}}

Half way through development someone merges new code to trunk that would be
really useful to this branch too.

{{{
$ cd ../../trunk/
$ touch another.py
$ svn add another.py
$ svn commit -m ''
$ cd ../branches/another-feature/
$
}}}

We can pick up the changes to trunk and continue development on the branch by
'merging forward'.

{{{
$ unbranch Project; mkbranch Project another-feature-2
$ whbranch
Project: another-feature-2
Twisted: trunk
$ cd ../another-feature-2/
$ svn status
M      test.py
$ ls
another.py  test.py
$
}}}

We complete the development of the new feature, commit and merge to trunk as
before.

{{{
$ svn commit -m ''
$ unbranch Project
$ cd ../../trunk/
$ svn status
M      test.py
$ svn commit -m 'Merged another-feature-2'
$
}}}

= Final Notes =

Combinator is a useful tool for BranchBasedDevelopment although I think it's still in its infancy. There are other aspects of merging that Combinator could manage that may make it more useful. For instance, some assistance with finalising (commitbranch?) and aborting (rmbranch?) a branch might be nice.

If I ever work out for sure what additional features are required I will [http://divmod.org/trac/newticket create a ticket].",',0
460,23,1135416851.567,glyph,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow (pronounced nou-veau) is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.7.0.tar.gz?format=raw Latest release - 0.7.0] ([http://www.livejournal.com/users/jcalderone/18096.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?group=&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","Example server is temporarily out of service",0
461,24,1135416939.84894,glyph,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow (pronounced as the French 'nouveau', or 'new-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.7.0.tar.gz?format=raw Latest release - 0.7.0] ([http://www.livejournal.com/users/jcalderone/18096.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?group=&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","I think if you know how 'eau' sounds in french you can figure out where the hyphen goes yourself :)",0
462,25,1135450072.25897,tekNico,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.7.0.tar.gz?format=raw Latest release - 0.7.0] ([http://www.livejournal.com/users/jcalderone/18096.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?group=&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","You also surely know how 'ou' sounds in French. ;-)",0
463,3,1135595875.00458,tekNico,198.49.126.204,"= Community Goals =

These are tickets that nobody in Divmod, Inc. proper is working on, but we'd love to see done for personal reasons.  Here are a few:

For finger exercises, you might want to attempt #398 and #399; these should be trivial but a good exercise for a beginner to find the right place to commit.  #400 isn't quite as simple, but it still shouldn't make your brain explode.  #324, a last updated attribute (or feature of the timestamp attribute type), also shouldn't be a huge amount of work.

Also on the easy side would be tickets like #3, detecting whether cookies can be set and doing something meaningful with that information.

We really need more ways to keep track of what's going on in an Axiom server.  #262 - upgrade status tracking - is a good example of a feature in that vein that's missing.

For those of you interested in database work, some challenging tickets: live queries that you can watch as they change, through the web: #161.  You could fix a highly subtle failure mode of the upgrade process, #301.  Or, you could implement proper nested transactions on top of Axiom's existing transaction support: #252.  Or support important missing parts of the relational model: add constraints: #366, or complex indices: #461, or the ability to join multiply against the same table: #453.

== Update ==

Please see #399 for a proposed patch for #398 and #399 issues.
","Added mention of proposed patch for #398 and #399",0
464,4,1135659232.75877,exarkun,198.49.126.204,"= Community Goals =

These are tickets that nobody in Divmod, Inc. proper is working on, but we'd love to see done for personal reasons.  Here are a few:

For finger exercises, you might want to attempt #269 and #457; these should be trivial but a good exercise for a beginner to find the right place to commit.  #400 isn't quite as simple, but it still shouldn't make your brain explode.  #324, a last updated attribute (or feature of the timestamp attribute type), also shouldn't be a huge amount of work.

Also on the easy side would be tickets like #3, detecting whether cookies can be set and doing something meaningful with that information.

We really need more ways to keep track of what's going on in an Axiom server.  #262 - upgrade status tracking - is a good example of a feature in that vein that's missing.

For those of you interested in database work, some challenging tickets: live queries that you can watch as they change, through the web: #161.  You could fix a highly subtle failure mode of the upgrade process, #301.  Or, you could implement proper nested transactions on top of Axiom's existing transaction support: #252.  Or support important missing parts of the relational model: add constraints: #366, or complex indices: #461, or the ability to join multiply against the same table: #453.
","Swap out resolved tickets, insert some new ones",0
465,5,1135659312.86483,exarkun,198.49.126.204,"= Community Goals =

These are tickets that nobody in Divmod, Inc. proper is working on, but we'd love to see done for personal reasons.  Here are a few:

For finger exercises, you might want to attempt #360 and #457; these should be trivial but a good exercise for a beginner to find the right place to commit.  #400 isn't quite as simple, but it still shouldn't make your brain explode.  #324, a last updated attribute (or feature of the timestamp attribute type), also shouldn't be a huge amount of work.

Also on the easy side would be tickets like #3, detecting whether cookies can be set and doing something meaningful with that information.

We really need more ways to keep track of what's going on in an Axiom server.  #262 - upgrade status tracking - is a good example of a feature in that vein that's missing.

For those of you interested in database work, some challenging tickets: live queries that you can watch as they change, through the web: #161.  You could fix a highly subtle failure mode of the upgrade process, #301.  Or, you could implement proper nested transactions on top of Axiom's existing transaction support: #252.  Or support important missing parts of the relational model: add constraints: #366, or complex indices: #461, or the ability to join multiply against the same table: #453.
",',0
466,5,1135659832.92488,exarkun,198.49.126.204,"= ClickChronicle Beta =
  Welcome intrepid Divmod fan!
  We hope you enjoy our latest offering.

== Disclaimer ==
  This is beta software and it may break. We have tested the software, but during the beta period we may have to restart the service erasing your account and data. We will do our best to avoid this but you have been warned.

== Requirements ==
  '''ClickChronicle click recording currently only works with Firefox'''. The ClickChronicle experience is currently optimized for Firefox. You can view and search your clicks using most other browsers including Internet Explorer and Opera, however some pages may look a little strange.

= Overview =

From the ClickChronicle [http://clickchronicle.com/faq FAQ]

  1. What is ClickChronicle?
  ClickChronicle keeps a record of your web browsing and allows you to search all the web pages that you have visited.

  We are in our beta period and would appreciate your help in shaking down any bugs and enhancing the product.

  The service is ''Firefox only'' and  has 2 parts: a click recorder and the clickchronicle.com service. The click recorder is a Firefox extension and can be installed by following the instructions below.

= Getting started =

 * Go to http://clickchronicle.com/signup
 * Enter your email address
 * Check your email for registration confirmation
 * Follow the link in the email to activate your account
 * Select a password
 * Click on 'My Clicks' in the navigation on the left hand side
 * Click on 'Get Extension'
 * Go through the 'Edit Options' > 'Allow' extension installation dance
 * Open a new browser window or tab
 * Notice the small ClickChronicle pause/record button in the Navigation Toolbar
 * When the extension is recording a pause button will display http://divmod.org/users/amir/screenshots/ext.pause.png. Clicking on it will suspend the sending of clicks to ClickChronicle.
 * When the extension is paused a record button will display http://divmod.org/users/amir/screenshots/ext.record.png. Clicking on it will start recording clicks to ClickChronicle.
 * By default, all recorded clicks are anonymously published and tallied on the front page. We encourage you to share you clicks since it makes the front page more useful and fun. However if you do not feel comfortable with anonymously publishing you clicks you can disable it by clicking on 'My account' and setting the 'Share Clicks (Anonymously) to 'No'.
 * Once you have switched click recording on you should visit a few sites and then go to ClickChronicle to ensure that the clicks have got through.

= Click actions =
When viewing clicks you will see a number of icons in the 'Actions' column on the right hand side of that clicks list.

 http://divmod.org/users/amir/screenshots/ccicons/bookmark.png
 http://divmod.org/users/amir/screenshots/ccicons/delete.png
 http://divmod.org/users/amir/screenshots/ccicons/ignore_link.png

 http://divmod.org/users/amir/screenshots/ccicons/bookmark.png - Clicking on this icon will bookmark the click. It will now appear in the Bookmarks section of your ClickChronicle. Unlike normal clicks that eventually get forgotten, bookmarks are stored permanently. Once a click has been bookmarked the bookmark icon will be grayed-out.

 http://divmod.org/users/amir/screenshots/ccicons/delete.png - Clicking on this icon will delete the click/domain/bookmark. This action is immediate, permanent and can not be undone.

 http://divmod.org/users/amir/screenshots/ccicons/ignore_link.png - Clicking on this icon will first delete all clicks to the ''domain'' of the click and will ignore all subsequent clicks to this ''domain''. This is useful for ignoring domains that are either repetitive, have no useful content for later search or you simply don't want to be stored and anonymously reported. Once a click or domain has been ignored the icon will be grayed-out.

 Unblocking blocked domains is currently a little involved and unintuitive: to unblock a domain, find it in the domain browser and delete it. Clicks to the domain will no longer be ignored. We will soon add a blocked-domain browser to ease this task.

= Bookmarking =

You can bookmark the current page to your ClickChronicle by dragging clicking on the following 'bookmarklet'. Drag the link named 'CC Bookmark' below to your browser toolbar and click it when logged in to CC and viewing a page. A link to that page will be saved to the Bookmarks section of your ClickChronicle and the page will be indexed for ClickChronicle search. Right now, clicking on the bookmarklet silently bookmarks the page; we will add tagging soon.
{{{
#!html
<a class='bml'
href='javascript:(function(){ javascript:location.href='http://clickchronicle.com/private/record?bookmark=true&url='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title);'
>CC Bookmark</a>
}}}

= Your clicks and the ClickChronicle front page =

Your clicks get anonymously posted to the ClickChronicle front page. There is no way for anyone (not even the Divmod team) to know which clicks on the front page came from which user. Note that each URL that you visit is only posted once to the front page in a 24 hour period. Clicks will not get posted to the front page in the following circumstances:
 * You have paused click recording in Firefox (see Getting Started section above)
 * You have selected to disable anonymous click sharing in your preferences
 * You have chosen to ignore clicks for the domain you are visiting (see Click Actions section above)
 * You have already visited an URL once during a 24 hour period

Note that even when clicks are not posted to the front page, the click count is incremented.

= Reporting bugs and requesting features =
  If you have problems, suggestion or feedback please create a [http://divmod.org/trac/newticket?component=ClickChronicle new ticket]. Don't be shy! We love to hear from you.
",',0
467,8,1135659911.10233,exarkun,198.49.126.204,"= ClickChronicle =

Is the first publicly-released Divmod application.  It consists of a DivmodMantissa server and a Firefox™ extension that communicate in order to record web pages you visit and index their content for easy searching.  See ClickChronicleBeta for signup information.

ClickChronicle also uses DivmodXapwrap and makes extensive use of LivePage.

You can [http://clickchronicle.com try it online], or [http://divmod.org/trac/attachment/wiki/SoftwareReleases/ClickChronicle-0.2.0.tar.gz?format=raw download the most recently released code - 0.2.0!]

= Testing =

ClickChronicleTestScript",',0
468,6,1135693186.56307,exarkun,198.49.126.204,"= Community Goals =

These are tickets that nobody in Divmod, Inc. proper is working on, but we'd love to see done for personal reasons.  Here are a few:

For finger exercises, you might want to attempt #499, #360 or #457; these should be trivial but a good exercise for a beginner to find the right place to commit.  #400 isn't quite as simple, but it still shouldn't make your brain explode.  #324, a last updated attribute (or feature of the timestamp attribute type), also shouldn't be a huge amount of work.

Also on the easy side would be tickets like #3, detecting whether cookies can be set and doing something meaningful with that information.

We really need more ways to keep track of what's going on in an Axiom server.  #262 - upgrade status tracking - is a good example of a feature in that vein that's missing.

For those of you interested in database work, some challenging tickets: live queries that you can watch as they change, through the web: #161.  You could fix a highly subtle failure mode of the upgrade process, #301.  Or, you could implement proper nested transactions on top of Axiom's existing transaction support: #252.  Or support important missing parts of the relational model: add constraints: #366, or complex indices: #461, or the ability to join multiply against the same table: #453.
",',0
469,7,1135714474.308,dev,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the AxiomProject object database, and the TwistedFramework, as well as web user-interface utilities.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicleAlpha), and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.4.1.tar.gz?format=raw Get the most recent release - 0.4.1!] ([http://www.livejournal.com/users/jcalderone/18622.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (Requires DivmodVertex (+ [http://pyopenssl.sourceforge.net/ pyOpenSSL]) and [http://pytz.sourceforge.net/ PyTZ])

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality",',0
470,2,1135785152.07965,rwall,198.49.126.204,"= [wiki:DivmodNevow/Deployment Nevow Deployment] : Reverse Proxy =
A Reverse Proxy forwards the requests it receives from the internet to one or more slave webservers. Lighttpd and Apache both provide reverse proxy modules. Any absolute urls in the response will contain the [http://en.wikipedia.org/wiki/URL#URL_scheme scheme] (possibly the hostname) and port number on which the slave is running. These must be rewritten before being returned to the client. In Nevow this can be handled by [source:trunk/Nevow/nevow/vhost.py vhost.VHostMonsterResource]. 
== Example 1 ==
You have an existing webserver running on port 80, doing [http://httpd.apache.org/docs/2.0/vhosts/name-based.html name based virtual hosting] of several existing websites and want to run a Nevow based site alongside them on the same IP.
== Solution ==
Forward all requests at this virtual host to the Nevow slave server.
=== Sample Nevow App ===
{{{
#!python
from zope.interface import implements
from twisted.application import service, strports
from nevow import appserver, inevow, loaders, rend, url, vhost

class MyPage(rend.Page):
    '''
    I am a simple resource for demo purposes only. I will return a 'MyPage'
    for any child you ask me to locate. I display the current url as calculated
    nevow.url.
    '''
    addSlash = True
    docFactory = loaders.xmlstr('''
<html xmlns:n='http://nevow.com/ns/nevow/0.1'>
    <head>
        <title n:render='urlpath'></title>
    </head>
    <body>
        <h1 n:render='urlpath'></h1>
    </body>
</html>
''')
    
    def render_urlpath(self, ctx, data):
        return ctx.tag[url.here]
    
    def locateChild(self, ctx, segments):
        return MyPage(), segments[1:]

class VhostFakeRoot:
    '''
    I am a wrapper to be used at site root when you want to combine 
    vhost.VHostMonsterResource with nevow.guard. If you are using guard, you 
    will pass me a guard.SessionWrapper resource.
    '''
    implements(inevow.IResource)
    def __init__(self, wrapped):
        self.wrapped = wrapped
    
    def renderHTTP(self, ctx):
        return self.wrapped.renderHTTP(ctx)
        
    def locateChild(self, ctx, segments):
        '''Returns a VHostMonster if the first segment is 'vhost'. Otherwise
        delegates to the wrapped resource.'''
        if segments[0] == 'vhost':
            return vhost.VHostMonsterResource(), segments[1:]
        else:
            return self.wrapped.locateChild(ctx, segments)

siteRoot = VhostFakeRoot(MyPage())
application = service.Application('reverse proxy / vhost example')
strports.service('8080', appserver.NevowSite(siteRoot)).setServiceParent(application)
}}}
Save as eg sample.tac and run using twistd -noy sample.tac
=== Sample Lighttpd Config: ===
{{{
$HTTP['host'] =~ '^(www.example.com)$' {
        url.rewrite-once = ('^/(.*)' => '/vhost/http/%0/$1')
        # In lighttpd we alter the path manually using rewrite rule. %0 refers to the hostname and $1 is the path.
        proxy.server = ( '' =>
                ( (
                'host' => '127.0.0.1',
                'port' => 8080
                ) )
        )
}
}}}
=== Sample Apache Config ([http://divmod.org/users/wiki.twistd/nevow/moin.cgi/ApacheSetup Ref]) ===
{{{
<VirtualHost www.example.com>
ProxyPass / http://localhost:8080/vhost/http/www.example.com/
ServerName www.example.com
</VirtualHost>
}}}
== Example 2 ==
Nevow is only to be used for part of an existing static site at a non-root url
=== Sample Lighttpd Config: ===
TODO
=== Sample Apache Config ===
TODO
== See Also ==
 * http://lighttpd.net/documentation/proxy.html
 * http://httpd.apache.org/docs/2.0/mod/mod_proxy.html#proxypass","Updated example with to demonstrate how to get vhostMonster working with nevow.guard",0
471,6,1135874329.14992,tekNico,198.49.126.204,"= [wiki:WikiStart Divmod] : Reverend =
Reverend is a general purpose Bayesian classifier, named after Rev. Thomas Bayes. Use the Reverend to quickly add Bayesian smarts to your app. To use it in your own application, you either subclass Bayes or pass it a tokenizing function. Bayesian fun has never been so quick and easy. Many thanks for [http://christophe.delord.free.fr/ Christophe Delord] for his well written PopF. [http://magix.fri.uni-lj.si/orange/ Orange] also looks good. If you are looking for a spam filter take a look at SpamBayes and POPFile.

The Reverend package requires Python 2.3 or later. [http://www.advogato.org/person/leonardr/ Leonard Richardson] has back-ported Reverend for use with Python 1.5.2. You can find his version [http://newsbruiser.tigris.org/source/browse/newsbruiser/nb/lib/reverend/ here].

Some fun stuff is starting to pop up that uses the Reverend: http://jrhicks.net/reverend and [http://newsbruiser.tigris.org/ Newsbruiser].

[http://matt.blogs.it/ Matt Mower] has ported Reverend to Ruby and named it [http://rubyforge.org/projects/bishop/ Bishop].

Stuff you can do with the Reverend:
 * classify RSS stories
 * classify recipes by cuisine
 * who do you write like? Shakespeare, Dickens or Austen
 * detect the language of a document
 * is your code more like Guido's or Peter's

Think about how you want your data tokenized! You can write a custom tokenizer and pass it to Bayes at instance creation. The default tokenizer is named Splitter and is like a glorified version of string.split(): it breaks words/tokens on space and other non-alphanumeric characters. This is fine for many apps, particularly apps around texts in western languages. However, if characters like #!$&, or Unicode are important to your application, you may want to provide you own tokenizer. Also, by default the Reverend expects a string for both training and guessing. If you want to pass it an object, you need to write a tokenizer that knows how to get the tokens out of your object.

Here's some code:
{{{
from reverend.thomas import Bayes
guesser = Bayes()
guesser.train('french', 'le la les du un une je il elle de en')
guesser.train('german', 'der die das ein eine')
guesser.train('spanish', 'el uno una las de la en')
guesser.train('english', 'the it she he they them are were to')
guesser.guess('they went to el cantina')
guesser.guess('they were flying planes')
guesser.train('english', 'the rain in spain falls mainly on the plain')
guesser.save('my_guesser.bay')
}}}

== Download ==
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Reverend
","Download link fixed (thanks to a note from krp on #divmod)",0
472,8,1135878930.4082,dev,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the AxiomProject object database, and the TwistedFramework, as well as web user-interface utilities.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicleAlpha), and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.4.1.tar.gz?format=raw Get the most recent release - 0.4.1!] ([http://www.livejournal.com/users/jcalderone/18622.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (Requires DivmodVertex (+ [http://pyopenssl.sourceforge.net/ pyOpenSSL]) and [http://pytz.sourceforge.net/ PyTZ])

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
 * [wiki:MantissaHowTo HowTo build a Mantissa application]",',0
473,1,1135879076.5277,dev,198.49.126.204,"'''*** this is work in progress and will hopefully evolve into something useful the next few days ***'''",',0
474,2,1135889851.60176,dev,198.49.126.204,"'''*** this is work in progress and will hopefully evolve into something useful the next few days ***'''

= !HowTo write a [wiki:DivmodMantissa Mantissa] application =

== Intro or Why another document? ==

So you have found your way here, perhaps reading through the other pages on this wiki, following irc-logs and blog-postings and you are still uncertain what this talking about [wiki:DivmodMantissa Mantissa] and [wiki:DivmodAxiom Axiom] is and what this things can do for you? Or is it what you can do with them?

Probably we have a few things in common:

 * you havn't imbibed [http://www.python.org Python] from your's infancy - I'm an old C programmer, started with that kind of stuff nearly 25 years ago
 * but the language gripped you and maybe you even had physical contact with [wiki:TwistedFramework Twisted] and Nevow which are some sort of [wiki:DivmodMantissa Mantissa] foundations ( and/or inspiration?).
 * still technical terms and other slang sometimes produce (some) trouble, but in a dark meander of your brain there is something is nudging you that such a thing like a multi-protocol, objects manipulating ... application server is a too interesting thing to let it sink back into the net ocean
 * on the other hand you want to build an application and need to choose a tool for this job. ... You had your time with Zope, looked at other Python frameworks, observed Django and even Ruby on Rails. But they are/seem to be too web-orientated.


More tomorrow...

== Let the games begin! ==",',0
475,7,1135927895.33399,tekNico,198.49.126.204,"= Community Goals =

These are tickets that nobody in Divmod, Inc. proper is working on, but we'd love to see done for personal reasons.  Here are a few:

For finger exercises, you might want to attempt #499, #360 or #457; these should be trivial but a good exercise for a beginner to find the right place to commit.  #400 isn't quite as simple, but it still shouldn't make your brain explode.  #324, a last updated attribute (or feature of the timestamp attribute type), also shouldn't be a huge amount of work.

Also on the easy side would be tickets like #3, detecting whether cookies can be set and doing something meaningful with that information.

We really need more ways to keep track of what's going on in an Axiom server.  #262 - upgrade status tracking - is a good example of a feature in that vein that's missing.

For those of you interested in database work, some challenging tickets: live queries that you can watch as they change, through the web: #161.  You could fix a highly subtle failure mode of the upgrade process, #301.  Or, you could implement proper nested transactions on top of Axiom's existing transaction support: #252.  Or support important missing parts of the relational model: add constraints: #366, or complex indices: #461, or the ability to join multiply against the same table: #453.

== Update ==

Some work given to #360, without a satisfactory outcome unfortunately. Details in the ticket.
","Some work on #360",0
476,8,1135960248.54801,amir,198.49.126.204,"= Community Goals =

These are tickets that nobody in Divmod, Inc. proper is working on, but we'd love to see done for personal reasons.  Here are a few:

For finger exercises, you might want to attempt #499, #360 or #457; these should be trivial but a good exercise for a beginner to find the right place to commit.  #400 isn't quite as simple, but it still shouldn't make your brain explode.  #324, a last updated attribute (or feature of the timestamp attribute type), also shouldn't be a huge amount of work.

Also on the easy side would be tickets like #3, detecting whether cookies can be set and doing something meaningful with that information.

We really need more ways to keep track of what's going on in an Axiom server.  #262 - upgrade status tracking - is a good example of a feature in that vein that's missing.

For those of you interested in database work, some challenging tickets: live queries that you can watch as they change, through the web: #161.  You could fix a highly subtle failure mode of the upgrade process, #301.  Or, you could implement proper nested transactions on top of Axiom's existing transaction support: #252.  Or support important missing parts of the relational model: add constraints: #366, or complex indices: #461, or the ability to join multiply against the same table: #453.

For the more statistically minded we have #516 which asks for your help in creating an improved zeitgeist/popular algorithm for clickchronicle.com

== Update ==

Some work given to #360, without a satisfactory outcome unfortunately. Details in the ticket.
",',0
477,3,1135969346.3474,dev,198.49.126.204,"{{{
This is work in progress and will hopefully evolve into something useful the next few days

Why am I'm writing this? To get myself a better understanding of the way Mantissa ticks.
For the very reason writing this, some things got already more obvious.
And if it is helpful for somebody else too, it has more than served its purpose.

I'm not a native English speaker, if there are too stilted formulations correct them please.
This is valid of course for any errors due to my missing comprehension too.
And as usual, if you find typos you are granted to keep them.
}}}

= !HowTo write a [wiki:DivmodMantissa Mantissa] application... =

== Intro or Why another document? ==

So you have found your way here, perhaps reading through the other pages on this wiki, following irc-logs and blog-postings and you are still uncertain what this talking about [wiki:DivmodMantissa Mantissa] and [wiki:DivmodAxiom Axiom] is and what these things can do for you? Or is it what you can do with them?

Probably we have a few things in common:

 * you havn't imbibed [http://www.python.org Python] from your's infancy - I'm an old C programmer, started with that kind of stuff nearly 25 years ago
 * but the language gripped you and maybe you even had physical contact with [wiki:TwistedFramework Twisted] and Nevow which are some sort of [wiki:DivmodMantissa Mantissa] foundations ''( and/or inspiration?)''.
 * still technical terms and other slang produce (some) trouble, but in a dark meander of your brain there is something nudging you that such a thing like a multi-protocol, objects manipulating, event-driven ... application server is a too interesting find to throw it back into the deep net ocean
 * on the other hand you want to build an application and if you don't want to begin with Adam and Eve you need to choose a tool for this job. Maybe you had your time with Zope, looked at other Python frameworks, observed !TurboGears, Django and even !RubyonRails. But they are/seem to be too web-orientated, too web-focussed. Which is quite ok in todays Web 2.0 wonderland, but you and I know that the browser isn't the Internet and that there are a lot more ways to interchange information, and many things that existed long before someone put three 'w's in a row. ''(some comparison between them, even if they are only frameworks, maybe in a later chapter?)''

Sounds familiar? Ok, then let's walk a few steps together on my witty trail towards our first Mantissa app.

{{{
Small sidekick:

Btw. don't get me wrong, I like the idea of a browser being a client platform or framework.
And having a semantic web. And I'm a big fan of convergence!
But does every coffee mug needs its web (user) interface?
Even houses have web-interfaces nowdays to monitor them - and I know
quite something about this issue - but the heating system is still broken.
Shiny interfaces can only obfuscate basic errors in application design, not fix them. 8)
}}}

Vexed about my babbling? Not even amused or at least thought-provoked? Then the following isn't for you, as you can probably do everything even before breakfast. ;-)

Enough words, let's dive into some action. ''(find a better translation?)''

== Let the games begin! ==

=== Why Mantissa? What's the difference? ===

When I first read about [wiki:DivmodMantissa Mantissa], I think it was [http://www.livejournal.com/users/jcalderone/12585.html this blog entry announcing v0.1] or on the !TwistedMatrix mailing-list, the slogan [wiki:MantissaIsTheDeploymentTarget Mantissa Is The Deployment Target] caught my attention.

In ancient times ''strikt separation between GUI and application logic'' was the key, and a virtue. Something that got lost over the web-app gold-rush years, over the raise of such monstrosities like PHP et al. In this respect the announce of an application server, that seems to not only separate the presentation envelopment but also the protocol envelopment certainly has something inspiring.


''(probably more here, but let's work on the structure now)''

=== Theory of Forms ===

Behind every good computer program stands a good idea.

''Idea'' in the meaning of a flash of a genius, which might make the program even successful.[[BR]] And ''idea'' in the meaning of Plato's ideals, which might make the program even useful.

''(at least something about application design and why Mantissa could enforce a good one and still not spoon-feeding the programmer too much)''



== Prologue ==


'Hey' - I hear you say - 'more than a page of monologue, and no single line of Python?'.[[BR]] You are right, but I think it is worth to first think about what to do and why doing it in this or in that way.[[BR]]
And you are right again, I shouldn't bore you to death with theory, let's start with something more substantial. 

Let me expatiate my little idea.

My son, eight years, asked me some time ago for an interactive map where one could mark places where friends live, where we have been and which he wants to visit once. Something like the ones that hang in offices on the wall, the spots marked with little flags or needles with colored heads.

Perhaps something to enqueue in the growing row of apps sitting upon Google Maps, but a few days ago I stumbled upon someones implementation of a worldclock displaying the time for some cities on a equirectangular projection of satellite images, [http://visibleearth.nasa.gov/view_rec.php?vev1id=11605 NASA's stunning Blue Marble]. I had to modify the worldclock into a mere !JavaScript implementation and while doing this I thought about personalizing the view, the points of interest, a way to interactively add new POIs, to socialize them. And while I started with a [http://netzflocken.de/articles/2005/12/20/worldclock-pimp-up-with-javascript second Athena/Nevow based version] I realized that this could be a nice sandbox project for Mantissa, giving me a reason looking deeper into it.

And while this little idea isn't something that would really fit into its first meaning, at least it should look well in the second.  


== The Drama 1st Act - looking at the blue-print ==

''(explaining the application framework)''


== Second Act - defining the schema objects ==

''(defining the schema objects)''

== Third Act - there's a light ==

''(have a basic app up and running)''


== more to come ==

''(administrative tasks)''

''(Mantissa specifics, signup, login, personalization,... )''

''(polishing the surface(s) )''

''(schema upgrades)''

''(interact with other services, jabber, rss, google map?)''",',0
478,4,1135970693.52101,dev,198.49.126.204,"{{{
This is work in progress and will hopefully evolve into something useful the next few days

Why I'm writing this? To get myself a better understanding of the way Mantissa ticks.
For the very reason writing this, some things got already more obvious.
And if it is helpful for somebody else too, it has more than served its purpose.

I'm not a native English speaker, if there are too stilted formulations correct them please.
This is valid of course for any errors due to my missing comprehension too.
And as usual, if you find typos you are granted to keep them.
}}}

= !HowTo write a [wiki:DivmodMantissa Mantissa] application... =

== Intro or Why another document? ==

So you have found your way here, perhaps reading through the other pages on this wiki, following irc-logs and blog-postings and you are still uncertain what this talking about [wiki:DivmodMantissa Mantissa] and [wiki:DivmodAxiom Axiom] is and what these things can do for you? Or is it what you can do with them?

Probably we have a few things in common:

 * you havn't imbibed [http://www.python.org Python] from your's infancy - I'm an old C programmer, started with that kind of stuff nearly 25 years ago
 * but the language gripped you and maybe you even had physical contact with [wiki:TwistedFramework Twisted] and Nevow which are some sort of [wiki:DivmodMantissa Mantissa] foundations ''( and/or inspiration?)''.
 * still technical terms and other slang produce (some) trouble, but in a dark meander of your brain there is something nudging you that such a thing like a multi-protocol, objects manipulating, event-driven ... application server is a too interesting find to throw it back into the deep net ocean
 * on the other hand you want to build an application and if you don't want to begin with Adam and Eve you need to choose a tool for this job. Maybe you had your time with Zope, looked at other Python frameworks, observed !TurboGears, Django and even !RubyonRails. But they are/seem to be too web-orientated, too web-focussed. Which is quite ok in todays Web 2.0 wonderland, but you and I know that the browser isn't the Internet and that there are a lot more ways to interchange information, and many things that existed long before someone put three 'w's in a row. ''(some comparison between them, even if they are only frameworks, maybe in a later chapter?)''

Sounds familiar? Ok, then let's walk a few steps together on my witty trail towards our first Mantissa app.

{{{
Small sidekick:

Btw. don't get me wrong, I like the idea of a browser being a client platform or framework.
And having a semantic web. And I'm a big fan of convergence!
But does every coffee mug needs its web (user) interface?
Even houses have web-interfaces nowdays to monitor them - and I know
quite something about this issue - but the heating system is still broken.
Shiny interfaces can only obfuscate basic errors in application design, not fix them. 8)
}}}

Vexed about my babbling? Not even amused or at least thought-provoked? Then the following isn't for you, as you can probably do everything even before breakfast. ;-)

Enough words, let's dive into some action. ''(find a better translation?)''

== Let the games begin! ==

=== Why Mantissa? What's the difference? ===

When I first read about [wiki:DivmodMantissa Mantissa], I think it was [http://www.livejournal.com/users/jcalderone/12585.html this blog entry announcing v0.1] or on the !TwistedMatrix mailing-list, the slogan [wiki:MantissaIsTheDeploymentTarget Mantissa Is The Deployment Target] caught my attention.

In ancient times ''strikt separation between GUI and application logic'' was the key, and a virtue. Something that got lost over the web-app gold-rush years, over the raise of such monstrosities like PHP et al. In this respect the announce of an application server, that seems to not only separate the presentation envelopment but also the protocol envelopment certainly has something inspiring.


''(probably more here, but let's work on the structure now)''

=== Theory of Forms ===

Behind every good computer program stands a good idea.

''Idea'' in the meaning of a flash of a genius, which might make the program even successful.[[BR]] And ''idea'' in the meaning of Plato's ideals, which might make the program even useful.

''(at least something about application design and why Mantissa could enforce a good one and still not spoon-feeding the programmer too much)''



== Prologue ==


'Hey' - I hear you say - 'more than a page of monologue, and no single line of Python?'.[[BR]] You are right, but I think it is worth to first think about what to do and why doing it in this or in that way.[[BR]]
And you are right again, I shouldn't bore you to death with theory, let's start with something more substantial. 

Let me expatiate my little idea.

My son, eight years, asked me some time ago for an interactive map where one could mark places where friends live, where we have been and which he wants to visit once. Something like the ones that hang in offices on the wall, the spots marked with little flags or needles with colored heads.

Perhaps something to enqueue in the growing row of apps sitting upon Google Maps, but a few days ago I stumbled upon someones implementation of a worldclock displaying the time for some cities on a equirectangular projection of satellite images, [http://visibleearth.nasa.gov/view_rec.php?vev1id=11605 NASA's stunning Blue Marble]. I had to modify the worldclock into a mere !JavaScript implementation and while doing this I thought about personalizing the view, the points of interest, a way to interactively add new POIs, to socialize them. And while I started with a [http://netzflocken.de/articles/2005/12/20/worldclock-pimp-up-with-javascript second Athena/Nevow based version] I realized that this could be a nice sandbox project for Mantissa, giving me a reason looking deeper into it.

And while this little idea isn't something that would really fit into its first meaning, at least it should look well in the second.  


== The Drama 1st Act - looking at the blue-print ==

''(explaining the application framework)''


== Second Act - defining the schema objects ==

''(defining the schema objects)''

== Third Act - there's a light ==

''(have a basic app up and running)''


== more to come ==

''(administrative tasks)''

''(Mantissa specifics, signup, login, personalization,... )''

''(polishing the surface(s) )''

''(schema upgrades)''

''(interact with other services, jabber, rss, google map?)''",',0
479,9,1136017554.13707,tekNico,198.49.126.204,"= Community Goals =

These are tickets that nobody in Divmod, Inc. proper is working on, but we'd love to see done for personal reasons.  Here are a few:

For finger exercises, you might want to attempt #499, #360 or #457; these should be trivial but a good exercise for a beginner to find the right place to commit.  #400 isn't quite as simple, but it still shouldn't make your brain explode.  #324, a last updated attribute (or feature of the timestamp attribute type), also shouldn't be a huge amount of work.

Also on the easy side would be tickets like #3, detecting whether cookies can be set and doing something meaningful with that information.

We really need more ways to keep track of what's going on in an Axiom server.  #262 - upgrade status tracking - is a good example of a feature in that vein that's missing.

For those of you interested in database work, some challenging tickets: live queries that you can watch as they change, through the web: #161.  You could fix a highly subtle failure mode of the upgrade process, #301.  Or, you could implement proper nested transactions on top of Axiom's existing transaction support: #252.  Or support important missing parts of the relational model: add constraints: #366, or complex indices: #461, or the ability to join multiply against the same table: #453.

For the more statistically minded we have #516 which asks for your help in creating an improved zeitgeist/popular algorithm for clickchronicle.com

== Previous work ==

tekNico: some work on #360, no satisfactory outcome unfortunately.

tekNico: worked on #398 and #399, applied to trunk.
","Changed the 'Update' section into 'Previous work'",0
480,9,1136024833.23961,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the AxiomProject object database, and the TwistedFramework, as well as web user-interface utilities.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicleAlpha), and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.4.1.tar.gz?format=raw Get the most recent release - 0.4.1!] ([http://www.livejournal.com/users/jcalderone/18622.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (Requires DivmodVertex, [wiki:DivmodAxiom Axiom], [wiki:DivmodNevow Nevow 0.7.0+], [http://pyopenssl.sourceforge.net/ pyOpenSSL] and [http://pytz.sourceforge.net/ PyTZ])

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
 * [wiki:MantissaHowTo HowTo build a Mantissa application]","Updated the requirements",0
481,10,1136025081.43062,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the AxiomProject object database, and the TwistedFramework, as well as web user-interface utilities.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicleAlpha), and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.4.1.tar.gz?format=raw Get the most recent release - 0.4.1!] ([http://www.livejournal.com/users/jcalderone/18622.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
 * [wiki:MantissaHowTo HowTo build a Mantissa application]","Updated the requirements",0
482,11,1136049356.97752,amir,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the AxiomProject object database, and the TwistedFramework, as well as web user-interface utilities.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicle), and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.4.1.tar.gz?format=raw Get the most recent release - 0.4.1!] ([http://www.livejournal.com/users/jcalderone/18622.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
 * [wiki:MantissaHowTo HowTo build a Mantissa application]","point at cc not ccalpha",0
483,14,1136079126.78081,oubiwann,198.49.126.204,"=== People Using Divmod Software ===
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + !CherryPy
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]",',0
484,15,1136087082.31018,oubiwann,198.49.126.204,"=== People Using Divmod Software ===
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + !CherryPy
 * [http://projects.adytum.us/tracs/PyMonitor/wiki/PyMonScreenShots pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]",',0
485,12,1136209652.4035,rwall,198.49.126.204,"= The Sandbox =

This is just a page to practice and learn WikiFormatting. 

Go ahead, edit it freely.","reset sandbox",0
486,13,1136240931.82109,rwall,198.49.126.204,,,
487,14,1136253119.43985,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Form Handling (A summary of Nevow form handling techniques) =
'''There is no one correct way to handle forms in Nevow'''. There follows a series of real world problems and (hopefully) the most appropriate form handling recipe.
== Automatic Form Generation and Handling ==
There are two Nevow compatible libraries for automatic form generation. '''Formless''' is the most established and comes bundled with Nevow. The second you will hear referred to as '''Forms''' or '''Pollenation Forms'''.
=== Simple Formless Example ===
{{{
#!python
from twisted.application import service, strports
from nevow import appserver, loaders, rend, static, url
from formless import annotate, webform 

class NewsEditPage(rend.Page):
    docFactory = loaders.xmlstr('''
<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'
           'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html xmlns:n='http://nevow.com/ns/nevow/0.1'>
    <head>
        <link rel='stylesheet' href='freeform_css' type='text/css' />
    </head>
    <body>
        <h1>Add / Edit News Item</h1>
        <n:invisible n:render='newsInputForm' />
        
        <ol n:render='sequence' n:data='newsItems'>
            <li n:pattern='item' n:render='mapping'>
                <strong><n:slot name='title' /></strong>: <n:slot name='description' />
            </li>
        </ol>
    </body>
</html>
''')
    child_freeform_css = webform.defaultCSS

    def __init__(self, *args, **kwargs):
        self.store = kwargs.pop('store')
        
    def saveNewsItem(self, title, description):
        self.store.append(dict(title=title, description=description))
        return url.here.click('confirmation')
    
    def bind_saveNewsItem(self, ctx):
        return [
            ('title', annotate.String(required=True)),
            ('description', annotate.Text(required=True)),
        ]

    def render_newsInputForm(self, ctx, data):
        return ctx.tag.clear()[
            webform.renderForms()
        ]
    
    def data_newsItems(self, ctx, name):
        return self.store

class ConfirmationPage(rend.Page):
    docFactory = loaders.xmlstr('''
<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'
           'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html>
    <body>
        <h1>Your item has been saved</h1>
        <ul>
            <li><a href='./'>Go back</a></li>
        </ul>
    </body>
</html>
''')

store = []
rootResource = NewsEditPage(store=store)
rootResource.putChild('confirmation', ConfirmationPage())

application = service.Application('blog item editor')
strports.service('8080', appserver.NevowSite(rootResource)).setServiceParent(application)
}}}

== Manual Form Handling ==
Sometimes a form is so simple that it is easiest to write the form html by hand and handle the result manually. The following code demonstrates a  form with which the user can choose his preferred number of items per page in a datagrid. 

The <select> tag has a javascript onchange handler to automatically submit it's parent form and is presented inline with the content of its parent <p> tag. To achieve this automatically using webform.renderForms() would have required defining a custom form template with custom patterns etc (see later example). 
{{{
#!python
import string

from twisted.application import service, strports
from nevow import appserver, inevow, rend, tags as T, loaders

class ResultsPage(rend.Page):
    docFactory = loaders.xmlstr('''
<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'
           'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html xmlns:n='http://nevow.com/ns/nevow/0.1'>
    <body>
        <form action='.'>
            <table border='1'>
                <thead>
                    <tr>
                        <th>Number</th>
                        <th>Letter</th>
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                        <td colspan='2'>
                            Showing <select 
                                        n:render='itemsPerPageOptions' 
                                        name='itemsPerPage' 
                                        onchange='this.form.submit();' /> items per page
                        </td>
                    </tr>
                </tfoot>
                <tbody n:render='sequence' n:data='alphabet'>
                    <tr n:pattern='item' n:render='mapping'>
                        <td><n:slot name='index' /></td>
                        <td><n:slot name='letter' /></td>
                    </tr>
                </tbody>
            </table>
        </form>
    </body>
</html>    
''')
    itemsPerPageChoices = range(10, 60, 10)
    
    def beforeRender(self, ctx):
        sess = inevow.ISession(ctx)
        if not hasattr(sess, 'pagerPrefs'):
            sess.pagerPrefs = dict(itemsPerPage = self.itemsPerPageChoices[0])
            
        try:
            itemsPerPage = abs(int(ctx.arg('itemsPerPage', 0)))
        except ValueError: #when the submitted value can't be converted to int
            itemsPerPage = 0
        
        if itemsPerPage > 0 and itemsPerPage in self.itemsPerPageChoices:
            sess.pagerPrefs['itemsPerPage'] = itemsPerPage

    def render_itemsPerPageOptions(self, ctx, data):
        options = [T.option(value=i)[i] for i in self.itemsPerPageChoices]
        default = inevow.ISession(ctx).pagerPrefs.get('itemsPerPage')
        #extract the default option tag and set it's selected attribute
        options[self.itemsPerPageChoices.index(default)](selected='selected')
        return ctx.tag.clear()[options]

    def data_alphabet(self, ctx, name):
        alphabet = string.ascii_lowercase
        #a dummy dataset, in real life this might come from a DB.
        data = [dict(index=i, letter=alphabet[i]) for i in range(len(alphabet))]
        return data[:inevow.ISession(ctx).pagerPrefs.get('itemsPerPage')]
    
application = service.Application('items per page')
strports.service('8080', appserver.NevowSite(ResultsPage())).setServiceParent(application)
}}}
(It should be noted that freeform annotated types can be used in isolation from the form rendering machinery for automatic coercion and validation of the form variables. An example of this may be added later.)","added simplest formless example",0
488,15,1136289516.04783,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Form Handling (A summary of Nevow form handling techniques) =
'''There is no one correct way to handle forms in Nevow'''. There follows a series of real world problems and (hopefully) the most appropriate form handling recipe.
== Automatic Form Generation and Handling ==
There are two Nevow compatible libraries for automatic form generation, '''Formless''' and [http://forms-project.pollenation.net/ Pollenation Forms]. Both offer automatic form generation, validation and type coercion.
=== Formless ===

=== A Note About !TypedInterfaces ===
One of the original goals for Formless was that as well as web forms, it should be flexible enough to handle forms for other user interfaces eg curses, gtk. The idea was that the developer should create a !TypedInterface (an enhanced Zope Interface) describing the signature of a method that might be called in response to a form submission. By implementing this interface in a Nevow.rend.Page, the developer could present a web UI. Elsewhere the same !TypedInterface could be implemented to provide a gtk UI for example. In practice though, only the web form rendering code was maintained.

Recently '''!TypedInterface has been deprecated in favour of the newer and simpler bind_* syntax'''. (see [source:trunk/Nevow/ChangeLog Nevow Changlog 2005-07-12]) Confusingly for the beginner, most of the Nevow examples still use !TypedInterfaces, but hopefully these will be updated in due course.

In the rest of this document we will use only the new bind_* syntax.

The following example demonstrates the simplest use of Formless. To expose the method (saveNewsItem) in our web page, we define a corresponding bind_saveNewsItem method whose job is to return a description of the publicMethod arguments. 
=== Simple Formless Example ===
{{{
#!python
from twisted.application import service, strports
from nevow import appserver, loaders, rend, static, url
from formless import annotate, webform 

class NewsEditPage(rend.Page):
    docFactory = loaders.xmlstr('''
<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'
           'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html xmlns:n='http://nevow.com/ns/nevow/0.1'>
    <head>
        <link rel='stylesheet' href='freeform_css' type='text/css' />
    </head>
    <body>
        <h1>Add / Edit News Item</h1>
        <n:invisible n:render='newsInputForm' />
        
        <ol n:render='sequence' n:data='newsItems'>
            <li n:pattern='item' n:render='mapping'>
                <strong><n:slot name='title' /></strong>: <n:slot name='description' />
            </li>
        </ol>
    </body>
</html>
''')
    child_freeform_css = webform.defaultCSS

    def __init__(self, *args, **kwargs):
        self.store = kwargs.pop('store')
        
    def saveNewsItem(self, title, description):
        self.store.append(dict(title=title, description=description))
        return url.here.click('confirmation')
    
    def bind_saveNewsItem(self, ctx):
        return [
            ('title', annotate.String(required=True)),
            ('description', annotate.Text(required=True)),
        ]

    def render_newsInputForm(self, ctx, data):
        return ctx.tag.clear()[
            webform.renderForms()
        ]
    
    def data_newsItems(self, ctx, name):
        return self.store

class ConfirmationPage(rend.Page):
    docFactory = loaders.xmlstr('''
<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'
           'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html>
    <body>
        <h1>Your item has been saved</h1>
        <ul>
            <li><a href='./'>Go back</a></li>
        </ul>
    </body>
</html>
''')

store = []
rootResource = NewsEditPage(store=store)
rootResource.putChild('confirmation', ConfirmationPage())

application = service.Application('blog item editor')
strports.service('8080', appserver.NevowSite(rootResource)).setServiceParent(application)
}}}

=== Pollenation Forms ===
Blah 

== Manual Form Handling ==
Sometimes a form is so simple that it is easiest to write the form html by hand and handle the result manually. The following code demonstrates a  form with which the user can choose his preferred number of items per page in a datagrid. 

The <select> tag has a javascript onchange handler to automatically submit it's parent form and is presented inline with the content of its parent <p> tag. To achieve this automatically using webform.renderForms() would have required defining a custom form template with custom patterns etc (see later example). 
{{{
#!python
import string

from twisted.application import service, strports
from nevow import appserver, inevow, rend, tags as T, loaders

class ResultsPage(rend.Page):
    docFactory = loaders.xmlstr('''
<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'
           'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html xmlns:n='http://nevow.com/ns/nevow/0.1'>
    <body>
        <form action='.'>
            <table border='1'>
                <thead>
                    <tr>
                        <th>Number</th>
                        <th>Letter</th>
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                        <td colspan='2'>
                            Showing <select 
                                        n:render='itemsPerPageOptions' 
                                        name='itemsPerPage' 
                                        onchange='this.form.submit();' /> items per page
                        </td>
                    </tr>
                </tfoot>
                <tbody n:render='sequence' n:data='alphabet'>
                    <tr n:pattern='item' n:render='mapping'>
                        <td><n:slot name='index' /></td>
                        <td><n:slot name='letter' /></td>
                    </tr>
                </tbody>
            </table>
        </form>
    </body>
</html>    
''')
    itemsPerPageChoices = range(10, 60, 10)
    
    def beforeRender(self, ctx):
        sess = inevow.ISession(ctx)
        if not hasattr(sess, 'pagerPrefs'):
            sess.pagerPrefs = dict(itemsPerPage = self.itemsPerPageChoices[0])
            
        try:
            itemsPerPage = abs(int(ctx.arg('itemsPerPage', 0)))
        except ValueError: #when the submitted value can't be converted to int
            itemsPerPage = 0
        
        if itemsPerPage > 0 and itemsPerPage in self.itemsPerPageChoices:
            sess.pagerPrefs['itemsPerPage'] = itemsPerPage

    def render_itemsPerPageOptions(self, ctx, data):
        options = [T.option(value=i)[i] for i in self.itemsPerPageChoices]
        default = inevow.ISession(ctx).pagerPrefs.get('itemsPerPage')
        #extract the default option tag and set it's selected attribute
        options[self.itemsPerPageChoices.index(default)](selected='selected')
        return ctx.tag.clear()[options]

    def data_alphabet(self, ctx, name):
        alphabet = string.ascii_lowercase
        #a dummy dataset, in real life this might come from a DB.
        data = [dict(index=i, letter=alphabet[i]) for i in range(len(alphabet))]
        return data[:inevow.ISession(ctx).pagerPrefs.get('itemsPerPage')]
    
application = service.Application('items per page')
strports.service('8080', appserver.NevowSite(ResultsPage())).setServiceParent(application)
}}}
(It should be noted that freeform annotated types can be used in isolation from the form rendering machinery for automatic coercion and validation of the form variables. An example of this may be added later.)","A bit about TypeInterface and bind_*",0
489,16,1136301656.65223,rwall,198.49.126.204,,,
490,1,1136301801.65677,rwall,198.49.126.204,,,
491,26,1136301921.98133,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.7.0.tar.gz?format=raw Latest release - 0.7.0] ([http://www.livejournal.com/users/jcalderone/18096.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/FormHandling Form Handling in Nevow]
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?group=&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","Added link to form handling",0
492,17,1136302036.66072,rwall,198.49.126.204,"= The Sandbox =

This is just a page to practice and learn WikiFormatting. 

Go ahead, edit it freely.",reset,0
493,1,1136303979.44726,rwall,198.49.126.204,"{{{
#!python
from twisted.application import service, strports
from nevow import appserver, loaders, rend, static, url

class NewsEditPage(rend.Page):
    docFactory = loaders.xmlstr('''
<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'
           'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html xmlns:n='http://nevow.com/ns/nevow/0.1'>
    <head>
        <title>Example 1: A News Item Editor</title>
        <link rel='stylesheet' href='form_css' type='text/css' />
    </head>
    <body>
        <h1>Example 1: A News Item Editor</h1>
        <fieldset>
            <legend>Add / Edit News Item</legend>
            <p>Form Goes Here</p>
        </fieldset>
        
        <ol n:render='sequence' n:data='newsItems'>
            <li n:pattern='item' n:render='mapping'>
                <strong><n:slot name='title' /></strong>: <n:slot name='description' />
            </li>
        </ol>
    </body>
</html>
''')

    def __init__(self, *args, **kwargs):
        self.store = kwargs.pop('store')
    
    def saveNewsItem(self, newsItemData):
        self.store.append(newsItemData)
        return url.here.click('confirmation')
        
    def data_newsItems(self, ctx, name):
        return self.store

class ConfirmationPage(rend.Page):
    docFactory = loaders.xmlstr('''
<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'
           'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html>
    <body>
        <h1>Your item has been saved</h1>
        <ul>
            <li><a href='./'>Go back</a></li>
        </ul>
    </body>
</html>
''')

# A place to store news items. A list of dicts in this simple case.
store = [dict(title='Lorum Ipsum', description='''
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Sed sed enim mollis 
nulla faucibus aliquet. Praesent nec nibh. Nam eget pede. Nam tincidunt purus id 
lorem. Vestibulum lectus nisl, molestie vitae, feugiat egestas, sodales et, 
tellus. Vivamus eu libero. Nulla facilisi. Nullam nec dolor. Proin ac diam at 
neque auctor pulvinar. Maecenas eros nibh, fermentum at, eleifend at, malesuada 
eu, nunc. Sed posuere felis eu ipsum. In volutpat. Phasellus viverra. Quisque 
dignissim mattis turpis. Maecenas accumsan ipsum vel orci. Cras ac lectus. Sed 
nec nisl. Integer iaculis elit scelerisque sapien. Curabitur ac diam.
''')]

rootResource = NewsEditPage(store=store)
rootResource.putChild('confirmation', ConfirmationPage())

application = service.Application('News item editor')
strports.service('8080', appserver.NevowSite(rootResource)).setServiceParent(application)
}}}",Created,0
494,2,1136304456.63023,rwall,198.49.126.204,,,
495,3,1136304816.21518,rwall,198.49.126.204,,,
496,1,1136306966.34217,rwall,198.49.126.204,"{{{
#!python
import string

from twisted.application import service, strports
from nevow import appserver, inevow, rend, tags as T, loaders

class ResultsPage(rend.Page):
    docFactory = loaders.xmlstr('''
<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'
           'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html xmlns:n='http://nevow.com/ns/nevow/0.1'>
    <body>
        <form action='.'>
            <table border='1'>
                <thead>
                    <tr>
                        <th>Number</th>
                        <th>Letter</th>
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                        <td colspan='2'>
                            Showing <select 
                                        n:render='itemsPerPageOptions' 
                                        name='itemsPerPage' 
                                        onchange='this.form.submit();' /> items per page
                        </td>
                    </tr>
                </tfoot>
                <tbody n:render='sequence' n:data='alphabet'>
                    <tr n:pattern='item' n:render='mapping'>
                        <td><n:slot name='index' /></td>
                        <td><n:slot name='letter' /></td>
                    </tr>
                </tbody>
            </table>
        </form>
    </body>
</html>    
''')
    itemsPerPageChoices = range(10, 60, 10)
    
    def beforeRender(self, ctx):
        sess = inevow.ISession(ctx)
        if not hasattr(sess, 'pagerPrefs'):
            sess.pagerPrefs = dict(itemsPerPage = self.itemsPerPageChoices[0])
            
        try:
            itemsPerPage = abs(int(ctx.arg('itemsPerPage', 0)))
        except ValueError: #when the submitted value can't be converted to int
            itemsPerPage = 0
        
        if itemsPerPage > 0 and itemsPerPage in self.itemsPerPageChoices:
            sess.pagerPrefs['itemsPerPage'] = itemsPerPage

    def render_itemsPerPageOptions(self, ctx, data):
        options = [T.option(value=i)[i] for i in self.itemsPerPageChoices]
        default = inevow.ISession(ctx).pagerPrefs.get('itemsPerPage')
        #extract the default option tag and set it's selected attribute
        options[self.itemsPerPageChoices.index(default)](selected='selected')
        return ctx.tag.clear()[options]

    def data_alphabet(self, ctx, name):
        alphabet = string.ascii_lowercase
        #a dummy dataset, in real life this might come from a DB.
        data = [dict(index=i, letter=alphabet[i]) for i in range(len(alphabet))]
        return data[:inevow.ISession(ctx).pagerPrefs.get('itemsPerPage')]
    
application = service.Application('items per page')
strports.service('8080', appserver.NevowSite(ResultsPage())).setServiceParent(application)
}}}",created,0
497,2,1136307243.3093,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Form Handling (A summary of Nevow form handling techniques) =
'''There is no one correct way to handle forms in Nevow'''. There follows a short tutorial on form handling in Nevow. It includes some real world problems and (hopefully) demonstrates some appropriate form handling solutions. Examples are included on separate wiki pages for clarity and to make it easy for the reader to download and run them. 
== Automatic Form Generation and Handling ==
There are two Nevow form handling libraries, '''Formless''' and [http://forms-project.pollenation.net/ Pollenation Forms]. Both offer automatic form generation, validation and type coercion. 

Formless is older and comes bundled with Nevow but can be confusing for beginners and frustrating for more experienced users. That said, it is highly customisable and allows html coder to precisely layout the form while still taking advantage of the automatic validation and type coercion. 

Pollenation Forms is both simpler for the beginner and offers powerful features for the experienced user. It is the recommended form handling library for those who do not need precise customisation of the form layout in the document template.
== A Note About Formless !TypedInterfaces ==
One of the original goals for Formless was that as well as web forms, it should be flexible enough to handle forms for other user interfaces eg curses, gtk. The idea was that the developer should create a !TypedInterface (an enhanced Zope Interface) describing the signature of a method that might be called in response to a form submission. By implementing this interface in a Nevow.rend.Page, the developer could present a web UI. Elsewhere the same !TypedInterface could be implemented to provide a gtk UI for example. In practice though, only the web form rendering code was maintained.

Recently '''!TypedInterface has been deprecated in favour of the newer and simpler bind_* syntax'''. (see [source:trunk/Nevow/ChangeLog Nevow Changlog 2005-07-12]) Confusingly for the beginner, most of the Nevow examples still use !TypedInterfaces, but hopefully these will be updated in due course.

In the rest of this document we will use only the new bind_* syntax.

== Example 1: A News Item Editor Page ==
The following example demonstrates the simplest use of Formless / Pollenation Forms. 
 * [wiki:DivmodNevow/FormHandling/Example1.tac?version=1 We start with a simple page containing everything but the form]. This contains:
   * the rend.Page subclass
   * a docFactory
   * a simple list to store news items
   * a data_* method to expose the list of stories to the template
   * a method to save new items to the database and who redirects to a completion page on success

 * [wiki:DivmodNevow/FormHandling/Example1.tac?action=diff&old_version=2&version=1 To expose the method (saveNewsItem) in our web page with Formless] we:
   * import annotate and webform from the formless module
   * update the template to include form layout css and a placeholder for our form renderer
   * add the Formless standard css file as a static resource child
   * define a corresponding bind_saveNewsItem method whose job is to return a description of the saveNewsItem method arguments
   * define a custom renderer which adds the results of webform.renderForms() to the page output.

== Manual Form Handling ==
Sometimes a form is so simple that it is easiest to write the form html by hand and handle the result manually. The following code demonstrates a  form with which the user can choose his preferred number of items per page in a datagrid.

 * [wiki:DivmodNevow/FormHandling/Examples/ManualFormHandling.tac ManualFormHandling.tac]

The <select> tag has a javascript onchange handler to automatically submit it's parent form and is presented inline with the content of its parent <p> tag. To achieve this automatically using webform.renderForms() would have required defining a custom form template with custom patterns etc (see later example). 

(It should be noted that freeform annotated types can be used in isolation from the form rendering machinery for automatic coercion and validation of the form variables. An example of this may be added later.)","Moved exampled to separate pages",0
498,57,1136307741.6793,amir,198.49.126.204,,,
499,3,1136308237.46185,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Form Handling (A summary of Nevow form handling techniques) =
'''There is no one correct way to handle forms in Nevow'''. There follows a short tutorial on form handling in Nevow. It includes some real world problems and (hopefully) demonstrates some appropriate form handling solutions. Examples are included on separate wiki pages for clarity and to make it easy for the reader to download and run them. 
== Automatic Form Generation and Handling ==
There are two Nevow form handling libraries, '''Formless''' and [http://forms-project.pollenation.net/ Pollenation Forms]. Both offer automatic form generation, validation and type coercion. 

Formless is older and comes bundled with Nevow but can be confusing for beginners and frustrating for more experienced users. That said, it is highly customisable and allows html coder to precisely layout the form while still taking advantage of the automatic validation and type coercion. 

Pollenation Forms is both simpler for the beginner and offers powerful features for the experienced user. It is the recommended form handling library for those who do not need precise customisation of the form layout in the document template.

== A Note About Formless !TypedInterfaces ==
One of the original goals for Formless was that as well as web forms, it should be flexible enough to handle forms for other user interfaces eg curses, gtk. The idea was that the developer should create a !TypedInterface (an enhanced Zope Interface) describing the signature of a method that might be called in response to a form submission. By implementing this interface in a Nevow.rend.Page, the developer could present a web UI. Elsewhere the same !TypedInterface could be implemented to provide a gtk UI for example. In practice though, only the web form rendering code was maintained.

Recently '''!TypedInterface has been deprecated in favour of the newer and simpler bind_* syntax'''. (see [source:trunk/Nevow/ChangeLog Nevow Changlog 2005-07-12]) Confusingly for the beginner, most of the Nevow examples still use !TypedInterfaces, but hopefully these will be updated in due course.

In the rest of this document we will use only the new bind_* syntax.

== Example 1: A News Item Editor Page ==
The following example demonstrates the simplest use of Formless / Pollenation Forms. 
 * [wiki:DivmodNevow/FormHandling/Example1.tac?version=1 We start with a simple page containing everything but the form]. This contains:
   * the rend.Page subclass
   * a docFactory
   * a simple list to store news items
   * a data_* method to expose the list of stories to the template
   * a method to save new items to the database and who redirects to a completion page on success

 * [wiki:DivmodNevow/FormHandling/Example1.tac?action=diff&old_version=2&version=1 To expose the method (saveNewsItem) in our web page with Formless] we:
   * import annotate and webform from the formless module
   * update the template to include form layout css and a placeholder for our form renderer
   * add the Formless standard css file as a static resource child
   * define a corresponding bind_saveNewsItem method whose job is to return a description of the saveNewsItem method arguments
   * define a custom renderer which adds the results of webform.renderForms() to the page output.

 * [wiki:DivmodNevow/FormHandling/Example1.tac?action=diff&version=3&old_version=1 This time with Pollenation Forms]: 
   * import forms
   * mixin the forms.ResourceMixin to our rend.Page subclass and call super to make sure it is intialised
   * update the template to include form layout css and a placeholder for our form renderer (forms.ResourceMixin defines its own render_ mathod so we use that)
   * update our saveNewsItem method to accomodate the extra args that forms will pass to it.
   * define a special form_* method which builds and returns the form.

== Manual Form Handling ==
Sometimes a form is so simple that it is easiest to write the form html by hand and handle the result manually. The following code demonstrates a  form with which the user can choose his preferred number of items per page in a datagrid.

 * [wiki:DivmodNevow/FormHandling/Examples/ManualFormHandling.tac ManualFormHandling.tac]

The <select> tag has a javascript onchange handler to automatically submit it's parent form and is presented inline with the content of its parent <p> tag. To achieve this automatically using webform.renderForms() would have required defining a custom form template with custom patterns etc (see later example). 

(It should be noted that freeform annotated types can be used in isolation from the form rendering machinery for automatic coercion and validation of the form variables. An example of this may be added later.)","added description of the simple Forms case",0
500,58,1136308318.92624,moe,198.49.126.204,,,
501,4,1136308662.9894,amir,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Form Handling (A summary of Nevow form handling techniques) =
'''There is no one correct way to handle forms in Nevow'''. There follows a short tutorial on form handling in Nevow. It includes some real world problems and (hopefully) demonstrates some appropriate form handling solutions. Examples are included on separate wiki pages for clarity and to make it easy for the reader to download and run them. 
== Automatic Form Generation and Handling ==
There are two Nevow form handling libraries, '''Formless''' and [http://forms-project.pollenation.net/ Pollenation Forms]. Both offer automatic form generation, validation and type coercion. 

Formless is older and comes bundled with Nevow but can be confusing for beginners and frustrating for more experienced users. That said, it is highly customisable and allows html coder to precisely layout the form while still taking advantage of the automatic validation and type coercion. 

Pollenation Forms is both simpler for the beginner and offers powerful features for the experienced user. It is the recommended form handling library for those who do not need precise customisation of the form layout in the document template.

== A Note About Formless !TypedInterfaces ==
One of the original goals for Formless was that as well as web forms, it should be flexible enough to handle forms for other user interfaces e.g. curses, gtk. The idea was that the developer should create a !TypedInterface (an enhanced Zope Interface) describing the signature of a method that might be called in response to a form submission. By implementing this interface in a Nevow.rend.Page, the developer could present a web UI. Elsewhere the same !TypedInterface could be implemented to provide a gtk UI for example. In practice though, only the web form rendering code was maintained.

Recently '''!TypedInterface has been deprecated in favour of the newer and simpler bind_* syntax'''. (see [source:trunk/Nevow/ChangeLog Nevow Changelog 2005-07-12]) Confusingly for the beginner, most of the Nevow examples still use !TypedInterfaces, but hopefully these will be updated in due course.

In the rest of this document we will use only the new bind_* syntax.

== Example 1: A News Item Editor Page ==
The following example demonstrates the simplest use of Formless / Pollenation Forms. 
 * [wiki:DivmodNevow/FormHandling/Example1.tac?version=1 We start with a simple page containing everything but the form]. This contains:
   * the rend.Page subclass
   * a docFactory
   * a simple list to store news items
   * a data_* method to expose the list of stories to the template
   * a method to save new items to the database and who redirects to a completion page on success

 * [wiki:DivmodNevow/FormHandling/Example1.tac?action=diff&old_version=2&version=1 To expose the method (saveNewsItem) in our web page with Formless] we:
   * import annotate and webform from the formless module
   * update the template to include form layout css and a placeholder for our form renderer
   * add the Formless standard css file as a static resource child
   * define a corresponding bind_saveNewsItem method whose job is to return a description of the saveNewsItem method arguments
   * define a custom renderer which adds the results of webform.renderForms() to the page output.

 * [wiki:DivmodNevow/FormHandling/Example1.tac?action=diff&version=3&old_version=1 This time with Pollenation Forms]: 
   * import forms
   * mixin the forms.ResourceMixin to our rend.Page subclass and call super to make sure it is intialised
   * update the template to include form layout css and a placeholder for our form renderer (forms.ResourceMixin defines its own render_ method so we use that)
   * update our saveNewsItem method to accommodate the extra args that forms will pass to it.
   * define a special form_* method which builds and returns the form.

== Manual Form Handling ==
Sometimes a form is so simple that it is easiest to write the form html by hand and handle the result manually. The following code demonstrates a  form with which the user can choose his preferred number of items per page in a datagrid.

 * [wiki:DivmodNevow/FormHandling/Examples/ManualFormHandling.tac ManualFormHandling.tac]

The <select> tag has a javascript onchange handler to automatically submit it's parent form and is presented inline with the content of its parent <p> tag. To achieve this automatically using webform.renderForms() would have required defining a custom form template with custom patterns etc (see later example). 

(It should be noted that freeform annotated types can be used in isolation from the form rendering machinery for automatic coercion and validation of the form variables. An example of this may be added later.)","a few typos",0
502,5,1136322919.45416,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Form Handling (A summary of Nevow form handling techniques) =
'''There is no one correct way to handle forms in Nevow'''. There follows a short tutorial on form handling in Nevow. It includes some real world problems and (hopefully) demonstrates some appropriate form handling solutions. Examples are included on separate wiki pages for clarity and to make it easy for the reader to download and run them. 
== Automatic Form Generation and Handling ==
There are two Nevow form handling libraries, '''Formless''' and [http://forms-project.pollenation.net/ Pollenation Forms]. Both offer automatic form generation, validation and type coercion. 

Formless is older and comes bundled with Nevow but can be confusing for beginners and frustrating for more experienced users. That said, it is highly customisable and allows html coder to precisely layout the form while still taking advantage of the automatic validation and type coercion. 

Pollenation Forms is both simpler for the beginner and offers powerful features for the experienced user. It is the recommended form handling library for those who do not need precise customisation of the form layout in the document template.

== A Note About Formless !TypedInterfaces ==
One of the original goals for Formless was that as well as web forms, it should be flexible enough to handle forms for other user interfaces e.g. curses, gtk. The idea was that the developer should create a !TypedInterface (an enhanced Zope Interface) describing the signature of a method that might be called in response to a form submission. By implementing this interface in a Nevow.rend.Page, the developer could present a web UI. Elsewhere the same !TypedInterface could be implemented to provide a gtk UI for example. In practice though, only the web form rendering code was maintained.

Recently '''!TypedInterface has been deprecated in favour of the newer and simpler bind_* syntax'''. (see [source:trunk/Nevow/ChangeLog Nevow Changelog 2005-07-12]) Confusingly for the beginner, most of the Nevow examples still use !TypedInterfaces, but hopefully these will be updated in due course.

In the rest of this document we will use only the new bind_* syntax.

== Example 1: A News Item Editor Page ==
The following example demonstrates the simplest use of Formless / Pollenation Forms. 
 * [wiki:DivmodNevow/FormHandling/Example1.tac?version=1 We start with a simple page containing everything but the form]. This contains:
   * the rend.Page subclass
   * a docFactory
   * a simple list to store news items
   * a data_* method to expose the list of stories to the template
   * a method to save new items to the database and who redirects to a completion page on success
   * http://divmod.org/trac/attachment/wiki/DivmodNevow/FormHandling/Example1.0.png

 * [wiki:DivmodNevow/FormHandling/Example1.tac?action=diff&old_version=2&version=1 To expose the method (saveNewsItem) in our web page with Formless] we:
   * import annotate and webform from the formless module
   * update the template to include form layout css and a placeholder for our form renderer
   * add the Formless standard css file as a static resource child
   * define a corresponding bind_saveNewsItem method whose job is to return a description of the saveNewsItem method arguments
   * define a custom renderer which adds the results of webform.renderForms() to the page output.

 * [wiki:DivmodNevow/FormHandling/Example1.tac?action=diff&version=3&old_version=1 This time with Pollenation Forms]: 
   * import forms
   * mixin the forms.ResourceMixin to our rend.Page subclass and call super to make sure it is intialised
   * update the template to include form layout css and a placeholder for our form renderer (forms.ResourceMixin defines its own render_ method so we use that)
   * update our saveNewsItem method to accommodate the extra args that forms will pass to it.
   * define a special form_* method which builds and returns the form.

== Manual Form Handling ==
Sometimes a form is so simple that it is easiest to write the form html by hand and handle the result manually. The following code demonstrates a  form with which the user can choose his preferred number of items per page in a datagrid.

 * [wiki:DivmodNevow/FormHandling/Examples/ManualFormHandling.tac ManualFormHandling.tac]

The <select> tag has a javascript onchange handler to automatically submit it's parent form and is presented inline with the content of its parent <p> tag. To achieve this automatically using webform.renderForms() would have required defining a custom form template with custom patterns etc (see later example). 

(It should be noted that freeform annotated types can be used in isolation from the form rendering machinery for automatic coercion and validation of the form variables. An example of this may be added later.)","try adding an inline screenshot",0
503,1,1136323014.43946,glyph,198.49.126.204,"Placeholder for images...",',0
504,6,1136323046.2993,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Form Handling (A summary of Nevow form handling techniques) =
'''There is no one correct way to handle forms in Nevow'''. There follows a short tutorial on form handling in Nevow. It includes some real world problems and (hopefully) demonstrates some appropriate form handling solutions. Examples are included on separate wiki pages for clarity and to make it easy for the reader to download and run them. 
== Automatic Form Generation and Handling ==
There are two Nevow form handling libraries, '''Formless''' and [http://forms-project.pollenation.net/ Pollenation Forms]. Both offer automatic form generation, validation and type coercion. 

Formless is older and comes bundled with Nevow but can be confusing for beginners and frustrating for more experienced users. That said, it is highly customisable and allows html coder to precisely layout the form while still taking advantage of the automatic validation and type coercion. 

Pollenation Forms is both simpler for the beginner and offers powerful features for the experienced user. It is the recommended form handling library for those who do not need precise customisation of the form layout in the document template.

== A Note About Formless !TypedInterfaces ==
One of the original goals for Formless was that as well as web forms, it should be flexible enough to handle forms for other user interfaces e.g. curses, gtk. The idea was that the developer should create a !TypedInterface (an enhanced Zope Interface) describing the signature of a method that might be called in response to a form submission. By implementing this interface in a Nevow.rend.Page, the developer could present a web UI. Elsewhere the same !TypedInterface could be implemented to provide a gtk UI for example. In practice though, only the web form rendering code was maintained.

Recently '''!TypedInterface has been deprecated in favour of the newer and simpler bind_* syntax'''. (see [source:trunk/Nevow/ChangeLog Nevow Changelog 2005-07-12]) Confusingly for the beginner, most of the Nevow examples still use !TypedInterfaces, but hopefully these will be updated in due course.

In the rest of this document we will use only the new bind_* syntax.

== Example 1: A News Item Editor Page ==
The following example demonstrates the simplest use of Formless / Pollenation Forms. 
 * [wiki:DivmodNevow/FormHandling/Example1.tac?version=1 We start with a simple page containing everything but the form]. This contains:
   * the rend.Page subclass
   * a docFactory
   * a simple list to store news items
   * a data_* method to expose the list of stories to the template
   * a method to save new items to the database and who redirects to a completion page on success
   * http://divmod.org/trac/attachment/wiki/DivmodNevow/FormHandling/Example1.0.png?format=raw

 * [wiki:DivmodNevow/FormHandling/Example1.tac?action=diff&old_version=2&version=1 To expose the method (saveNewsItem) in our web page with Formless] we:
   * import annotate and webform from the formless module
   * update the template to include form layout css and a placeholder for our form renderer
   * add the Formless standard css file as a static resource child
   * define a corresponding bind_saveNewsItem method whose job is to return a description of the saveNewsItem method arguments
   * define a custom renderer which adds the results of webform.renderForms() to the page output.

 * [wiki:DivmodNevow/FormHandling/Example1.tac?action=diff&version=3&old_version=1 This time with Pollenation Forms]: 
   * import forms
   * mixin the forms.ResourceMixin to our rend.Page subclass and call super to make sure it is intialised
   * update the template to include form layout css and a placeholder for our form renderer (forms.ResourceMixin defines its own render_ method so we use that)
   * update our saveNewsItem method to accommodate the extra args that forms will pass to it.
   * define a special form_* method which builds and returns the form.

== Manual Form Handling ==
Sometimes a form is so simple that it is easiest to write the form html by hand and handle the result manually. The following code demonstrates a  form with which the user can choose his preferred number of items per page in a datagrid.

 * [wiki:DivmodNevow/FormHandling/Examples/ManualFormHandling.tac ManualFormHandling.tac]

The <select> tag has a javascript onchange handler to automatically submit it's parent form and is presented inline with the content of its parent <p> tag. To achieve this automatically using webform.renderForms() would have required defining a custom form template with custom patterns etc (see later example). 

(It should be noted that freeform annotated types can be used in isolation from the form rendering machinery for automatic coercion and validation of the form variables. An example of this may be added later.)","Second attempt with format=raw (thanks glyph)",0
505,7,1136323205.08296,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Form Handling (A summary of Nevow form handling techniques) =
'''There is no one correct way to handle forms in Nevow'''. There follows a short tutorial on form handling in Nevow. It includes some real world problems and (hopefully) demonstrates some appropriate form handling solutions. Examples are included on separate wiki pages for clarity and to make it easy for the reader to download and run them. 
== Automatic Form Generation and Handling ==
There are two Nevow form handling libraries, '''Formless''' and [http://forms-project.pollenation.net/ Pollenation Forms]. Both offer automatic form generation, validation and type coercion. 

Formless is older and comes bundled with Nevow but can be confusing for beginners and frustrating for more experienced users. That said, it is highly customisable and allows html coder to precisely layout the form while still taking advantage of the automatic validation and type coercion. 

Pollenation Forms is both simpler for the beginner and offers powerful features for the experienced user. It is the recommended form handling library for those who do not need precise customisation of the form layout in the document template.

== A Note About Formless !TypedInterfaces ==
One of the original goals for Formless was that as well as web forms, it should be flexible enough to handle forms for other user interfaces e.g. curses, gtk. The idea was that the developer should create a !TypedInterface (an enhanced Zope Interface) describing the signature of a method that might be called in response to a form submission. By implementing this interface in a Nevow.rend.Page, the developer could present a web UI. Elsewhere the same !TypedInterface could be implemented to provide a gtk UI for example. In practice though, only the web form rendering code was maintained.

Recently '''!TypedInterface has been deprecated in favour of the newer and simpler bind_* syntax'''. (see [source:trunk/Nevow/ChangeLog Nevow Changelog 2005-07-12]) Confusingly for the beginner, most of the Nevow examples still use !TypedInterfaces, but hopefully these will be updated in due course.

In the rest of this document we will use only the new bind_* syntax.

== Example 1: A News Item Editor Page ==
The following example demonstrates the simplest use of Formless / Pollenation Forms. 
 * [wiki:DivmodNevow/FormHandling/Example1.tac?version=1 We start with a simple page containing everything but the form]. This contains:
   * the rend.Page subclass
   * a docFactory
   * a simple list to store news items
   * a data_* method to expose the list of stories to the template
   * a method to save new items to the database and who redirects to a completion page on success
   * http://divmod.org/trac/attachment/wiki/DivmodNevow/FormHandling/Example1.0.png?format=raw

 * [wiki:DivmodNevow/FormHandling/Example1.tac?action=diff&old_version=2&version=1 To expose the method (saveNewsItem) in our web page with Formless] we:
   * import annotate and webform from the formless module
   * update the template to include form layout css and a placeholder for our form renderer
   * add the Formless standard css file as a static resource child
   * define a corresponding bind_saveNewsItem method whose job is to return a description of the saveNewsItem method arguments
   * define a custom renderer which adds the results of webform.renderForms() to the page output.
   * http://divmod.org/trac/attachment/wiki/DivmodNevow/FormHandling/Example1.1.png?format=raw

 * [wiki:DivmodNevow/FormHandling/Example1.tac?action=diff&version=3&old_version=1 This time with Pollenation Forms]: 
   * import forms
   * mixin the forms.ResourceMixin to our rend.Page subclass and call super to make sure it is intialised
   * update the template to include form layout css and a placeholder for our form renderer (forms.ResourceMixin defines its own render_ method so we use that)
   * update our saveNewsItem method to accommodate the extra args that forms will pass to it.
   * define a special form_* method which builds and returns the form.
   * http://divmod.org/trac/attachment/wiki/DivmodNevow/FormHandling/Example1.2.png?format=raw
== Manual Form Handling ==
Sometimes a form is so simple that it is easiest to write the form html by hand and handle the result manually. The following code demonstrates a  form with which the user can choose his preferred number of items per page in a datagrid.

 * [wiki:DivmodNevow/FormHandling/Examples/ManualFormHandling.tac ManualFormHandling.tac]

The <select> tag has a javascript onchange handler to automatically submit it's parent form and is presented inline with the content of its parent <p> tag. To achieve this automatically using webform.renderForms() would have required defining a custom form template with custom patterns etc (see later example). 

(It should be noted that freeform annotated types can be used in isolation from the form rendering machinery for automatic coercion and validation of the form variables. An example of this may be added later.)","added 2 more screen shots",0
506,1,1136338530.97182,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Error Handling =
Just an example for now.
{{{
#!python
from zope.interface import implements

from twisted.application import service, strports
from twisted.web import http

from nevow import appserver, context, inevow, loaders, rend, static, tags as T, url

# Inspired by http://divmod.org/users/wiki.twistd/nevow/moin.cgi/Custom404Page

class ErrorPage(rend.Page):
    def render_lastLink(self, ctx, data):
        referer = inevow.IRequest(ctx).getHeader('referer')
        if referer:
            return T.p[T.a(href=referer)['This link'],
                       ' will return you to the last page you were on.']
        else:
            return T.p['You seem to be hopelessly lost.']

class The500Page(ErrorPage):
    implements(inevow.ICanHandleException)
    docFactory = loaders.xmlstr('''
<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'
           'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html xmlns:n='http://nevow.com/ns/nevow/0.1'>
    <head>
        <title>500 error</title>
        <style type='text/css'>
        body { border: 6px solid red; padding: 1em; }
        </style>
    </head>
    <body>
        <h1>Ouchie. Server error.</h1>
        <p>The server is down.</p>
        <p><em>Ohhh. The server.</em></p>
        <p n:render='lastLink' />
    </body>
</html>''')

    def renderHTTP_exception(self, ctx, failure):
        request = inevow.IRequest(ctx)
        request.setResponseCode(http.INTERNAL_SERVER_ERROR)
        res = self.renderHTTP(ctx)
        request.finishRequest( False )
        return res

class The404Page(ErrorPage):
    implements(inevow.ICanHandleNotFound)
    docFactory = loaders.xmlstr('''
<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'
           'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html xmlns:n='http://nevow.com/ns/nevow/0.1'>
    <head>
        <title>404'd !!!</title>
        <style type='text/css'>
        body { border: 6px solid orange; padding: 1em;}
        </style>
    </head>
    <body>
        <h1>OW! my browser!</h1>
        <p>Were you just making up names of files or what?</p>
        <p>(apologies to http://homestarrunner.com)</p>
        <p n:render='lastLink' />
    </body>
</html>''')
    def renderHTTP_notFound(self, ctx):
        return self.renderHTTP(ctx)

class OopsPage(rend.Page):
    def exception(self, ctx, data):
        1/0 # cause an exception on purpose
    docFactory = loaders.stan(exception)

class RootPage(rend.Page):
    docFactory = loaders.stan(
            T.html[T.head[T.title['Error Pages']],
                   T.body[T.h1['The Only Real Page'],
                          T.a(href='notherebaby')[
                            'This link goes nowhere, pleasantly.'],
                          T.br,
                          T.a(href='oops')[
                            'This link causes an exception!'],

                            ]]
                              )

    def locateChild(self, ctx, segments):
        ctx.remember(The404Page(), inevow.ICanHandleNotFound)
        ctx.remember(The500Page(), inevow.ICanHandleException)
        return rend.Page.locateChild(self, ctx, segments)
    
root = RootPage()
root.putChild('oops', OopsPage())

site = appserver.NevowSite(root)
# You should be able to do this instead of in locateChild, but there seems to be a bug
# http://divmod.org/trac/ticket/526
#site.remember(The404Page(), inevow.ICanHandleNotFound)
#site.remember(The500Page(), inevow.ICanHandleException)

application = service.Application('News item editor')
strports.service('8080', site).setServiceParent(application)
}}}",created,0
507,27,1136338690.22296,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.7.0.tar.gz?format=raw Latest release - 0.7.0] ([http://www.livejournal.com/users/jcalderone/18096.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/FormHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?group=&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","added error handling link",0
508,8,1136379043.79174,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Form Handling (A summary of Nevow form handling techniques) =
'''There is no one correct way to handle forms in Nevow'''. There follows a short tutorial on form handling in Nevow. It includes some real world problems and (hopefully) demonstrates some appropriate form handling solutions. Examples are included on separate wiki pages for clarity and to make it easy for the reader to download and run them. 
== Automatic Form Generation and Handling ==
There are two Nevow form handling libraries, '''Formless''' and [http://forms-project.pollenation.net/ Pollenation Forms]. Both offer automatic form generation, validation and type coercion. 

Formless is older and comes bundled with Nevow but can be confusing for beginners and frustrating for more experienced users. That said, it is highly customisable and allows html coder to precisely layout the form while still taking advantage of the automatic validation and type coercion. 

Pollenation Forms is both simpler for the beginner and offers powerful features for the experienced user. It is the recommended form handling library for those who do not need precise customisation of the form layout in the document template.

== A Note About Formless !TypedInterfaces ==
One of the original goals for Formless was that as well as web forms, it should be flexible enough to handle forms for other user interfaces e.g. curses, gtk. The idea was that the developer should create a !TypedInterface (an enhanced Zope Interface) describing the signature of a method that might be called in response to a form submission. By implementing this interface in a Nevow.rend.Page, the developer could present a web UI. Elsewhere the same !TypedInterface could be implemented to provide a gtk UI for example. In practice though, only the web form rendering code was maintained.

Recently '''!TypedInterface has been deprecated in favour of the newer and simpler bind_* syntax'''. (see [source:trunk/Nevow/ChangeLog Nevow Changelog 2005-07-12]) Confusingly for the beginner, most of the Nevow examples still use !TypedInterfaces, but hopefully these will be updated in due course.

In the rest of this document we will use only the new bind_* syntax.

== Example 1: A News Item Editor Page ==
The following example demonstrates the simplest use of Formless / Pollenation Forms. 
 * We start with a simple page containing everything but the form. This contains:
   * the rend.Page subclass
   * a docFactory
   * a simple list to store news items
   * a data_* method to expose the list of stories to the template
   * a method to save new items to the database and who redirects to a completion page on success
   * ([wiki:DivmodNevow/FormHandling/Example1.tac?version=1 src], [attachment:Example1.0.png screenshot])

 * To expose the method (saveNewsItem) in our web page with Formless we:
   * import annotate and webform from the formless module
   * update the template to include form layout css and a placeholder for our form renderer
   * add the Formless standard css file as a static resource child
   * define a corresponding bind_saveNewsItem method whose job is to return a description of the saveNewsItem method arguments
   * define a custom renderer which adds the results of webform.renderForms() to the page output.
   * ([wiki:DivmodNevow/FormHandling/Example1.tac?version=2 src], [wiki:DivmodNevow/FormHandling/Example1.tac?action=diff&old_version=2&version=1 diff], [attachment:Example1.1.png screenshot])

 * This time with Pollenation Forms: 
   * import forms
   * mixin the forms.ResourceMixin to our rend.Page subclass and call super to make sure it is intialised
   * update the template to include form layout css and a placeholder for our form renderer (forms.ResourceMixin defines its own render_ method so we use that)
   * update our saveNewsItem method to accommodate the extra args that forms will pass to it.
   * define a special form_* method which builds and returns the form.
   * ([wiki:DivmodNevow/FormHandling/Example1.tac?version=3 src], [wiki:DivmodNevow/FormHandling/Example1.tac?action=diff&version=3&old_version=1 diff], [attachment:Example1.2.png screenshot])
== Manual Form Handling ==
Sometimes a form is so simple that it is easiest to write the form html by hand and handle the result manually. The following code demonstrates a  form with which the user can choose his preferred number of items per page in a datagrid.

 * [wiki:DivmodNevow/FormHandling/Examples/ManualFormHandling.tac ManualFormHandling.tac]

The <select> tag has a javascript onchange handler to automatically submit it's parent form and is presented inline with the content of its parent <p> tag. To achieve this automatically using webform.renderForms() would have required defining a custom form template with custom patterns etc (see later example). 

(It should be noted that freeform annotated types can be used in isolation from the form rendering machinery for automatic coercion and validation of the form variables. An example of this may be added later.)","use attachement link syntax",0
509,9,1136382353.23506,rwall,198.49.126.204,,,
510,10,1136383897.22059,rwall,198.49.126.204,,,
511,28,1136386518.30578,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(1-3)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.7.0.tar.gz?format=raw Latest release - 0.7.0] ([http://www.livejournal.com/users/jcalderone/18096.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/FormHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?group=&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","added page outline",0
512,11,1136386657.97935,rwall,198.49.126.204,,,
513,29,1136386856.50746,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.7.0.tar.gz?format=raw Latest release - 0.7.0] ([http://www.livejournal.com/users/jcalderone/18096.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/FormHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?group=&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","contents heading",0
514,59,1136387270.89015,rwall,198.49.126.204,,,
515,30,1136388273.39396,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.7.0.tar.gz?format=raw Latest release - 0.7.0] ([http://www.livejournal.com/users/jcalderone/18096.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?group=&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","fixed error handling link",0
516,60,1136389818.90541,amir,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

Python is great. Twisted Matrix is awesome. We love Linux. Did I mention Python rocks, particularly when used with twisted matrix and twistedmatrix.

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * UsefulQueries
== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://xapian.org Xapian] fast, smart, scalable full text indexing.
 * [http://hyperestraier.sourceforge.net/ Hyperestraier] the new full text indexer in town and [http://hype.python-hosting.com/ Hype Python bindings].
 * [http://www.zope.org/Products/ZopeInterface Zope Interfaces] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.","fooling around. will undo.",0
517,61,1136389900.82811,amir,198.49.126.204,,,
518,12,1136400405.0073,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Form Handling (A summary of Nevow form handling techniques) =
[[PageOutline(2-3,Contents)]]
There is no one correct way to handle forms in Nevow. By the end of this short tutorial you will have a basic understanding of three Nevow  form handling techniques. The tutorial includes some real world problems and (hopefully) demonstrates some appropriate form handling solutions. Examples are included on separate wiki pages for clarity and to make it easy for the reader to download and run them. Some screenshots are provided so that you can quickly see the output of the examples.

== Automatic Form Generation and Handling ==
Form handling is one of the most tedious parts of developing a web application. Fortunately there are two sophisticated form handling libraries available for Nevow; '''Formless''' and [http://forms-project.pollenation.net/ Pollenation Forms]. Both offer automatic form generation, validation and type coercion. 

Formless is older and comes bundled with Nevow but can be confusing for beginners and frustrating for more experienced users. That said, it is highly customisable and allows html coder to precisely layout the form while still taking advantage of the automatic validation and type coercion. 

Pollenation Forms is both simpler for the beginner and offers powerful features for the experienced user. It is the recommended form handling library for those who do not need precise customisation of the form layout in the document template.

== A Note About Formless !TypedInterfaces ==
One of the original goals for Formless was that as well as web forms, it should be flexible enough to handle forms for other user interfaces e.g. curses, gtk. The idea was that the developer should create a !TypedInterface (an enhanced Zope Interface) describing the signature of a method that might be invoked in response to a form submission. By implementing this interface in a Nevow.rend.Page, the developer could present a web UI. Elsewhere the same !TypedInterface could be implemented to provide a gtk UI for example. In practice though, only the web form rendering code was maintained.
 * see the Formless section of [http://www.python.org/pycon/dc2004/papers/60/context this 2004 paper by the author of Nevow and Formless, Donovan preston]
Recently '''!TypedInterface has been deprecated in favour of the newer and simpler bind_* syntax'''. (see [source:trunk/Nevow/ChangeLog Nevow Changelog 2005-07-12]) Confusingly for the beginner, most of the Nevow examples still use !TypedInterfaces, but hopefully these will be updated in due course.

In the rest of this document we will use only the new bind_* syntax.

== Example 1: A News Item Editor Page ==
[[Image(Example1.0.png,200,float:right;clear:right;margin-bottom:2px;)]]
[[Image(Example1.1.png,200,float:right;clear:right;margin-bottom:2px;)]]
[[Image(Example1.2.png,200,float:right;clear:right;margin-bottom:2px;)]]
The following example demonstrates the simplest use of Formless / Pollenation Forms. 
 * '''[attachment:Example1.0.tac Base page:]''' We start with a simple page containing everything but the form:
   * the rend.Page subclass
   * a docFactory
   * a simple list to store news items
   * a data_* method to expose the list of stories to the template
   * a method to save new items to the database and who redirects to a completion page on success
 * '''[attachment:Example1.1.tac.py Formless:]''' To expose the method (saveNewsItem) in our web page with Formless we:
   * import annotate and webform from the formless module
   * update the template to include form layout css and a placeholder for our form renderer
   * add the Formless standard css file as a static resource child
   * define a corresponding bind_saveNewsItem method whose job is to return a description of the saveNewsItem method arguments
   * define a custom renderer which adds the results of webform.renderForms() to the page output.
 * '''[attachment:Example1.2.tac.py Pollenation Forms:]''' This time with Pollenation Forms:
   * import forms
   * mixin the forms.ResourceMixin to our rend.Page subclass and call super to make sure it is intialised
   * update the template to include form layout css and a placeholder for our form renderer (forms.ResourceMixin defines its own render_ method so we use that)
   * update our saveNewsItem method to accommodate the extra args that forms will pass to it.
   * define a special form_* method which builds and returns the form.
== Manual Form Handling ==
Sometimes a form is so simple that it is easiest to write the form html by hand and handle the result manually. The following code demonstrates a  form with which the user can choose his preferred number of items per page in a datagrid.
 * [wiki:DivmodNevow/FormHandling/Examples/ManualFormHandling.tac ManualFormHandling.tac]
The <select> tag has a javascript onchange handler to automatically submit it's parent form and is presented inline with the content of its parent <p> tag. To achieve this automatically using webform.renderForms() would have required defining a custom form template with custom patterns etc (see later example). 

(It should be noted that freeform annotated types can be used in isolation from the form rendering machinery for automatic coercion and validation of the form variables. An example of this may be added later.)","added link to dp 2004 paper",0
519,13,1136401017.98252,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Form Handling (A summary of Nevow form handling techniques) =
[[PageOutline(2-3,Contents)]]
There is no one correct way to handle forms in Nevow. By the end of this short tutorial you will have a basic understanding of three Nevow  form handling techniques. The tutorial includes some real world problems and (hopefully) demonstrates some appropriate form handling solutions. Examples are included on separate wiki pages for clarity and to make it easy for the reader to download and run them. Some screenshots are provided so that you can quickly see the output of the examples.

== Automatic Form Generation and Handling ==
Form handling is one of the most tedious parts of developing a web application. Fortunately there are two sophisticated form handling libraries available for Nevow; '''Formless''' and [http://forms-project.pollenation.net/ Pollenation Forms]. Both offer automatic form generation, validation and type coercion. 

Formless is older and comes bundled with Nevow but can be confusing for beginners and frustrating for more experienced users. That said, it is highly customisable and allows html coder to precisely layout the form while still taking advantage of the automatic validation and type coercion. 

Pollenation Forms is both simpler for the beginner and offers powerful features for the experienced user. It is the recommended form handling library for those who do not need precise customisation of the form layout in the document template.

== A Note About Formless !TypedInterfaces ==
One of the original goals for Formless was that as well as web forms, it should be flexible enough to handle forms for other user interfaces e.g. curses, gtk. The idea was that the developer should create a !TypedInterface (an enhanced Zope Interface) describing the signature of a method that might be invoked in response to a form submission. By implementing this interface in a Nevow.rend.Page, the developer could present a web UI. Elsewhere the same !TypedInterface could be implemented to provide a gtk UI for example. In practice though, only the web form rendering code was maintained.
 * see the Formless section of [http://www.python.org/pycon/dc2004/papers/60/context this 2004 paper by Donovan Preston, the original author of Nevow and Formless]
Recently '''!TypedInterface has been deprecated in favour of the newer and simpler bind_* syntax'''. (see [source:trunk/Nevow/ChangeLog Nevow Changelog 2005-07-12]) Confusingly for the beginner, most of the Nevow examples still use !TypedInterfaces, but hopefully these will be updated in due course.

In the rest of this document we will use only the new bind_* syntax.

== Example 1: A News Item Editor Page ==
[[Image(Example1.0.png,200,float:right;clear:right;margin-bottom:2px;)]]
[[Image(Example1.1.png,200,float:right;clear:right;margin-bottom:2px;)]]
[[Image(Example1.2.png,200,float:right;clear:right;margin-bottom:2px;)]]
The following example demonstrates the simplest use of Formless / Pollenation Forms. 
 * '''[attachment:Example1.0.tac Base page:]''' We start with a simple page containing everything but the form:
   * the rend.Page subclass
   * a docFactory
   * a simple list to store news items
   * a data_* method to expose the list of stories to the template
   * a method to save new items to the database and who redirects to a completion page on success
 * '''[attachment:Example1.1.tac.py Formless:]''' To expose the method (saveNewsItem) in our web page with Formless we:
   * import annotate and webform from the formless module
   * update the template to include form layout css and a placeholder for our form renderer
   * add the Formless standard css file as a static resource child
   * define a corresponding bind_saveNewsItem method whose job is to return a description of the saveNewsItem method arguments
   * define a custom renderer which adds the results of webform.renderForms() to the page output.
 * '''[attachment:Example1.2.tac.py Pollenation Forms:]''' This time with Pollenation Forms:
   * import forms
   * mixin the forms.ResourceMixin to our rend.Page subclass and call super to make sure it is intialised
   * update the template to include form layout css and a placeholder for our form renderer (forms.ResourceMixin defines its own render_ method so we use that)
   * update our saveNewsItem method to accommodate the extra args that forms will pass to it.
   * define a special form_* method which builds and returns the form.
== Manual Form Handling ==
Sometimes a form is so simple that it is easiest to write the form html by hand and handle the result manually. The following code demonstrates a  form with which the user can choose his preferred number of items per page in a datagrid.
 * [attachment:ManualFormHandlingExample.tac.py]
The <select> tag has a javascript onchange handler to automatically submit it's parent form and is presented inline with the content of its parent <p> tag. To achieve this automatically using webform.renderForms() would have required defining a custom form template with custom patterns etc (see later example). 

(It should be noted that Formless or Pollenation Forms could be used here for automatic coercion and validation of the form variables without employing their form rendering machinery. An example of this may be added later.)","link to attached version manual form example",0
520,14,1136415321.94149,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Form Handling (A summary of Nevow form handling techniques) =
[[PageOutline(2-3,Contents)]]
There is no one correct way to handle forms in Nevow. By the end of this short tutorial you will have a basic understanding of three Nevow  form handling techniques. The tutorial includes some real world problems and (hopefully) demonstrates some appropriate form handling solutions. Examples are included on separate wiki pages for clarity and to make it easy for the reader to download and run them. Some screenshots are provided so that you can quickly see the output of the examples.

== Automatic Form Generation and Handling ==
Form handling is one of the most tedious parts of developing a web application. Fortunately there are two sophisticated form handling libraries available for Nevow; '''Formless''' and [http://forms-project.pollenation.net/ Pollenation Forms]. Both offer automatic form generation, validation and type coercion. 

Formless is older and comes bundled with Nevow but can be confusing for beginners and frustrating for more experienced users. That said, it is highly customisable and allows html coder to precisely layout the form while still taking advantage of the automatic validation and type coercion. 

Pollenation Forms is both simpler for the beginner and offers powerful features for the experienced user. It is the recommended form handling library for those who do not need precise customisation of the form layout in the document template.

== A Note About Formless !TypedInterfaces ==
One of the original goals for Formless was that as well as web forms, it should be flexible enough to handle forms for other user interfaces e.g. curses, gtk. The idea was that the developer should create a !TypedInterface (an enhanced Zope Interface) describing the signature of a method that might be invoked in response to a form submission. By implementing this interface in a Nevow.rend.Page, the developer could present a web UI. Elsewhere the same !TypedInterface could be implemented to provide a gtk UI for example. In practice though, only the web form rendering code was maintained.
 * see the Formless section of [http://www.python.org/pycon/dc2004/papers/60/context this 2004 paper by Donovan Preston, the original author of Nevow and Formless]
Recently '''!TypedInterface has been deprecated in favour of the newer and simpler bind_* syntax'''. (see [source:trunk/Nevow/ChangeLog Nevow Changelog 2005-07-12]) Confusingly for the beginner, most of the Nevow examples still use !TypedInterfaces, but hopefully these will be updated in due course.

In the rest of this document we will use only the new bind_* syntax.

== Example 1: A News Item Editor Page ==
[[Image(Example1.0.png,200,float:right;clear:right;margin-bottom:2px;)]]
[[Image(Example1.1.png,200,float:right;clear:right;margin-bottom:2px;)]]
[[Image(Example1.2.png,200,float:right;clear:right;margin-bottom:2px;)]]
The following example demonstrates and compares the simplest use of Formless / Pollenation Forms. 
We start with a [attachment:Example1.0.tac basic tac file (src)] containing everything but the form:
 * the rend.Page subclass and docFactory
 * a simple list to store news items
 * a data_* method to expose the list of stories to the template
 * a method to save new items to the database which redirects to a completion page on success

 * '''[attachment:Example1.1.tac.py Formless Recipe (src):]''' To expose the method (saveNewsItem) in our web page with Formless we:
   * import [source:trunk/Nevow/formless/annotate.py annotate] and [source:trunk/Nevow/formless/webform.py webform]
   * update the template to include form layout css and a placeholder (<n:invisible />) for our form renderer
   * add the Formless standard css file as a [source:trunk/Nevow/nevow/static.py#L144 static.File] child resource 
   * define a corresponding bind_saveNewsItem method whose job is to return a description of the saveNewsItem method arguments
   * define a custom renderer which adds the results of webform.renderForms() to the page output.
 * '''[attachment:Example1.2.tac.py Pollenation Forms Recipe (src):]''' With Pollenation Forms we:
   * import [http://forms-project.pollenation.net/cgi-bin/trac.cgi/browser/trunk/forms/__init__.py forms]
   * mixin the [http://forms-project.pollenation.net/cgi-bin/trac.cgi/browser/trunk/forms/form.py#L303 forms.ResourceMixin] to our rend.Page subclass.
   * update the template to include form layout css and a placeholder for our form renderer (forms.ResourceMixin defines its own render_form method so we use that)
   * update our saveNewsItem method to accommodate the extra args that forms will pass to it.
   * define a special form_* method which builds and returns the form.
== Manual Form Handling ==
Sometimes a form is so simple that it is easiest to write the form html by hand and handle the result manually. The following code demonstrates a  form with which the user can choose his preferred number of items per page in a datagrid.
 * [attachment:ManualFormHandlingExample.tac.py]
The <select> tag has a javascript onchange handler to automatically submit it's parent form and is presented inline with the content of its parent <p> tag. To achieve this automatically using webform.renderForms() would have required defining a custom form template with custom patterns etc (see later example). 

(It should be noted that Formless or Pollenation Forms could be used here for automatic coercion and validation of the form variables without employing their form rendering machinery. An example of this may be added later.)",tweaks,0
521,15,1136419621.10671,rwall,198.49.126.204,,,
522,20,1136436597.52427,amir,198.49.126.204,"= [wiki:WikiStart Divmod] : Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.4.0.tar.gz?format=raw Download the latest release - 0.4.0!] (Requires [wiki:DivmodEpsilon Epsilon]) [http://www.livejournal.com/users/jcalderone/18354.html Release announcement]
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [http://moxn.net/~mesozoic/axiom-howto/ Mesozoic's Axiom Howto]: This is essential reading. A step by step guide to writing your first Axiom application
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]","add link to benchmarks",0
523,1,1136472220.03693,tic,198.49.126.204,"{{{
#!rst

Pre-conditions
==============
First, apply the patch from #529. This makes zomne actually work.

Shared host with Apache
=======================
Then, if you are, like me, on a shared server with Apache, you've probably got Python, Twisted and Nevow installed locally.  Therefore, zomne will fail to start twistd. Change the the line in zomne.c that says::

    sprintf(scratch, 'twistd -oy %s &> %s/twistd.log', tacfile, basedir);

to::

    sprintf(scratch, '/path/to/twistd -oy %s &> %s/twistd.log', tacfile, basedir);

Build zomne and place it somewhere::

    gcc zomne.c -o /path/to/zomne

Furthermore, PYTHONPATH is probably not set either, so you'll have to make sure to set that manually. I do that in a shell script that wraps the zomne.cgi binary. You could also write a small C application for speed. Either way, place this shell script in your webroot's cgi-bin directory, as nevow.cgi::

    #!/bin/sh
    export PYTHONPATH=$PYTHONPATH:/home/myself/local/lib/python2.3/site-packages
    exec /path/to/zomne

If you have access to mod_rewrite in your .htaccess, place the following lines in webroot/.htaccess::

    RewriteEngine On
    RewriteRule ^$ nevow.cgi [L]

Now you should be able to access your Nevow application as http://domain.tld

If using the included zomne.tac to test your installation, remember to add ``addSlash=True``, or Nevow will give you a 404. While that hows the install was successful, it's also nice to see that your HelloWorld outputs what's expected. :)

}}}",',0
524,2,1136472249.78073,tic,198.49.126.204,"{{{
#!rst

Pre-conditions
==============
First, apply the patch from `#529`:trac: This makes zomne actually work.

Shared host with Apache
=======================
Then, if you are, like me, on a shared server with Apache, you've probably got Python, Twisted and Nevow installed locally.  Therefore, zomne will fail to start twistd. Change the the line in zomne.c that says::

    sprintf(scratch, 'twistd -oy %s &> %s/twistd.log', tacfile, basedir);

to::

    sprintf(scratch, '/path/to/twistd -oy %s &> %s/twistd.log', tacfile, basedir);

Build zomne and place it somewhere::

    gcc zomne.c -o /path/to/zomne

Furthermore, PYTHONPATH is probably not set either, so you'll have to make sure to set that manually. I do that in a shell script that wraps the zomne.cgi binary. You could also write a small C application for speed. Either way, place this shell script in your webroot's cgi-bin directory, as nevow.cgi::

    #!/bin/sh
    export PYTHONPATH=$PYTHONPATH:/home/myself/local/lib/python2.3/site-packages
    exec /path/to/zomne

If you have access to mod_rewrite in your .htaccess, place the following lines in webroot/.htaccess::

    RewriteEngine On
    RewriteRule ^$ nevow.cgi [L]

Now you should be able to access your Nevow application as http://domain.tld

If using the included zomne.tac to test your installation, remember to add ``addSlash=True``, or Nevow will give you a 404. While that hows the install was successful, it's also nice to see that your HelloWorld outputs what's expected. :)

}}}",',0
525,3,1136472851.85056,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Deployment Techniques =
A summary of Nevow deployment techniques:
 '''[wiki:DivmodNevow/Deployment/ReverseProxy Reverse Proxy]'''::
  How to run Nevow apps behind an existing webserver; alongside, or as part of existing web sites.
 '''[wiki:DivmodNevow/Deployment/Zomne Zomne]'''::
  A guide to using the Zomne cgi with Apache and Lighttpd.
== See Also ==
 * http://divmod.org/users/exarkun/nevow-doc/nevow-deployment.html","added zomne deployment link",0
526,3,1136473299.97316,rwall,198.49.126.204,"= [wiki:DivmodNevow/Deployment Nevow Deployment] : Zomne =
{{{
#!rst

Pre-conditions
--------------
First, apply the patch from `#529`:trac: This makes zomne actually work.

Shared host with Apache
-----------------------
Then, if you are, like me, on a shared server with Apache, you've probably got Python, Twisted and Nevow installed locally.  Therefore, zomne will fail to start twistd. Change the the line in zomne.c that says::

    sprintf(scratch, 'twistd -oy %s &> %s/twistd.log', tacfile, basedir);

to::

    sprintf(scratch, '/path/to/twistd -oy %s &> %s/twistd.log', tacfile, basedir);

Build zomne and place it somewhere::

    gcc zomne.c -o /path/to/zomne

Furthermore, PYTHONPATH is probably not set either, so you'll have to make sure to set that manually. I do that in a shell script that wraps the zomne.cgi binary. You could also write a small C application for speed. Either way, place this shell script in your webroot's cgi-bin directory, as nevow.cgi::

    #!/bin/sh
    export PYTHONPATH=$PYTHONPATH:/home/myself/local/lib/python2.3/site-packages
    exec /path/to/zomne

If you have access to mod_rewrite in your .htaccess, place the following lines in webroot/.htaccess::

    RewriteEngine On
    RewriteRule ^$ nevow.cgi [L]

Now you should be able to access your Nevow application as http://domain.tld

If using the included zomne.tac to test your installation, remember to add ``addSlash=True``, or Nevow will give you a 404. While that hows the install was successful, it's also nice to see that your HelloWorld outputs what's expected. :)

}}}","Added standard page heading",0
527,4,1136473387.88455,tic,198.49.126.204,"= [wiki:DivmodNevow/Deployment Nevow Deployment] : Zomne =
{{{
#!rst

Pre-conditions
--------------
First, make sure `#529`:trac: is fixed (or apply the patch yourself).

Shared host with Apache
-----------------------
Then, if you are, like me, on a shared server with Apache, you've probably got Python, Twisted and Nevow installed locally.  Therefore, zomne will fail to start twistd. Change the the line in zomne.c that says::

    sprintf(scratch, 'twistd -oy %s &> %s/twistd.log', tacfile, basedir);

to::

    sprintf(scratch, '/path/to/twistd -oy %s &> %s/twistd.log', tacfile, basedir);

Build zomne and place it somewhere::

    gcc zomne.c -o /path/to/zomne

Furthermore, PYTHONPATH is probably not set either, so you'll have to make sure to set that manually. I do that in a shell script that wraps the zomne.cgi binary. You could also write a small C application for speed. Either way, place this shell script in your webroot's cgi-bin directory, as nevow.cgi::

    #!/bin/sh
    export PYTHONPATH=$PYTHONPATH:/home/myself/local/lib/python2.3/site-packages
    exec /path/to/zomne

If you have access to mod_rewrite in your .htaccess, place the following lines in webroot/.htaccess::

    RewriteEngine On
    RewriteRule ^$ nevow.cgi [L]

Now you should be able to access your Nevow application as http://domain.tld

If using the included zomne.tac to test your installation, remember to add ``addSlash=True``, or Nevow will give you a 404. While that hows the install was successful, it's also nice to see that your HelloWorld outputs what's expected. :)

}}}",',0
528,5,1136554213.45146,dev,198.49.126.204,"{{{
This is work in progress and will hopefully evolve into something useful the next few days

Why I'm writing this? To get myself a better understanding of the way Mantissa ticks.
For the very reason writing this, some things got already more obvious.
And if it is helpful for somebody else too, it has more than served its purpose.

I'm not a native English speaker, if there are too stilted formulations correct them please.
This is valid of course for any errors due to my missing comprehension too.
And as usual, if you find typos you are granted to keep them.
}}}

= !HowTo write a [wiki:DivmodMantissa Mantissa] application... =

== Intro or Why another document? ==

So you have found your way here, perhaps reading through the other pages on this wiki, following irc-logs and blog-postings and you are still uncertain what this talking about [wiki:DivmodMantissa Mantissa] and [wiki:DivmodAxiom Axiom] is and what these things can do for you? Or is it what you can do with them?

Probably we have a few things in common:

 * you havn't imbibed [http://www.python.org Python] from your's infancy - I'm an old C programmer, started with that kind of stuff nearly 25 years ago
 * but the language gripped you and maybe you even had physical contact with [wiki:TwistedFramework Twisted] and Nevow which are some sort of [wiki:DivmodMantissa Mantissa] foundations ''( and/or inspiration?)''.
 * still technical terms and other slang produce (some) trouble, but in a dark meander of your brain there is something nudging you that such a thing like a multi-protocol, objects manipulating, event-driven ... application server is a too interesting find to throw it back into the deep net ocean
 * on the other hand you want to build an application and if you don't want to begin with Adam and Eve you need to choose a tool for this job. Maybe you had your time with Zope, looked at other Python frameworks, observed !TurboGears, Django and even !RubyonRails. But they are/seem to be too web-orientated, too web-focussed. Which is quite ok in todays Web 2.0 wonderland, but you and I know that the browser isn't the Internet and that there are a lot more ways to interchange information, and many things that existed long before someone put three 'w's in a row. ''(some comparison between them, even if they are only frameworks, maybe in a later chapter?)''

Sounds familiar? Ok, then let's walk a few steps together on my witty trail towards our first Mantissa app.

{{{
Small sidekick:

Btw. don't get me wrong, I like the idea of a browser being a client platform or framework.
And having a semantic web. And I'm a big fan of convergence!
But does every coffee mug needs its web (user) interface?
Even houses have web-interfaces nowdays to monitor them - and I know
quite something about this issue - but the heating system is still broken.
Shiny interfaces can only obfuscate basic errors in application design, not fix them. 8)
}}}

Vexed about my babbling? Not even amused or at least thought-provoked? Then the following isn't for you, as you can probably do everything even before breakfast. ;-)

Enough words, let's dive into some action. ''(find a better translation?)''

== Let the games begin! ==

=== Why Mantissa? What's the difference? ===

When I first read about [wiki:DivmodMantissa Mantissa], I think it was [http://www.livejournal.com/users/jcalderone/12585.html this blog entry announcing v0.1] or on the !TwistedMatrix mailing-list, the slogan [wiki:MantissaIsTheDeploymentTarget Mantissa Is The Deployment Target] caught my attention.

In ancient times ''strikt separation between GUI and application logic'' was the key, and a virtue. Something that got lost over the web-app gold-rush years, over the raise of such monstrosities like PHP et al. In this respect the announce of an application server, that seems to not only separate the presentation envelopment but also the protocol envelopment certainly has something inspiring.


''(probably more here, but let's work on the structure now)''

=== Theory of Forms ===

Behind every good computer program stands a good idea.

''Idea'' in the meaning of a flash of a genius, which might make the program even successful.[[BR]] And ''idea'' in the meaning of Plato's ideals, which might make the program even useful.

''(at least something about application design and why Mantissa could enforce a good one and still not spoon-feeding the programmer too much)''



== Prologue ==


'Hey' - I hear you say - 'more than a page of monologue, and no single line of Python?'.[[BR]] You are right, but I think it is worth to first think about what to do and why doing it in this or in that way.[[BR]]
And you are right again, I shouldn't bore you to death with theory, let's start with something more substantial. 

Let me expatiate my little idea.

My son, eight years, asked me some time ago for an interactive map where one could mark places where friends live, where we have been and which he wants to visit once. Something like the ones that hang in offices on the wall, the spots marked with little flags or needles with colored heads.

Perhaps something to enqueue in the growing row of apps sitting upon Google Maps, but a few days ago I stumbled upon someones implementation of a worldclock displaying the time for some cities on a equirectangular projection of satellite images, [http://visibleearth.nasa.gov/view_rec.php?vev1id=11605 NASA's stunning Blue Marble]. I had to modify the worldclock into a mere !JavaScript implementation and while doing this I thought about personalizing the view, the points of interest, a way to interactively add new POIs, to socialize them. And while I started with a [http://netzflocken.de/articles/2005/12/20/worldclock-pimp-up-with-javascript second Athena/Nevow based version] I realized that this could be a nice sandbox project for Mantissa, giving me a reason looking deeper into it.

And while this little idea isn't something that would really fit into its first meaning, at least it should look well in the second.  


== The Drama 1st Act - looking at the blue-print ==

Computer applications haven't changed that much over the last 30 years.

Got me, that was a joke - but as most of the times, there is some truth in there.
My first program I wrote on a tty - in the literal sense, a tele typewriter.
Is was a simple calculator, with input and output printed on paper.
For the second one I was granted access to a 'real 'terminal and recieved an 8' floppy for data storage.

These programs accepted some data, worked on it, presented some output and even stored it to let it survive the program's termination.

If you look from a point high enough, not that much difference today either.

Ok, the complexity and the amount of data changed, we added a lot of onion skins for data acceptance and presentation, and storage has grown up since the days of my old 8' floppy, but if you look at the onion's core... *shrug*.

Now if we look at our little core, what do we have:

 * places which we want to project onto a picture of the earth. These need as mandatory attributes: Latitude, Logitude, some descriptive Name and their Timezone (better UTC difference). We need to store these places and provide a way to modify or remove them
 * on presentation of these places we need to calculate their position on the picture based on Latitude and Logitude, and of course the basic parameters of the picture itself

''(hmm, I think I change the structure of this document, let us start with the simplest possible app and try to evolve it)''


== Second Act - defining the schema objects ==

''(defining the schema objects)''

== Third Act - there's a light ==

''(have a basic app up and running)''


== more to come ==

''(administrative tasks)''

''(Mantissa specifics, signup, login, personalization,... )''

''(polishing the surface(s) )''

''(schema upgrades)''

''(interact with other services, jabber, rss, google map?)''",',0
529,1,1136558081.68648,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : [wiki:DivmodNevow/FormHandling Form Handling] : Formless =
TODO: Intro
== A Note About Formless !TypedInterfaces ==
One of the original goals for Formless was that as well as web forms, it should be flexible enough to handle forms for other user interfaces e.g. curses, gtk. The idea was that the developer should create a !TypedInterface (an enhanced Zope Interface) describing the signature of a method that might be invoked in response to a form submission. By implementing this interface in a Nevow.rend.Page, the developer could present a web UI. Elsewhere the same !TypedInterface could be implemented to provide a gtk UI for example. In practice though, only the web form rendering code was maintained.
 * see the Formless section of [http://www.python.org/pycon/dc2004/papers/60/context this 2004 paper by Donovan Preston, the original author of Nevow and Formless]
Recently '''!TypedInterface has been deprecated in favour of the newer and simpler bind_* syntax'''. (see [source:trunk/Nevow/ChangeLog Nevow Changelog 2005-07-12]) Confusingly for the beginner, most of the Nevow examples still use !TypedInterfaces, but hopefully these will be updated in due course.

In the rest of this document we will use only the new bind_* syntax.

== More on Standard Form Controls and Input Types ==
TODO
 * Review the input types and widget types available
=== Custom Form Controls and Input Types ===
TODO
 * 
 * Describe how to create a simple captcha widget
== Customising Form Layout ==
TODO",created,0
530,1,1136562563.27821,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Authentication and Authorisation = 
TODO
 * Introduction to authentication and authorisation in nevow
== Misc Recipes ==
 '''Using Formless to Render a Guarded Login Page'''::
  {{{
#!python
class LoginPage(rend.Page):
    docFactory = loaders.stan(
        T.html[
            T.head[T.title['Login Please']],
            T.body[
                webform.renderForms()
            ]
        ]
    )
    
    def bind_login(self, ctx):
        return [
            ('ctx', annotate.Context()),
            ('username', annotate.String(required=True)),
            ('password', annotate.PasswordEntry(required=True)),
        ]
    
    def login(self, ctx, username, password):
        sess = inevow.ISession(ctx)
        req = inevow.IRequest(ctx)
        credentials = UsernamePassword(username, password)
        
        def errorHandler(error):
            #error.trap(UnauthorizedLogin)
            raise annotate.ValidateError(
                {}, 
                formErrorMessage='Your username and / or password were not recognised.', 
                partialForm={'username':username})
        
        def successHandler(pageAndRemainingSegments):
            return url.root
        
        return sess.guard.login(req, sess, credentials, []).addCallback(successHandler).addErrback(errorHandler)
}}}","created ",0
531,16,1136562819.64755,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Form Handling (A summary of Nevow form handling techniques) =
[[PageOutline(2-3,Contents)]]
There is more than one way to correctly handle forms in Nevow. This short tutorial demonstrates three Nevow form handling techniques. It includes some real world problems and (hopefully) demonstrates the most appropriate form handling recipe to use in each case. 

Examples are included on separate wiki pages for clarity and to make it easy for the reader to download and run them. Where example files end in .tac.py, the example should be run as twistd -noy Example.tac.py. Some screenshots are provided so that you can quickly see the output of the examples.

== Automatic Form Generation and Handling ==
Form handling is one of the most tedious parts of developing a web application. Fortunately there are two sophisticated form handling libraries available for Nevow; '''Formless''' and [http://forms-project.pollenation.net/ Pollenation Forms]. Both offer automatic form generation, validation and type coercion. 

Formless is older and comes bundled with Nevow but can be confusing for beginners and frustrating for more experienced users. That said, it is highly customisable and allows html coder to precisely layout the form while still taking advantage of the automatic validation and type coercion. 

Pollenation Forms is both simpler for the beginner and offers powerful features for the experienced user. It is the recommended form handling library for those who do not need precise customisation of the form layout in the document template.

== The Simplest Form - Example 1: A News Item Editor Page ==
[[Image(Example1.0.png,200,float:right;clear:right;margin-bottom:2px;)]]
[[Image(Example1.1.png,200,float:right;clear:right;margin-bottom:2px;)]]
[[Image(Example1.2.png,200,float:right;clear:right;margin-bottom:2px;)]]
The following example demonstrates and compares the simplest use of Formless / Pollenation Forms. 
We start with a [attachment:Example1.0.tac basic tac file (src)] containing everything but the form:
 * the rend.Page subclass and docFactory
 * a simple list to store news items
 * a data_* method to expose the list of stories to the template
 * a method to save new items to the database which redirects to a completion page on success

 * '''[attachment:Example1.1.tac.py Formless Recipe (src):]''' To expose the method (saveNewsItem) in our web page with Formless we:
   * import [source:trunk/Nevow/formless/annotate.py annotate] and [source:trunk/Nevow/formless/webform.py webform]
   * update the template to include form layout css and a placeholder (<n:invisible />) for our form renderer
   * add the Formless standard css file as a [source:trunk/Nevow/nevow/static.py#L144 static.File] child resource 
   * define a corresponding bind_saveNewsItem method whose job is to return a description of the saveNewsItem method arguments
   * define a custom renderer which adds the results of webform.renderForms() to the page output.
 * '''[attachment:Example1.2.tac.py Pollenation Forms Recipe (src):]''' With Pollenation Forms we:
   * import [http://forms-project.pollenation.net/cgi-bin/trac.cgi/browser/trunk/forms/__init__.py forms]
   * mixin the [http://forms-project.pollenation.net/cgi-bin/trac.cgi/browser/trunk/forms/form.py#L303 forms.ResourceMixin] to our rend.Page subclass.
   * update the template to include form layout css and a placeholder for our form renderer (forms.ResourceMixin defines its own render_form method so we use that)
   * update our saveNewsItem method to accommodate the extra args that forms will pass to it.
   * define a special form_* method which builds and returns the form.
A comparison of the two recipes:
 * Pollenation Forms API is more transparent (subjective of course, but generally accepted).
 * Pollenation Forms generates cleaner html.
 * Pollenation Forms form interface is more usable and provides clearer feedback messages. (ie 'Submit' button rather than the Formless 'Call'. Why? Especially when the new Formless bind_* methods make it such a rigmarole to customise the button...but more on that later.)
 * Pollenation Forms default rendered form looks prettier (again subjective) though in both cases, the generated html is sprinkled generously with class and id attributes so that by adding your own CSS you can transform the way the form looks.

So that looks like a pretty ringing endoresment of Pollenation Forms, but it must be remembered that this is a comparison of what the two libraries produce by default in very simple case. Equally important is how they can be extended and customised to fit your application, and that's what we start looking at next.

 * [wiki:DivmodNevow/FormHandling/Formless Continue to the Formless Tutorial]
 * [wiki:DivmodNevow/FormHandling/PollenationForms Continue to the Pollenation Forms Tutorial]

== Manual Form Handling ==
Sometimes a form is so simple that it is easiest to write the form html by hand and handle the result manually. The following code demonstrates a  form with which the user can choose his preferred number of items per page in a datagrid.
 * [attachment:ManualFormHandlingExample.tac.py]
The <select> tag has a javascript onchange handler to automatically submit it's parent form and is presented inline with the content of its parent <p> tag. To achieve this automatically using webform.renderForms() would have required defining a custom form template with custom patterns etc (see later example). 

(It should be noted that Formless or Pollenation Forms could be used here for automatic coercion and validation of the form variables without employing their form rendering machinery. An example of this may be added later.)","moved bits to new pages",0
532,6,1136572594.77665,dev,198.49.126.204,,,
533,7,1136572644.18734,dev,198.49.126.204,,,
534,8,1136572683.7275,dev,198.49.126.204,,,
535,9,1136579548.021,dev,198.49.126.204,,,
536,10,1136579627.45727,dev,198.49.126.204,,,
537,11,1136585306.06384,dev,198.49.126.204,,,
538,8,1136595355.29353,tv,198.49.126.204,"= DivmodAxiom : Why use Axiom? =

Because it's great, of course!  More specifically, it's an object-relational database that's ...

== Actually Relational ==

Axiom imposes an ''extremely'' straightforward mapping between tables and classes: 1 to 1.  Your tables get behavior.  They can refer to each other.  If you're familiar with the relational model but are learning OO and want some of its features, Axiom won't explode your brain with a million new concepts.  After learning how a few simple Python expressions work, you can get up and running.

Axiom also respects the relational model and allows you to perform queries (and before 1.0, also updates and deletes) on groups of items at once, without loading them first.  You don't need to resort to writing your own 'for' loops or your own SQL code in order to load a joined query.  No PotatoProgramming.

== Actually Object-Oriented ==

Tables have behavior.  You can have a reference to an arbitrary item.  Items can exist outside the database.  You can mix in code from utility classes to give your items additional methods, without affecting its schema.  Simple database types like strings and integers can be mapped into complex, rich Python values, such as email addresses or a fixed-point decimal class.

== Extensible ==

Axiom's '[wiki:DivmodAxiom/Reference Powerup]' mechanism allows you enhance a database, or ''any row'' within a database, with additional functionality.

== Active ==

Axiom isn't a static database.  It is dynamic, it contains behaviors.

You can, for example, install a scheduler which will run tasks at specific times when the database is open.

== Twisted-friendly ==

The aforementioned scheduler is implemented using Twisted's reactor.  Axiom was explicitly designed for use with events and integrates nicely into a Twisted-based environment. 

== Future-Proof ==

Axiom applications can keep running while they're being upgraded from one schema to another (with a partial dataset available).  Upgrades are handled automatically, and the code for upgrading can be kept separate from your application code.  You can even write upgraders which involve complex relationships between multiple rows.

== Simple ==

Axiom gives you the power of an SQL database without the hassle of generating code from within code.

Working with Axiom databases is easy.  The underlying SQLite engine is pretty simple to use already, but Axiom doesn't add layers of complexity that get in your way.  Compare loading a row and manipulating it with a Python class:

{{{
#!python
from axiom.store import Store
s = Store('store.axiom')
x = s.getItemByID(0)
}}}

{{{
#!python
from pysqlite2 import dbapi2
from mymodule import MyClass
con = dbapi2.connect('store.sqlite')
cur = con.cursor()
cur.execute('select * from my_table where oid = 0')
row = con.fetchall()[0]
x = MyClass(row)
}}}

In this case the Axiom example is actually quite a lot shorter!

== Safe ==

Axiom keeps your in-memory objects up to date with what's happening in the database, even when transactions have to be rolled back.  No need to manage connections of your own.  No more forgetting to commit a transaction, or forgetting to roll back in an error handler.

Axiom doesn't expose ''any'' SQL to the application developer.  Internally Axiom is also very careful about SQL generation: it doesn't use string concatenation except where absolutely necessary, and instead uses {{{?}}} interpolation.  This means that your site will be completely secure against SQL injection attacks.

Axiom also makes sure that your objects in memory correspond to what's in the database.  If a transaction fails, Axiom will log the error and revert all the Python objects involved in the transaction to the state they are in after reverting.  This brings the safety of database transactions into your Python code.
","Powerups page seems to have moved.",0
539,12,1136630267.32137,dev,198.49.126.204,,,
540,13,1136630325.74088,dev,198.49.126.204,,,
541,11,1136637364.46416,rwall,198.49.126.204,,,
542,14,1136648979.21453,dev,198.49.126.204,,,
543,62,1136658136.38693,amir,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
 * UsefulQueries
== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://xapian.org Xapian] fast, smart, scalable full text indexing.
 * [http://hyperestraier.sourceforge.net/ Hyperestraier] the new full text indexer in town and [http://hype.python-hosting.com/ Hype Python bindings].
 * [http://www.zope.org/Products/ZopeInterface Zope Interfaces] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.","add buildbot since people seem to be searching for it",0
544,12,1136658295.22242,amir,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the AxiomProject object database, and the TwistedFramework, as well as web user-interface utilities.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicle), and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.4.1.tar.gz?format=raw Get the most recent release - 0.4.1!] ([http://www.livejournal.com/users/jcalderone/18622.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
 * [wiki:MantissaHowTo An example of how to build a Mantissa application]","tweak how to link grammar",0
545,15,1136660635.40676,dev,198.49.126.204,,,
546,16,1136660756.83113,dev,198.49.126.204,,,
547,17,1136664837.76101,dev,198.49.126.204,,,
548,18,1136664887.93919,dev,198.49.126.204,,,
549,19,1136665325.08871,dev,198.49.126.204,,,
550,20,1136666109.7016,dev,198.49.126.204,,,
551,21,1136667418.57475,dev,198.49.126.204,,,
552,22,1136669375.40353,dev,198.49.126.204,,,
553,23,1136716770.10432,dev,198.49.126.204,,,
554,24,1136747850.68954,dev,198.49.126.204,,,
555,1,1136761465.9002,mithrandi,198.49.126.204,"= DivmodAxiom : Concurrency and Scalability =

Several questions seem to keep coming relating to these issues; this is an attempt to summarize the discussion around them.

== Why is the API synchronous? ==

Generally database access through the SQLite backend is fast enough that database operations don't block long enough to be of concern.

== Are you sure? ==

Sort of. Current usage seems to indicate that it works out just fine, but you should conduct your own testing to determine whether this model is suitable for your particular usage patterns.

== Is it thread-safe, though? ==

Currently, no; accessing a Store concurrently from different threads will result in breakage. Accessing different Stores should be fine, though.

== But how do you achieve scalability then? ==

Use multiple databases. For example, DivmodMantissa has per-user and per-application stores.

== What if that isn't good enough? ==

If you do need finer-grained concurrency, then running transactions in separate threads is the way to go about it. Glyph's blog has [http://www.livejournal.com/users/glyf/2005/09/24/ more on this subject]; also see #537 which covers the DivmodAxiom implementation of this model.","Initial draft",0
556,2,1136761541.00335,exarkun,198.49.126.204,"= DivmodAxiom : Concurrency and Scalability =

Several questions seem to keep coming relating to these issues; this is an attempt to summarize the discussion around them.

== Why is the API synchronous? ==

Generally database access through the SQLite backend is fast enough that database operations don't block long enough to be of concern.

== Are you sure? ==

Sort of. Current usage seems to indicate that it works out just fine, but you should conduct your own testing to determine whether this model is suitable for your particular usage patterns.

== Is it thread-safe, though? ==

Currently, no; accessing a Store concurrently from different threads will result in breakage. Accessing different Stores should be fine, though.

== But how do you achieve scalability then? ==

Use multiple databases. For example, DivmodMantissa has per-user and per-application stores.

== What if that isn't good enough? ==

If you do need finer-grained concurrency, then running transactions in separate threads is one way to go about it. Glyph's blog has [http://www.livejournal.com/users/glyf/2005/09/24/ more on this subject]; also see #537 which covers the DivmodAxiom implementation of this model.","threading isn't the way",0
557,21,1136761878.65201,glyph,198.49.126.204,"= [wiki:WikiStart Divmod] : Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.4.0.tar.gz?format=raw Download the latest release - 0.4.0!] (Requires [wiki:DivmodEpsilon Epsilon]) [http://www.livejournal.com/users/jcalderone/18354.html Release announcement]
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [http://moxn.net/~mesozoic/axiom-howto/ Mesozoic's Axiom Howto]: This is essential reading. A step by step guide to writing your first Axiom application
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]",',0
558,22,1136761889.02484,glyph,198.49.126.204,"= [wiki:WikiStart Divmod] : Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.4.0.tar.gz?format=raw Download the latest release - 0.4.0!] (Requires [wiki:DivmodEpsilon Epsilon]) [http://www.livejournal.com/users/jcalderone/18354.html Release announcement]
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [http://moxn.net/~mesozoic/axiom-howto/ Mesozoic's Axiom Howto]: This is essential reading. A step by step guide to writing your first Axiom application
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]",',0
559,12,1136818162.49587,exarkun,198.49.126.204,,,
560,13,1136818398.75923,exarkun,198.49.126.204,,,
561,14,1136822535.09721,rwall,198.49.126.204,,,
562,15,1136839364.19251,rwall,198.49.126.204,,,
563,16,1136843688.35928,rwall,198.49.126.204,,,
564,25,1136975766.10261,dev,198.49.126.204,,,
565,26,1136985901.24954,dev,198.49.126.204,,,
566,27,1136986340.89211,dev,198.49.126.204,,,
567,28,1136986698.09498,dev,198.49.126.204,,,
568,29,1136986928.11977,dev,198.49.126.204,,,
569,30,1136987636.70034,dev,198.49.126.204,,,
570,31,1136989088.23751,dev,198.49.126.204,,,
571,3,1136991934.38264,dialtone,198.49.126.204,"= [wiki:DivmodNevow/Deployment Nevow Deployment] : Reverse Proxy =
A Reverse Proxy forwards the requests it receives from the internet to one or more slave webservers. Lighttpd and Apache both provide reverse proxy modules. Any absolute urls in the response will contain the [http://en.wikipedia.org/wiki/URL#URL_scheme scheme] (possibly the hostname) and port number on which the slave is running. These must be rewritten before being returned to the client. In Nevow this can be handled by [source:trunk/Nevow/nevow/vhost.py vhost.VHostMonsterResource]. 
== Example 1 ==
You have an existing webserver running on port 80, doing [http://httpd.apache.org/docs/2.0/vhosts/name-based.html name based virtual hosting] of several existing websites and want to run a Nevow based site alongside them on the same IP.
== Solution ==
Forward all requests at this virtual host to the Nevow slave server.
=== Sample Nevow App ===
{{{
#!python
from zope.interface import implements
from twisted.application import service, strports
from nevow import appserver, inevow, loaders, rend, url, vhost

class MyPage(rend.Page):
    '''
    I am a simple resource for demo purposes only. I will return a 'MyPage'
    for any child you ask me to locate. I display the current url as calculated
    nevow.url.
    '''
    addSlash = True
    docFactory = loaders.xmlstr('''
<html xmlns:n='http://nevow.com/ns/nevow/0.1'>
    <head>
        <title n:render='urlpath'></title>
    </head>
    <body>
        <h1 n:render='urlpath'></h1>
    </body>
</html>
''')
    
    def render_urlpath(self, ctx, data):
        return ctx.tag[url.here]
    
    def locateChild(self, ctx, segments):
        return MyPage(), segments[1:]

class VhostFakeRoot:
    '''
    I am a wrapper to be used at site root when you want to combine 
    vhost.VHostMonsterResource with nevow.guard. If you are using guard, you 
    will pass me a guard.SessionWrapper resource.
    '''
    implements(inevow.IResource)
    def __init__(self, wrapped):
        self.wrapped = wrapped
    
    def renderHTTP(self, ctx):
        return self.wrapped.renderHTTP(ctx)
        
    def locateChild(self, ctx, segments):
        '''Returns a VHostMonster if the first segment is 'vhost'. Otherwise
        delegates to the wrapped resource.'''
        if segments[0] == 'vhost':
            return vhost.VHostMonsterResource(), segments[1:]
        else:
            return self.wrapped.locateChild(ctx, segments)

siteRoot = VhostFakeRoot(MyPage())
application = service.Application('reverse proxy / vhost example')
strports.service('8080', appserver.NevowSite(siteRoot)).setServiceParent(application)
}}}
Save as eg sample.tac and run using twistd -noy sample.tac
=== Sample Lighttpd Config: ===
{{{
$HTTP['host'] =~ '^(www.example.com)$' {
        url.rewrite-once = ('^/(.*)' => '/vhost/http/%0/$1')
        # In lighttpd we alter the path manually using rewrite rule. %0 refers to the hostname and $1 is the path.
        proxy.server = ( '' =>
                ( (
                'host' => '127.0.0.1',
                'port' => 8080
                ) )
        )
}
}}}

If you prefer a mixed deployment strategy where static content is served through the faster lighttpd while dynamic content is still served by twisted you can use the following recipe. 

{{{
$HTTP['host'] =~ '^(www.example.org)$' {
        url.rewrite-once = (
                '^/static/.*' => '$0',
                '^/(.*)' => '/vhost/http/%0/$1'
        )
        $HTTP['url'] !~ '^/static/' {
                proxy.server = ( '' =>
                        ( (
                        'host' => '127.0.0.1',
                        'port' => 8080
                        ) )
                )
        }
        server.document-root = '/path/to/your/project/trunk/'
}
}}}

There are 2 assumptions in this recipe:
 * The static content is located at the /static/ subtree of the website.
 * The project root contains a 'static' directory that is used to serve static content.

=== Sample Apache Config ([http://divmod.org/users/wiki.twistd/nevow/moin.cgi/ApacheSetup Ref]) ===
{{{
<VirtualHost www.example.com>
ProxyPass / http://localhost:8080/vhost/http/www.example.com/
ServerName www.example.com
</VirtualHost>
}}}
== Example 2 ==
Nevow is only to be used for part of an existing static site at a non-root url
=== Sample Lighttpd Config: ===
TODO
=== Sample Apache Config ===
TODO
== See Also ==
 * http://lighttpd.net/documentation/proxy.html
 * http://httpd.apache.org/docs/2.0/mod/mod_proxy.html#proxypass","add mixed deployment recipe",0
572,31,1136999503.74593,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes LivePage, a two-way bridge between Javascript in a browser and Python on the server. LivePage is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.7.0.tar.gz?format=raw Latest release - 0.7.0] ([http://www.livejournal.com/users/jcalderone/18096.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","Don't show closed tickets",0
573,63,1137010781.77557,glyph,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod, Inc.] and the Divmod open-source community.

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&component=Reviews&order=priority Reviews]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]

== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://xapian.org Xapian] fast, smart, scalable full text indexing.
 * [http://hyperestraier.sourceforge.net/ Hyperestraier] the new full text indexer in town and [http://hype.python-hosting.com/ Hype Python bindings].
 * [http://www.zope.org/Products/ZopeInterface Zope Interfaces] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.",',0
574,32,1137017556.8242,dev,198.49.126.204,,,
575,33,1137054627.92324,dev,198.49.126.204,,,
576,34,1137054682.03065,dev,198.49.126.204,,,
577,35,1137054776.09833,dev,198.49.126.204,,,
578,1,1137189451.38707,glyph,198.49.126.204,"= The Divmod Fan Club =

Do you love Divmod's code?

Do you have a poster of JP on your wall?

Has work you've done using a Divmod project made you fantastically wealthy,
such that you don't know what to do with all your extra disposable income?

''Now you know.''

== Joining Up ==

[http://divmod.org:8080/signup Join the club!]

We offer a few different levels of membership.

 * Bronze Membership - $10 per month - ''Buy Glyph enough caffeine to get through one average day.''

 * Silver Membership - $25 per month - ''Take JP out to a restaurant.''

 * Gold Membership - $100 per month - ''Pay for Allen's cell phone calls to Divmod HQ.''

 * Platinum Membership - $250 per month - ''Buy Moe's groceries for a month.''

 * Mithril Membership - more than $1000 per month (email to sales@divmod.com) - ''Buy Amir a pony.''

== Huh What?! ==

Divmod developers have been heard to loudly complain that we are not being
commercially compensated for our open-source offerings.  Our overwhelmingly
generous developer community responded: before, there was actually no way for
happy users of our software to pay us for it - and they want to!

So, we've created the Divmod Fan Club, or the 'DMFC', to give those users a way
to pay back, and a way for us to very publicly say 'thank you!'

== It's Awesome ==

Members of the club who sign up for one of our Divmod commercial services (such
as the soon-to-be-re-launched [http://divmod.com/ Divmod Mail]) will occasionally get special
treats, early access to new features, and extra goodies not available to the
general public.

Eventually they will also receive a 'badge' displayed next to their user-icon
in public areas.

Starting at PyCon 2006, the club will have monthly meetings over IRC where
Divmod will propose a group of open-source features to be prioritized.  Club
members will be allowed to vote on the order those features will be implemented
in.

Members will be allowed a number of votes corresponding to the number of
dollars per month that their membership costs, except Mithril members, who
receive a maximum of 250 votes each, or can instead choose to apply their
membership fees directly to the expense of implementing features of their
choice.

Additionally, since we are currently using this club to beta-test our billing
system, members who sign up during the beta period (prior to the first day of
PyCon) will receive an 'arcanite alloy' bonus, and be allowed 5 additional
votes for their membership level during the first 3 meetings.  Members who are
currently subscribers to [http://divmod.com Divmod Mail] will additionally
receive this bonus indefinitely.

",',0
579,17,1137202859.59154,cablehead,198.49.126.204,,,
580,2,1137523017.41357,amir,198.49.126.204,"= The Divmod Fan Club =

Do you use Divmod's code?

Do you have a poster of Exarkun on your wall?

Do you love our giant-killing chutzpah?

Has work you've done using a Divmod project made you fantastically wealthy,
such that you don't know what to do with all your extra disposable income?

''Now you know.''

== Joining Up ==

[http://divmod.org:8080/signup Join the club!]

We offer a few different levels of membership.

 * Bronze Membership - $10 per month - ''Buy Glyph enough caffeine to get through one average day.''

 * Silver Membership - $25 per month - ''Take JP out to a restaurant.''

 * Gold Membership - $100 per month - ''Pay for Allen's cell phone calls to Divmod HQ.''

 * Platinum Membership - $250 per month - ''Buy Moe's groceries for a month.''

 * Mithril Membership - more than $1000 per month (email to sales@divmod.com) - ''Buy Amir a pony.''

== Huh What?! ==

Our developer community has approached us to express their appreciation of our work,
and to influence us to work on particular aspects of our product for the their benefit. 

We've created the Divmod Fan Club, or the 'DFC', to give those users a way
to pay back, and a way for us to very publicly say 'thank you!'.

== It's Awesome - Why should I sign up? ==

Conscience. Influence. Status.

=== Conscience ===

Simple: you give because you take.

=== Influence ===

Starting at PyCon 2006, the club will have monthly meetings over IRC where
Divmod will propose a group of open-source features to be prioritized.  Club
members will be allowed to vote on the order those features will be implemented
in.

Members will be allowed a number of votes corresponding to the number of
dollars per month that their membership costs, except Mithril members, who
receive a maximum of 250 votes each, or can instead choose to apply their
membership fees directly to the expense of implementing features of their
choice.

=== Status ===

Members of the club who sign up for one of our Divmod commercial services (such
as the soon-to-be-re-launched [http://divmod.com/ Divmod Mail]) will occasionally get special
treats, early access to new features, and extra goodies not available to the
general public.

Eventually they will also receive a 'badge' displayed next to their user-icon
in public areas.

Additionally, since we are currently using this club to beta-test our billing
system, members who sign up during the beta period (prior to the first day of
PyCon) will receive an 'arcanite alloy' bonus, and be allowed 5 additional
votes for their membership level during the first 3 meetings.  Members who are
currently subscribers to [http://divmod.com Divmod Mail] will additionally
receive this bonus indefinitely.

== Where does the money go? ==

Pay employees for time spent on community work that is not essential to Divmod's core business.
{{{
Until we have our first Club meeting we have selected documentation as the next community-focused task that we'll work on as resources permit.
This will be reviewed at the first Club meeting.
}}}

Hire some of our open source contributors and pay them.

Once that's done, we may send some of this money to open-source contributors to
our products whom we do not employ, and then, if we have hojillions of dollars
left over, start paying for development of features in software Divmod's code
depends upon, such as SQLite and Python.
",',0
581,3,1137525373.62641,amir,198.49.126.204,"= The Divmod Fan Club =

Do you use Divmod's code?

Do you have a poster of Exarkun on your wall?

Do you love our giant-killing chutzpah?

Do you have a freind or family member on the Divmod team?

Has work you've done using a Divmod project made you fantastically wealthy,
such that you don't know what to do with all your extra disposable income?

''Now you know.''

== Joining Up ==

[http://divmod.org:8080/signup Join the club!]

We offer a few different levels of membership.

 * Bronze Membership - $10 per month - ''Buy Glyph enough caffeine to get through one average day.''

 * Silver Membership - $25 per month - ''Take JP out to a restaurant.''

 * Gold Membership - $100 per month - ''Pay for Allen's cell phone calls to Divmod HQ.''

 * Platinum Membership - $250 per month - ''Buy Moe's groceries for a month.''

 * Mithril Membership - more than $1000 per month (email to sales@divmod.com) - ''Buy Amir a pony.''

== Huh What?! ==

Our developer community has approached us to express their appreciation of our work,
and to influence us to work on particular aspects of our product for the their benefit. 

We've created the Divmod Fan Club, or the 'DFC', to give those users a way
to pay back, and a way for us to very publicly say 'thank you!'.

== It's Awesome - Why should I sign up? ==

Conscience. Influence. Status.

=== Conscience ===

Simple: you give because you take.

=== Influence ===

Starting at PyCon 2006, the club will have monthly meetings over IRC where
Divmod will propose a group of open-source features to be prioritized.  Club
members will be allowed to vote on the order those features will be implemented
in.
{{{
Until we have our first Club meeting we have selected documentation as the next community-focused task that we'll work on as resources permit.
This will be reviewed at the first Club meeting.
}}}

Members will be allowed a number of votes corresponding to the number of
dollars per month that their membership costs, except Mithril members, who
receive a maximum of 250 votes each, or can instead choose to apply their
membership fees directly to the expense of implementing features of their
choice.

=== Status ===

Members of the club who sign up for one of our Divmod commercial services (such
as the soon-to-be-re-launched [http://divmod.com/ Divmod Mail]) will occasionally get special
treats, early access to new features, and extra goodies not available to the
general public.

Eventually they will also receive a 'badge' displayed next to their user-icon
in public areas.

Additionally, since we are currently using this club to beta-test our billing
system, members who sign up during the beta period (prior to the first day of
PyCon) will receive an 'arcanite alloy' bonus, and be allowed 5 additional
votes for their membership level during the first 3 meetings.  Members who are
currently subscribers to [http://divmod.com Divmod Mail] will additionally
receive this bonus indefinitely.

== Where does the money go? ==

To pay employees, particularly for time spent on community work that is not essential to Divmod's core business.

To hire some of our open source contributors and pay them.

To pay for hosting.

Once that's done, we may send some of this money to open-source contributors to
our products whom we do not employ, and then, if we have hojillions of dollars
left over, start paying for development of features in software Divmod's code
depends upon, such as SQLite and Python.
",',0
582,4,1137526700.67101,amir,198.49.126.204,"= The Divmod Fan Club =

Do you use Divmod's code?

Do you have a poster of Exarkun on your wall?

Do you love our giant-killing chutzpah? AKA 'Send a salami to your boy in the army!'

Do you have a freind or family member on the Divmod team?

Has work you've done using a Divmod project made you fantastically wealthy,
such that you don't know what to do with all your extra disposable income?

''Now you know.''

== Joining Up ==

[http://divmod.org:8080/signup Join the club!]

We offer a few different levels of membership.

 * Bronze Membership - $10 per month - ''Buy Glyph enough caffeine to get through one average day.''

 * Silver Membership - $25 per month - ''Take JP out to a restaurant.''

 * Gold Membership - $100 per month - ''Pay for Allen's cell phone calls to Divmod HQ.''

 * Platinum Membership - $250 per month - ''Buy Moe's groceries for a month.''

 * Mithril Membership - more than $1000 per month (email to sales@divmod.com) - ''Buy Amir a pony.''

== Huh What?! ==

Our developer community has approached us to express their appreciation of our work,
and to influence us to work on particular aspects of our product for the their benefit. 

We've created the Divmod Fan Club, or the 'DFC', to give those users a way
to pay back, and a way for us to very publicly say 'thank you!'.

== It's Awesome - Why should I sign up? ==

Conscience. Influence. Status.

=== Conscience ===

Simple: you give because you take.

=== Influence ===

Starting at PyCon 2006, the club will have monthly meetings over IRC where
Divmod will propose a group of open-source features to be prioritized.  Club
members will be allowed to vote on the order those features will be implemented
in.
{{{
Until we have our first Club meeting we have selected documentation as the next community-focused task that we'll work on as resources permit.
This will be reviewed at the first Club meeting.
}}}

Members will be allowed a number of votes corresponding to the number of
dollars per month that their membership costs, except Mithril members, who
receive a maximum of 250 votes each, or can instead choose to apply their
membership fees directly to the expense of implementing features of their
choice.

=== Status ===

Members of the club who sign up for one of our Divmod commercial services (such
as the soon-to-be-re-launched [http://divmod.com/ Divmod Mail]) will occasionally get special
treats, early access to new features, and extra goodies not available to the
general public.

Eventually they will also receive a 'badge' displayed next to their user-icon
in public areas.

Additionally, since we are currently using this club to beta-test our billing
system, members who sign up during the beta period (prior to the first day of
PyCon) will receive an 'arcanite alloy' bonus, and be allowed 5 additional
votes for their membership level during the first 3 meetings.  Members who are
currently subscribers to [http://divmod.com Divmod Mail] will additionally
receive this bonus indefinitely.

== Where does the money go? ==

To pay employees, particularly for time spent on community work that is not essential to Divmod's core business.

To hire some of our open source contributors and pay them.

To pay for hosting.

Once that's done, we may send some of this money to open-source contributors to
our products whom we do not employ, and then, if we have hojillions of dollars
left over, start paying for development of features in software Divmod's code
depends upon, such as SQLite and Python.
",',0
583,5,1137545889.5774,glyph,198.49.126.204,"= The Divmod Fan Club =

Do you use Divmod's code?

Do you have a poster of Exarkun on your wall?

Do you love our giant-killing chutzpah? AKA 'Send a salami to your boy in the army!'

Do you have a freind or family member on the Divmod team?

Has work you've done using a Divmod project made you fantastically wealthy,
such that you don't know what to do with all your extra disposable income?

''Now you know.''

== Joining Up ==

[http://divmod.org:8080/signup Join the club!]

We offer a few different levels of membership.

 * Bronze Membership - $10 per month - ''Buy Glyph enough caffeine to get through one average day.''

 * Silver Membership - $25 per month - ''Take JP out to a restaurant.''

 * Gold Membership - $100 per month - ''Pay for Allen's cell phone calls to Divmod HQ.''

 * Platinum Membership - $250 per month - ''Buy Moe's groceries for a month.''

 * Mithril Membership - more than $1000 per month (email to sales@divmod.com) - ''Buy Amir a pony.''

== Huh What?! ==

Our developer community has approached us to express their appreciation of our work,
and to influence us to work on particular aspects of our product for the their benefit. 

We've created the Divmod Fan Club, or the 'DFC', to give those users a way
to pay back, and a way for us to very publicly say 'thank you!'.

== It's Awesome - Why should I sign up? ==

Conscience. Influence. Status.

=== Conscience ===

Simple: you give because you take.

=== Influence ===

Starting at PyCon 2006, the club will have monthly meetings over IRC where
Divmod will propose a group of open-source features to be prioritized.  Club
members will be allowed to vote on the order those features will be implemented
in.


  (Until we have our first Club meeting we have selected documentation as the next community-focused task that we'll work on as resources permit.
  This will be reviewed at the first Club meeting.)


Members will be allowed a number of votes corresponding to the number of
dollars per month that their membership costs, except Mithril members, who
receive a maximum of 250 votes each, or can instead choose to apply their
membership fees directly to the expense of implementing features of their
choice.

=== Status ===

Members of the club who sign up for one of our Divmod commercial services (such
as the soon-to-be-re-launched [http://divmod.com/ Divmod Mail]) will occasionally get special
treats, early access to new features, and extra goodies not available to the
general public.

Eventually they will also receive a 'badge' displayed next to their user-icon
in public areas.

Additionally, since we are currently using this club to beta-test our billing
system, members who sign up during the beta period (prior to the first day of
PyCon) will receive an 'arcanite alloy' bonus, and be allowed 5 additional
votes for their membership level during the first 3 meetings.  Members who are
currently subscribers to [http://divmod.com Divmod Mail] will additionally
receive this bonus indefinitely.

== Where does the money go? ==

To pay employees, particularly for time spent on community work that is not essential to Divmod's core business.

To hire some of our open source contributors and pay them.

To pay for hosting.

Once that's done, we may send some of this money to open-source contributors to
our products whom we do not employ, and then, if we have hojillions of dollars
left over, start paying for development of features in software Divmod's code
depends upon, such as SQLite and Python.
",',0
584,6,1137563723.3319,amir,198.49.126.204,"= The Divmod Fan Club =

Do you use Divmod's code?

Do you have a poster of Exarkun on your wall?

Do you love our giant-killing chutzpah?

Do you have a freind or family member on the Divmod team?

Has work you've done using a Divmod project made you fantastically wealthy,
such that you don't know what to do with all your extra disposable income?

''Now you know.''

== Joining Up ==

[http://divmod.org:8080/signup Join the club!]

We offer a few different levels of membership.

 * Bronze Membership - $10 per month - ''Buy Glyph enough caffeine to get through one average day.''

 * Silver Membership - $25 per month - ''Take JP out to a restaurant.''

 * Gold Membership - $100 per month - ''Pay for Allen's cell phone calls to Divmod HQ.''

 * Platinum Membership - $250 per month - ''Buy Moe's groceries for a month.''

 * Mithril Membership - more than $1000 per month (email to sales@divmod.com) - ''Buy Amir a pony.''

== Huh What?! ==

Our developer community has approached us to express their appreciation of our work,
and to influence us to work on particular aspects of our product for the their benefit. 

We've created the Divmod Fan Club, or the 'DFC', to give those users a way
to pay back, and a way for us to very publicly say 'thank you!'.

== It's Awesome - Why should I sign up? ==

Conscience. Influence. Status.

=== Conscience ===

Simple: you give because you take.

=== Influence ===

Starting at PyCon 2006, the club will have monthly meetings over IRC where
Divmod will propose a group of open-source features to be prioritized.  Club
members will be allowed to vote on the order those features will be implemented
in.


  (Until we have our first Club meeting we have selected documentation as the next community-focused task that we'll work on as resources permit.
  This will be reviewed at the first Club meeting.)


Members will be allowed a number of votes corresponding to the number of
dollars per month that their membership costs, except Mithril members, who
receive a maximum of 250 votes each, or can instead choose to apply their
membership fees directly to the expense of implementing features of their
choice.

=== Status ===

Members of the club who sign up for one of our Divmod commercial services (such
as the soon-to-be-re-launched [http://divmod.com/ Divmod Mail]) will occasionally get special
treats, early access to new features, and extra goodies not available to the
general public.

Eventually they will also receive a 'badge' displayed next to their user-icon
in public areas.

Additionally, since we are currently using this club to beta-test our billing
system, members who sign up during the beta period (prior to the first day of
PyCon) will receive an 'arcanite alloy' bonus, and be allowed 5 additional
votes for their membership level during the first 3 meetings.  Members who are
currently subscribers to [http://divmod.com Divmod Mail] will additionally
receive this bonus indefinitely.

== Where does the money go? ==

To pay employees, particularly for time spent on community work that is not essential to Divmod's core business.

To hire some of our open source contributors and pay them.

To pay for hosting.

Once that's done, we may send some of this money to open-source contributors to
our products whom we do not employ, and then, if we have hojillions of dollars
left over, start paying for development of features in software Divmod's code
depends upon, such as SQLite and Python.
",',0
585,7,1137563745.24983,amir,198.49.126.204,"= The Divmod Fan Club =

Do you use Divmod's code?

Do you have a poster of Exarkun on your wall?

Do you love our giant-killing chutzpah?

Do you have a friend or family member on the Divmod team?

Has work you've done using a Divmod project made you fantastically wealthy,
such that you don't know what to do with all your extra disposable income?

''Now you know.''

== Joining Up ==

[http://divmod.org:8080/signup Join the club!]

We offer a few different levels of membership.

 * Bronze Membership - $10 per month - ''Buy Glyph enough caffeine to get through one average day.''

 * Silver Membership - $25 per month - ''Take JP out to a restaurant.''

 * Gold Membership - $100 per month - ''Pay for Allen's cell phone calls to Divmod HQ.''

 * Platinum Membership - $250 per month - ''Buy Moe's groceries for a month.''

 * Mithril Membership - more than $1000 per month (email to sales@divmod.com) - ''Buy Amir a pony.''

== Huh What?! ==

Our developer community has approached us to express their appreciation of our work,
and to influence us to work on particular aspects of our product for the their benefit. 

We've created the Divmod Fan Club, or the 'DFC', to give those users a way
to pay back, and a way for us to very publicly say 'thank you!'.

== It's Awesome - Why should I sign up? ==

Conscience. Influence. Status.

=== Conscience ===

Simple: you give because you take.

=== Influence ===

Starting at PyCon 2006, the club will have monthly meetings over IRC where
Divmod will propose a group of open-source features to be prioritized.  Club
members will be allowed to vote on the order those features will be implemented
in.


  (Until we have our first Club meeting we have selected documentation as the next community-focused task that we'll work on as resources permit.
  This will be reviewed at the first Club meeting.)


Members will be allowed a number of votes corresponding to the number of
dollars per month that their membership costs, except Mithril members, who
receive a maximum of 250 votes each, or can instead choose to apply their
membership fees directly to the expense of implementing features of their
choice.

=== Status ===

Members of the club who sign up for one of our Divmod commercial services (such
as the soon-to-be-re-launched [http://divmod.com/ Divmod Mail]) will occasionally get special
treats, early access to new features, and extra goodies not available to the
general public.

Eventually they will also receive a 'badge' displayed next to their user-icon
in public areas.

Additionally, since we are currently using this club to beta-test our billing
system, members who sign up during the beta period (prior to the first day of
PyCon) will receive an 'arcanite alloy' bonus, and be allowed 5 additional
votes for their membership level during the first 3 meetings.  Members who are
currently subscribers to [http://divmod.com Divmod Mail] will additionally
receive this bonus indefinitely.

== Where does the money go? ==

To pay employees, particularly for time spent on community work that is not essential to Divmod's core business.

To hire some of our open source contributors and pay them.

To pay for hosting.

Once that's done, we may send some of this money to open-source contributors to
our products whom we do not employ, and then, if we have hojillions of dollars
left over, start paying for development of features in software Divmod's code
depends upon, such as SQLite and Python.
",typo,0
586,8,1137569570.30363,tekNico,198.49.126.204,"= The Divmod Fan Club =

Do you use Divmod's code?

Do you have a poster of Exarkun on your wall?

Do you love our giant-killing chutzpah?

Do you have a friend or family member on the Divmod team?

Has work you've done using a Divmod project made you fantastically wealthy,
such that you don't know what to do with all your extra disposable income?

''Now you know.''

== Joining Up ==

[http://divmod.org:8080/signup Join the club!]

We offer a few different levels of membership.

 * Bronze Membership - $10 per month - ''Buy Glyph enough caffeine to get through one average day.''

 * Silver Membership - $25 per month - ''Take JP out to a restaurant.''

 * Gold Membership - $100 per month - ''Pay for Allen's cell phone calls to Divmod HQ.''

 * Platinum Membership - $250 per month - ''Buy Moe's groceries for a month.''

 * Mithril Membership - more than $1000 per month (email to sales@divmod.com) - ''Buy Amir a pony.''

== Huh What?! ==

Our developer community has approached us to express their appreciation of our work,
and to influence us to work on particular aspects of our product for the their benefit. 

We've created the Divmod Fan Club, or the 'DFC', to give those users a way
to pay back, and a way for us to very publicly say 'thank you!'.

== It's Awesome - Why should I sign up? ==

Conscience. Influence. Status.

=== Conscience ===

Simple: you give because you take.

=== Influence ===

Starting at [http://us.pycon.org/TX2006/HomePage PyCon 2006], the club will
have monthly meetings over IRC where Divmod will propose a group of open-source
features to be prioritized.  Club members will be allowed to vote on the order
those features will be implemented in.


  (Until we have our first Club meeting we have selected documentation as the next community-focused task that we'll work on as resources permit.
  This will be reviewed at the first Club meeting.)


Members will be allowed a number of votes corresponding to the number of
dollars per month that their membership costs, except Mithril members, who
receive a maximum of 250 votes each, or can instead choose to apply their
membership fees directly to the expense of implementing features of their
choice.

=== Status ===

Members of the club who sign up for one of our Divmod commercial services (such
as the soon-to-be-re-launched [http://divmod.com/ Divmod Mail]) will occasionally get special
treats, early access to new features, and extra goodies not available to the
general public.

Eventually they will also receive a 'badge' displayed next to their user-icon
in public areas.

Additionally, since we are currently using this club to beta-test our billing
system, members who sign up during the beta period (prior to the first day of
!PyCon) will receive an 'arcanite alloy' bonus, and be allowed 5 additional
votes for their membership level during the first 3 meetings.  Members who are
currently subscribers to [http://divmod.com Divmod Mail] will additionally
receive this bonus indefinitely.

== Where does the money go? ==

To pay employees, particularly for time spent on community work that is not essential to Divmod's core business.

To hire some of our open source contributors and pay them.

To pay for hosting.

Once that's done, we may send some of this money to open-source contributors to
our products whom we do not employ, and then, if we have hojillions of dollars
left over, start paying for development of features in software Divmod's code
depends upon, such as SQLite and Python.
","Fixed PyCon 2006 references",0
587,9,1137688771.24686,amir,198.49.126.204,"= The Divmod Fan Club =

Do you use Divmod's code?

Do you have a poster of Exarkun on your wall?

Do you love our giant-killing chutzpah?

Do you have a friend or family member on the Divmod team?

Has work you've done using a Divmod project made you fantastically wealthy,
such that you don't know what to do with all your extra disposable income?

''Now you know.''

== Joining Up ==

[http://divmod.org:8080/signup Join the club!]

We offer a few different levels of membership.

 * Bronze Membership - $10 per month - ''Buy Glyph enough caffeine to get through one average day.''

 * Silver Membership - $25 per month - ''Take JP out to a restaurant.''

 * Gold Membership - $50 per month - ''Pay for Allen's cell phone calls to Divmod HQ.''

 * Platinum Membership - $100 per month - ''Buy Moe's groceries for a month.''

 * Diamond Membership - $250 per month - ''Buy an iPod for a tireless contributor.''

 * Mithril Membership - more than $1000 per month (email to sales@divmod.com) - ''Buy Amir a pony.''

== Huh What?! ==

Our developer community has approached us to express their appreciation of our work,
and to influence us to work on particular aspects of our product for the their benefit. 

We've created the Divmod Fan Club, or the 'DFC', to give those users a way
to pay back, and a way for us to very publicly say 'thank you!'.

== It's Awesome - Why should I sign up? ==

Conscience. Influence. Status.

=== Conscience ===

Simple: you give because you take.

=== Influence ===

Starting at [http://us.pycon.org/TX2006/HomePage PyCon 2006], the club will
have monthly meetings over IRC where Divmod will propose a group of open-source
features to be prioritized.  Club members will be allowed to vote on the order
those features will be implemented in.


  (Until we have our first Club meeting we have selected documentation as the next community-focused task that we'll work on as resources permit.
  This will be reviewed at the first Club meeting.)


Members will be allowed a number of votes corresponding to the number of
dollars per month that their membership costs, except Mithril members, who
receive a maximum of 250 votes each, or can instead choose to apply their
membership fees directly to the expense of implementing features of their
choice.

=== Status ===

Members of the club who sign up for one of our Divmod commercial services (such
as the soon-to-be-re-launched [http://divmod.com/ Divmod Mail]) will occasionally get special
treats, early access to new features, and extra goodies not available to the
general public.

Eventually they will also receive a 'badge' displayed next to their user-icon
in public areas.

Additionally, since we are currently using this club to beta-test our billing
system, members who sign up during the beta period (prior to the first day of
!PyCon) will receive an 'arcanite alloy' bonus, and be allowed 5 additional
votes for their membership level during the first 3 meetings.  Members who are
currently subscribers to [http://divmod.com Divmod Mail] will additionally
receive this bonus indefinitely.

== Where does the money go? ==

To pay employees, particularly for time spent on community work that is not essential to Divmod's core business.

To hire some of our open source contributors and pay them.

To pay for hosting.

Once that's done, we may send some of this money to open-source contributors to
our products whom we do not employ, and then, if we have hojillions of dollars
left over, start paying for development of features in software Divmod's code
depends upon, such as SQLite and Python.
",',0
588,10,1137688887.59387,amir,198.49.126.204,"= The Divmod Fan Club =

Do you use Divmod's code?

Do you have a poster of Exarkun on your wall?

Do you love our giant-killing chutzpah?

Do you have a friend or family member on the Divmod team?

Has work you've done using a Divmod project made you fantastically wealthy,
such that you don't know what to do with all your extra disposable income?

''Now you know.''

== Joining Up ==

[http://divmod.org:8080/signup Join the club!]

We offer a few different levels of membership.

 * Bronze Membership - $10 per month - ''Buy Glyph enough caffeine to get through one average day.''

 * Silver Membership - $25 per month - ''Take JP out to a restaurant.''

 * Gold Membership - $50 per month - ''Pay for Allen's cell phone calls to Divmod HQ.''

 * Platinum Membership - $100 per month - ''Buy Moe's groceries for a month.''

 * Diamond Membership - $250 per month - ''Buy an iPod for a tireless contributor.''

 * Mithril Membership - more than $1000 per month (email to sales@divmod.com) - ''Buy Amir a pony.''

== Huh What?! ==

Our developer community has approached us to express their appreciation of our work,
and to influence us to work on particular aspects of our product for the their benefit. 

We've created the Divmod Fan Club, or the 'DFC', to give those users a way
to pay back, and a way for us to very publicly say 'thank you!'.

== It's Awesome - Why should I sign up? ==

Conscience. Influence. Status.

=== Conscience ===

Simple: you give because you take.

=== Influence ===

Starting at [http://us.pycon.org/TX2006/HomePage PyCon 2006], the club will
have monthly meetings over IRC where Divmod will propose a group of open-source
features to be prioritized.  Club members will be allowed to vote on the order
those features will be implemented in.


  (Until we have our first Club meeting we have selected documentation as the next community-focused task that we'll work on as resources permit.
  This will be reviewed at the first Club meeting.)


Members will be allowed a number of votes corresponding to the number of
dollars per month that their membership costs, except Mithril members, who
receive a maximum of 250 votes each, or can instead choose to apply their
membership fees directly to the expense of implementing features of their
choice.

=== Status ===

Members of the club who sign up for one of our Divmod commercial services (such
as the soon-to-be-re-launched [http://divmod.com/ Divmod Mail]) will occasionally get special
treats, early access to new features, and extra goodies not available to the
general public.

Eventually they will also receive a 'badge' displayed next to their user-icon
in public areas.

Additionally, since we are currently using this club to beta-test our billing
system, members who sign up during the beta period (prior to the first day of
!PyCon) will receive an 'arcanite alloy' bonus, and be allowed 5 additional
votes for their membership level during the first 3 meetings.  Members who are
currently subscribers to [http://divmod.com Divmod Mail] will additionally
receive this bonus indefinitely.

== Where does the money go? ==

To pay employees, particularly for time spent on community work that is not essential to Divmod's core business.

To hire or buy gifts for some of our open source contributors.

To pay for hosting.

Once that's done, we may send some of this money to open-source contributors to
our products whom we do not employ, and then, if we have hojillions of dollars
left over, start paying for development of features in software Divmod's code
depends upon, such as SQLite and Python.
",',0
589,1,1137690579.85533,amir,198.49.126.204,"= Divmod Fan Club Mitrhril Membership =

Mitril membership is designed for corporate fans and opens the door to:
 * Support
 * Training
 * Consulting",',0
590,2,1137690600.95968,amir,198.49.126.204,"= Divmod Fan Club Mitrhril Membership =

Mitril membership is designed for corporate fans and opens the door to:
 * Support
 * Training
 * Consulting

== Support ==

== Training ==

== Consulting ==
",',0
591,3,1137690668.6955,amir,198.49.126.204,"= Divmod Fan Club Mitrhril Membership =

Mitril membership is designed for corporate fans. Mithril should be viewed as a retainer that opens the door to Divmod's professional services:
 * Support
 * Training
 * Consulting

== Support ==

Divmod can offer support o

== Training ==

== Consulting ==
",',0
592,4,1137691575.46136,amir,198.49.126.204,"= Divmod Fan Club Mithril Membership =

Mithril membership is designed for corporations and opens the door to Divmod's professional services:

 * Support
 * Training
 * Consulting

Mithril should be viewed as a retainer and engagements are priced on a
case-by-case basis.

== Support ==

Divmod offers in-depth support for our products that can be escalated
to the original developers. Divmod support is priced according to the
level of support needed and the expected response-time.

== Training ==

Divmod offers training workshops for software engineers and architects
interested in a hands-on experience with our products. Classes can
range for one-day single-product overviews to multi-day classes
covering the whole Divmod and Twisted software stack.

== Consulting ==

Divmod consulting will help you to design, build, tune and deploy
reliable, high-performance Divmod-based solutions. Our consulting team
offers technical assistance in consulting engagements that can provide
the knowledge transfer and expertise to allow you to complete your
projects on-time and on-budget. Our team is extremely productive with
our software and can deliver non-trivial applications in a matter of
weeks.
",',0
593,18,1137739781.10521,tekNico,198.49.126.204,,,
594,7,1137742704.91736,tekNico,198.49.126.204,,,
595,19,1137744258.55752,tekNico,198.49.126.204,,,
596,5,1137773175.59323,amir,198.49.126.204,"= Divmod Fan Club Mithril Membership =

Mithril membership is designed for corporations and provides privileged access
to Divmod resources. Mithril members are invited to send a representative to
the weekly Mithril-only conference call with Divmod developers. Mithril members
will be thanked and linked to from the divmod.org home page.

Mithril also opens the door to the following Divmod professional services
that are priced on a case-by-case basis:

 * Support
 * Training
 * Consulting


== Support ==

Divmod offers in-depth support for our products that can be escalated
to the original developers. Divmod support is priced according to the
level of support needed and the expected response-time.

== Training ==

Divmod offers training workshops for software engineers and architects
interested in a hands-on experience with our products. Classes can
range for one-day single-product overviews to multi-day classes
covering the whole Divmod and Twisted software stack.

== Consulting ==

Divmod consulting will help you to design, build, tune and deploy
reliable, high-performance Divmod-based solutions. Our consulting team
offers technical assistance in consulting engagements that can provide
the knowledge transfer and expertise to allow you to complete your
projects on-time and on-budget. Our team is extremely productive with
our software and can deliver non-trivial applications in a matter of
weeks.
",',0
597,11,1137780096.24748,amir,198.49.126.204,"= The Divmod Fan Club =

Do you use Divmod's code?

Do you have a poster of Exarkun on your wall?

Do you love our giant-killing chutzpah?

Do you have a friend or family member on the Divmod team?

Has work you've done using a Divmod project made you fantastically wealthy,
such that you don't know what to do with all your extra disposable income?

''Now you know.''

== Joining Up ==

[http://divmod.org:8080/signup Join the club!]

We offer a few different levels of membership.

 * Bronze Membership - $10 per month - ''Buy Glyph enough caffeine to get through one average day.''

 * Silver Membership - $25 per month - ''Take JP out to a restaurant.''

 * Gold Membership - $50 per month - ''Pay for Allen's cell phone calls to Divmod HQ.''

 * Platinum Membership - $100 per month - ''Buy Moe's groceries for a month.''

 * Diamond Membership - $250 per month - ''Buy an iPod for a tireless contributor.''

 * [wiki:DivmodFanClubMithril Divmod Mithril Membership] - starting at $1000 per month (email to sales@divmod.com) - ''Buy Amir a pony.''

== Huh What?! ==

Our developer community has approached us to express their appreciation of our work,
and to influence us to work on particular aspects of our product for the their benefit. 

We've created the Divmod Fan Club, or the 'DFC', to give those users a way
to pay back, and a way for us to very publicly say 'thank you!'.

== It's Awesome - Why should I sign up? ==

Conscience. Influence. Status.

=== Conscience ===

Simple: you give because you take.

=== Influence ===

Starting at [http://us.pycon.org/TX2006/HomePage PyCon 2006], the club will
have monthly meetings over IRC where Divmod will propose a group of open-source
features to be prioritized.  Club members will be allowed to vote on the order
those features will be implemented in.


  (Until we have our first Club meeting we have selected documentation as the next community-focused task that we'll work on as resources permit.
  This will be reviewed at the first Club meeting.)


Members will be allowed a number of votes corresponding to the number of
dollars per month that their membership costs, except Mithril members, who
receive a maximum of 250 votes each, or can instead choose to apply their
membership fees directly to the expense of implementing features of their
choice.

=== Status ===

Members of the club who sign up for one of our Divmod commercial services (such
as the soon-to-be-re-launched [http://divmod.com/ Divmod Mail]) will occasionally get special
treats, early access to new features, and extra goodies not available to the
general public.

Eventually they will also receive a 'badge' displayed next to their user-icon
in public areas.

Additionally, since we are currently using this club to beta-test our billing
system, members who sign up during the beta period (prior to the first day of
!PyCon) will receive an 'arcanite alloy' bonus, and be allowed 5 additional
votes for their membership level during the first 3 meetings.  Members who are
currently subscribers to [http://divmod.com Divmod Mail] will additionally
receive this bonus indefinitely.

== Where does the money go? ==

To pay employees, particularly for time spent on community work that is not essential to Divmod's core business.

To hire or buy gifts for some of our open source contributors.

To pay for hosting.

Once that's done, we may send some of this money to open-source contributors to
our products whom we do not employ, and then, if we have hojillions of dollars
left over, start paying for development of features in software Divmod's code
depends upon, such as SQLite and Python.
","link to mithril page",0
598,64,1137780364.0889,amir,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribue and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides LivePage, an automatic AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&component=Reviews&order=priority Reviews]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]

== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://xapian.org Xapian] fast, smart, scalable full text indexing.
 * [http://hyperestraier.sourceforge.net/ Hyperestraier] the new full text indexer in town and [http://hype.python-hosting.com/ Hype Python bindings].
 * [http://www.zope.org/Products/ZopeInterface Zope Interfaces] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.","link to fan club",0
599,3,1137780443.03566,amir,198.49.126.204,"== Divmod Sine ==

A voice over IP application server.","change title to include divmod",0
600,3,1138205672,trac,127.0.0.1,"= Importing ticket data =

== Bugzilla ==

Ticket data can be imported from Bugzilla using the [http://projects.edgewall.com/trac/browser/trunk/contrib/bugzilla2trac.py bugzilla2trac.py] script, available in the contrib/ directory of the Trac distribution.

{{{
$ bugzilla2trac.py
bugzilla2trac - Imports a bug database from Bugzilla into Trac.

Usage: bugzilla2trac.py [options]

Available Options:
  --db <MySQL dbname>              - Bugzilla's database
  --tracenv /path/to/trac/env      - full path to Trac db environment
  -h | --host <MySQL hostname>     - Bugzilla's DNS host name
  -u | --user <MySQL username>     - effective Bugzilla's database user
  -p | --passwd <MySQL password>   - Bugzilla's user password
  -c | --clean                     - remove current Trac tickets before importing
  --help | help                    - this help info

Additional configuration options can be defined directly in the script.
}}}

Currently, the following data is imported from Bugzilla:

  * bugs
  * bug activity (field changes)
  * bug attachments
  * user names and passwords (put into a htpasswd file)

The script provides a number of features to ease the conversion, such as:

  * PRODUCT_KEYWORDS:  Trac doesn't have the concept of products, so the script provides the ability to attach a ticket keyword instead.

  * IGNORE_COMMENTS:  Don't import Bugzilla comments that match a certain regexp.

  * STATUS_KEYWORDS:  Attach ticket keywords for the Bugzilla statuses not available in Trac.  By default, the 'VERIFIED' and 'RELEASED' Bugzilla statuses are translated into Trac keywords.

For more details on the available options, see the configuration section at the top of the script.

== Sourceforge ==

Ticket data can be imported from Sourceforge using the [http://projects.edgewall.com/trac/browser/trunk/contrib/sourceforge2trac.py sourceforge2trac.py] script, available in the contrib/ directory of the Trac distribution.

== Mantis ==

Mantis bugs can be imported using the attached script.

Currently, the following data is imported from Mantis:
  * bugs
  * bug comments
  * bug activity (field changes)

Attachments are NOT imported.  If you use the script, please read the NOTES section (at the top of the file) and make sure you adjust the config parameters for your environment.

mantis2trac.py has the same parameters as the bugzilla2trac.py script:
{{{
mantis2trac - Imports a bug database from Mantis into Trac.

Usage: mantis2trac.py [options] 

Available Options:
  --db <MySQL dbname>              - Mantis database
  --tracenv /path/to/trac/env      - Full path to Trac db environment
  -h | --host <MySQL hostname>     - Mantis DNS host name
  -u | --user <MySQL username>     - Effective Mantis database user
  -p | --passwd <MySQL password>   - Mantis database user password
  -c | --clean                     - Remove current Trac tickets before importing
  --help | help                    - This help info

Additional configuration options can be defined directly in the script.
}}} 

== Other ==

Since trac uses a SQL database to store the data, you can import from other systems by examining the database tables. Just go into [http://www.sqlite.org/sqlite.html sqlite] command line to look at the tables and import into them from your application.
",,
601,3,1138205672,trac,127.0.0.1,,,
602,3,1138205672,trac,127.0.0.1,,,
603,3,1138205672,trac,127.0.0.1,"= The Trac Ticket System =
[[TracGuideToc]]

The Trac issue database provides simple but effective tracking of issues and bugs within a project.

As the central project management element of Trac, tickets are used for '''project tasks''', '''feature requests''', '''bug reports''' and '''software support issues'''. 

As with the TracWiki, this subsystem has been designed with the goal of making user contribution and participation as simple as possible. It should be as easy as possible to report bugs, ask questions and suggest improvements.

An issue is assigned to a person who must resolve it or reassign the ticket to someone else.
All tickets can be edited, annotated, assigned, prioritized and discussed at any time.

'''Note:''' To make full use of the ticket system, use it as an ''in bucket'' for ideas and tasks for your project, rather than just bug/fault reporting. 

== Ticket Fields ==

A  ticket contains the following information attributes:
 
 * '''Reporter''' - The author of the ticket.
 * '''Type''' - The nature of the ticket (for example, defect or enhancement request)

 * '''Component''' - The project module or subsystem this ticket concerns.
 * '''Version''' - Version of the project that this ticket pertains to.
 * '''Keywords''' - Keywords that a ticket is marked with.  Useful for searching and report generation.

 * '''Priority''' - The importance of this issue, ranging from ''trivial'' to ''blocker''.
 * '''Milestone''' - When this issue should be resolved at the latest.
 * '''Assigned to/Owner''' - Principal person responsible for handling the issue.
 * '''Cc''' - A list of other associated people. ''Note that this does not imply responsiblity or any other policy.''
 
 * '''Resolution''' - Reason for why a ticket was closed. One of {{{fixed}}}, {{{invalid}}}, {{{wontfix}}}, {{{duplicate}}}, {{{worksforme}}}.
 * '''Status''' - What is the current status? One of {{{new}}}, {{{assigned}}}, {{{closed}}}, {{{reopened}}}.
 * '''Summary''' - A brief description summarizing the problem or issue.
 * '''Description''' - The body of the ticket. A good description should be specific, descriptive and to the point.

'''Note:''' Versions of Trac prior to 0.9 did not have the ''type'' field, but instead provided a ''severity'' field and different default values for the ''priority'' field. This change was done to simplify the ticket model by removing the somewhat blurry distinction between ''priority'' and ''severity''. However, the old model is still available if you prefer it: just add/modify the default values of the ''priority'' and ''severity'', and optionally hide the ''type'' field by removing all the possible values through [wiki:TracAdmin trac-admin].


== Changing and Commenting Tickets ==

Once a ticket has been entered into Trac, you can at any time change the
information by '''annotating''' the bug. This means changes and comments to
the ticket are logged as a part of the ticket itself.

When viewing a ticket, the history of changes will appear below the main ticket area.

''In the Trac project, we use ticket comments to discuss issues and tasks. This makes
understanding the motivation behind a design- or implementation choice easier,
when returning to it later.''

'''Note:''' An important feature is being able to use TracLinks and
WikiFormatting in ticket descriptions and comments. Use TracLinks to refer to
other issues, changesets or files to make your ticket more specific and easier
to understand.

'''Note:''' See TracNotification for how to configure email notifications of ticket changes.

=== State Diagram ===
http://projects.edgewall.com/trac/attachment/wiki/TracTickets/Trac%20Ticket%20State%20Chart%2020040607DF.png?format=raw


== Default Values for Drop-Down Fields ==

The option selected by default for the various drop-down fields can be set in [wiki:TracIni trac.ini], in the `[ticket]` section:

 * `default_type`: Default ticket type
 * `default_component`: Name of the component selected by default
 * `default_version`: Name of the default version
 * `default_milestone`: Name of the default milestone
 * `default_priority`: Default priority value
 * `default_severity`: Default severity value

If any of these options are omitted, the default value will either be the first in the list, or an empty value, depending on whether the field in question is required to be set.


== Hiding Fields and Adding Custom Fields ==

Many of the default ticket fields can be hidden from the ticket web interface simply by removing all the possible values through [wiki:TracAdmin trac-admin]. This of course only applies to drop-down fields, such as ''type'', ''priority'', ''severity'', ''component'', ''version'' and ''milestone''.

Trac also lets you add your own custom ticket fields. See TracTicketsCustomFields for more information.


== Assign-to as Drop-Down List ==

If the list of possible ticket owners is finite, you can change the ''assign-to'' ticket field from a text input to a drop-down list. This is done by setting the `restrict_owner` option of the `[ticket]` section in [wiki:TracIni trac.ini] to “true”. In that case, Trac will use the list of all users who have logged in and set their email address to populate the drop-down field.

''Note that this feature is '''still experimental as of version 0.9'''. There is no way to only display a subset of all known users as possible ticket owners. Nor is there a convenient way to remove emeritus users short of directly modifying the database.''


== Preset Values for New Tickets ==

To create a link to the new-ticket form filled with preset values, you need to call the `/newticket?` URL with variable=value separated by &. 

Possible variables are :

 * '''reporter''' - Name or email of the reporter
 * '''summary''' - Summary line for the ticket
 * '''description''' - Long description of the ticket
 * '''component''' - The component droplist
 * '''version''' - The version droplist
 * '''severity''' - The severity droplist
 * '''keywords''' - The keywords 
 * '''priority''' - The priority droplist
 * '''milestone''' - The milestone droplist
 * '''owner''' - The person responsible for the ticket
 * '''cc''' - The list of emails for notifying about the ticket change

'''Example:''' ''/trac/newticket?summary=Compile%20Error&version=1.0&component=gui''


See also:  TracGuide, TracWiki, TracTicketsCustomFields, TracNotification",,
604,3,1138205672,trac,127.0.0.1,"= Trac Installation Guide = 
[[TracGuideToc]]

Trac is a lightweight project management tool that is implemented as a web-based application. Trac is written in the Python programming language and can use [http://sqlite.org/ SQLite] or [http://www.postgresql.org/ PostgreSQL] as  database. For HTML rendering, Trac uses the [http://www.clearsilver.net/ Clearsilver] templating system.

What follows are generic instructions for installing and setting up Trac and its requirements. While you can find instructions for installing Trac on specific systems at [http://projects.edgewall.com/trac/wiki/TracInstallPlatforms TracInstallPlatforms] on the main Trac site, please be sure to first read through these general instructions to get a good understanding of the tasks involved.

== Requirements ==

To install Trac, the following software packages must be installed:

 * [http://www.python.org/ Python], version >= 2.3.
   * Python 2.4 is not supported on Windows since there are no Subversion bindings available for it.
   * For RPM-based systems you might also need the `python-devel` and `python-xml` packages.
 * [http://subversion.tigris.org/ Subversion], version >= 1.0. (>= 1.1 recommended) and corresponding [http://svnbook.red-bean.com/svnbook-1.1/ch08s02.html#svn-ch-8-sect-2.3 Python bindings]
   * Trac uses the [http://www.swig.org/ SWIG] bindings included in the Subversion distribution, '''not''' [http://pysvn.tigris.org/ PySVN] (which is sometimes confused with the standard SWIG bindings).
   * If Subversion was already installed without the SWIG bindings, you'll need to re-`configure` Subversion and `make swig-py`, `make install-swig-py`.
 * [http://www.clearsilver.net/ ClearSilver], version >= 0.9.3
   * With python-bindings (`./configure --with-python=/usr/bin/python`)

=== For SQLite ===

 * [http://www.sqlite.org/ SQLite], version 2.8.x or 3.x
 * [http://pysqlite.org/ PySQLite]
   * version 1.0.x (for SQLite 2.8.x)
   * version 1.1.x or 2.x (for SQLite 3.x)

=== For PostgreSQL ===

 * [http://www.postgresql.org/ PostgreSQL]
 * [http://initd.org/projects/psycopg1 psycopg1], [http://initd.org/projects/psycopg2 psycopg2], or [http://pypgsql.sourceforge.net/ pyPgSQL]

=== Optional Requirements ===

 * A CGI-capable web server (see TracCgi), or
 * a [http://www.fastcgi.com/ FastCGI]-capable web server (see TracFastCgi), or
 * [http://httpd.apache.org/ Apache] with [http://www.modpython.org/ mod_python 3.1.3+] (see TracModPython)
 * [http://peak.telecommunity.com/DevCenter/setuptools setuptools], version >= 0.5a13 for using plugins (see TracPlugins)
 * [http://docutils.sourceforge.net/ docutils], version >= 0.3.3 for WikiRestructuredText.
 * [http://silvercity.sourceforge.net/ SilverCity] and/or [http://www.gnu.org/software/enscript/enscript.html Enscript] for [wiki:TracSyntaxColoring syntax highlighting].

'''Attention''': The various available versions of these dependencies are not necessarily interchangable, so please pay attention to the version numbers above. If you are having trouble getting Trac to work please double-check all the dependencies before asking for help on the [http://projects.edgewall.com/trac/wiki/MailingList MailingList] or [http://projects.edgewall.com/trac/wiki/IrcChannel IrcChannel].

Please refer to the documentation of these packages to find out how they are best installed. In addition, most of the [http://projects.edgewall.com/trac/wiki/TracInstallPlatforms platform-specific instructions] also describe the installation of the dependencies.

== Installing Trac ==

Like most Python programs, the Trac Python package is installed by running the following command at the top of the source directory:
{{{
$ python ./setup.py install
}}}

''Note: you'll need root permissions or equivalent for this step.''

This will byte-compile the python source code and install it in the `site-packages` directory
of your Python installation. The directories `cgi-bin`, `templates`, `htdocs`, `wiki-default` and `wiki-macros` are all copied to `$prefix/share/trac/.`

The script will also install the [wiki:TracAdmin trac-admin] command-line tool, used to create and maintain [wiki:TracEnvironment project environments], as well as the [wiki:TracStandalone tracd] standalone server.

=== Advanced Users ===

To install Trac to a custom location, or find out about other advanced installation options, run:
{{{
$ python ./setup.py --help
}}}

Specifically, you might be interested in:
{{{
$ python ./setup.py install --prefix=/path/you/want
}}}


== Creating a Project Environment ==

A [wiki:TracEnvironment Trac environment] is the backend storage where Trac stores information like wiki pages, tickets, reports, settings, etc. An environment is basically a directory that contains a human-readable configuration file and various other files and directories.

A new environment is created using [wiki:TracAdmin trac-admin]:
{{{
$ trac-admin /path/to/trac_project_env initenv
}}}

[wiki:TracAdmin trac-admin] will prompt you for the information it needs to create the environment, such as the name of the project, the path to an existing subversion repository, the [wiki:TracEnvironment#DatabaseConnectionStrings database connection string], and so on. If you're not sure what to specify for one of these options, just leave it blank to use the default value. The database connection string in particular will always work as long as you have SQLite installed. The only option where the default value is likely to not work is the path to the Subversion repository, so make sure that one's correct.

Also note that the values you specify here can be changed later by directly editing the [wiki:TracIni] configuration file.

''Note: The user account under which the web server runs will require write permissions to the environment
directory and all the files inside.''


== Running the Standalone Server ==

After having created a Trac environment, you can easily try the web interface by running the standalone server [wiki:TracStandalone tracd]:
{{{
$ tracd --port 8000 /path/to/projectenv
}}}

Then, fire up a browser and visit `http://localhost:8000/`. You should get a simple listing of all environments that tracd knows about. Follow the link to the environment you just created, and you should see Trac in action.


== Running Trac on a Web Server ==

Trac provides three options for connecting to a “real” web server: [wiki:TracCgi CGI], [wiki:TracFastCgi FastCGI] and [wiki:TracModPython mod_python]. For decent performance, it is recommended that you use either FastCGI or mod_python.

== Configuring Authentication ==

The process of adding, removing, and configuring user accounts for authentication depends on the specific way you run Trac.  To learn about how to accomplish these tasks, please visit one of the following pages:

 * TracStandalone if you use the standalone server, `tracd`.
 * TracCgi if you use the CGI or FastCGI methods.
 * TracModPython if you use the mod_python method.

== Using Trac ==

Once you have your Trac site up and running, you should be able to browse your subversion repository, create tickets, view the timeline, etc.

Keep in mind that anonymous (not logged in) users can by default access most but not all of the features. You will need to configure authentication and grant additional [wiki:TracPermissions permissions] to authenticated users to see the full set of features.

''Enjoy!''

[http://projects.edgewall.com/trac/wiki/TracTeam The Trac Team]

----
See also:  TracGuide, TracCgi, TracFastCgi, TracModPython, TracUpgrade, TracPermissions",,
605,3,1138205672,trac,127.0.0.1,,,
606,3,1138205672,trac,127.0.0.1,"= Syntax Coloring of Source Code =
Trac supports language-specific syntax highlighting of source code in [wiki:WikiFormatting wiki formatted] text and the [wiki:TracBrowser repository browser].

To do this, Trac uses external libraries with support for a great number of programming languages.

Currently Trac supports syntax coloring using one or more of the following packages:

 * [http://people.ssh.fi/mtr/genscript/ GNU Enscript]
 * [http://silvercity.sourceforge.net/ SilverCity]

To activate syntax coloring, simply install either one (or more) of these packages. No additional configuration is required, however to modify the colors, have a look at `trac/htdocs/css/code.css`.

When in use, Trac will automatically prioritize !SilverCity highlighting over Enscript if possible, (see note below). 

If neither package is available, Trac will display the data as plain text. 

'''Note:''' Enscript supports a greater number of languages, however !SilverCity is generally faster since it is a library and isn't executed in an external process.

=== About SilverCity ===
!SilverCity uses the lexer from [http://www.scintilla.org/ Scintilla]. Scintilla supports more languages than !SilverCity implements. If you want to add a language to !SilverCity supported by Scintilla, it's not very difficult. See [http://projects.edgewall.com/trac/wiki/SilverCityAddLanguage SilverCityAddLanguage] for some information how.


== Syntax Coloring Support ==

|| || !SilverCity || Enscript ||
|| Ada      ||   || X ||
|| Asm      ||   || X ||
|| * ASP    || X || X ||
|| * C      || X || X ||
|| * C++    || X || X ||
|| * Java   ||   || X ||
|| Awk      ||   || X ||
|| CSS      || X ||   ||
|| Diff     ||   || X ||
|| Eiffel   ||   || X ||
|| Elisp    ||   || X ||
|| Fortran  ||   || X ||
|| Haskell  ||   || X ||
|| HTML     || X || X ||
|| IDL      ||   || X ||
|| Javascript || X || X ||

|| m4       ||   || X ||
|| Makefile ||   || X ||
|| Matlab   ||   || X ||
|| Objective-C|| || X ||
|| Pascal   ||   || X ||
|| * Perl   || X || X ||
|| * PHP    || X || X ||
|| PSP      || X ||   ||
|| Pyrex    ||   || X ||
|| * Python || X || X ||
|| * Ruby   || X || X (1) ||
|| Scheme   ||   || X ||
|| Shell    ||   || X ||
|| SQL      || X || X ||
|| Troff    ||   || X ||
|| TCL      ||   || X ||
|| Tex      ||   || X ||
|| Verilog  ||   || X ||
|| VHDL     ||   || X ||
|| Visual Basic |||| X ||
|| VRML     ||   || X ||
|| XML      || X || X ||

''(*) Supported as inline code blocks in [wiki:WikiFormatting Wiki text] using WikiProcessors.''

''(1) Ruby highlighting is not included in the Enscript distribution.  Highlighting rules for Ruby can be obtained from: http://neugierig.org/software/ruby/

== Extra Software ==
 * GNU Enscript -- http://people.ssh.fi/mtr/genscript/
 * !SilverCity -- http://silvercity.sf.net/

----
See also: WikiProcessors, WikiFormatting, TracWiki, TracBrowser",,
607,3,1138205672,trac,127.0.0.1,"= Trac Permissions =
[[TracGuideToc]]

Trac uses a simple but flexible permission system to control what users can and can't access.

Permission privileges are managed using the [wiki:TracAdmin trac-admin] tool.

Regular visitors, non-authenticated users, accessing the system are assigned the default 
role (''user'') named {{{anonymous}}}. 
Assign permissions to the {{{anonymous}}} user to set privileges for non-authenticated/guest users.

In addition to these privileges users can be granted additional individual 
rights in effect when authenticated and logged into the system.

== Available Privileges ==

To enable all privileges for a user, use the `TRAC_ADMIN` permission. Having `TRAC_ADMIN` is like being `root` on a *NIX system, it will let you do anything you want.

Otherwise, individual privileges can be assigned to users for the various different functional areas of Trac:

=== Repository Browser ===

|| `BROWSER_VIEW` || View directory listings in the [wiki:TracBrowser repository browser] ||
|| `LOG_VIEW` || View revision logs of files and directories in the [wiki:TracBrowser repository browser] ||
|| `FILE_VIEW` || View files in the [wiki:TracBrowser repository browser] ||
|| `CHANGESET_VIEW` || View [wiki:TracChangeset repository check-ins] ||

=== Ticket System ===

|| `TICKET_VIEW` || View existing [wiki:TracTickets tickets] and perform [wiki:TracQuery ticket queries] ||
|| `TICKET_CREATE` || Create new [wiki:TracTickets tickets] ||
|| `TICKET_APPEND` || Add comments or attachments to [wiki:TracTickets tickets] ||
|| `TICKET_CHGPROP` || Modify [wiki:TracTickets ticket] properties ||
|| `TICKET_MODIFY` || Includes both `TICKET_APPEND` and `TICKET_CHGPROP`, and in addition allows resolving [wiki:TracTickets tickets] ||
|| `TICKET_ADMIN` || All `TICKET_*` permissions, plus the deletion of ticket attachments. ||

=== Roadmap ===

|| `MILESTONE_VIEW` || View a milestone ||
|| `MILESTONE_CREATE` || Create a new milestone ||
|| `MILESTONE_MODIFY` || Modify existing milestones ||
|| `MILESTONE_DELETE` || Delete milestones ||
|| `MILESTONE_ADMIN` || All `MILESTONE_*` permissions ||
|| `ROADMAP_VIEW` || View the [wiki:TracRoadmap roadmap] page ||
|| `ROADMAP_ADMIN` || Alias for `MILESTONE_ADMIN` (deprecated) ||

=== Reports ===

|| `REPORT_VIEW` || View [wiki:TracReports reports] ||
|| `REPORT_SQL_VIEW` || View the underlying SQL query of a [wiki:TracReports report] ||
|| `REPORT_CREATE` || Create new [wiki:TracReports reports] ||
|| `REPORT_MODIFY` || Modify existing [wiki:TracReports reports] ||
|| `REPORT_DELETE` || Delete [wiki:TracReports reports] ||
|| `REPORT_ADMIN` || All `REPORT_*` permissions ||

=== Wiki System ===

|| `WIKI_VIEW` || View existing [wiki:TracWiki wiki] pages ||
|| `WIKI_CREATE` || Create new [wiki:TracWiki wiki] pages ||
|| `WIKI_MODIFY` || Change [wiki:TracWiki wiki] pages ||
|| `WIKI_DELETE` || Delete [wiki:TracWiki wiki] pages and attachments ||
|| `WIKI_ADMIN` || All `WIKI_*` permissions, plus the management of ''readonly'' pages. ||

=== Others ===

|| `TIMELINE_VIEW` || View the [wiki:TracTimeline timeline] page ||
|| `SEARCH_VIEW` || View and execute [wiki:TracSearch search] queries ||
|| `CONFIG_VIEW` || Enables additional pages on ''About Trac'' that show the current configuration or the list of installed plugins ||

== Granting Privileges ==

Currently the only way to grant privileges to users is by using the `trac-admin` script. The current set of privileges can be listed with the following command:
{{{
  $ trac-admin /path/to/projenv permission list
}}}

This command will allow the user ''bob'' to delete reports:
{{{
  $ trac-admin /path/to/projenv permission add bob REPORT_DELETE
}}}

== Permission Groups ==

Permissions can be grouped together to form roles such as ''developer'', ''admin'', etc.
{{{
  $ trac-admin /path/to/projenv permission add developer WIKI_ADMIN
  $ trac-admin /path/to/projenv permission add developer REPORT_ADMIN
  $ trac-admin /path/to/projenv permission add developer TICKET_MODIFY
  $ trac-admin /path/to/projenv permission add bob developer
  $ trac-admin /path/to/projenv permission add john developer
}}}

== Default Permissions ==

Granting privileges to the special user ''anonymous'' can be used to control what an anonymous user can do before they have logged in.

In the same way, privileges granted to the special user ''authenticated'' will apply to any authenticated (logged in) user.

----
See also: TracAdmin, TracGuide",,
608,3,1138205672,trac,127.0.0.1,"= Trac Support =

Like in most [http://www.opensource.org/ open source projects], 'free' Trac support is available primarily through the community itself, mainly through the [http://projects.edgewall.com/trac/wiki/MailingList mailing list] and the project wiki.

There is also an [http://projects.edgewall.com/trac/wiki/IrcChannel IRC channel], where people might be able to help out. Much of the 'live' development discussions also happen there.

Before you start a new support query, make sure you've done the appropriate searching:
 * in the project's [http://projects.edgewall.com/trac/wiki/TracFaq FAQ]
 * in past messages to the Trac [http://blog.gmane.org/gmane.comp.version-control.subversion.trac.general?set_user_css=http%3A%2F%2Fwww.edgewall.com%2Fcss%2Fgmane.css&do_set_user_css=t Mailing List]
 * in the Trac ticket system, using either a [http://projects.edgewall.com/trac/search?q=&ticket=on&wiki=on full search] or a [http://projects.edgewall.com/trac/query?summary=~&keywords=~' ticket query].

----
See also: [http://projects.edgewall.com/trac/wiki/MailingList MailingList]
",,
609,3,1138205672,trac,127.0.0.1,"= The Trac Configuration File =
[[TracGuideToc]]

Trac configuration is done by editing the '''`trac.ini`''' config file, located in `<projectenv>/conf/trac.ini`.

== Global Configuration ==

Since version 0.9, Trac can also read the configuration from a global `trac.ini` file. These global options will then be merged with the environment-specific options, where local options override global options.

The global configuration is by default localted in `$prefix/share/trac/conf/trac.ini`. It can be moved to a different location (for example, `/etc/trac.ini`), but that requires changing the file `trac/siteconfig.py` which gets created when Trac is installed. 

== Reference ==

This is a brief reference of available configuration options.

== [trac] ==
|| `database`        || [wiki:TracEnvironment#DatabaseConnectionStrings Database connection string] for this project ||
|| `default_charset` || Charset used in text files in the subversion repository (default is `iso-8859-15`) ||
|| `default_handler` || Name of the component that handles requests to the base URL (default is `WikiHandler`) (''since 0.9'') ||
|| `repository_dir`  || Path to local Subversion repository ||
|| `authz_file`      || Path to Subversion [http://svnbook.red-bean.com/en/1.1/ch06s04.html#svn-ch-6-sect-4.4.2 authorization (authz) file]. ||
|| `authz_module_name` || The module prefix used in the `authz_file` (See FineGrainedPermissions)||
|| `check_auth_ip` || Whether the IP address of the user should be checked for authentication (true, false) (''since 0.9'') ||
|| `ignore_auth_case` || Whether case should be ignored for login names (true, false) (''since 0.9'') ||
|| `templates_dir`   || Path to the !ClearSilver templates ||

== [project] ==
|| `name`   || Project name ||
|| `descr`  || Short project description ||
|| `url`    || URL to the main project website ||
|| `icon`   || URL to icon file to use as shortcut icon (favicon) ||
|| `footer` || Page footer text (right-aligned) ||

== [header_logo] ==
|| `src`    || URL to image to use as header logo ||
|| `link`   || Destination URL to link to from header logo ||
|| `alt`    || ''alt'' text for header logo ||
|| `width`  || Header logo width in pixels ||
|| `height` || Header logo height in pixels ||
See also: TracInterfaceCustomization.

== [logging] ==
|| `log_type`  || Logging facility to use. (none, file, stderr, syslog, winlog) ||
|| `log_file`  || If ''log_type'' is ''file'', this should be a path to the log-file ||
|| `log_level` || Level of verbosity in log (CRITICAL, ERROR, WARN, INFO, DEBUG) ||
See also: TracLogging

== [attachment] ==
|| `max_size` || Maximum allowed file size for ticket and wiki attachments ||

== [notification] ==
|| `smtp_enabled`   || Enable SMTP (email) notification (true, false) ||
|| `smtp_server`    || SMTP server to use for email notifications ||
|| `smtp_user`      || Username for SMTP server (''since 0.9'') ||
|| `smtp_password`  || Password for SMTP server (''since 0.9'') ||
|| `smtp_from`      || Sender address to use in notification emails ||
|| `smtp_replyto`   || Reply-To address to use in notification emails ||
|| `smtp_always_cc` || Email address(es) to always send notifications to ||
|| `always_notify_reporter` || Always send notifications to any address in the ''reporter'' field ||
|| `always_notify_owner` || Always send notifications to the ticket owner (''since 0.9'') ||
See also: TracNotification

== [mimeviewer] ==
|| `enscript_path` || Path to the Enscript program ||
|| `php_path` || Path to the PHP program ||
|| `max_preview_size` || Maximum file size for HTML preview (''since 0.9'') ||
|| `tab_width` || Displayed tab width in file preview (''since 0.9'') ||

== [ticket] ==
|| `default_version`   || Default version for newly created tickets ||
|| `default_severity`  || Default severity for newly created tickets ||
|| `default_priority`  || Default priority for newly created tickets ||
|| `default_milestone` || Default milestone for newly created tickets ||
|| `default_component` || Default component for newly created tickets ||
|| `restrict_owner`    || Make the owner field of tickets use a drop-down menu (''since 0.9'') ||

== [ticket-custom] ==
Creates [wiki:TracTicketsCustomFields user-defined ticket fields].

== [timeline] ==
|| `default_daysback` || Default 'depth' of the Timeline, in days (''since 0.9'') ||
|| `changeset_show_files` || Number of files to show (-1 for unlimited, 0 to disable) ||
|| `ticket_show_details` || Enable the display of all ticket changes in the timeline ||

== [browser] ==
|| `hide_properties` || List of subversion properties to hide from the repository browser (''since 0.9'') ||

== [wiki] ==
|| `ignore_missing_pages` || enable/disable highlighting CamelCase links to missing pages (''since 0.9'') ||

== [components] ==
(''since 0.9'')

This section is used to enable or disable components provided by plugins, as well as by Trac itself. The component to enable/disable is specified via the name of the option. Whether its enabled is determined by the option value; setting the value to `enabled` or `on` will enable the component, any other value (typically `disabled` or `off`) will disable the component.

The option name is either the fully qualified name of the components or the module/package prefix of the component. The former enables/disables a specific component, while the latter enables/disables any component in the specified package/module.

Consider the following configuration snippet:
{{{
[components]
trac.ticket.report.ReportModule = disabled
webadmin.* = enabled
}}}

The first option tells Trac to disable the [wiki:TracReports report module]. The second option instructs Trac to enable all components in the `webadmin` package. Note that the trailing wildcard is required for module/package matching.

See the ''Plugins'' page on ''About Trac'' to get the list of active components (requires `CONFIG_VIEW` [wiki:TracPermissions permissions].)

See also: TracPlugins

  ''Note that prior to Trac r2335 (that applies to 0.9b1 and 0.9b2), you would use a `[disabled_components]` section instead. See a [http://projects.edgewall.com/trac/wiki/TracIni?version=42 previous version] of this page for the details.''

----
See also: TracGuide, TracAdmin, TracEnvironment
",,
610,3,1138205672,trac,127.0.0.1,"= Trac and mod_python =

Trac supports [http://www.modpython.org/ mod_python], which speeds up Trac's response times considerably and permits use of many Apache features not possible with [wiki:TracStandalone tracd]/mod_proxy.

== Simple configuration ==

If you just installed mod_python, you may have to add a line to load the module in the Apache configuration:
{{{
LoadModule python_module modules/mod_python.so
}}}

A simple setup of Trac on mod_python looks like this:
{{{
<Location /projects/myproject>
   SetHandler mod_python
   PythonHandler trac.web.modpython_frontend 
   PythonOption TracEnv /var/trac/myproject
   PythonOption TracUriRoot /projects/myproject
</Location>
}}}

Note that the option `TracUriRoot` may or may not be necessary in your setup. Try without first, and if the URLs produced by Trac look wrong or if Trac does not seem to recognize the URLs correctly, add the `TracUriRoot` option.

Configuring authentication works the same as for [wiki:TracCgi#AddingAuthentication CGI]:
{{{
<Location '/projects/myproject/login'>
  AuthType Basic
  AuthName 'myproject'
  AuthUserFile /var/trac/myproject/.htaccess
  Require valid-user
</Location>
}}}

If the Trac installation isn't installed in your Python path, you'll have to tell Apache where to find the Trac mod_python handler  using the `PythonPath` directive:
{{{
<Location /projects/myproject>
  ...
  PythonPath 'sys.path + ['/path/to/trac']'
  ...
</Location>
}}}


== Setting up multiple projects ==

The Trac mod_python handler handler supports a configuration option similar to Subversion's `SvnParentPath`, called `TracEnvParentDir`:
{{{
<Location /projects>
  SetHandler mod_python
  PythonHandler trac.web.modpython_frontend 
  PythonOption TracEnvParentDir /var/trac
  PythonOption TracUriRoot /projects
</Location>
}}}

When you request the `/projects` URL, you will get a listing of all subdirectories of the directory you set as `TracEnvParentDir`. Selecting any project in the list will bring you to the corresponding Trac environment.

If you don't want to have the subdirectory listing as your projects home page you can use a
{{{
<LocationMatch '/.+/'>
}}}

This will instruct Apache to use mod_python for all locations different from root while having the possibility of placing a custom home page for root in your !DocumentRoot folder.

You can also use the same authentication realm for all of the projects using a `<LocationMatch>` directive:
{{{
<LocationMatch '/[^/]+/login'>
  AuthType Basic
  AuthName 'Trac'
  AuthUserFile /var/trac/.htaccess
  Require valid-user
</LocationMatch>
}}}

== Virtual Host Configuration ==

Below is the sample configuration required to set up your trac as a virtual server (i.e. when you access it at the URLs like
!http://trac.mycompany.com):

{{{
<VirtualHost * >
    DocumentRoot /var/trac/myproject
    ServerName trac.mycompany.com
    <Directory />
        SetHandler mod_python
        PythonHandler trac.web.modpython_frontend
        PythonOption TracEnv /var/trac/myproject
        PythonOption TracUriRoot /
    </Directory>
    <Location /login>
        AuthType Basic
        AuthName 'MyCompany Trac Server'
        AuthUserFile /var/trac/myproject/.htusers
        Require valid-user
    </Location>
</VirtualHost>
}}}

== Troubleshooting ==

=== Form submission problems ===

If you're experiencing problems submitting some of the forms in Trac (a common problem is that you get redirected to the start page after submission), check whether your {{{DocumentRoot}}} contains a folder or file with the same path that you mapped the mod_python handler to. For some reason, mod_python gets confused when it is mapped to a location that also matches a static resource.

=== Using .htaccess ===

Although it may seem trivial to rewrite the above configuration as a directory in your document root with a `.htaccess` file, this does not work. Apache will append a '/' to any Trac URLs, which interferes with its correct operation.

It may be possible to work around this with mod_rewrite, but I failed to get this working. In all, it is more hassle than it is worth. Stick to the provided instructions. :)

=== Win32 Issues ===

If you run trac with mod_python (3.1.3 or 3.1.4) on Windows, 
uploading attachments will '''not''' work.
This is a known problem which we can't solve cleanly at the Trac level.

However, there is a workaround for this at the mod_python level, 
which is to apply the following patch [http://projects.edgewall.com/trac/attachment/ticket/554/util_py.patch attachment:ticket:554:util_py.patch] 
to the (Lib/site-packages)/modpython/util.py file.

If you don't have the `patch` command, that file can be replaced with the [http://svn.apache.org/viewcvs.cgi/httpd/mod_python/trunk/lib/python/mod_python/util.py?rev=103562&view=markup  fixed util.py] (fix which, although done prior to the 3.1.4 release, is ''not'' 
present in 3.1.4).

=== OS X issues ===

When using mod_python on OS X you will not be able to restart Apache using `apachectl restart`. This is apparently fixed in mod_python 3.2, but there's also a patch available for earlier versions [http://www.dscpl.com.au/projects/vampire/patches.html here].

----
See also TracGuide, TracInstall, TracCgi, TracFastCgi",,
611,3,1138205672,trac,127.0.0.1,"= WikiFormatting =
[[TracGuideToc]]

Wiki markup is a core feature in Trac, tightly integrating all the other parts of Trac into a flexible and powerful whole.

Trac has a built in small and powerful wiki rendering engine. This wiki engine implements an ever growing subset of the commands from other popular Wikis,
especially [http://moinmoin.wikiwikiweb.de/ MoinMoin]. 


This page demonstrates the formatting syntax available anywhere WikiFormatting is allowed.


== Font Styles ==

The Trac wiki supports the following font styles:
{{{
 * '''bold'''
 * ''italic''
 * '''''bold italic'''''
 * __underline__
 * {{{monospace}}} or `monospace`
 * ~~strike-through~~
 * ^superscript^ 
 * ,,subscript,,
}}}

Display:
 * '''bold'''
 * ''italic''
 * '''''bold italic'''''
 * __underline__
 * {{{monospace}}} or `monospace`
 * ~~strike-through~~
 * ^superscript^ 
 * ,,subscript,,

Note that the `{{{...}}}` and {{{`...`}}} commands not only select a monospace font, but also treat their content as verbatim text, meaning that no further wiki processing is done on this text.

== Headings ==

You can create heading by starting a line with one up to five ''equal'' characters ('=')
followed by a single space and the headline text. The line should end with a space 
followed by the same number of ''='' characters.

Example:
{{{
= Heading =
== Subheading ==
=== About ''this'' ===
}}}

Display:
= Heading =
== Subheading ==
=== About ''this'' ===


== Paragraphs ==

A new text paragraph is created whenever two blocks of text are separated by one or more empty lines.

A forced line break can also be inserted, using:
{{{
Line 1[[BR]]Line 2
}}}
Display:

Line 1[[BR]]Line 2


== Lists ==

The wiki supports both ordered/numbered and unordered lists.

Example:
{{{
 * Item 1
   * Item 1.1
 * Item 2

 1. Item 1
   1. Item 1.1
 1. Item 2
}}}

Display:
 * Item 1
   * Item 1.1
 * Item 2

 1. Item 1
   1. Item 1.1
 1. Item 2

Note that there must be one or more spaces preceding the list item markers, otherwise the list will be treated as a normal paragraph.


== Definition Lists ==

The wiki also supports definition lists.

Example:
{{{
 llama::
   some kind of mammal, with hair
 ppython::
   some kind of reptile, without hair
   (can you spot the typo?)
}}}

Display:
 llama::
   some kind of mammal, with hair
 ppython::
   some kind of reptile, without hair
   (can you spot the typo?)

Note that you need a space in front of the defined term.


== Preformatted Text ==

Block containing preformatted text are suitable for source code snippets, notes and examples. Use three ''curly braces'' wrapped around the text to define a block quote. The curly braces need to be on a separate line.
  
Example:
{{{
 {{{
  def HelloWorld():
      print 'Hello World'
 }}}
}}}

Display:
{{{
 def HelloWorld():
     print 'Hello World'
}}}


== Blockquotes ==

In order to mark a paragraph as blockquote, indent that paragraph with two spaces.

Example:
{{{
  This text is a quote from someone else.
}}}

Display:
  This text is a quote from someone else.

== Tables ==

Simple tables can be created like this:
{{{
||Cell 1||Cell 2||Cell 3||
||Cell 4||Cell 5||Cell 6||
}}}

Display:
||Cell 1||Cell 2||Cell 3||
||Cell 4||Cell 5||Cell 6||

Note that more complex tables can be created using
[wiki:WikiRestructuredText#BiggerReSTExample reStructuredText].


== Links ==

Hyperlinks are automatically created for WikiPageNames and URLs. !WikiPageLinks can be disabled by prepending an exclamation mark '!' character, such as {{{!WikiPageLink}}}.

Example:
{{{
 TitleIndex, http://www.edgewall.com/, !NotAlink
}}}

Display:
 TitleIndex, http://www.edgewall.com/, !NotAlink

Links can be given a more descriptive title by writing the link followed by a space and a title and all this inside square brackets.  If the descriptive title is omitted, then the explicit prefix is disguarded, unless the link is an external link. This can be useful for wiki pages not adhering to the WikiPageNames convention.

Example:
{{{
 * [http://www.edgewall.com/ Edgewall Software]
 * [wiki:TitleIndex Title Index]
 * [wiki:ISO9000]
}}}

Display:
 * [http://www.edgewall.com/ Edgewall Software]
 * [wiki:TitleIndex Title Index]
 * [wiki:ISO9000]


=== Trac Links ===

Wiki pages can link directly to other parts of the Trac system. Pages can refer to tickets, reports, changesets, milestones, source files and other Wiki pages using the following notations:
{{{
 * Tickets: #1 or ticket:1
 * Reports: {1} or report:1
 * Changesets: r1, [1] or changeset:1
 * Revision Logs: r1:3, [1:3] or log:branches/0.8-stable#1:3
 * Wiki pages: CamelCase or wiki:CamelCase
 * Milestones: milestone:1.0 or milestone:'End-of-days Release'
 * Files: source:trunk/COPYING
 * Attachments: attachment:'file name.doc'
 * A specific file revision: source:/trunk/COPYING#200
 * A filename with embedded space: source:'/trunk/README FIRST'
}}}

Display:
 * Tickets: #1 or ticket:1
 * Reports: {1} or report:1
 * Changesets: r1, [1] or changeset:1
 * Revision Logs: r1:3, [1:3] or log:branches/0.8-stable#1:3
 * Wiki pages: CamelCase or wiki:CamelCase
 * Milestones: milestone:1.0 or milestone:'End-of-days Release'
 * Files: source:trunk/COPYING
 * Attachments: attachment:'file name.doc'
 * A specific file revision: source:/trunk/COPYING#200
 * A filename with embedded space: source:'/trunk/README FIRST'

See TracLinks for more in-depth information.


== Escaping Links and WikiPageNames ==

You may avoid making hyperlinks out of TracLinks by preceding an expression with a single '!' (exclamation mark).

Example:
{{{
 !NoHyperLink
 !#42 is not a link
}}}

Display:
 !NoHyperLink
 !#42 is not a link


== Images ==

Urls ending with `.png`, `.gif` or `.jpg` are automatically interpreted as image links, and converted to `<img>` tags.

Example:
{{{
http://www.edgewall.com/gfx/trac_example_image.png
}}}

Display:

http://www.edgewall.com/gfx/trac_example_image.png

However, this doesn't give much control over the display mode. This way of inserting images is deprecated in favor of the more powerful `Image` macro (see WikiMacros).


== Macros ==

Macros are ''custom functions'' to insert dynamic content in a page.

Example:
{{{
 [[Timestamp]]
}}}

Display:
 [[Timestamp]]

See WikiMacros for more information, and a list of installed macros.


== Processors ==

Trac supports alternative markup formats using WikiProcessors. For example, processors are used to write pages in 
[wiki:WikiRestructuredText reStructuredText] or [wiki:WikiHtml HTML]. 

Example 1:
{{{
#!html
<pre class='wiki'>{{{
#!html
&lt;h1 style='text-align: right; color: blue'&gt;HTML Test&lt;/h1&gt;
}}}</pre>
}}}

Display:
{{{
#!html
<h1 style='text-align: right; color: blue'>HTML Test</h1>
}}}

Example:
{{{
#!html
<pre class='wiki'>{{{
#!python
class Test:
    def __init__(self):
        print 'Hello World'
if __name__ == '__main__':
   Test()
}}}</pre>
}}}

Display:
{{{
#!python
class Test:
    def __init__(self):
        print 'Hello World'
if __name__ == '__main__':
   Test()
}}}

Perl:
{{{
#!perl
my ($test) = 0;
if ($test > 0) {
echo 'hello';
}
}}}

See WikiProcessors for more information.


== Miscellaneous ==

Four or more dashes will be replaced by a horizontal line (<HR>)

Example:
{{{
 ----
}}}

Display:
----


----
See also: TracLinks, TracGuide, WikiHtml, WikiMacros, WikiProcessors, TracSyntaxColoring.",,
612,3,1138205672,trac,127.0.0.1,"= Custom Ticket Fields =
Trac supports adding custom, user-defined fields to the ticket module. Using custom fields, you can add typed, site-specific properties to tickets.

== Configuration ==
Configuring custom ticket fields is done in the [wiki:TracIni trac.ini] file. All field definitions should be under a section named `[ticket-custom]`.

The syntax of each field definition is:
{{{
 FIELD_NAME = TYPE
 (FIELD_NAME.OPTION = VALUE)
 ...
}}}
The example below should help to explain the syntax.

=== Available Field Types and Options ===
 * '''text''': A simple (one line) text field.
   * label: Descriptive label.
   * value: Default value.
   * order: Sort order placement. (Determines relative placement in forms.)
 * '''checkbox''': A boolean value check box.
   * label: Descriptive label.
   * value: Default value (0 or 1).
   * order: Sort order placement.
 * '''select''': Drop-down select box. Uses a list of values.
   * options: List of values, separated by '''|''' (vertical pipe).
   * value: Default value (Item #, starting at 0).
   * order: Sort order placement.
 * '''radio''': Radio buttons. Essentially the same as '''select'''.
   * label: Descriptive label.
   * options: List of values, separated by '''|''' (vertical pipe).
   * value: Default value (Item #, starting at 0).
   * order: Sort order placement.
 * '''textarea''': Multi-line text area.
   * label: Descriptive label.
   * value: Default text.
   * cols: Width in columns.
   * rows: Height in lines.
   * order: Sort order placement.

=== Sample Config ===
{{{
[ticket-custom]

test_one = text
test_one.label = Just a text box

test_two = text
test_two.label = Another text-box
test_two.value = Just a default value

test_three = checkbox
test_three.label = Some checkbox
test_three.value = 1

test_four = select
test_four.label = My selectbox
test_four.options = one|two|third option|four
test_four.value = 2

test_five = radio
test_five.label = Radio buttons are fun
test_five.options = uno|dos|tres|cuatro|cinco
test_five.value = 1

test_six = textarea
test_six.label = This is a large textarea
test_six.value = Default text
test_six.cols = 60
test_six.rows = 30
}}}

''Note: To make an entering an option for a `select` type field optional, specify a leading `|` in the `fieldname.options` option.''

=== Reports Involving Custom Fields ===

The SQL required for TracReports to include custom ticket fields is relatively hard to get right. You need a `JOIN` with the `ticket_custom` field for every custom field that should be involved.

The following example includes a custom ticket field named `progress` in the report:
{{{
#!sql
SELECT p.value AS __color__,
   id AS ticket, summary, component, version, milestone, severity,
   (CASE status WHEN 'assigned' THEN owner||' *' ELSE owner END) AS owner,
   time AS created,
   changetime AS _changetime, description AS _description,
   reporter AS _reporter,
  (CASE WHEN c.value = '0' THEN 'None' ELSE c.value END) AS progress
  FROM ticket t
     LEFT OUTER JOIN ticket_custom c ON (t.id = c.ticket AND c.name = 'progress')
     JOIN enum p ON p.name = t.priority AND p.type='priority'
  WHERE status IN ('new', 'assigned', 'reopened')
  ORDER BY p.value, milestone, severity, time
}}}

Note in particular the `LEFT OUTER JOIN` statement here.

----
See also: TracTickets, TracIni",,
613,3,1138205672,trac,127.0.0.1,"= Email Notification of Ticket Changes =
[[TracGuideToc]]

Trac supports basic notification for ticket changes using email. 

Email notification is useful to keep users up-to-date on tickets/issues of interest, and also provides a convenient way to post ticket changes to a dedicated mailing list. '''Note:''' As an example, this is how the [http://lists.edgewall.com/archive/trac-tickets/ Trac-tickets] mailing list works.

Disabled by default, notification can be activated and configured in [wiki:TracIni trac.ini].

== Receiving Notification ==
When reporting a new ticket or adding a comment, enter a valid email address in the ''reporter'', ''editor'' or ''cc'' field. Trac will automatically send you an email when changes are made to the ticket.

This is useful to keep up-to-date on an issue or enhancement request that interests you.

== Configuring SMTP Notification ==

=== Configuration Options ===
These are the available options for the ''[notification]'' section in trac.ini.
 * '''smtp_enabled''': Enable email notification.
 * '''smtp_server''': SMTP server used for notification messages.
 * '''smtp_user''': (''requires [milestone:0.9 0.9]'') user name for authentication SMTP account.
 * '''smtp_password''': (''requires [milestone:0.9 0.9]'') password for authentication SMTP account.
 * '''smtp_from''': Email address to use for ''Sender''-headers in notification emails.
 * '''smtp_replyto''': Email address to use for ''Reply-To''-headers in notification emails.
 * '''smtp_always_cc''': List of email addresses to always send notifications to. ''Typically used to post ticket changes to a dedicated mailing list.''
 * '''always_notify_reporter''':  Always send notifications to any address in the reporter field.
 * '''always_notify_owner''': (''requires [milestone:0.9 0.9]'') Always send notifications to the address in the owner field.

Either '''smtp_from''' or '''smtp_replyto''' (or both) ''must'' be set, otherwise Trac refuses to send notification mails.

=== Example Configuration ===

{{{
[notification]
smtp_enabled = true
smtp_server = mail.example.com
smtp_from = notifier@example.com
smtp_replyto = myproj@projects.example.com
smtp_always_cc = ticketmaster@example.com, theboss+myproj@example.com
}}}

== Sample Email ==
{{{
#42: testing
---------------------------+------------------------------------------------
       Id:  42             |      Status:  assigned                
Component:  report system  |    Modified:  Fri Apr  9 00:04:31 2004
 Severity:  major          |   Milestone:  0.9                     
 Priority:  lowest         |     Version:  0.6                     
    Owner:  anonymous      |    Reporter:  jonas@example.com               
---------------------------+------------------------------------------------
Changes:
  * component:  changset view => search system
  * priority:  low => highest
  * owner:  jonas => anonymous
  * cc:  daniel@example.com =>
         daniel@example.com, jonas@example.com
  * status:  new => assigned

Comment:
I'm interested too!

--
Ticket URL: <http://example.com/trac/ticket/42>
My Project <http://myproj.example.com/>
}}}
----
See also: TracTickets, TracIni, TracGuide",,
614,3,1138205672,trac,127.0.0.1,"= Unicode Support in Trac =
Trac stores all text using UTF-8 encoding, including text in tickets and wiki pages. 

As such, it supports most (all?) commonly used character encodings.


== Examples ==
Please keep sorted order when you add an entry.

=== Arabic ===
تراك يقوم بحفظ كل الكلمات باستخدام صيغة UTF-8، بما في ذلك الكلمات المستخدمة في صفحات  التيكت والويكي.

=== Bulgarian ===
Българският език работи ли?

=== Česky ===
Čeština v kódování UTF-8, žádný problém.

=== Chinese ===
Traditional: ''繁體中文, 許功蓋會育''; Simplified: ''简体中文，许功盖会育''

=== English ===
Yes indeed, Trac supports English. Fully.

=== Français ===
''Il est possible d'écrire en Français : à, ç, û, ...''

=== German ===
Trac-Wiki muß auch deutsche Umlaute richtig anzeigen: ö, ä, ü, ...

=== Greek ===
Τα Ελληνικά υποστηρίζονται επαρκώς επίσης.

=== Hebrew ===
אני יכול לאכול זכוכית וזה לא מזיק לי

=== Icelandic ===
''Ævar sagði við ömmu sína: Sjáðu hvað ég er stór!''

=== Japanese ===
''漢字 ひらがな カタカナ ﾊﾝｶｸｶﾅ''

=== Korean ===
''이번에는 한글로 써보겠습니다. 잘 보이나요?''

=== Persian (Farsi) ===
این یک متن فارسی است ولی از چپ به راست

=== Polish ===
Pchnąć w tę łódź jeża lub ośm skrzyń fig

=== Portuguese ===
É possível guardar caracteres especias da língua portuguesa, incluindo o símbolo da moeda européia '€', trema 'ü', crase 'à', agudos 'áéíóú', circunflexos 'âêô', til 'ãõ', cedilha 'ç', ordinais 'ªº', grau '°¹²³'.

=== Russian ===
Проверка русского языка: кажется работает...

=== Serbian ===
Podržan, uprkos činjenici da se za njegovo pisanje koriste чак два алфабета.

=== Slovenian ===
Ta suhi škafec pušča vodo že od nekdaj!

=== Spanish ===
Esto es un pequeño texto en Español, ahora una con acentó

=== Swedish ===
''Räven raskar över isen med luva på.''

=== Thai ===
Trac แสดงภาษาไทยได้อย่างถูกต้อง!

=== Ukrainian ===
Перевірка української мови...",,
615,3,1138205672,trac,127.0.0.1,,,
616,3,1138205672,trac,127.0.0.1,,,
617,3,1138205672,trac,127.0.0.1,"= Trac Storage - The Environment =

Trac uses a directory structure and a database for storing project data.

== Creating an Environment ==

A new Trac environment is created using [wiki:TracAdmin trac-admin]:
{{{
$ trac-admin /path/to/projectenv initenv
}}}

[wiki:TracAdmin trac-admin] will ask you for the name of the project, the
database connection string (explained below), and where your subversion
repository is located.

  ''Note: The web server user will require file system write permission to
the environment directory and all the files inside. Please remember to set
the appropriate permissions. The same applies to the Subversion
repository, although Trac will only require read access as long as you're
not using the BDB file system.''

== Database Connection Strings ==

Since version 0.9, Trac supports both [http://sqlite.org/ SQLite] and
[http://www.postgresql.org/ PostgreSQL] as database backends.  The default
is to use SQLite, which is probably sufficient for most projects. The database file
is then stored in the environment directory, and can easily be
[wiki:TracBackup backed up] together with the rest of the environment.

The connection string for an embedded SQLite database is:
{{{
sqlite:db/trac.db
}}}

If you want to use PostgreSQL instead, you'll have to use a different
connection string. For example, to connect to a database on the same
machine called `trac`, that allows access to the user `johndoe` with
the password `letmein`, use:
{{{
postgres://johndoe:letmein@localhost/trac
}}}

If PostgreSQL is running on a non-standard port (for example 9342), use:
{{{
postgres://johndoe:letmein@localhost:9342/trac
}}}

Note that with PostgreSQL you will have to create the database before running
`trac-admin initenv`.

== Directory Structure ==

An environment directory will usually consist of the following files and directories:

 * `README` - Brief description of the environment.
 * `VERSION` - Contains the environment version identifier.
 * `attachments` - Attachments to wiki pages and tickets are stored here.
 * `conf`
   * `trac.ini` - Main configuration file. See TracIni.
 * `db`
   * `trac.db` - The SQLite database (if you're using SQLite).
 * `plugins` - Environment-specific [wiki:TracPlugins plugins] (Python eggs)
 * `templates` - Custom environment-specific templates.
   * `site_css.cs` - Custom CSS rules.
   * `site_footer.cs` - Custom page footer.
   * `site_header.cs` - Custom page header.
 * `wiki-macros` - Environment-specific [wiki:WikiMacros Wiki macros].

----
See also: TracAdmin, TracBackup, TracIni, TracGuide
",,
618,3,1138205672,trac,127.0.0.1,"=  Wiki Macros =
Trac macros are plugins to extend the Trac engine with custom 'functions' written in Python. A macro inserts dynamic HTML data in any context supporting WikiFormatting.

Another kind of macros are WikiProcessors. They typically deal with alternate markup formats and representation of larger blocks of information (like source code highlighting).

== Using Macros ==
Macro calls are enclosed in two ''square brackets''. Like python functions, macros can also have arguments, a comma separated list within parentheses. 

=== Examples ===

{{{
 [[Timestamp]]
}}}
Display:
 [[Timestamp]]

{{{
 [[HelloWorld(Testing)]]
}}}
Display:
 [[HelloWorld(Testing)]]

== Available Macros ==

''Note that the following list will only contain the macro documentation if you've not enabled `-OO` optimizations, or not set the `PythonOptimize` option for [wiki:TracModPython mod_python].''

[[MacroList]]

== Macros from around the world ==
The [http://projects.edgewall.com/trac/ Trac Project] has a section dedicated to user-contributed macros, [http://projects.edgewall.com/trac/wiki/MacroBazaar MacroBazaar]. If you're looking for new macros, or have written new ones to share with the world, don't hesitate adding it to the [http://projects.edgewall.com/trac/wiki/MacroBazaar MacroBazaar] wiki page.

----

== Developing Custom Macros ==
Macros, like Trac itself, are written in the [http://www.python.org/ Python programming language]. They are very simple modules, identified by the filename and should contain a single ''entry point'' function. Trac will display the returned data inserted into the HTML where the macro was called.

It's easiest to learn from an example:
{{{
#!python
# MyMacro.py -- The world's simplest macro

def execute(hdf, args, env):
    return 'Hello World called with args: %s' % args
}}}

You can also use the environment (`env`) object, for example to access configuration data and the database, for example:
{{{
#!python
def execute(hdf, txt, env):
    return env.get_config('trac', 'repository_dir')
}}}

Note that since version 0.9, wiki macros can also be written as TracPlugins. This gives them some capabilities than “classic” macros do not have, such as directly access the HTTP request.

For more information about developing macros, see the [http://projects.edgewall.com/trac/wiki/TracDev development resources] on the main project site.

----
See also:  WikiProcessors, WikiFormatting, TracGuide",,
619,3,1138205672,trac,127.0.0.1,"= Wiki Processors =
Processors are WikiMacros designed to provide alternative markup formats for the Trac Wiki engine. Processors can be thought of as ''macro functions to process user-edited text''. 

The wiki engine uses processors to allow using [wiki:WikiRestructuredText Restructured Text] and [wiki:WikiHtml raw HTML] in any wiki text throughout Trac.

== Using Processors ==
To use a processor on a block of text, use a wiki blockquote, selecting a processor by name using ''shebang notation'' (#!), familiar to most UNIX users from scripts.

'''Example 1''' (''inserting raw HTML in a wiki text''):

{{{
#!html
<pre class='wiki'>{{{
#!html
&lt;h1 style='color: orange'&gt;This is raw HTML&lt;/h1&gt;
}}}</pre>
}}}

'''Results in:'''
{{{
#!html
<h1 style='color: orange'>This is raw HTML</h1>
}}}

----

'''Example 2''' (''inserting Restructured Text in wiki text''):

{{{
#!html
<pre class='wiki'>{{{
#!rst
A header
--------
This is some **text** with a footnote [*]_.

.. [*] This is the footnote.
}}}</pre>
}}}

'''Results in:'''
{{{
#!rst
A header
--------
This is some **text** with a footnote [*]_.

.. [*] This is the footnote.
}}}
----
'''Example 3''' (''inserting a block of C source code in wiki text''):

{{{
#!html
<pre class='wiki'>{{{
#!c
int main(int argc, char *argv[])
{
  printf('Hello World\n');
  return 0;
}
}}}</pre>
}}}

'''Results in:'''
{{{
#!c
int main(int argc, char *argv[])
{
  printf('Hello World\n');
  return 0;
}
}}}

----

== Available Processors ==
The following processors are included in the Trac distribution:
 * '''html''' -- Insert custom HTML in a wiki page. See WikiHtml.
 * '''rst''' -- Trac support for Restructured Text. See WikiRestructuredText.
 * '''textile''' -- Supported if  [http://dealmeida.net/projects/textile/ Textile] is installed.

=== Code Highlighting Support ===
Trac includes processors to provide inline [wiki:TracSyntaxColoring syntax highlighting] for the following languages:
 * '''c''' -- C
 * '''cpp''' -- C++
 * '''python''' -- Python
 * '''perl''' -- Perl
 * '''ruby''' -- Ruby
 * '''php''' -- PHP
 * '''asp''' --- ASP
 * '''sql''' -- SQL
 * '''xml''' -- XML
'''Note:''' ''Trac relies on external software packages for syntax coloring. See TracSyntaxColoring for more info.''

By using the MIME type as processor, it is possible to syntax-highlight the same languages that are supported when browsing source code. For example, you can write:
{{{
{{{
#!text/html
<h1>text</h1>
}}}
}}}

The result will be syntax highlighted HTML code. The same is valid for all other mime types supported.


For more processor macros developed and/or contributed by users, visit: 
 * [http://projects.edgewall.com/trac/wiki/ProcessorBazaar ProcessorBazaar]
 * [http://projects.edgewall.com/trac/wiki/MacroBazaar MacroBazaar]


== Advanced Topics: Developing Processor Macros ==
Developing processors is no different than WikiMacros. In fact they work the same way, only the usage syntax differs. See WikiMacros for more information.

'''Example:''' (''Restructured Text Processor''):
{{{
from docutils.core import publish_string

def execute(hdf, text, env):
    html = publish_string(text, writer_name = 'html')
    return html[html.find('<body>')+6:html.find('</body>')].strip()
}}}

----
See also: WikiMacros, WikiHtml, WikiRestructuredText, TracSyntaxColoring, WikiFormatting, TracGuide",,
620,3,1138205672,trac,127.0.0.1,"= Trac Ticket Queries =
[[TracGuideToc]]

In addition to [wiki:TracReports reports], Trac provides support for ''custom ticket queries'', used to display lists of tickets meeting a specified set of criteria. 

To configure and execute a custom query, switch to the ''View Tickets'' module from the navigation bar, and select the ''Custom Query'' link.

== Filters ==
When you first go to the query page the default filters will display all open tickets, or if you're logged in it will display open tickets assigned to you.  Current filters can be removed by clicking the button to the right with the minus sign on the label.  New filters are added from the pulldown list in the bottom-right corner of the filters box.  Filters with either a text box or a pulldown menu of options can be added multiple times to perform an ''or'' of the criteria.

You can use the fields just below the filters box to group the results based on a field, or display the full description for each ticket.

Once you've edited your filters click the ''Update'' button to refresh your results.

== Navigating Tickets ==
Clicking on one of the query results will take you to that ticket.  You can navigate through the results by clicking the ''Next Ticket'' or ''Previous Ticket'' links just below the main menu bar, or click the ''Back to Query'' link to return to the query page.  

You can safely edit any of the tickets and continue to navigate through the results using the ''Next/Previous/Back to Query'' links after saving your results.  When you return to the query any tickets you edited will be displayed with italicized text.  If one of the tickets was edited such that it no longer matches the query criteria the text will also be greyed.  The query results can be refreshed and cleared of these status indicators by clicking the ''Update'' button again.

== Saving Queries ==

While Trac does not yet allow saving a named query and somehow making it available in a navigable list, you can save references to queries in Wiki content, as described below.

=== Using TracLinks ===

You may want to save some queries so that you can come back to them later.  You can do this by making a link to the query from any Wiki page.
{{{
[query:status=new|assigned|reopened&version=0.8 Active tickets against 0.8]
}}}

Which is displayed as:
  [query:status=new|assigned|reopened&version=0.8 Active tickets against 0.8]

This uses a very simple query language to specify the criteria (see [wiki:TracQuery#QueryLanguage Query Language]).

Alternatively, you can copy the query string of a query and paste that into the Wiki link, including the leading `?` character:
{{{
[query:?status=new&status=assigned&status=reopened&group=owner Assigned tickets by owner]
}}}

Whis is displayed as:
  [query:?status=new&status=assigned&status=reopened&group=owner Assigned tickets by owner]

The advantage of this approach is that you can also specify the grouping and ordering, which is not possible using the first syntax.

=== Using the `[[TicketQuery]]` Macro ===

The `[[TicketQuery]]` macro lets you display lists of tickets matching certain criteria anywhere you can use WikiFormatting.

Example:
{{{
[[TicketQuery(version=0.9b1|0.9b2&resolution=duplicate)]]
}}}

This is displayed as:
  [[TicketQuery(version=0.9b1|0.9b2&resolution=duplicate)]]

Just like the [wiki:TracQuery#UsingTracLinks query: wiki links], the parameter of this macro expects a query string formatted according to the rules of the simple [wiki:TracQuery#QueryLanguage ticket query language].

A more compact representation without the ticket summaries is also available:
{{{
[[TicketQuery(version=0.9b1|0.9b2&resolution=duplicate, compact)]]
}}}

This is displayed as:
  [[TicketQuery(version=0.9b1|0.9b2&resolution=duplicate, compact)]]

=== Query Language ===

`query:` TracLinks and the `[[TicketQuery]]` macro both use a mini “query language” for specifying query filters. Basically, the filters are separate by ampersands (`&`). Each filter then consists of the ticket field name, an operator, and one or more values. More than one value are separated by a pipe (`|`), meaning that the filter matches any of the values.

The available operators are:
|| '''=''' || the field content exactly matches the one of the values ||
|| '''~=''' || the field content contains one or more of the values ||
|| '''!^=''' || the field content starts with one of the values ||
|| '''$=''' || the field content ends with one of the values ||

All of these operators can also be negated:
|| '''!=''' || the field content matches none of the values ||
|| '''!~=''' || the field content does not contain any of the values ||
|| '''!!^=''' || the field content does not start with any of the values ||
|| '''!$=''' || the field content does not end with any of the values ||

----
See also: TracTickets, TracReports, TracGuide",,
621,18,1138205673,trac,127.0.0.1,"= The Sandbox =

This is just a page to practice and learn WikiFormatting. 

Go ahead, edit it freely.",,
622,3,1138205673,trac,127.0.0.1,"= Trac Links =
As you might have guessed, TracLinks are a very fundamental feature of Trac.

They allow hyperlinking between Trac entities (tickets, reports, changesets, Wiki
pages, milestones and source files) from anywhere WikiFormatting is used.

TracLinks are generally of the form '''type:id''' (where ''id'' represents the
number, name or path of the item) though some frequently used kinds of items
also have short-hand notations.

Some examples:
 * Tickets: '''!#1''' or '''!ticket:1'''
 * Reports: '''!{1}''' or '''!report:1'''
 * Changesets: '''!r1''', '''![1]''' or '''!changeset:1'''
 * Revision log: '''!r1:3''', '''![1:3]''' or '''!log:#1:3'''
 * Wiki pages: '''CamelCase''' or '''!wiki:CamelCase'''
 * Milestones: '''!milestone:1.0'''
 * Attachment: '''!attachment:ticket:944:attachment.1073.diff'''
 * Files: '''!source:trunk/COPYING'''
 * A specific file revision: '''!source:/trunk/COPYING#200'''
Display:
 * Tickets: #1 or ticket:1
 * Reports: {1} or report:1
 * Changesets: r1, [1] or changeset:1
 * Differences: r1:3, [1:3] or log:#1:3
 * Wiki pages: CamelCase or wiki:CamelCase
 * Milestones: milestone:1.0
 * Files: source:trunk/COPYING
 * Attachment: attachment:ticket:944:attachment.1073.diff
 * A specific file revision: source:/trunk/COPYING#200

'''Note:''' The wiki:CamelCase form is rarely used, but it can be convenient to refer to
pages whose names do not follow WikiPageNames rules, i.e., single words,
non-alphabetic characters, etc.

Trac links using the full (non-shorthand) notation can also be given a custom
link title like this:

{{{
[ticket:1 This is a link to ticket number one].
}}}

Display: [ticket:1 This is a link to ticket number one].

If the title is be omitted, only the id (the part after the colon) is displayed:

{{{
[ticket:1]
}}}

Display: [ticket:1]

It might seem a simple enough concept at a glance, but actually allows quite a complex network of information. In practice, it's very intuitive and simple to use, and we've found the 'link trail' extremely helpful to better understand what's happening in a project or why a particular change was made.

== attachement: links ==

The link syntax for attachments is as follows:
 * !attachment:the_file.txt creates a link to the attachment the_file.txt of the current object
 * !attachment:wiki:MyPage:the_file.txt creates a link to the attachment the_file.txt of the !MyPage wiki page
 * !attachment:ticket:753:the_file.txt creates a link to the attachment the_file.txt of the ticket 753 !attachment:wiki:MyPage:the_file.txt

== source: links ==

The default behavior for a source:/some/path link is to open the directory browser 
if the path points to a directory and otherwise open the log view. 
It's also possible to link directly to a specific revision of a file like this: source:/some/file@123 
or like this to link to the latest revision: source:/some/file@latest.
If the revision is specified, one can even link to a specific line number: !source:/some/file@123#L10 
[[comment(TODO: remove the ! when Edgewall Trac is upgraded with the support for the line syntax)]]

== Quoting space in TracLinks ==

The usual syntax for quoting space is:

 * !attachment:'the file.txt' or
 * !attachment:'the file.txt' 

== Where to use TracLinks ==
You can use TracLinks in:

 * Source code (Subversion) commit messages
 * Wiki pages
 * Full descriptions for tickets, reports and milestones

and any other text fields explicitly marked as supporting WikiFormatting.

== Escaping Links ==

To prevent parsing of a !TracLink, you can escape it by preceding it with a '!' (exclamation mark).
{{{
 !NoLinkHere.
 ![42] is not a link either.
}}}

Display:
 !NoLinkHere.
 ![42] is not a link either.

----
See also: WikiFormatting, TracWiki
 ",,
623,2,1138205673,trac,127.0.0.1,"= The Trac Roadmap =
[[TracGuideToc]]

The roadmap provides a view on the [wiki:TracTickets ticket system] that helps planning and managing the future development of a project.

== The Roadmap View ==

Basically, the roadmap is just a list of future milestones. You can add a description to milestones (using WikiFormatting) describing main objectives, for example. In addition, tickets targeted for a milestone are aggregated, and the ratio between active and resolved tickets is displayed as a milestone progress bar.

== The Milestone View ==

It is possible to drill down into this simple statistic by viewing the individual milestone pages. By default, the active/resolved ratio will be grouped and displayed by component. You can also regroup the status by other criteria, such as ticket owner or severity. Ticket numbers are linked to [wiki:TracQuery custom queries] listing corresponding tickets.

== Roadmap Administration ==

It is possible to add, modify and remove milestones using either TracAdmin or the web interface. 

'''Note:''' Milestone descriptions can currently only be edited from the web interface. With appropriate permissions, you'll see buttons for milestone management on the roadmap and milestone pages.

== iCalendar Support ==

The Roadmap supports the [http://www.ietf.org/rfc/rfc2445.txt iCalendar] format to keep track of planned milestones and related tickets from your favorite calendar software. Calendar applications supporting the iCalendar specification include [http://www.apple.com/ical/ Apple iCal] for Mac OS X and the cross-platform [http://www.mozilla.org/projects/calendar/ Mozilla Calendar]. [http://kdepim.kde.org/components/korganizer.php Korganiser] (the calendar application of the [http://www.kde.org/ KDE] project) and [http://www.novell.com/de-de/products/desktop/features/evolution.html Evolution] also support iCalendar.

To subscribe to the roadmap, copy the iCalendar link from the roadmap (found at the bottom of the page) and choose the 'Subscribe to remote calendar' action (or similar) of your calendar application, and insert the URL just copied.

'''Note:''' For tickets to be included in the calendar as tasks, you need to be logged in when copying the link. You will only see tickets assigned to yourself, and associated with a milestone.

More information about iCalendar can be found at [http://en.wikipedia.org/wiki/ICalendar Wikipedia].
----
See also: TracTickets, TracReports, TracQuery, TracGuide",,
624,3,1138205673,trac,127.0.0.1,"= Tracd =

Tracd is a lightweight standalone Trac web server. In most cases it's easier to setup and runs faster than the [wiki:TracCgi CGI script].

== Pros ==

 * Fewer dependencies: You don't need to install apache or any other web-server.
 * Fast: Should be as fast as the [wiki:TracModPython mod_python] version (and much faster than the [wiki:TracCgi CGI]).

== Cons ==

 * Less features: Tracd implements a very simple web-server and is not as configurable as Apache HTTPD.
 * No native HTTPS support: [http://www.rickk.com/sslwrap/ sslwrap] can be used instead,
   or [http://lists.edgewall.com/archive/trac/2005-August/004381.html STUNNEL].

== Usage examples ==

A single project on port 8080. (http://localhost:8080/)
{{{
 $ tracd -p 8080 /path/to/project
}}}
With more than one project. (http://localhost:8080/project1/ and http://localhost:8080/project2/)
{{{
 $ tracd -p 8080 /path/to/project1 /path/to/project2
}}}

You can't have the last portion of the path identical between the projects since that's how trac keeps the URLs of the
different projects unique. So if you use /project1/path/to and /project2/path/to, you will only see the second project.

== Using Authentication ==

Tracd provides support for both Basic and Digest authentication. The default is to use Digest; to use Basic authentication, replace `--auth` with `--basic-auth` in the examples below, and omit the realm.

If the file `/path/to/users.htdigest` contain user accounts for project1 with the realm 'mycompany.com', you'd use the following command-line to start tracd:
{{{
 $ tracd -p 8080 --auth project1,/path/to/users.htdigest,mycompany.com /path/to/project1
}}}
''Note that the project “name” passed to the `--auth` option is actually the base name of the project environment directory.''

Of course, the digest file can be be shared so that it is used for more than one project:
{{{
 $ tracd -p 8080 \
   --auth project1,/path/to/users.htdigest,mycompany.com \
   --auth project2,/path/to/users.htdigest,mycompany.com \
   /path/to/project1 /path/to/project2
}}}

== Generating Passwords Without Apache ==

If you don't have Apache available, you can use this simple Python script to generate your passwords:

{{{
from optparse import OptionParser
import md5

# build the options
usage = 'usage: %prog [options]'
parser = OptionParser(usage=usage)
parser.add_option('-u', '--username',action='store', dest='username', type = 'string',
                  help='the username for whom to generate a password')
parser.add_option('-p', '--password',action='store', dest='password', type = 'string',
                  help='the password to use')
(options, args) = parser.parse_args()

# check options
if (options.username is None) or (options.password is None):
   parser.error('You must supply both the username and password')
   
# Generate the string to enter into the htdigest file
realm = 'trac'
kd = lambda x: md5.md5(':'.join(x)).hexdigest()
print ':'.join((options.username, realm, kd([options.username, realm, options.password])))
}}}

----
See also: TracInstall, TracCgi, TracModPython, TracGuide
",,
625,3,1138205673,trac,127.0.0.1,"= Upgrade Instructions =
[[TracGuideToc]]

A Trac environment sometimes needs to be upgraded before it can be used with a new version of Trac. This document describes the steps necessary to upgrade an environment.

 '''Note''': ''Environment upgrades are not necessary for minor version releases unless otherwise noted. For example, there's no need to upgrade a Trac environment created with (or upgraded) 0.8.0 when installing 0.8.4 (or any other 0.8.x release).''

== General Instructions ==

Typically, there are four steps involved in upgrading to a newer version of Trac:

=== Update the Trac Code ===

Get the new version of Trac, either by downloading an offical release package or by checking it out from the [http://projects.edgewall.com/trac/wiki/SubversionRepository Subversion repository].

If you have a source distribution, you need to run
{{{
python setup.py install
}}}

to install the new version. If you've downloaded the Windows installer, you execute it, and so on.

In any case, if you're doing a major version upgrade (such as from 0.8 to 0.9), it is ''highly'' recommended that you first remove the existing Trac code. To do this, you need to delete the `trac` directory from the Python `lib/site-packages` directory. You may also want to remove the Trac `cgi-bin`, `htdocs` and `templates` directories that are commonly found in a directory called `share/trac` (the exact location depends on your platform).

=== Upgrade the Trac Environment ===

Unless noted otherwise, upgrading between major versions (such as 0.8 and 0.9) involves changes to the database schema, and possibly the layout of the [wiki:TracEnvironment environment directory]. Fortunately, Trac provides automated upgrade scripts to ease the pain. These scripts are run via [wiki:TracAdmin trac-admin]:
{{{
trac-admin /path/to/projenv upgrade
}}}

This command will do nothing if the environment is already up-to-date.

Note that if you are using a PostgreSQL database, this command will fail with the message that the environment can only be backed up when you use an SQLite database. This means that you will have to backup the repository and the database manually. Then, to perform the actual upgrade, run:
{{{
trac-admin /path/to/projenv upgrade --no-backup
}}}

=== Update the Trac Documentation ===

Every [wiki:TracEnvironment Trac environment] includes a copy of the Trac documentation for the installed version. As you probably want to keep the included documentation in sync with the installed version of Trac, [wiki:TracAdmin trac-admin] provides a command to upgrade the documentation:
{{{
trac-admin /path/to/projenv wiki upgrade
}}}

Note that this procedure will of course leave your `WikiStart` page intact.

=== Restart the Web Server ===

In order to reload the new Trac code you will need to restart your web server (note this is not necessary for [wiki:TracCgi CGI]).

== Specific Versions ==

The following sections discuss any extra actions that may need to be taken to upgrade to specific versions of Trac.

== From 0.9-beta to 0.9 ==

If inclusion of the static resources (style sheets, javascript, images) is not working, check the value of the `htdocs_location` in trac.ini. For [wiki:TracModPython mod_python], [wiki:TracStandalone Tracd] and [wiki:TracFastCgi FastCGI], you can simply remove the option altogether. For [wiki:TracCgi CGI], you should fix it to point to the URL you mapped the Trac `htdocs` directory to (although you can also remove it and then [wiki:TracCgi#MappingStaticResources map the static resources]). If you're still having problems after removing the option, check the paths in the `trac/siteconfig.py` file and fix them if they're incorrect.

If you've been using plugins with a beta release of Trac 0.9, or have disabled some of the built-in components, you might have to update the rules for disabling/enabling components in [wiki:TracIni trac.ini]. In particular, globally installed plugins now need to be enabled explicitly. See TracPlugins and TracIni for more information.

If you want to enable the display of all ticket changes in the timeline (the “Ticket Details” option), you now have to explicitly enable that in [wiki:TracIni trac.ini], too:

{{{
[timeline]
ticket_show_details = true
}}}

== From 0.8.x to 0.9 ==

[wiki:TracModPython mod_python] users will also need to change the name of the mod_python handler in the Apache HTTPD configuration:
{{{
   from: PythonHandler trac.ModPythonHandler
   to:   PythonHandler trac.web.modpython_frontend
}}}

If you have [http://initd.org/tracker/pysqlite PySQLite] 2.x installed, Trac will now try to open your SQLite database using the SQLite 3.x file format. The database formats used by SQLite 2.8.x and SQLite 3.x are incompatible. If you get an error like ''“file is encrypted or is not a database”'' after upgrading, then you must convert your database file.

To do this, you need to have both SQLite 2.8.x and SQLite 3.x installed (they have different filenames so can coexist on the same system). Then use the following commands:
{{{
 $ mv trac.db trac2.db
 $ sqlite trac2.db .dump | sqlite3 trac.db
}}}

After testing that the conversion was successful, the `trac2.db` file can be deleted. For more information on the SQLite upgrade see http://www.sqlite.org/version3.html.

== From 0.7.x to 0.8 ==

0.8 adds a new roadmap feature which requires additional permissions. While a
fresh installation will by default grant ROADMAP_VIEW and MILESTONE_VIEW
permissions to anonymous, these permissions have to be granted manually when
upgrading:
{{{
 $ trac-admin /path/to/projectenv permission add anonymous MILESTONE_VIEW
 $ trac-admin /path/to/projectenv permission add anonymous ROADMAP_VIEW
}}}

-----
See also: TracGuide, TracInstall
",,
626,3,1138205673,trac,127.0.0.1,,,
627,2,1138205673,trac,127.0.0.1,"= Deleting a Wiki Page =

Existing wiki pages can be completely deleted using the ''Delete Page'' or the ''Delete this Version'' buttons at the bottom of the wiki page. These buttons are only visible for users with `WIKI_DELETE` permissions.

'''Note:''' This is an irreversible operation.

In general, it is recommended to create redirection pages instead of completely deleting an old page, as to not frustrate the visitor with broken links when coming to the site from a search engine. A redirection page is a short page that  contains a link such as  “See !SomeOtherPage”. However, deleting specific versions or even complete pages can make sense to remove spam or other abuse.

----
See also: TracWiki, TracPermissions
",,
628,3,1138205673,trac,127.0.0.1,"= The Trac Wiki Engine =
[[TracGuideToc]]

Trac has a built-in wiki engine, used for text and documentation throughout the system. WikiFormatting is used in [wiki:TitleIndex wiki pages], [wiki:TracTickets tickets] and [wiki:TracChangeset check-in log messages].  This allows for formatted text and hyperlinks in and between all Trac modules.

Editing wiki text is easy, using any web browser and a simple formatting system (see WikiFormatting), rather than more complex markup languages like HTML.  The reasoning behind its design is that HTML, with its large collection of nestable tags, is too complicated to allow fast-paced editing, and distracts from the actual content of the pages. Note though that Trac also supports [wiki:WikiHtml HTML] and [wiki:WikiRestructuredText reStructuredText] as alternative markup formats.

The main goal of the wiki is making editing text easier and ''encourage'' people to contribute and annotate text content for a project. 

The wiki itself does not enforce any structure, but rather resembles a stack of empty paper sheets, where you can organize information and documentation as you see fit, and later reorganize if necessary. 

For more help on editing wiki text, see:
 * WikiFormatting
 * WikiPageNames
 * WikiNewPage
 * TracLinks
 * WikiMacros
 * WikiProcessors

If you want to practice editing, please use the SandBox.

Some more information about wiki on the web:
 * http://wikipedia.org/wiki/Wiki
 * http://c2.com/cgi/wiki?WikiHistory
 * http://www.usemod.com/cgi-bin/mb.pl?WhyWikiWorks
",,
629,2,1138205673,trac,127.0.0.1,"= Installing Trac as CGI =

To install Trac as a CGI script, you need to make the `trac.cgi` executable as a CGI by your web server. If you're using [http://httpd.apache.org/ Apache HTTPD], there are a couple ways to do that:

 1. Use a `ScriptAlias` to map a URL to the `trac.cgi` script
 2. Copy the `trac.cgi` file into the directory for CGI executables used by your web server (commonly named `cgi-bin`). You can also create a symbolic link, but in that case make sure that the `FollowSymLinks` option is enabled for the `cgi-bin` directory.

The first option is recommended as it also allows you to map the CGI to a friendly URL.

Now, edit the Apache configuration file and add this snippet, file names and locations changed to match your installation:
{{{
ScriptAlias /trac /usr/share/trac/cgi-bin/trac.cgi

# Trac needs to know where the database is located
<Location '/trac'>
  SetEnv TRAC_ENV '/path/to/projectenv'
</Location>
}}}

This will make Trac available at `http://yourhost.example.org/trac`.

 ''Note: Make sure that the modules mod_alias and mod_env modules are available and enabled in your Apache configuration, otherwise Apache will complain about the above snippet.''

 ''Note: If you are using the [http://httpd.apache.org/docs/suexec.html Apache suEXEC] feature see [http://projects.edgewall.com/trac/wiki/ApacheSuexec ApacheSuexec] (on the main Trac site).''

== Mapping Static Resources ==

Out of the box, Trac will serve static resources such as style sheets or images itself. For a CGI setup, though, this is highly undesirable, because it results in the CGI script being invoked for documents that could be more efficiently served by the web server.

Web servers such as [http://httpd.apache.org/ Apache HTTPD] allow you to create “Aliases” to resources, thereby giving them a virtual URL that doesn't necessarily bear any resemblance to the layout of the servers file system. We already used this capability above when defining a `ScriptAlias` for the CGI script, and we'll use it now to map requests to the static resources to the directory on the file system that contains them, thereby bypassing the processing of such requests by the CGI script.

Edit the Apache configuration file again and add the following snippet '''before''' the `ScriptAlias` for the CGI script , file names and locations changed to match your installation:
{{{
Alias /trac/chrome/common /usr/share/trac/htdocs
<Directory '/usr/share/trac/htdocs'>
  Order allow,deny
  Allow from all
</Directory>
}}}

Note that whatever URL path you mapped the `trac.cgi` script to, the path `/chrome/common` is the path you have to append to that location to intercept requests to the static resources. 

For example, if Trac is mapped to `/cgi-bin/trac.cgi` on your server, the URL of the Alias should be `/cgi-bin/trac.cgi/chrome/common`.

Alternatively, you can set the `htdocs_location` configuration option in [wiki:TracIni trac.ini]:
{{{
[trac]
htdocs_location = /trac-htdocs
}}}

Trac will then use this URL when embedding static resources into HTML pages. Of course, you still need to make the Trac `htdocs` directory available through the web server at the specified URL, for example by copying (or linking) the directory into the document root of the web server.

== Adding Authentication ==

The simplest way to enable authentication with Apache is to create a password file. Use the `htpasswd` program to create the password file:
{{{
$ htpasswd -c /somewhere/trac.htpasswd admin
New password: <type password>
Re-type new password: <type password again>
Adding password for user admin
}}}

After the first user, you dont need the '-c' option anymore:
{{{
$ htpasswd /somewhere/trac.htpasswd john
New password: <type password>
Re-type new password: <type password again>
Adding password for user john
}}}

  ''See the man page for `htpasswd` for full documentation.''

After you've created the users, you can set their permissions using TracPermissions.

Now, you'll need to enable authentication against the password file in the Apache configuration:
{{{
<Location '/cgi-bin/trac.cgi/login'>
  AuthType Basic
  AuthName 'Trac'
  AuthUserFile /somewhere/trac.htpasswd
  Require valid-user
</Location>
}}}

For better security, it is recommended that you either enable SSL or at least use the “Digest” authentication scheme instead of “Basic”. Please read the [http://httpd.apache.org/docs/2.0/ Apache HTTPD documentation] to find out more.

----
See also:  TracGuide, TracInstall, TracFastCgi, TracModPython",,
630,2,1138205673,trac,127.0.0.1,"= Trac with FastCGI =

Since version 0.9, Trac supports being run through the [http://www.fastcgi.com/ FastCGI] interface. Like [wiki:TracModPython mod_python], this allows Trac to remain resident, and is faster than external CGI interfaces which must start a new process for each request. However, unlike mod_python, it is able to support [http://httpd.apache.org/docs/suexec.html SuEXEC]. Additionally, it is supported by much wider variety of web servers.

== Simple Apache configuration ==
{{{
# Enable fastcgi for .fcgi files
# (If you're using a distro package for mod_fcgi, something like
# this is probably already present)
<IfModule mod_fastcgi.c>
   AddHandler fastcgi-script .fcgi
   FastCgiIpcDir /var/lib/apache2/fastcgi 
</IfModule>
LoadModule fastcgi_module /usr/lib/apache2/modules/mod_fastcgi.so
}}}

You can either setup the `TRAC_ENV` as an overall default:
{{{
FastCgiConfig -initial-env TRAC_ENV=/path/to/env/trac
}}}

Or you can serve multiple Trac projects in a directory like:
{{{
FastCgiConfig -initial-env TRAC_ENV_PARENT_DIR=/parent/dir/of/projects
}}}

Configure `ScriptAlias` or similar options as described in TracCgi, but calling `trac.fcgi` instead of `trac.cgi`.

== Simple Lighttpd Configuration ==

The FastCGI front-end was developed primarily for use with alternative webservers, such as [http://www.lighttpd.net/ lighttpd].

lighttpd is a secure, fast, compliant and very flexible web-server that has been optimized for high-performance
environments.  It has a very low memory footprint compared to other web servers and takes care of CPU load.

For using `trac.fcgi` with lighttpd add the following to your lighttpd.conf:
{{{
fastcgi.server = ('/trac' =>
                   ('trac' =>
                     ('socket' => '/tmp/trac-fastcgi.sock',
                      'bin-path' => '/path/to/cgi-bin/trac.fcgi',
                      'check-local' => 'disable',
                      'bin-environment' =>
                        ('TRAC_ENV' => '/path/to/projenv')
                     )
                   )
                 )
}}}

Note that you will need to add a new entry to `fastcgi.server` for each separate Trac instance that you wish to run. Alternatively, you may use the `TRAC_ENV_PARENT_DIR` variable instead of `TRAC_ENV` as described  above.

Other important information like [http://trac.lighttpd.net/trac/wiki/TracInstall this updated TracInstall page], [wiki:TracCgi#MappingStaticResources and this] are useful for non-fastcgi specific installation aspects.

Relaunch lighttpd, and browse to `http://yourhost.example.org/trac` to access Trac.

----
See also TracCgi, TracModPython, TracInstall, TracGuide",,
631,1,1138205673,trac,127.0.0.1,"= Customizing the Trac Interface =
[[TracGuideToc]]

== Introduction ==
This page is meant to give users suggestions on how they can customize the look of Trac.  Topics on this page cover editing the HTML templates and CSS files, but not the program code itself.  The topics are intended to show users how they can modify the look of Trac to meet their specific needs.  Suggestions for changes to Trac's interface applicable to all users should be filed as tickets, not listed on this page.

== Project Logo and Icon ==
The easiest parts of the Trac interface to customize are the logo and the site icon.  Both of these can be configured with settings in [wiki:TracIni trac.ini].

The logo or icon image should be put in a folder named 'htdocs' in your project's environment folder.  (''Note: in projects created with a Trac version prior to 0.9 you will need to create this folder'')

Now configure the appropriate section of your [wiki:TracIni trac.ini]:

=== Logo ===
Change the `src` setting to `site/` followed by the name of your image file.  The `width` and `height` settings should be modified to match your image's dimensions.

{{{
[header_logo]
src = site/my_logo.gif
alt = My Project
width = 300
height = 100
}}}

=== Icon ===
Icons should be a 16x16 image in `.gif` or `.ico` format.  Change the `icon` setting to `site/` followed by the name of your icon file.  Icons will typically be displayed by your web browser next to the site's URL and in the `Bookmarks` menu.

{{{
[project]
icon = site/my_icon.ico
}}}

Note though that this icon is ignored by Internet Explorer, which only accepts a file named ``favicon.ico`` at the root of the host. To make the project icon work in both IE and other browsers, you can store the icon in the document root of the host, and reference it from ``trac.ini`` as follows:

{{{
[project]
icon = /favicon.ico
}}}

== Site Header & Footer ==
In the environment folder for each Trac project there should be a directory called {{{templates}}}.  This folder contains files {{{site_header.cs}}} and {{{site_footer.cs}}}.  Users can customize their Trac site by adding the required HTML markup to these files.  The content of these two files will be placed immediately following the opening {{{<body>}}} tag and immediately preceding the closing {{{</body>}}} tag of each page in the site, respectively.

These files may contain static HTML, though if users desire to have dynamically generated content they can make use of the [http://www.clearsilver.net/ ClearSilver] templating language from within the pages as well. When you need to see what variables are available to the template, append the query string `?hdfdump=1` to the URL of your Trac site. This will display a structured view of the template data.

== Site CSS ==
The primary means to adjust the layout of a Trac site is by add [http://www.w3.org/TR/REC-CSS2/ CSS] style rules that overlay the default rules. This is best done by editing the `site_css.cs` file in the enviroment's `templates` directory. The content of that template gets inserted into a `<style type='text/css></style>` element on every HTML page generated by Trac.

While you can add your custom style rules directory to the `site_css.cs` file, it is recommended that you simply reference an external style sheet, thereby enabling browsers to cache the CSS file instead of transmitting the rules with every response.

The following example would import a style sheet located in the `style` root directory of your host:
{{{
@import url(/style/mytrac.css);
}}}

You can use a !ClearSilver variable to reference a style sheet stored in the project environment's `htdocs` directory:
{{{
@import url(<?cs var:chrome.href ?>/site/style.css);
}}}

== Main Templates ==

It is also possible to use your own modified versions of the Trac [http://www.clearsilver.net/ ClearSilver] templates. Note though that this technique is not recommended because it makes upgrading Trac rather problematic: there are unfortunately several dependencies between the templates and the application code, such as the name of form fields and the structure of the template data, and these are likely to change between different versions of Trac.

If you absolutely need to use modified templates, copy the template files from the default templates directory (usually in found in `$prefix/share/trac/templates`) into the `templates` directory of the project environment. Then modify those copies to get the desired results.


----
See also TracGuide, TracIni",,
632,2,1138205673,trac,127.0.0.1,"= Trac Plugins =
[[TracGuideToc]]

Since version 0.9, Trac supports plugins that extend the built-in functionality. The plugin functionality is based on the [http://projects.edgewall.com/trac/wiki/TracDev/ComponentArchitecture component architecture].

== Requirements ==

To use plugins in Trac, you need to have [http://peak.telecommunity.com/DevCenter/setuptools setuptools] (version 0.6) installed.

To install `setuptools`, download the bootstrap module [http://peak.telecommunity.com/dist/ez_setup.py ez_setup.py] and execute it as follows:
{{{
$ python ez_setup.py
}}}

If the `ez_setup.py` script fails to install the setuptools release, you can download it from [http://www.python.org/pypi/setuptools PyPI] and install it manually.

== Installing a Trac Plugin ==

=== For a Single Project ===

Plugins are packaged as [http://peak.telecommunity.com/DevCenter/PythonEggs Python eggs]. That means they are ZIP archives with the file extension `.egg`. If you have downloaded a source distribution of a plugin, you can run:
{{{
$ python setup.py bdist_egg
}}}
to build the `.egg` file.

Once you have the plugin archive, you need to copy it into the `plugins` directory of the [wiki:TracEnvironment project environment]. Also, make sure that the web server has sufficient permissions to read the plugin egg.

=== For All Projects ===

Plugins that you want to use in all your projects (such as [http://projects.edgewall.com/trac/wiki/WebAdmin WebAdmin]) can be installed globally by running:
{{{
$ python setup.py install
}}}

Alternatively, you can just drop the `.egg` file in the Python `site-packages` directory.

Unlike plugins installed per-environment, you'll have to explicitly enable globally installed plugins via [wiki:TracIni trac.ini]. This is done in the `[components]` section of the configuration file, for example:
{{{
[components]
webadmin.* = enabled
}}}

The name of the option is the Python package of the plugin. This should be specified in the documentation of the Plugin, but can also be easily find out by looking at the source (look for a top-level directory that contains a file named `__init__.py`.)

== Setting up the Plugin Cache ==

Some plugins will need to be extracted by the Python eggs runtime (`pkg_resources`), so that their contents are actual files on the file system. The directory in which they are extracted defaults to the home directory of the current user, which may or may not be a problem. You can however override the default location using the `PYTHON_EGG_CACHE` environment variable.

To do this from the Apache configuration, use the `SetEnv` directive as follows:
{{{
SetEnv PYTHON_EGG_CACHE /path/to/dir
}}}

This works whether your using the [wiki:TracCgi CGI] or the [wiki:TracModPython mod_python] front-end. Put this directive next to where you set the path to the [wiki:TracEnvironment Trac environment], i.e. in the same `<Location>` block.

For example (for CGI):
{{{
 <Location /trac>
   SetEnv TRAC_ENV /path/to/projenv
   SetEnv PYTHON_EGG_CACHE /path/to/dir
 </Location>
}}}

or (for mod_python):
{{{
 <Location /trac>
   SetHandler mod_python
   ...
   SetEnv PYTHON_EGG_CACHE /path/to/dir
 </Location>
}}}

For [wiki:TracFastCgi FastCGI], you'll need to `-initial-env` option, or whatever is provided by your web server for setting environment variables.

----
See also TracGuide, [http://projects.edgewall.com/trac/wiki/PluginList plugin list], [http://projects.edgewall.com/trac/wiki/TracDev/ComponentArchitecture component architecture]",,
633,1,1138378178.00641,exarkun,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.
",',0
634,65,1138378344.59246,exarkun,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribue and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], an two-way AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&component=Reviews&order=priority Reviews]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]

== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://xapian.org Xapian] fast, smart, scalable full text indexing.
 * [http://hyperestraier.sourceforge.net/ Hyperestraier] the new full text indexer in town and [http://hype.python-hosting.com/ Hype Python bindings].
 * [http://www.zope.org/Products/ZopeInterface Zope Interfaces] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.",',0
635,66,1138380031.64114,exarkun,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribue and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&component=Reviews&order=priority Reviews]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]

== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://xapian.org Xapian] fast, smart, scalable full text indexing.
 * [http://hyperestraier.sourceforge.net/ Hyperestraier] the new full text indexer in town and [http://hype.python-hosting.com/ Hype Python bindings].
 * [http://www.zope.org/Products/ZopeInterface Zope Interfaces] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.",',0
636,4,1138390335.40399,amir,198.49.126.204,"== Divmod Sine ==

A voice over IP application server.

Sine provides:
 * SIP Registrar
 * SIP Proxy
 * Third party call control (3PCC)
 * Voice-mail
 * [wiki:DivmodMantissa Divmod Mantissa] integration","add some very basic content",0
637,5,1138390433.25327,amir,198.49.126.204,"== Divmod Sine ==

A voice over IP application server.

Sine provides:
 * SIP Registrar
 * SIP Proxy
 * Third party call control (3PCC)
 * Voice-mail
 * Through-the-web configuration
 * [wiki:DivmodMantissa Divmod Mantissa] integration","mention TTW config",0
638,67,1138441727.1743,Brendon,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Infrastructure ==
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&component=Reviews&order=priority Reviews]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]

== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].
== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://xapian.org Xapian] fast, smart, scalable full text indexing.
 * [http://hyperestraier.sourceforge.net/ Hyperestraier] the new full text indexer in town and [http://hype.python-hosting.com/ Hype Python bindings].
 * [http://www.zope.org/Products/ZopeInterface Zope Interfaces] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.",Typo.,0
639,2,1138482601.83015,exarkun,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

= Goals =

(Put something here)

== Tutorial ==

=== Simple LiveFragment demo ===

Subclass {{{nevow.athena.LiveFragment}}} and provide a {{{docFactory}}} which uses the {{{liveFragment}}} renderer:

{{{
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[T.body(render=T.directive('myFragment'))])

    def render_myFragment(self, ctx, data):
        f = MyFragment()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
from nevow import appserver, rend

class Root(rend.Page):
    def childFactory(self, name):
        if name == '':
            return MyPage()

site = appserver.NevowSite(Root())
}}}

Hook the site up to the internet:

{{{
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
twistd -noy myfragment.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read the Twisted plugin documentation to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveFragment}}} subclass:

{{{
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))

    def __init__(self, *a, **kw):
        super(MyFragment, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragent'))[
        T.button(onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyFragment}}} which the browser will call, and expose it to the browser:

{{{
class MyFragment(athena.LiveFragment):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument

    allowedMethods = ['echo']
}}}

Start up the server again and revisit <http://localhost:8080>.

= Implementation =

(Put something here)
","LiveFragment tutorial",0
640,3,1138482646.79248,exarkun,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

= Goals =

(Put something here)

= Tutorial =

== Simple LiveFragment demo ==

Subclass {{{nevow.athena.LiveFragment}}} and provide a {{{docFactory}}} which uses the {{{liveFragment}}} renderer:

{{{
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[T.body(render=T.directive('myFragment'))])

    def render_myFragment(self, ctx, data):
        f = MyFragment()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
from nevow import appserver, rend

class Root(rend.Page):
    def childFactory(self, name):
        if name == '':
            return MyPage()

site = appserver.NevowSite(Root())
}}}

Hook the site up to the internet:

{{{
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
twistd -noy myfragment.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read the Twisted plugin documentation to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveFragment}}} subclass:

{{{
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))

    def __init__(self, *a, **kw):
        super(MyFragment, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragent'))[
        T.button(onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyFragment}}} which the browser will call, and expose it to the browser:

{{{
class MyFragment(athena.LiveFragment):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument

    allowedMethods = ['echo']
}}}

Start up the server again and revisit <http://localhost:8080>.

= Implementation =

(Put something here)
","twiddle heading sizes",0
641,4,1138483163.79831,exarkun,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

= Goals =

(Put something here)

= Tutorial =

== Simple LiveFragment demo ==

Subclass {{{nevow.athena.LiveFragment}}} and provide a {{{docFactory}}} which uses the {{{liveFragment}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[T.body(render=T.directive('myFragment'))])

    def render_myFragment(self, ctx, data):
        f = MyFragment()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver, rend

class Root(rend.Page):
    def childFactory(self, name):
        if name == '':
            return MyPage()

site = appserver.NevowSite(Root())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myfragment.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
#!js
MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read the Twisted plugin documentation to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveFragment}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))

    def __init__(self, *a, **kw):
        super(MyFragment, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragent'))[
        T.button(onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyFragment}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyFragment(athena.LiveFragment):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument

    allowedMethods = ['echo']
}}}

Start up the server again and revisit <http://localhost:8080>.

= Implementation =

(Put something here)
",',0
642,1,1138483296.06754,exarkun,198.49.126.204,"Stub page for holding uploaded files for DivmodNevow/Athena
",',0
643,1,1138595796.86411,exarkun,198.49.126.204,"Medium-sized mammal of the family Hominidae in the order Primates, found
almost exclusively in the eastern portions of North America.  Jean-Paul is
non-migratory, but at times can be found several hundred miles from his
native habitat.  Jean-Paul's diet consists primarily of nuts and berries and
is supplemented by any of a number of caffeine-rich foods, such as coffee
beans and mountain dew.

||,,Jean-Paul in his native habitat.,,||
||http://divmod.org/users/exarkun/bearsalmon.jpg||
||,,© Kim Heacox/Accent Alaska,,||

 * [http://jcalderone.livejournal.com/ Writings by Jean-Paul]
 * [http://twistedmatrix.com/projects/mail Other] [http://twistedmatrix.com/projects/names Projects] [http://twistedmatrix.com/projects/news by] [http://twistedmatrix.com/projects/words Jean-Paul]
",',0
644,14,1138595821.63736,exarkun,198.49.126.204,"= Divmod, Inc. =

http://divmod.org/trac/chrome/common/divmod.png Divmod.org is a community dedicated to producing high quality, open source Python code.

http://divmod.com/ximages/anonymous_logo.png [wiki:DivmodInc Divmod, Inc.] is the company that substantially funds divmod.org, employs many of the programmers writing code on these projects, and created these projects to support our applications.

Here at Divmod (both of them) we strongly believe in honesty and transparency.  Our code and our tasks are right here for you to see.  We are gearing up to provide several different online services, some of which will be free and some of which will be subscription-based, but all of which will place a premium on user satisfaction.  Here is where you can see how we're doing it and know that we really mean it when we say that we value your privacy and security.

If you're an open source programmer and also a Divmod customer or user, contribute some patches!  If you can make the service better we will include your patches in our source distributions and on our live service.

Our team:
 * [wiki:People/AmirBakhtiar Amir Bakhtiar], irc: amiramir, [http://www.livejournal.com/users/amiramir blog]
 * [wiki:People/GlyphLefkowitz Glyph Lefkowitz], irc: glyph, [http://www.livejournal.com/users/glyf blog]
 * [wiki:People/JeanPaulCalderone Jean-Paul Calderone], irc: exarkun, [http://www.livejournal.com/users/jcalderone blog]
 * [wiki:People/AllenShort Allen Short], irc: dash
 * [wiki:People/MoeAboulkheir Moe Aboulkheir], irc: moea

Alumni:
 * [wiki:People/DonovanPreston Donovan Preston], irc: fzZzy, [http://ulaluma.com/pyx/ blog]
 * [wiki:People/MikeSalib Mike Salib], irc: msalib
 * [wiki:People/MarkWittner Mark Wittner], irc: token
 * [wiki:People/PhilFrost Phil Frost], irc: indigo, [http://bitglue.com/ website]
 * [wiki:People/JonathanSimms Jonathan Simms], irc: slyphon

",',0
645,68,1138656249.0704,amir,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Divmod software for you to use and enjoy ==
=== Infrastructure ===
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&component=Reviews&order=priority Reviews]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]


== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://xapian.org Xapian] fast, smart, scalable full text indexing.
 * [http://hyperestraier.sourceforge.net/ Hyperestraier] the new full text indexer in town and [http://hype.python-hosting.com/ Hype Python bindings].
 * [http://www.zope.org/Products/ZopeInterface Zope Interfaces] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.","rearrange and reword a little",0
646,69,1138656754.38411,amir,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Divmod software for you to use and enjoy ==
=== Infrastructure ===
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&component=Reviews&order=priority Reviews]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]


== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://xapian.org Xapian] fast, smart, scalable full text indexing.
 * [http://hyperestraier.sourceforge.net/ Hyperestraier] the new full text indexer in town and [http://hype.python-hosting.com/ Hype Python bindings].
 * [http://www.zope.org/Products/ZopeInterface Zope Interfaces] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.","add democracy server",0
647,1,1138656917.47345,amir,198.49.126.204,"= [wiki:WikiStart Divmod] : Democracy Server =

In keeping with our commitment to the Open in Open Source, Divmod is
readying our Quotient conversation server to be the foundation for another
important application-- the Democracy Server. The Democracy Server is a
piece of open source software that can be deployed in cities, small towns and
villages to provide email, telephony, publishing, voting, auction and
[http://www.nexuspub.com/articles/2003/july2003/interview.htm complementary currency] facilities for the community. We believe that our tool will
encourage participatory democracy and facilitate beneficial markets and provide the
transparency needed to keep markets open and democracies viable.

Using our Quotient to Quotient protocol (Q2Q) we can network Democracy
Servers and provide a mechanism for trading, communicating and voting
on regional and/or national levels.",create,0
648,6,1138690746.71179,washort,198.49.126.204,"== Divmod Sine ==

A voice over IP application server.

[http://isometric.sixsided.org/strips/future_wiring/2.gif]

Sine provides:
 * SIP Registrar
 * SIP Proxy
 * Third party call control (3PCC)
 * Voice-mail
 * Through-the-web configuration
 * [wiki:DivmodMantissa Divmod Mantissa] integration",',0
649,5,1139268171.31659,exarkun,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

= Goals =

(Put something here)

= Tutorial =

== Simple LiveFragment demo ==

Subclass {{{nevow.athena.LiveFragment}}} and provide a {{{docFactory}}} which uses the {{{liveFragment}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[T.body(render=T.directive('myFragment'))])

    def render_myFragment(self, ctx, data):
        f = MyFragment()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver, rend

class Root(rend.Page):
    def childFactory(self, name):
        if name == '':
            return MyPage()

site = appserver.NevowSite(Root())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myfragment.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
#!js
MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read the Twisted plugin documentation to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveFragment}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))

    def __init__(self, *a, **kw):
        super(MyFragment, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragent'))[
        T.button(onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyFragment}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyFragment(athena.LiveFragment):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument

    allowedMethods = ['echo']
}}}

Start up the server again and revisit <http://localhost:8080>.

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tuturial]

= Implementation =

(Put something here)
","link to a page that's not real yet",0
650,1,1139273313.34848,exarkun,198.49.126.204,"== Unit Testing ==

Divmod uses the stand-alone !JavaScript interpreter [http://www.mozilla.org/js/spidermonkey/ SpiderMonkey] to run unit tests on some portions of our !JavaScript sources.  You can find [browser:trunk/Nevow/nevow/test/test_object.js several] [browser:trunk/Nevow/nevow/test/test_deferred.js examples] in the Divmod repository.

These unit tests are valuable: they reveal simple errors, provide a kind of documentation as to the purpose of various functions, and ensure that the code is exercised in as much isolation as is possible.  However, they are not all-encompassing.  After all, they aren't even executed by the same runtime that will be used by ''any'' user to execute them.

== Functional Testing ==

To account for this, Nevow provides {{{nit}}}, a runner for tests which are designed to be run by an actual browser.  Nit tests are placed in Python source files named with the {{{livetest_}}} prefix.  There are [browser:trunk/Nevow/nevow/test/livetest_athena.py several] [browser:trunk/Mantissa/xmantissa/test/livetest_forms.py examples] [browser:trunk/Mantissa/xmantissa/test/livetest_people.py of this] kind of test in the Divmod repository as well.
","some brief introductory notes",0
651,5,1139379343.83072,glyph,198.49.126.204,"= Branch Based Development =

Divmod uses branches for all development.  The lifetime of a task looks something like this:

  * A  ticket is created in the issue tracker.
  * For features, a specification is attached to the ticket
  * A branch is created in Subversion.  The branch is named with the convention <descriptive word>-<issue number>[-<branch number>].  For the first branch of any feature, the branch number is omitted.
  * Development occurs on the feature in the branch.
  * When the feature is deemed ready by the developer, it is given to another developer for review. The ticket should be moved to the Reviews component, assigned to the reviewer and the priority set to high.
  * When the reviewer is satisfied, the branch is merged into trunk.

Branch lifetimes should be short.  If trunk moves very far from the branch, the branch should be MergedForward to pick up bug fixes and feature enhancements which might be useful.  Doing this also makes the final merge easier, by keeping conflicts small and bringing them to the developer's attention before they become unmanageable.

= Why Branches? =

The most recent version of source code in the repository should always be working.  That makes it a lot easier to deploy fixes and tweaks quickly.  However, sometimes you need to check in code to test it on a different machine, or show it to a different developer.  A version control system is useful in many ways, and if you only have one branch, these purposes conflict.

While we have only tried branch-based development with Subversion, other systems like Perforce and Bazaar will probably work just fine.

Here at Divmod we think this is a ''really good'' methodology: here are some of its features.

== Keep {{{trunk}}} Working ==

The most recent revision of a piece of software, that is, {{{trunk@HEAD}}} should always work.  Any open-source developer interested in the project should be able to check out the most recent version and immediately start working on improvements.

With branch-based development, features are only merged to trunk after they have been tested and reviewed by at least one other developer.

== Switch Developers Mid-Feature ==

If a developer gets stuck because it turns out that part of a feature is outside his expertise, he project can easily put code that he knows is broken into a branch, then indicate that branch to another developer and reassign the ticket, without breaking trunk.

== Provide Useful Progress Information to Management ==

Branches directly correspond to user-facing tasks.  A quick look at [browser:/branches the list of branches] should indicate to managers (or throngs of adoring [wiki:DivmodFanClub fans]) indicates what is actually going on to management.  Trac helpfully provides a view which shows how long it has been since someone committed to a branch.  If there are a lot of branches (more than twice the number of developers, let's say), that means that the team's efforts are getting diffuse and they need to focus more and get branches merged.  If branches are being turned over quickly, it means that tasks are being completed quickly.

== Mechanism for Code Review ==

Usually code review is done by module, and only after the fact.  While this practice is useful, it only raises problems that already exist, it doesn't prevent them.

By reviewing each branch as a change, rather than a module, problems are spotted earlier on, and developers can work on any modules that are necessary for a particular task, with no worries that the maintainer won't notice - on a larger team, any module maintainers should be asked for review.

This is also a low-friction review process.  Rather than submitting a branch for review and discussing it interactively, a developer may accept a ticket, start a branch, commit a few times, finish, put the ticket into review, move on to an unrelated branch, repeat, put that branch into review, then check their assigned tickets at the end of the day and merge any branches which have been accepted before finishing for the day.

== Generate a Meaningful Changelog ==

Often, source control logs are riddled with nonsensical, tiny changes.  'twiddled whitespace', 'added a few docstrings', etc.  Because it's good to commit frequently to avoid losing too much work or generating monolithic changes, this is hard to avoid.  Commit messages generate a bottleneck to getting work into the repository, which is bad.

If every branch has a clear purpose, then only ''merges'' need have useful, descriptive commit messages, and since no code is changing when a developer is doing a merge to trunk, they can take all the time they need to come up with a good message.  This means that the changelog generated directly from a revision log of trunk (as opposed to the whole repository) is likely to be useful as a changelog.

== Update Without Worry ==

If you are working directly in trunk, any update may cause conflicts which you have to immedaitely resolve before you can continue working.  With branches, a smaller number of developers can work on a branch, knowing that their changes won't conflict, and update regularly.  ","Explain the process a bit more.",0
652,6,1139379370.52078,glyph,198.49.126.204,"= Branch Based Development =

Divmod uses branches for all development.  The lifetime of a task looks something like this:

  * A  ticket is created in the issue tracker.
  * For features, a specification is attached to the ticket
  * A branch is created in Subversion.  The branch is named with the convention <descriptive word>-<issue number>[-<branch number>].  For the first branch of any feature, the branch number is omitted.
  * Development occurs on the feature in the branch.
  * When the feature is deemed ready by the developer, it is given to another developer for review. The ticket should be moved to the Reviews component, assigned to the reviewer and the priority set to high.
  * When the reviewer is satisfied, the branch is merged into trunk.

Branch lifetimes should be short.  If trunk moves very far from the branch, the branch should be MergedForward to pick up bug fixes and feature enhancements which might be useful.  Doing this also makes the final merge easier, by keeping conflicts small and bringing them to the developer's attention before they become unmanageable.

= Why Branches? =

The most recent version of source code in the repository should always be working.  That makes it a lot easier to deploy fixes and tweaks quickly.  However, sometimes you need to check in code to test it on a different machine, or show it to a different developer.  A version control system is useful in many ways, and if you only have one branch, these purposes conflict.

While we have only tried branch-based development with Subversion, other systems like Perforce and Bazaar will probably work just fine.

Here at Divmod we think this is a ''really good'' methodology: here are some of its features.

== Keep {{{trunk}}} Working ==

The most recent revision of a piece of software, that is, {{{trunk@HEAD}}} should always work.  Any open-source developer interested in the project should be able to check out the most recent version and immediately start working on improvements.

With branch-based development, features are only merged to trunk after they have been tested and reviewed by at least one other developer.

== Switch Developers Mid-Feature ==

If a developer gets stuck because it turns out that part of a feature is outside his expertise, he project can easily put code that he knows is broken into a branch, then indicate that branch to another developer and reassign the ticket, without breaking trunk.

== Provide Useful Progress Information to Management ==

Branches directly correspond to user-facing tasks.  A quick look at [browser:/branches the list of branches] should indicate to managers (or throngs of adoring [wiki:DivmodFanClub fans]) indicates what is actually going on.  Trac helpfully provides a view which shows how long it has been since someone committed to a branch.  If there are a lot of branches (more than twice the number of developers, let's say), that means that the team's efforts are getting diffuse and they need to focus more and get branches merged.  If branches are being turned over quickly, it means that tasks are being completed quickly.

== Mechanism for Code Review ==

Usually code review is done by module, and only after the fact.  While this practice is useful, it only raises problems that already exist, it doesn't prevent them.

By reviewing each branch as a change, rather than a module, problems are spotted earlier on, and developers can work on any modules that are necessary for a particular task, with no worries that the maintainer won't notice - on a larger team, any module maintainers should be asked for review.

This is also a low-friction review process.  Rather than submitting a branch for review and discussing it interactively, a developer may accept a ticket, start a branch, commit a few times, finish, put the ticket into review, move on to an unrelated branch, repeat, put that branch into review, then check their assigned tickets at the end of the day and merge any branches which have been accepted before finishing for the day.

== Generate a Meaningful Changelog ==

Often, source control logs are riddled with nonsensical, tiny changes.  'twiddled whitespace', 'added a few docstrings', etc.  Because it's good to commit frequently to avoid losing too much work or generating monolithic changes, this is hard to avoid.  Commit messages generate a bottleneck to getting work into the repository, which is bad.

If every branch has a clear purpose, then only ''merges'' need have useful, descriptive commit messages, and since no code is changing when a developer is doing a merge to trunk, they can take all the time they need to come up with a good message.  This means that the changelog generated directly from a revision log of trunk (as opposed to the whole repository) is likely to be useful as a changelog.

== Update Without Worry ==

If you are working directly in trunk, any update may cause conflicts which you have to immedaitely resolve before you can continue working.  With branches, a smaller number of developers can work on a branch, knowing that their changes won't conflict, and update regularly.  ",',0
653,7,1139380193.55448,glyph,198.49.126.204,"= Branch Based Development =

Divmod uses branches for all development.  The lifetime of a task looks something like this:

  * A  ticket is created in the issue tracker.
  * For features, a specification is attached to the ticket
  * A branch is created in Subversion.  The branch is named with the convention <descriptive word>-<issue number>[-<branch number>].  For the first branch of any feature, the branch number is omitted.
  * Development occurs on the feature in the branch.
  * When the feature is deemed ready by the developer, it is given to another developer for review. The ticket should be moved to the Reviews component, assigned to the reviewer and the priority set to high.
  * When the reviewer is satisfied, the branch is merged into trunk.

Branch lifetimes should be short.  If trunk moves very far from the branch, the branch should be MergedForward to pick up bug fixes and feature enhancements which might be useful.  Doing this also makes the final merge easier, by keeping conflicts small and bringing them to the developer's attention before they become unmanageable.

= Why Branches? =

The most recent version of source code in the repository should always be working.  That makes it a lot easier to deploy fixes and tweaks quickly.  However, sometimes you need to check in code to test it on a different machine, or show it to a different developer.  A version control system is useful in many ways, and if you only have one branch, these purposes conflict.

While we have only tried branch-based development with Subversion, other systems like Perforce and Bazaar will probably work just fine.

Here at Divmod we think this is a ''really good'' methodology: here are some of its features.

== Keep {{{trunk}}} Working ==

The most recent revision of a piece of software, that is, {{{trunk@HEAD}}} should always work.  Any new developer should be able to check out the most recent version and immediately start working, without worrying that the build is broken this week.

With branch-based development, features are only merged to trunk after they have been tested and reviewed by at least one other developer.

== Switch Developers Mid-Feature ==

If a developer gets stuck because it turns out that part of a feature is outside his expertise, he project can easily put code that he knows is broken into a branch, then indicate that branch to another developer and reassign the ticket, without breaking trunk.

== Provide Useful Progress Information to Management ==

Branches directly correspond to user-facing tasks.  A quick look at [browser:/branches the list of branches] should indicate to managers (or throngs of adoring [wiki:DivmodFanClub fans]) indicates what is actually going on.  Trac helpfully provides a view which shows how long it has been since someone committed to a branch.  If there are a lot of branches (more than twice the number of developers, let's say), that means that the team's efforts are getting diffuse and they need to focus more and get branches merged.  If branches are being turned over quickly, it means that tasks are being completed quickly.

== Mechanism for Code Review ==

Usually code review is done by module, and only after the fact.  While this practice is useful, it only raises problems that already exist, it doesn't prevent them.

By reviewing each branch as a change, rather than a module, problems are spotted earlier on, and developers can work on any modules that are necessary for a particular task, with no worries that the maintainer won't notice - on a larger team, any module maintainers should be asked for review.

This is also a low-friction review process.  Rather than submitting a branch for review and discussing it interactively, a developer may accept a ticket, start a branch, commit a few times, finish, put the ticket into review, move on to an unrelated branch, repeat, put that branch into review, then check their assigned tickets at the end of the day and merge any branches which have been accepted before finishing for the day.

== Generate a Meaningful Changelog ==

Often, source control logs are riddled with nonsensical, tiny changes.  'twiddled whitespace', 'added a few docstrings', etc.  Because it's good to commit frequently to avoid losing too much work or generating monolithic changes, this is hard to avoid.  Commit messages generate a bottleneck to getting work into the repository, which is bad.

If every branch has a clear purpose, then only ''merges'' need have useful, descriptive commit messages, and since no code is changing when a developer is doing a merge to trunk, they can take all the time they need to come up with a good message.  This means that the changelog generated directly from a revision log of trunk (as opposed to the whole repository) is likely to be useful as a changelog.

== Revert Useful Units ==

If something ''does'' break trunk, you can revert it with one command, rather than sifting through piles of related commit messages and trying to assemble a useful revert.  It's 'revision 1234', not 'revision 1232, 1237, 1239, 1246, and I think maybe 1255 too, you should run the tests both ways'.

== Merge When You're Merging, Not When You're Hacking ==

If you are working directly in trunk, any update may cause conflicts which you have to immedaitely resolve before you can continue working.  With branches, a smaller number of developers can work on a branch, knowing that their changes won't conflict, and update regularly.

That means you are never interrupted with an unpleasant required merge.  Your code is always in the repository ''before'' you worry about merging it with other people's changes, so there is no concern that although your code was working before you were ready to commit, the merge went badly and you never committed in a working state.

== Some Thoughts on Things I Don't Know Anything About ==

While this process works very well for us on Python code, more heavyweight development environments might find it even more valuable.  For example, if it takes an hour-long build process and 20 minutes of testing to determine whether trunk is in a good state, branch-based development could be even more valuable.

Even if you already have awesome automated tests, branches can speed things up immensely.  Let's say Foo Co. has 30 developers and an hour long build and 20 minutes of unit tests.  Jethro checks in some broken core header file to trunk and goes to lunch.  The automated tests start building and running.  Alice, preparing to commit, updates.  She receives Jethro's broken changes.  Alice, being a better developer than Jethro, runs the tests.  She waits 20 minutes.  The build is broken!  She can't commit, since she doesn't want to break trunk.  (All this while, precious hours of work are sitting on Alice's disk, not backed up in the repository...)

Meanwhile, everyone else in the company has updated, and jethro returns from his early lunch.  Thus far, 30 developers * (1 hour of build + 20 minutes of tests) = 40 man days have been wasted.  Everyone knows it was Jethro when he gets back because the build indicates failure on a revision he checks in, but now all 30 developers are standing behind his desk, waiting for him to get trunk back into a working state and test the fix so they can get back to work.  That requires ''at least'' another 1:20 of time waiting for the automated tests before Alice can commit her changes.

Much of this waiting could have been circumvented if Jethro had checked his changes into a branch, and then asked the automated test system to run tests for him, and maybe had one other developer review it for him.  By the way, Buildbot has this feature, and [http://jade.code-bear.com:8010/q-linux Divmod's tests use it] - feel free to request a build of any branch :).",',0
654,6,1139461129.35861,exarkun,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

= Goals =

(Put something here)

= Tutorial =

== Simple LiveFragment demo ==

Subclass {{{nevow.athena.LiveFragment}}} and provide a {{{docFactory}}} which uses the {{{liveFragment}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[T.body(render=T.directive('myFragment'))])

    def render_myFragment(self, ctx, data):
        f = MyFragment()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver, rend

class Root(rend.Page):
    def childFactory(self, name):
        if name == '':
            return MyPage()

site = appserver.NevowSite(Root())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myfragment.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
#!js
MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read the Twisted plugin documentation to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveFragment}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))

    def __init__(self, *a, **kw):
        super(MyFragment, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragent'))[
        T.button(onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyFragment}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyFragment(athena.LiveFragment):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument

    allowedMethods = ['echo']
}}}

Start up the server again and revisit <http://localhost:8080>.

Download the files for this tutorial:

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myfragment.tac?format=raw myfragment.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tuturial]

= Implementation =

(Put something here)
","I *totally* linked this stuff before, where did it go???",0
655,7,1139461150.01936,exarkun,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

= Goals =

(Put something here)

= Tutorial =

== Simple LiveFragment demo ==

Subclass {{{nevow.athena.LiveFragment}}} and provide a {{{docFactory}}} which uses the {{{liveFragment}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[T.body(render=T.directive('myFragment'))])

    def render_myFragment(self, ctx, data):
        f = MyFragment()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver, rend

class Root(rend.Page):
    def childFactory(self, name):
        if name == '':
            return MyPage()

site = appserver.NevowSite(Root())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myfragment.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
#!js
MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read the Twisted plugin documentation to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveFragment}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

=== Invoking Code in the Browser ===
http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw
Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))

    def __init__(self, *a, **kw):
        super(MyFragment, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragent'))[
        T.button(onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyFragment}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyFragment(athena.LiveFragment):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument

    allowedMethods = ['echo']
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myfragment.tac?format=raw myfragment.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tuturial]

= Implementation =

(Put something here)
",',0
656,8,1139462345.31321,exarkun,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

= Goals =

(Put something here)

= Tutorial =

== Simple LiveFragment demo ==

Subclass {{{nevow.athena.LiveFragment}}} and provide a {{{docFactory}}} which uses the {{{liveFragment}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[T.body(render=T.directive('myFragment'))])

    def render_myFragment(self, ctx, data):
        f = MyFragment()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver, rend

class Root(rend.Page):
    def child_(self, ctx):
        return MyPage()

site = appserver.NevowSite(Root())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myfragment.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
#!js
MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read the Twisted plugin documentation to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveFragment}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

=== Invoking Code in the Browser ===
http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw
Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))

    def __init__(self, *a, **kw):
        super(MyFragment, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment'))[
        T.button(onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyFragment}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyFragment(athena.LiveFragment):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument

    allowedMethods = ['echo']
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myfragment.tac?format=raw myfragment.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tuturial]

= Implementation =

(Put something here)
","Fix typo in renderer name; replace non-working childFactory with ugly child_",0
657,9,1139462890.11937,exarkun,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

= Goals =

(Put something here)

= Tutorial =

== Simple LiveFragment demo ==

Subclass {{{nevow.athena.LiveFragment}}} and provide a {{{docFactory}}} which uses the {{{liveFragment}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[T.body(render=T.directive('myFragment'))])

    def render_myFragment(self, ctx, data):
        f = MyFragment()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver, rend

class Root(rend.Page):
    def child_(self, ctx):
        return MyPage()

site = appserver.NevowSite(Root())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myfragment.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
#!js
MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read the Twisted plugin documentation to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveFragment}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))

    def __init__(self, *a, **kw):
        super(MyFragment, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment'))[
        T.button(onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyFragment}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyFragment(athena.LiveFragment):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument

    allowedMethods = ['echo']
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myfragment.tac?format=raw myfragment.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tuturial]

= Implementation =

(Put something here)
","What the hell?",0
658,10,1140130179.65554,exarkun,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= Goals =

(Put something here)

= Tutorial =

== Simple LiveFragment demo ==

Subclass {{{nevow.athena.LiveFragment}}} and provide a {{{docFactory}}} which uses the {{{liveFragment}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[T.body(render=T.directive('myFragment'))])

    def render_myFragment(self, ctx, data):
        f = MyFragment()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver, rend

class Root(rend.Page):
    def child_(self, ctx):
        return MyPage()

site = appserver.NevowSite(Root())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myfragment.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
#!js
MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read the Twisted plugin documentation to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveFragment}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))

    def __init__(self, *a, **kw):
        super(MyFragment, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment'))[
        T.button(onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyFragment}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyFragment(athena.LiveFragment):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument

    allowedMethods = ['echo']
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myfragment.tac?format=raw myfragment.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tuturial]

= Implementation =

(Put something here)
","FAQ Link",0
659,1,1140130358.1202,exarkun,198.49.126.204,"Q) When I reload a page, the server logs a traceback ending with {{{exceptions.AssertionError: Cannot render a LivePage more than once}}}

A) LivePage instances maintain server-side state that corresponds to the connection to the browser.  Because of this, each LivePage instance can only be used to serve a single client.  When you serve LivePages, make sure that you create a new instance for each render pass.
","multi-render question",0
660,11,1140284515.57561,exarkun,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= Goals =

(Put something here)

= Tutorial =

== Simple LiveFragment demo ==

Subclass {{{nevow.athena.LiveFragment}}} and provide a {{{docFactory}}} which uses the {{{liveFragment}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myFragment'))])

    def render_myFragment(self, ctx, data):
        f = MyFragment()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver, rend

class Root(rend.Page):
    def child_(self, ctx):
        return MyPage()

site = appserver.NevowSite(Root())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myfragment.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
#!js
MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read the Twisted plugin documentation to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveFragment}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))

    def __init__(self, *a, **kw):
        super(MyFragment, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment'))[
        T.button(onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyFragment}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyFragment(athena.LiveFragment):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument

    allowedMethods = ['echo']
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myfragment.tac?format=raw myfragment.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tuturial]

= Implementation =

(Put something here)
","liveglue sucks",0
661,1,1140307211.8596,mithrandi,198.49.126.204,"= XHTML: XML vs HTML =

Just about all HTML content used in a Nevow application should be XHTML: {{{loaders.htmlstr}}} and {{{loaders.htmlfile}}} are deprecated, and tend to behave strangely at the best of times anyway, so in order to make use of the nevow templating features which are implemented as namespaced XML attributes elements, you should only be using {{{loaders.xmlfile}}} and maybe {{{loaders.xmlstr}}}. I'll leave the issue of stan content aside for now. Currently (see #665), however, a Nevow application will be serving what is meant to be XHTML (and thus XML) content, with a {{{text/html}}} content type instead. This has a variety of implications on application code, many of which are discussed at http://hixie.ch/advocacy/xhtml and do not need to be repeated here.

In a non-athena application, the resulting output served to the browser will typically be devoid of any nevow-namespaced elements and attributes, and thus it does not matter as much whether the content is parsed by an HTML parser or an XML parser. However, athena-using applications will have athena-namespaced elements and attributes in the content that is served up, and some degree of strangeness thus occurs when the content is parsed by a browser's HTML parser. For example, an element like athena:handler will show up as a DOM element of name 'ATHENA:HANDLER' instead of an element named 'handler' in the {{{http://divmod.org/ns/athena/0.7}}} namespace. In addition, it seems that unknown elements may interact weirdly with specific DOM elements (such as tables). Combined with the fact that athena applications are likely to be doing fairly extensive manipulations of the DOM, having the browser parse the content correctly with an XML parser presents several fairly compelling advantages.

On the other hand, invoking the XML parser comes with its own set of caveats; once again, http://hixie.ch/advocacy/xhtml details these quite well, but a few of them are of specific interest here. The various differences in semantics can cause breakage in existing working applications, but another caveat is that stan and the flattening system are completely unaware of XML namespaces. You can create tag instances named like 'athena:handler' and attributes named like 'xmlns:athena', but it is possible to accidentally emit XML that has inadvertently missing or incorrect XML namespace declarations.",',0
662,2,1140307281.46318,mithrandi,198.49.126.204,"= XHTML: XML vs HTML =

Just about all HTML content used in a Nevow application should be XHTML: {{{loaders.htmlstr}}} and {{{loaders.htmlfile}}} are deprecated, and tend to behave strangely at the best of times anyway, so in order to make use of the nevow templating features which are implemented as namespaced XML attributes elements, you should only be using {{{loaders.xmlfile}}} and maybe {{{loaders.xmlstr}}}. I'll leave the issue of stan content aside for now. Currently (see #665), however, a Nevow application will be serving what is meant to be XHTML (and thus XML) content, with a {{{text/html}}} content type instead. This has a variety of implications on application code, many of which are discussed at http://hixie.ch/advocacy/xhtml and do not need to be repeated here.

In a non-athena application, the resulting output served to the browser will typically be devoid of any nevow-namespaced elements and attributes, and thus it does not matter as much whether the content is parsed by an HTML parser or an XML parser. However, athena-using applications will have athena-namespaced elements and attributes in the content that is served up, and some degree of strangeness thus occurs when the content is parsed by a browser's HTML parser. For example, an element like athena:handler will show up as a DOM element of name 'ATHENA:HANDLER' instead of an element named 'handler' in the {{{http://divmod.org/ns/athena/0.7}}} namespace. In addition, it seems that unknown elements may interact weirdly with specific DOM elements (such as tables). Combined with the fact that athena applications are likely to be doing fairly extensive manipulations of the DOM, having the browser parse the content correctly with an XML parser presents several fairly compelling advantages.

On the other hand, invoking the XML parser comes with its own set of caveats; once again, http://hixie.ch/advocacy/xhtml details these quite well, but a few of them are of specific interest here. The various differences in semantics can cause breakage in existing working applications, but another caveat is that stan and the flattening system are completely unaware of XML namespaces. You can create tag instances named like {{{<athena:handler>}}} and attributes named like {{{xmlns:athena}}}, but it is easy to accidentally emit XML that has missing or incorrect XML namespace declarations.",',0
663,1,1140406628.42517,ironfroggy,198.49.126.204,"I've begun work on this and when I post the patch I'll post up a small 'HOW-TO' about how to work this into an application, and what kind of behavior to expect from it.",',0
664,2,1140406885.96621,ironfroggy,198.49.126.204,"I've begun work on this and when I post the patch I'll post up a small 'HOW-TO' about how to work this into an application, and what kind of behavior to expect from it. The basic idea is that it publishes INavigableElements from a certain URL to any user, authenticated or not. It could also function for the front page of applications. Any item in a store that can adapt as a resource can be published through this, the same way PrivateApplication works.

Differences from PrivateApplication:
- Serves from the same store, no matter who the user is
- The store won't be a user store, so store.parent won't be what you expect it to be
- Different prefixes for each PublicApplication, not one prefix that maps to the active user's store",',0
665,16,1140552998.11081,carl.shimer@gmail.com,198.49.126.204,,,
666,17,1140553017.68701,harshaw,198.49.126.204,,,
667,3,1140746148.33779,ironfroggy,198.49.126.204,"I've begun work on this and when I post the patch I'll post up a small 'HOW-TO' about how to work this into an application, and what kind of behavior to expect from it. The basic idea is that it publishes INavigableElements from a certain URL to any user, authenticated or not. It could also function for the front page of applications. Any item in a store that can adapt as a resource can be published through this, the same way PrivateApplication works.

Differences from PrivateApplication:
- Serves from the same store, no matter who the user is
- The store won't be a user store
- The store will be an application store",',0
668,4,1140746178.26794,ironfroggy,198.49.126.204,"(See ticket #696)

I've begun work on this and when I post the patch I'll post up a small 'HOW-TO' about how to work this into an application, and what kind of behavior to expect from it. The basic idea is that it publishes INavigableElements from a certain URL to any user, authenticated or not. It could also function for the front page of applications. Any item in a store that can adapt as a resource can be published through this, the same way PrivateApplication works.

Differences from PrivateApplication:
- Serves from the same store, no matter who the user is
- The store won't be a user store
- The store will be an application store",',0
669,8,1140852696.45548,radix,198.49.126.204,,,
670,4,1140916360.93775,exarkun,198.49.126.204,"Radical is an interactive, 2D, isometric client/server game platform, delivered using nothing but a web browser, written using MantissaProject and Athena.

Seriously.  It actually does that.  You can move your little guy around on the screen, talk, and pick up items (there are even walls!)

It is still in the very early stages of development; there is a mostly-working demonstration in SVN, but there is no release, and few developer resources are being spent on it due to time and financial constraints.

If you find this interesting, please contribute!

= Running instructions =

Using an SVN checkout, run the following commands:

{{{
$ axiomatic -d radical.axiom mantissa
$ axiomatic -d radical.axiom start -n
}}}

then point your browser at <http://localhost:8080/>.  Log in as admin@localhost with the password you just specified.  Visit the 'Offerings' page and click the Radical area.  Visit the 'Signup' page and create a signup mechanism with the Radical benefactor.  Then signup for a Radical account using a working email address, follow the link that is emailed to your account, and start playing!
","Update to the new radical workflow",0
671,5,1140916416.94316,exarkun,198.49.126.204,"DivmodRadical is an interactive, 2D, isometric client/server game platform, delivered using nothing but a web browser, written using DivmodMantissa and DivmodAthena.

Seriously.  It actually does that.  You can move your little guy around on the screen, talk, and pick up items (there are even walls!)

It is still in the very early stages of development; there is a mostly-working demonstration in SVN, but there is no release, and few developer resources are being spent on it due to time and financial constraints.

If you find this interesting, please contribute!

= Running instructions =

Using an SVN checkout, run the following commands:

{{{
$ axiomatic -d radical.axiom mantissa
$ axiomatic -d radical.axiom start -n
}}}

then point your browser at <http://localhost:8080/>.  Log in as admin@localhost with the password you just specified.  Visit the 'Offerings' page and click the Radical area.  Visit the 'Signup' page and create a signup mechanism with the Radical benefactor.  Then signup for a Radical account using a working email address, follow the link that is emailed to your account, and start playing!
",',0
672,6,1140916456.36486,exarkun,198.49.126.204,"DivmodRadical is an interactive, 2D, isometric client/server game platform, delivered using nothing but a web browser, written using DivmodMantissa and [wiki:DivmodNevow/Athena Athena].

Seriously.  It actually does that.  You can move your little guy around on the screen, talk, and pick up items (there are even walls!)

It is still in the very early stages of development; there is a mostly-working demonstration in SVN, but there is no release, and few developer resources are being spent on it due to time and financial constraints.

If you find this interesting, please contribute!

= Running instructions =

Using an SVN checkout, run the following commands:

{{{
$ axiomatic -d radical.axiom mantissa
$ axiomatic -d radical.axiom start -n
}}}

then point your browser at <http://localhost:8080/>.  Log in as admin@localhost with the password you just specified.  Visit the 'Offerings' page and click the Radical area.  Visit the 'Signup' page and create a signup mechanism with the Radical benefactor.  Then signup for a Radical account using a working email address, follow the link that is emailed to your account, and start playing!
",',0
673,1,1140921638.08323,exarkun,198.49.126.204,"== Imagination ==

A simulation core.  Currently very raw.  [browser:trunk/Imaginary/imagination Browse source]

== Pottery ==

Another simulation core.  Attempts to accomplish the same goals as Imagination.  These two will probably merge some day.  [browser:trunk/Imaginary/pottery Browse source]

== Radical ==

See DivmodRadical.

",',0
674,2,1140963974.11194,exarkun,198.49.126.204,"= Imaginary =

Imaginary numbers are so named not because they are fictitious, but because
they are along a different axis from real numbers.

Divmod Imaginary is a simulationist's take on the realm of role playing,
interactive fiction, and multiplayer dungeons.  It incorporates gameplay
features from each area while attempting to provide a richer environment
than is generally available from existing systems.

== Imagination ==

A simulation core.  Currently very raw.  [browser:trunk/Imaginary/imagination Browse source]

== Pottery ==

Another simulation core.  Attempts to accomplish the same goals as Imagination.  These two will probably merge some day.  [browser:trunk/Imaginary/pottery Browse source]

== Radical ==

See DivmodRadical.

",',0
675,1,1141318818.0832,exarkun,198.49.126.204,"Divmod uses code review for just about every change to any project.  The exceptions to this are generally extremely new code which isn't seeing any use yet where the consequences of breaking things are minimal and don't outweigh the cost of developer time required by the review.

Code review is a pretty simple process: at its heart, it is little more than reading some code written by someone else.  Nevertheless, it can be useful to have a set of things on which to focus during a review:

  * Are there unit tests for the code being changed or added?
  * Do the unit tests pass for you?
  * Do the unit tests pass for buildbot?
  * Is there documentation for new code?
  * Where appropriate, has existing documentation been updated?
  * Does the code adhere to the coding style?

There's the easy list.  Most are mechanical checks.  Don't feel bad about rejecting a branch if the answer to any of these questions is no: the problems may seem minor in isolation, but each contributes to overall poor code quality.  Moreover, sometimes apparently minor problems can be hiding larger issues.

Taking a look at the bigger picture can be a little bit harder, but it's just as important.
","Initial list of mostly easy things to look for during a review",0
676,2,1141325820.47445,exarkun,198.49.126.204,"Divmod uses code review for just about every change to any project.  The exceptions to this are generally extremely new code which isn't seeing any use yet where the consequences of breaking things are minimal and don't outweigh the cost of developer time required by the review.

Code review is a pretty simple process: at its heart, it is little more than reading some code written by someone else.  Nevertheless, it can be useful to have a set of things on which to focus during a review:

  * Does the branch merge or the diff apply cleanly?
  * Are there unit tests for the code being changed or added?
  * Do the unit tests pass for you?
  * Do the unit tests pass for buildbot?
  * Is there documentation for new code?
  * Where appropriate, has existing documentation been updated?
  * Does the code adhere to the coding style?

There's the easy list.  Most are mechanical checks.  Don't feel bad about rejecting a branch if the answer to any of these questions is no: the problems may seem minor in isolation, but each contributes to overall poor code quality.  Moreover, sometimes apparently minor problems can be hiding larger issues.

Taking a look at the bigger picture can be a little bit harder, but it's just as important.
",',0
677,20,1141450266.05754,moonfallen,198.49.126.204,,,
678,18,1141742787.5418,indigo,198.49.126.204,,,
679,19,1141766890.6519,beau,198.49.126.204,"=== People Using Divmod Software ===
 * [http://pixoh.com/ Pixoh] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + !CherryPy
 * [http://projects.adytum.us/tracs/PyMonitor/wiki/PyMonScreenShots pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodAthena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].",',0
680,13,1142078700.37551,karlb,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the AxiomProject object database, and the TwistedFramework, as well as web user-interface utilities.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicle), and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.4.1.tar.gz?format=raw Get the most recent release - 0.4.1!] ([http://www.livejournal.com/users/jcalderone/18622.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
 * [wiki:MantissaHowTo An example of how to build a Mantissa application]","added exarkuns Axiom/Mantissa Tutorial under 'See Also'",0
681,1,1142490711.92465,ironfroggy,198.49.126.204,"[http://www.microsoft.com/technet/scriptcenter/hubs/msh.mspx Monad (or MSH)] is a new command shell being designed by Microsoft as a replacement for the aging cmd.exe shell. This page is about how to use [wiki:DivmodCombinator Combinator] with MSH to do your development. It may also include some other, general windows development tips for setting up your build enviroment.

= Configuring Your Environment =

One thing you'll need to do is open up your filewall. I was able to do this by adding python.exe to my list of exceptions on the Firewall, but I do wonder if there is a better, more precise way to do this. If anyone has an idea, let me know please. Of course, you can try not using any firewall at all, but I don't recommend that.

By default, MSH will not run any scripts. This is a security measure, and there are several policies it can follow in this reguard. [http://thelazyadmin.com/index.php?/archives/351-MSH-Profiles.html This] page tells you the details of how to configure the Execution Policy, but I'll give you the command that will just make things run. Remember, though, this method lets all scripts run and you may want to look into signing them, so that only trusted scripts are allowed to be run.


{{{
set-property HKLM:\SOFTWARE\Microsoft\Msh\1\ShellIds\Microsoft.Management.Automation.msh -property ExecutionPolicy -value Unrestricted
}}}

= Dependancies =

We'll want to find as many prebuild Windows packages as possible, so I'll try to link to all of them here. If I missed any, please let me know.

 * PySQLite2
   * [http://initd.org/pub/software/pysqlite/releases/2.1/2.1.3/pysqlite-2.1.3.win32-py2.4.exe pySQLite2 2.1.3 Windows Installer for Python 2.4]
   * [http://initd.org/pub/software/pysqlite/releases/2.1/2.1.3/pysqlite-2.1.3.win32-py2.3.exe for Python 2.4]
 * PyOpenSSL and OpenSSL
   * [http://webcleaner.sourceforge.net/pyOpenSSL-0.6.win32-py2.4.exe pyOpenSSL 0.6 for Python 2.4]
   * [http://www.slproweb.com/products/Win32OpenSSL.html OpenSSL Windows Installer is available here]
 * [http://pytz.souravaceforge.net/ PyTZ] is available [http://sourceforge.net/project/showfiles.php?group_id=79122&package_id=80455 here]
 * [http://www.python.org/windows/win32/ Win32 Extensions] are needed. You can get them [http://sourceforge.net/project/showfiles.php?group_id=78018 here].

WORKING ON THE REST OF THIS",',0
682,2,1142491379.6188,ironfroggy,198.49.126.204,"[http://www.microsoft.com/technet/scriptcenter/hubs/msh.mspx Monad (or MSH)] is a new command shell being designed by Microsoft as a replacement for the aging cmd.exe shell. This page is about how to use [wiki:DivmodCombinator Combinator] with MSH to do your development. It may also include some other, general windows development tips for setting up your build enviroment.

= Configuring Your Environment =

One thing you'll need to do is open up your filewall. I was able to do this by adding python.exe to my list of exceptions on the Firewall, but I do wonder if there is a better, more precise way to do this. If anyone has an idea, let me know please. Of course, you can try not using any firewall at all, but I don't recommend that.

By default, MSH will not run any scripts. This is a security measure, and there are several policies it can follow in this reguard. [http://thelazyadmin.com/index.php?/archives/351-MSH-Profiles.html This] page tells you the details of how to configure the Execution Policy, but I'll give you the command that will just make things run. Remember, though, this method lets all scripts run and you may want to look into signing them, so that only trusted scripts are allowed to be run.


{{{
set-property HKLM:\SOFTWARE\Microsoft\Msh\1\ShellIds\Microsoft.Management.Automation.msh -property ExecutionPolicy -value Unrestricted
}}}

= Dependancies =

We'll want to find as many prebuild Windows packages as possible, so I'll try to link to all of them here. If I missed any, please let me know.

 * PySQLite2
   * [http://initd.org/pub/software/pysqlite/releases/2.1/2.1.3/pysqlite-2.1.3.win32-py2.4.exe pySQLite2 2.1.3 Windows Installer for Python 2.4]
   * [http://initd.org/pub/software/pysqlite/releases/2.1/2.1.3/pysqlite-2.1.3.win32-py2.3.exe for Python 2.4]
 * PyOpenSSL and OpenSSL
   * [http://webcleaner.sourceforge.net/pyOpenSSL-0.6.win32-py2.4.exe pyOpenSSL 0.6 for Python 2.4]
   * [http://www.slproweb.com/products/Win32OpenSSL.html OpenSSL Windows Installer is available here]
 * [http://pytz.souravaceforge.net/ PyTZ] is available [http://sourceforge.net/project/showfiles.php?group_id=79122&package_id=80455 here]
 * [http://www.python.org/windows/win32/ Win32 Extensions] are needed. You can get them [http://sourceforge.net/project/showfiles.php?group_id=78018 here].
 * [http://www.pythonware.com/products/pil/ Pil] can be downloaded from its website.

WORKING ON THE REST OF THIS",',0
683,3,1142566781.96441,exarkun,198.49.126.204,"Divmod uses code review for just about every change to any project.  The exceptions to this are generally extremely new code which isn't seeing any use yet where the consequences of breaking things are minimal and don't outweigh the cost of developer time required by the review.

Code review is a pretty simple process: at its heart, it is little more than reading some code written by someone else.  Nevertheless, it can be useful to have a set of things on which to focus during a review:

  * Does the branch merge or the diff apply cleanly?
  * Are there unit tests for the code being changed or added?
  * Do the unit tests pass for you?
  * Do the unit tests pass for buildbot?
  * Is there documentation for new code?
  * Where appropriate, has existing documentation been updated (including ChangeLog/NEWS files)?
  * Does the code adhere to the coding style?

There's the easy list.  Most are mechanical checks.  Don't feel bad about rejecting a branch if the answer to any of these questions is no: the problems may seem minor in isolation, but each contributes to overall poor code quality.  Moreover, sometimes apparently minor problems can be hiding larger issues.

Taking a look at the bigger picture can be a little bit harder, but it's just as important.
",',0
684,20,1142610398.97086,ironfroggy,198.49.126.204,"=== People Using Divmod Software ===
 * [http://pixoh.com/ Pixoh] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + !CherryPy
 * [http://projects.adytum.us/tracs/PyMonitor/wiki/PyMonScreenShots pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodAthena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.mmoupdate.com/ MMOUpdate] uses Mantissa (still in production)",',0
685,14,1142708981.22095,karlb,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the AxiomProject object database, and the TwistedFramework, as well as web user-interface utilities.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicle), and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.4.1.tar.gz?format=raw Get the most recent release - 0.4.1!] ([http://www.livejournal.com/users/jcalderone/18622.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
 * [wiki:MantissaHowTo An example of how to build a Mantissa application]
 * [wiki:MantissaWikiTutorial Mantissa Wiki Tutorial]",',0
686,1,1142709216.49317,karlb,198.49.126.204,"== Part 1: Creating an Offering and Running it in a Mantissa Server ==

=== Create Project Skeletion ===
axiomatic project -n wiki

=== Set up Database and Mantissa Server ===
cd Wiki
axiomatic -d wikitut.axiom mantissa

=== Add a public page ===
The project skeleton's start page is designed to be viewed only by users who have a login for our mantissa server. We don't want to deal with the login system in this tutorial, so let's change the !WikiStart object to a !PublicPage in wiki/wiki_model.py.
 * Change ixmantissa.IPublicPage both in the 'implements' call and in the 'installOn' method
 * Remove the 'getTabs' and 'explode' methods and the registerAdapter line below the class
 * add the following method:
{{{
	def getResource(self):
	    return WikiView(self)
}}}

Because WikiStart is defined as powerup in our Offering(xmantissa/wikioff.py), an instance of this class will be added to our application store, when our app is added to the mantissa server.


=== Add Project to Mantissa Server ===
axiomatic -d wikitut.axiom start -n
Go to http://localhost:8080 and log in as admin
Navigate to Home->Offerings and click on the 'Wiki' offering to install it. If you can't see an offering named 'Wiki', your probably need to get your project dir onto your PYTHONPATH.
From now on our !WikiStart object can be viewed publicly at http://localhost:8080/Wiki. Unfortunately, we haven't written a nice view for our object, yet. This makes the Mantissa server display a nice backtrace.

to be continued...",',0
687,2,1142709429.39372,karlb,198.49.126.204,"== Part 1: Creating an Offering and Running it in a Mantissa Server ==

=== Create Project Skeletion ===
{{{
$axiomatic project -n wiki
}}}

=== Set up Database and Mantissa Server ===
{{{
$cd Wiki
$axiomatic -d wikitut.axiom mantissa
}}}

=== Add a public page ===
The project skeleton's start page is designed to be viewed only by users who have a login for our mantissa server. We don't want to deal with the login system in this tutorial, so let's change the !WikiStart object to a !PublicPage in wiki/wiki_model.py.
 * Change ixmantissa.IPublicPage both in the 'implements' call and in the 'installOn' method
 * Remove the 'getTabs' and 'explode' methods and the registerAdapter line below the class
 * add the following method:
{{{
	def getResource(self):
	    return WikiView(self)
}}}

Because WikiStart is defined as powerup in our Offering(xmantissa/wikioff.py), an instance of this class will be added to our application store, when our app is added to the mantissa server.


=== Add Project to Mantissa Server ===
 * Run the mantissa server
{{{
axiomatic -d wikitut.axiom start -n
}}}
 * Go to http://localhost:8080 and log in as admin
 * Navigate to Home->Offerings and click on the 'Wiki' offering to install it. If you can't see an offering named 'Wiki', your probably need to get your project dir onto your PYTHONPATH.

From now on our !WikiStart object can be viewed publicly at http://localhost:8080/Wiki. Unfortunately, we haven't written a nice view for our object, yet. This makes the Mantissa server display a nice backtrace.

to be continued...",',0
688,3,1142710234.76095,karlb,198.49.126.204,"== Part 1: Creating an Offering and Running it in a Mantissa Server ==

=== Create Project Skeletion ===
{{{
$axiomatic project -n wiki
}}}

=== Set up Database and Mantissa Server ===
{{{
$cd Wiki
$axiomatic -d wikitut.axiom mantissa
}}}

=== Add a public page ===
The project skeleton's start page is designed to be viewed only by users who have a login for our mantissa server. We don't want to deal with the login system in this tutorial, so let's change the !WikiStart object to a !PublicPage in wiki/wiki_model.py.
 * Change ixmantissa.IPublicPage both in the 'implements' call and in the 'installOn' method
 * Remove the 'getTabs' and 'explode' methods and the registerAdapter line below the class
 * add the following method:
{{{
	def getResource(self):
	    return WikiView(self)
}}}

Because WikiStart is defined as powerup in our Offering(xmantissa/wikioff.py), an instance of this class will be added to our application store, when our app is added to the mantissa server.


=== Add Project to Mantissa Server ===
 * Run the mantissa server
{{{
axiomatic -d wikitut.axiom start -n
}}}
 * Go to http://localhost:8080 and log in as admin
 * Navigate to Home->Offerings and click on the 'Wiki' offering to install it. If you can't see an offering named 'Wiki', your probably need to get your project dir onto your PYTHONPATH.

From now on our !WikiStart object can be viewed publicly at http://localhost:8080/Wiki. Unfortunately, we haven't written a nice view for our object, yet. This makes the Mantissa server display a nice backtrace.

== Part 2: Adding a View using a Template ==

=== Add a View ===
Replace your WikiView in wiki/wiki_view.py with
{{{
from nevow import loaders
from nevow.rend import Page

class WikiView(Page):

    docFactory = loaders.xmlfile('wiki/themes/base/wiki-start.html')

    def __init__(self, original):
        Page.__init__(self)
        self.original = original

    def customizeFor(self, avatar):
        return self

    def render_page(self, context, date):
        return 'test'
}}}
Now you can view the rendered version of the wiki/themes/base/wiki-start.html template when you visit http://localhost:8080/Wiki. Well, at least if you restart your mantissa server, so that it can have a look at the changed python files.

=== Write a useful Template ===
Replace wiki-start.html with a template which let's our view do something. For instance
{{{
<html xmlns='http://www.w3.org/1999/xhtml'
     xmlns:nevow='http://nevow.com/ns/nevow/0.1'>
	<body>
	    Welcome to the Wiki Application
		<hr/>
		<nevow:invisible nevow:render='page' />	
	</body>
</html>
}}}
This template call out view's render_page function. Currently, it only returns 'test', but that will change soon.

to be continued...",',0
689,4,1142710411.80549,karlb,198.49.126.204,"= Mantissa Wiki Tutorial =

Send comments to: Karl Bartel <karlb@gmx.net>

== Part 1: Creating an Offering and Running it in a Mantissa Server ==

=== Create Project Skeletion ===
{{{
$axiomatic project -n wiki
}}}

=== Set up Database and Mantissa Server ===
{{{
$cd Wiki
$axiomatic -d wikitut.axiom mantissa
}}}

=== Add a public page ===
The project skeleton's start page is designed to be viewed only by users who have a login for our mantissa server. We don't want to deal with the login system in this tutorial, so let's change the !WikiStart object to a !PublicPage in wiki/wiki_model.py.
 * Change ixmantissa.IPublicPage both in the 'implements' call and in the 'installOn' method
 * Remove the 'getTabs' and 'explode' methods and the registerAdapter line below the class
 * add the following method:
{{{
	def getResource(self):
	    return WikiView(self)
}}}

Because WikiStart is defined as powerup in our Offering(xmantissa/wikioff.py), an instance of this class will be added to our application store, when our app is added to the mantissa server.


=== Add Project to Mantissa Server ===
 * Run the mantissa server
{{{
axiomatic -d wikitut.axiom start -n
}}}
 * Go to http://localhost:8080 and log in as admin
 * Navigate to Home->Offerings and click on the 'Wiki' offering to install it. If you can't see an offering named 'Wiki', your probably need to get your project dir onto your PYTHONPATH.

From now on our !WikiStart object can be viewed publicly at http://localhost:8080/Wiki. Unfortunately, we haven't written a nice view for our object, yet. This makes the Mantissa server display a nice backtrace.

== Part 2: Adding a View using a Template ==

=== Add a View ===
Replace your WikiView in wiki/wiki_view.py with
{{{
from nevow import loaders
from nevow.rend import Page

class WikiView(Page):

    docFactory = loaders.xmlfile('wiki/themes/base/wiki-start.html')

    def __init__(self, original):
        Page.__init__(self)
        self.original = original

    def customizeFor(self, avatar):
        return self

    def render_page(self, context, date):
        return 'test'
}}}
Now you can view the rendered version of the wiki/themes/base/wiki-start.html template when you visit http://localhost:8080/Wiki. Well, at least if you restart your mantissa server, so that it can have a look at the changed python files.

=== Write a useful Template ===
Replace wiki-start.html with a template which let's our view do something. For instance
{{{
<html xmlns='http://www.w3.org/1999/xhtml'
     xmlns:nevow='http://nevow.com/ns/nevow/0.1'>
	<body>
	    Welcome to the Wiki Application
		<hr/>
		<nevow:invisible nevow:render='page' />	
	</body>
</html>
}}}
This template call out view's render_page function. Currently, it only returns 'test', but that will change soon.

to be continued...",',0
690,5,1142710908.03944,karlb,198.49.126.204,"= Mantissa Wiki Tutorial =

Send comments to: Karl Bartel <karlb@gmx.net>

== Part 1: Creating an Offering and Running it in a Mantissa Server ==

=== Create Project Skeletion ===
{{{
$axiomatic project -n wiki
}}}

=== Set up Database and Mantissa Server ===
{{{
$cd Wiki
$axiomatic -d wikitut.axiom mantissa
}}}

=== Add a public page ===
The project skeleton's start page is designed to be viewed only by users who have a login for our mantissa server. We don't want to deal with the login system in this tutorial, so let's change the !WikiStart object to a !PublicPage in wiki/wiki_model.py.
 * Change ixmantissa.IPublicPage both in the 'implements' call and in the 'installOn' method
 * Remove the 'getTabs' and 'explode' methods and the registerAdapter line below the class
 * add the following method:
{{{
	def getResource(self):
	    return WikiView(self)
}}}

Because WikiStart is defined as powerup in our Offering(xmantissa/wikioff.py), an instance of this class will be added to our application store, when our app is added to the mantissa server.


=== Add Project to Mantissa Server ===
 * Run the mantissa server
{{{
axiomatic -d wikitut.axiom start -n
}}}
 * Go to http://localhost:8080 and log in as admin
 * Navigate to Home->Offerings and click on the 'Wiki' offering to install it. If you can't see an offering named 'Wiki', your probably need to get your project dir onto your PYTHONPATH.

From now on our !WikiStart object can be viewed publicly at http://localhost:8080/Wiki. Unfortunately, we haven't written a nice view for our object, yet. This makes the Mantissa server display a nice backtrace.

== Part 2: Adding a View using a Template ==

=== Add a View ===
Replace your WikiView in wiki/wiki_view.py with
{{{
from nevow import loaders
from nevow.rend import Page

class WikiView(Page):

    docFactory = loaders.xmlfile('wiki/themes/base/wiki-start.html')

    def __init__(self, original):
        Page.__init__(self)
        self.original = original

    def customizeFor(self, avatar):
        return self

    def render_page(self, context, date):
        return 'test'
}}}
Now you can view the rendered version of the wiki/themes/base/wiki-start.html template when you visit http://localhost:8080/Wiki. Well, at least if you restart your mantissa server, so that it can have a look at the changed python files.

=== Write a useful Template ===
Replace wiki-start.html with a template which let's our view do something. For instance
{{{
<html xmlns='http://www.w3.org/1999/xhtml'
     xmlns:nevow='http://nevow.com/ns/nevow/0.1'>
	<body>
	    Welcome to the Wiki Application
		<hr/>
		<nevow:invisible nevow:render='page' />	
	</body>
</html>
}}}
This template call out view's render_page function. Currently, it only returns 'test', but that will change soon.

to be continued...

== Part 3: Storing and Retrieving Wiki Pages==

=== Create a New Item Subclass ===
Add this to your wiki_model.py
{{{
class WikiPage(Item):
    implements(ixmantissa.INavigableElement)

    schemaVersion = 1            # First version of this object.
    typeName = 'wiki_page'       # Database table name.

    page_name = text()
    page_content = text()
    
registerAdapter(WikiPageView, WikiPage, ixmantissa.INavigableFragment)
}}}

=== Changing our Application Store from the Python Shell ===
{{{
>>> from axiom.store import Store
>>> s = Store('wiki.axiom/files/app/Wiki.axiom')
>>> from wiki.wiki_model import WikiPage 
}}}",',0
691,6,1142711364.91136,karlb,198.49.126.204,"= Mantissa Wiki Tutorial =

Send comments to: Karl Bartel <karlb@gmx.net>

== Part 1: Creating an Offering and Running it in a Mantissa Server ==

=== Create Project Skeletion ===
{{{
$axiomatic project -n wiki
}}}

=== Set up Database and Mantissa Server ===
{{{
$cd Wiki
$axiomatic -d wikitut.axiom mantissa
}}}

=== Add a public page ===
The project skeleton's start page is designed to be viewed only by users who have a login for our mantissa server. We don't want to deal with the login system in this tutorial, so let's change the !WikiStart object to a !PublicPage in wiki/wiki_model.py.
 * Change ixmantissa.IPublicPage both in the 'implements' call and in the 'installOn' method
 * Remove the 'getTabs' and 'explode' methods and the registerAdapter line below the class
 * add the following method:
{{{
	def getResource(self):
	    return WikiView(self)
}}}

Because WikiStart is defined as powerup in our Offering(xmantissa/wikioff.py), an instance of this class will be added to our application store, when our app is added to the mantissa server.


=== Add Project to Mantissa Server ===
 * Run the mantissa server
{{{
axiomatic -d wikitut.axiom start -n
}}}
 * Go to http://localhost:8080 and log in as admin
 * Navigate to Home->Offerings and click on the 'Wiki' offering to install it. If you can't see an offering named 'Wiki', your probably need to get your project dir onto your PYTHONPATH.

From now on our !WikiStart object can be viewed publicly at http://localhost:8080/Wiki. Unfortunately, we haven't written a nice view for our object, yet. This makes the Mantissa server display a nice backtrace.

== Part 2: Adding a View using a Template ==

=== Add a View ===
Replace your WikiView in wiki/wiki_view.py with
{{{
from nevow import loaders
from nevow.rend import Page

class WikiView(Page):

    docFactory = loaders.xmlfile('wiki/themes/base/wiki-start.html')

    def __init__(self, original):
        Page.__init__(self)
        self.original = original

    def customizeFor(self, avatar):
        return self

    def render_page(self, context, date):
        return 'test'
}}}
Now you can view the rendered version of the wiki/themes/base/wiki-start.html template when you visit http://localhost:8080/Wiki. Well, at least if you restart your mantissa server, so that it can have a look at the changed python files.

=== Write a useful Template ===
Replace wiki-start.html with a template which let's our view do something. For instance
{{{
<html xmlns='http://www.w3.org/1999/xhtml'
     xmlns:nevow='http://nevow.com/ns/nevow/0.1'>
	<body>
	    Welcome to the Wiki Application
		<hr/>
		<nevow:invisible nevow:render='page' />	
	</body>
</html>
}}}
This template call out view's render_page function. Currently, it only returns 'test', but that will change soon.

to be continued...

== Part 3: Storing and Retrieving Wiki Pages==

=== Create a New Item Subclass ===
Add this to your wiki_model.py
{{{
class WikiPage(Item):
    implements(ixmantissa.INavigableElement)

    schemaVersion = 1            # First version of this object.
    typeName = 'wiki_page'       # Database table name.

    page_name = text()
    page_content = text()
}}}

=== Change our Application Store from the Python Shell ===
 * Open application store and do some imports
{{{
>>> from axiom.store import Store
>>> s = Store('wiki.axiom/files/app/Wiki.axiom')
>>> from wiki.wiki_model import WikiPage 
}}}
 * Create !FrontPage and !PageTemplate
{{{
>>> WikiPage(store = s, page_name=u'FrontPage', page_content=u'This is the FrontPage.\nMantissa is *cool*. There might also be OtherPages and MoreStuff.')
>>> WikiPage(store = s, page_name=u'PageTemplate', page_content=u'This page does not exist, yet. Use the edit link below to create it.')
}}}",',0
692,7,1142711430.44465,karlb,198.49.126.204,"= Mantissa Wiki Tutorial =

Send comments to: Karl Bartel <karlb@gmx.net>

== Part 1: Creating an Offering and Running it in a Mantissa Server ==

=== Create Project Skeletion ===
{{{
$axiomatic project -n wiki
}}}

=== Set up Database and Mantissa Server ===
{{{
$cd Wiki
$axiomatic -d wikitut.axiom mantissa
}}}

=== Add a public page ===
The project skeleton's start page is designed to be viewed only by users who have a login for our mantissa server. We don't want to deal with the login system in this tutorial, so let's change the !WikiStart object to a !PublicPage in wiki/wiki_model.py.
 * Change ixmantissa.IPublicPage both in the 'implements' call and in the 'installOn' method
 * Remove the 'getTabs' and 'explode' methods and the registerAdapter line below the class
 * add the following method:
{{{
	def getResource(self):
	    return WikiView(self)
}}}

Because WikiStart is defined as powerup in our Offering(xmantissa/wikioff.py), an instance of this class will be added to our application store, when our app is added to the mantissa server.


=== Add Project to Mantissa Server ===
 * Run the mantissa server
{{{
axiomatic -d wikitut.axiom start -n
}}}
 * Go to http://localhost:8080 and log in as admin
 * Navigate to Home->Offerings and click on the 'Wiki' offering to install it. If you can't see an offering named 'Wiki', your probably need to get your project dir onto your PYTHONPATH.

From now on our !WikiStart object can be viewed publicly at http://localhost:8080/Wiki. Unfortunately, we haven't written a nice view for our object, yet. This makes the Mantissa server display a nice backtrace.

== Part 2: Adding a View using a Template ==

=== Add a View ===
Replace your WikiView in wiki/wiki_view.py with
{{{
from nevow import loaders
from nevow.rend import Page

class WikiView(Page):

    docFactory = loaders.xmlfile('wiki/themes/base/wiki-start.html')

    def __init__(self, original):
        Page.__init__(self)
        self.original = original

    def customizeFor(self, avatar):
        return self

    def render_page(self, context, date):
        return 'test'
}}}
Now you can view the rendered version of the wiki/themes/base/wiki-start.html template when you visit http://localhost:8080/Wiki. Well, at least if you restart your mantissa server, so that it can have a look at the changed python files.

=== Write a useful Template ===
Replace wiki-start.html with a template which let's our view do something. For instance
{{{
<html xmlns='http://www.w3.org/1999/xhtml'
     xmlns:nevow='http://nevow.com/ns/nevow/0.1'>
	<body>
	    Welcome to the Wiki Application
		<hr/>
		<nevow:invisible nevow:render='page' />	
	</body>
</html>
}}}
This template call out view's render_page function. Currently, it only returns 'test', but that will change soon.

== Part 3: Storing and Retrieving Wiki Pages==

=== Create a New Item Subclass ===
Add this to your wiki_model.py
{{{
class WikiPage(Item):
    implements(ixmantissa.INavigableElement)

    schemaVersion = 1            # First version of this object.
    typeName = 'wiki_page'       # Database table name.

    page_name = text()
    page_content = text()
}}}

=== Change our Application Store from the Python Shell ===
 * Open application store and do some imports
{{{
>>> from axiom.store import Store
>>> s = Store('wiki.axiom/files/app/Wiki.axiom')
>>> from wiki.wiki_model import WikiPage 
}}}
 * Create !FrontPage and !PageTemplate
{{{
>>> WikiPage(store = s, page_name=u'FrontPage', page_content=u'This is the FrontPage.\nMantissa is *cool*. There might also be OtherPages and MoreStuff.')
>>> WikiPage(store = s, page_name=u'PageTemplate', page_content=u'This page does not exist, yet. Use the edit link below to create it.')
}}}


to be continued...
",',0
693,8,1142711648.3979,karlb,198.49.126.204,"= Mantissa Wiki Tutorial =

Send comments to: Karl Bartel <karlb@gmx.net>

== Part 1: Creating an Offering and Running it in a Mantissa Server ==

=== Create Project Skeletion ===
{{{
$axiomatic project -n wiki
}}}

=== Set up Database and Mantissa Server ===
{{{
$cd Wiki
$axiomatic -d wikitut.axiom mantissa
}}}

=== Add a public page ===
The project skeleton's start page is designed to be viewed only by users who have a login for our mantissa server. We don't want to deal with the login system in this tutorial, so let's change the !WikiStart object to a !PublicPage in wiki/wiki_model.py.
 * Change ixmantissa.IPublicPage both in the 'implements' call and in the 'installOn' method
 * Remove the 'getTabs' and 'explode' methods and the registerAdapter line below the class
 * add the following method:
{{{
	def getResource(self):
	    return WikiView(self)
}}}

Because WikiStart is defined as powerup in our Offering(xmantissa/wikioff.py), an instance of this class will be added to our application store, when our app is added to the mantissa server.


=== Add Project to Mantissa Server ===
 * Run the mantissa server
{{{
$axiomatic -d wikitut.axiom start -n
}}}
 * Go to http://localhost:8080 and log in as admin
 * Navigate to Home->Offerings and click on the 'Wiki' offering to install it. If you can't see an offering named 'Wiki', your probably need to get your project dir onto your PYTHONPATH.

From now on our !WikiStart object can be viewed publicly at http://localhost:8080/Wiki. Unfortunately, we haven't written a nice view for our object, yet. This makes the Mantissa server display a nice backtrace.

== Part 2: Adding a View using a Template ==

=== Add a View ===
Replace your WikiView in wiki/wiki_view.py with
{{{
from nevow import loaders
from nevow.rend import Page

class WikiView(Page):

    docFactory = loaders.xmlfile('wiki/themes/base/wiki-start.html')

    def __init__(self, original):
        Page.__init__(self)
        self.original = original

    def customizeFor(self, avatar):
        return self

    def render_page(self, context, date):
        return 'test'
}}}
Now you can view the rendered version of the wiki/themes/base/wiki-start.html template when you visit http://localhost:8080/Wiki. Well, at least if you restart your mantissa server, so that it can have a look at the changed python files.

=== Write a useful Template ===
Replace wiki-start.html with a template which let's our view do something. For instance
{{{
<html xmlns='http://www.w3.org/1999/xhtml'
     xmlns:nevow='http://nevow.com/ns/nevow/0.1'>
	<body>
	    Welcome to the Wiki Application
		<hr/>
		<nevow:invisible nevow:render='page' />	
	</body>
</html>
}}}
This template call out view's render_page function. Currently, it only returns 'test', but that will change soon.

== Part 3: Storing and Retrieving Wiki Pages==

=== Create a New Item Subclass ===
Add this to your wiki_model.py
{{{
class WikiPage(Item):
    implements(ixmantissa.INavigableElement)

    schemaVersion = 1            # First version of this object.
    typeName = 'wiki_page'       # Database table name.

    page_name = text()
    page_content = text()
}}}

=== Change our Application Store from the Python Shell ===
 * Open application store and do some imports
{{{
>>> from axiom.store import Store
>>> s = Store('wiki.axiom/files/app/Wiki.axiom')
>>> from wiki.wiki_model import WikiPage 
}}}
 * Create !FrontPage and !PageTemplate
{{{
>>> WikiPage(store = s, page_name=u'FrontPage', page_content=u'This is the FrontPage.\nMantissa is *cool*. There might also be OtherPages and MoreStuff.')
>>> WikiPage(store = s, page_name=u'PageTemplate', page_content=u'This page does not exist, yet. Use the edit link below to create it.')
}}}

=== Reading Parameters from the URL ===

to be continued...
",',0
694,9,1142711675.14605,karlb,198.49.126.204,"= Mantissa Wiki Tutorial =

Send comments to: Karl Bartel <karlb@gmx.net>

== Part 1: Creating an Offering and Running it in a Mantissa Server ==

=== Create Project Skeletion ===
{{{
$axiomatic project -n wiki
}}}

=== Set up Database and Mantissa Server ===
{{{
$cd Wiki
$axiomatic -d wikitut.axiom mantissa
}}}

=== Add a public page ===
The project skeleton's start page is designed to be viewed only by users who have a login for our mantissa server. We don't want to deal with the login system in this tutorial, so let's change the !WikiStart object to a !PublicPage in wiki/wiki_model.py.
 * Change ixmantissa.IPublicPage both in the 'implements' call and in the 'installOn' method
 * Remove the 'getTabs' and 'explode' methods and the registerAdapter line below the class
 * add the following method:
{{{
	def getResource(self):
	    return WikiView(self)
}}}

Because WikiStart is defined as powerup in our Offering(xmantissa/wikioff.py), an instance of this class will be added to our application store, when our app is added to the mantissa server.


=== Add Project to Mantissa Server ===
 * Run the mantissa server
{{{
$axiomatic -d wikitut.axiom start -n
}}}
 * Go to http://localhost:8080 and log in as admin
 * Navigate to Home->Offerings and click on the 'Wiki' offering to install it. If you can't see an offering named 'Wiki', your probably need to get your project dir onto your PYTHONPATH.

From now on our !WikiStart object can be viewed publicly at http://localhost:8080/Wiki. Unfortunately, we haven't written a nice view for our object, yet. This makes the Mantissa server display a nice backtrace.

== Part 2: Adding a View using a Template ==

=== Add a View ===
Replace your WikiView in wiki/wiki_view.py with
{{{
from nevow import loaders
from nevow.rend import Page

class WikiView(Page):

    docFactory = loaders.xmlfile('wiki/themes/base/wiki-start.html')

    def __init__(self, original):
        Page.__init__(self)
        self.original = original

    def customizeFor(self, avatar):
        return self

    def render_page(self, context, date):
        return 'test'
}}}
Now you can view the rendered version of the wiki/themes/base/wiki-start.html template when you visit http://localhost:8080/Wiki. Well, at least if you restart your mantissa server, so that it can have a look at the changed python files.

=== Write a useful Template ===
Replace wiki-start.html with a template which let's our view do something. For instance
{{{
<html xmlns='http://www.w3.org/1999/xhtml'
     xmlns:nevow='http://nevow.com/ns/nevow/0.1'>
	<body>
	    Welcome to the Wiki Application
		<hr/>
		<nevow:invisible nevow:render='page' />	
	</body>
</html>
}}}
This template call out view's render_page function. Currently, it only returns 'test', but that will change soon.

== Part 3: Storing and Retrieving Wiki Pages ==

=== Create a New Item Subclass ===
Add this to your wiki_model.py
{{{
class WikiPage(Item):
    implements(ixmantissa.INavigableElement)

    schemaVersion = 1            # First version of this object.
    typeName = 'wiki_page'       # Database table name.

    page_name = text()
    page_content = text()
}}}

=== Change our Application Store from the Python Shell ===
 * Open application store and do some imports
{{{
>>> from axiom.store import Store
>>> s = Store('wiki.axiom/files/app/Wiki.axiom')
>>> from wiki.wiki_model import WikiPage 
}}}
 * Create !FrontPage and !PageTemplate
{{{
>>> WikiPage(store = s, page_name=u'FrontPage', page_content=u'This is the FrontPage.\nMantissa is *cool*. There might also be OtherPages and MoreStuff.')
>>> WikiPage(store = s, page_name=u'PageTemplate', page_content=u'This page does not exist, yet. Use the edit link below to create it.')
}}}

=== Reading Parameters from the URL ===

to be continued...
",',0
695,10,1142713099.05578,karlb,198.49.126.204,"= Mantissa Wiki Tutorial =

Send comments to: Karl Bartel <karlb@gmx.net>

== Part 1: Creating an Offering and Running it in a Mantissa Server ==

=== Create Project Skeletion ===
{{{
$axiomatic project -n wiki
}}}

=== Set up Database and Mantissa Server ===
{{{
$cd Wiki
$axiomatic -d wikitut.axiom mantissa
}}}

=== Add a public page ===
The project skeleton's start page is designed to be viewed only by users who have a login for our mantissa server. We don't want to deal with the login system in this tutorial, so let's change the !WikiStart object to a !PublicPage in wiki/wiki_model.py.
 * Change ixmantissa.IPublicPage both in the 'implements' call and in the 'installOn' method
 * Remove the 'getTabs' and 'explode' methods and the registerAdapter line below the class
 * add the following method:
{{{
	def getResource(self):
	    return WikiView(self)
}}}

Because WikiStart is defined as powerup in our Offering(xmantissa/wikioff.py), an instance of this class will be added to our application store, when our app is added to the mantissa server.


=== Add Project to Mantissa Server ===
 * Run the mantissa server
{{{
$axiomatic -d wikitut.axiom start -n
}}}
 * Go to http://localhost:8080 and log in as admin
 * Navigate to Home->Offerings and click on the 'Wiki' offering to install it. If you can't see an offering named 'Wiki', your probably need to get your project dir onto your PYTHONPATH.

From now on our !WikiStart object can be viewed publicly at http://localhost:8080/Wiki. Unfortunately, we haven't written a nice view for our object, yet. This makes the Mantissa server display a nice backtrace.

== Part 2: Adding a View using a Template ==

=== Add a View ===
Replace your WikiView in wiki/wiki_view.py with
{{{
from nevow import loaders
from nevow.rend import Page

class WikiView(Page):

    docFactory = loaders.xmlfile('wiki/themes/base/wiki-start.html')

    def __init__(self, original):
        Page.__init__(self)
        self.original = original

    def customizeFor(self, avatar):
        return self

    def render_page(self, context, date):
        return 'test'
}}}
Now you can view the rendered version of the wiki/themes/base/wiki-start.html template when you visit http://localhost:8080/Wiki. Well, at least if you restart your mantissa server, so that it can have a look at the changed python files.

=== Write a useful Template ===
Replace wiki-start.html with a template which let's our view do something. For instance
{{{
<html xmlns='http://www.w3.org/1999/xhtml'
     xmlns:nevow='http://nevow.com/ns/nevow/0.1'>
	<body>
	    Welcome to the Wiki Application
		<hr/>
		<nevow:invisible nevow:render='page' />	
	</body>
</html>
}}}
This template call out view's render_page function. Currently, it only returns 'test', but that will change soon.

== Part 3: Storing and Retrieving Wiki Pages ==

=== Create a New Item Subclass ===
Add this to your wiki_model.py
{{{
class WikiPage(Item):
    implements(ixmantissa.INavigableElement)

    schemaVersion = 1            # First version of this object.
    typeName = 'wiki_page'       # Database table name.

    page_name = text()
    page_content = text()
}}}

=== Change our Application Store from the Python Shell ===
 * Open application store and do some imports
{{{
>>> from axiom.store import Store
>>> s = Store('wikitut.axiom/files/app/Wiki.axiom')
>>> from wiki.wiki_model import WikiPage 
}}}
 * Create !FrontPage and !PageTemplate
{{{
>>> WikiPage(store = s, page_name=u'FrontPage', page_content=u'This is the FrontPage.\nMantissa is *cool*. There might also be OtherPages and MoreStuff.')
>>> WikiPage(store = s, page_name=u'PageTemplate', page_content=u'This page does not exist, yet. Use the edit link below to create it.')
}}}

=== Retrieve a Wiki Page and Display its Content ===
Replace the render_page method of our !WikiStart class with somthing more advanced:
{{{
        from wiki.wiki_model import WikiPage
        args = inevow.IRequest(context).args
        page_name = unicode(args.get('page', ['FrontPage'])[0])
        page = self.original.store.findFirst(WikiPage, WikiPage.page_name==page_name)
        
        return page.page_content
}}}
For this you'll need to import inevow from nevow

to be continued...
",',0
696,11,1142713155.92856,karlb,198.49.126.204,"= Mantissa Wiki Tutorial =

Send comments to: Karl Bartel <karlb@gmx.net>

== Part 1: Creating an Offering and Running it in a Mantissa Server ==

=== Create Project Skeletion ===
{{{
$axiomatic project -n wiki
}}}

=== Set up Database and Mantissa Server ===
{{{
$cd Wiki
$axiomatic -d wikitut.axiom mantissa
}}}

=== Add a public page ===
The project skeleton's start page is designed to be viewed only by users who have a login for our mantissa server. We don't want to deal with the login system in this tutorial, so let's change the !WikiStart object to a !PublicPage in wiki/wiki_model.py.
 * Change ixmantissa.IPublicPage both in the 'implements' call and in the 'installOn' method
 * Remove the 'getTabs' and 'explode' methods and the registerAdapter line below the class
 * add the following method:
{{{
	def getResource(self):
	    return WikiView(self)
}}}

Because WikiStart is defined as powerup in our Offering(xmantissa/wikioff.py), an instance of this class will be added to our application store, when our app is added to the mantissa server.


=== Add Project to Mantissa Server ===
 * Run the mantissa server
{{{
$axiomatic -d wikitut.axiom start -n
}}}
 * Go to http://localhost:8080 and log in as admin
 * Navigate to Home->Offerings and click on the 'Wiki' offering to install it. If you can't see an offering named 'Wiki', your probably need to get your project dir onto your PYTHONPATH.

From now on our !WikiStart object can be viewed publicly at http://localhost:8080/Wiki. Unfortunately, we haven't written a nice view for our object, yet. This makes the Mantissa server display a nice backtrace.

== Part 2: Adding a View using a Template ==

=== Add a View ===
Replace your WikiView in wiki/wiki_view.py with
{{{
from nevow import loaders
from nevow.rend import Page

class WikiView(Page):

    docFactory = loaders.xmlfile('wiki/themes/base/wiki-start.html')

    def __init__(self, original):
        Page.__init__(self)
        self.original = original

    def customizeFor(self, avatar):
        return self

    def render_page(self, context, date):
        return 'test'
}}}
Now you can view the rendered version of the wiki/themes/base/wiki-start.html template when you visit http://localhost:8080/Wiki. Well, at least if you restart your mantissa server, so that it can have a look at the changed python files.

=== Write a useful Template ===
Replace wiki-start.html with a template which let's our view do something. For instance
{{{
<html xmlns='http://www.w3.org/1999/xhtml'
     xmlns:nevow='http://nevow.com/ns/nevow/0.1'>
	<body>
	    Welcome to the Wiki Application
		<hr/>
		<nevow:invisible nevow:render='page' />	
	</body>
</html>
}}}
This template call out view's render_page function. Currently, it only returns 'test', but that will change soon.

== Part 3: Storing and Retrieving Wiki Pages ==

=== Create a New Item Subclass ===
Add this to your wiki_model.py
{{{
class WikiPage(Item):
    implements(ixmantissa.INavigableElement)

    schemaVersion = 1            # First version of this object.
    typeName = 'wiki_page'       # Database table name.

    page_name = text()
    page_content = text()
}}}

=== Change our Application Store from the Python Shell ===
 * Open application store and do some imports
{{{
>>> from axiom.store import Store
>>> s = Store('wikitut.axiom/files/app/Wiki.axiom')
>>> from wiki.wiki_model import WikiPage 
}}}
 * Create !FrontPage and !PageTemplate
{{{
>>> WikiPage(store = s, page_name=u'FrontPage', page_content=u'This is the FrontPage.\nMantissa is *cool*. There might also be OtherPages and MoreStuff.')
>>> WikiPage(store = s, page_name=u'PageTemplate', page_content=u'This page does not exist, yet. Use the edit link below to create it.')
}}}

=== Retrieve a Wiki Page and Display its Content ===
Replace the render_page method of our !WikiStart class with somthing more advanced:
{{{
        from wiki.wiki_model import WikiPage
        args = inevow.IRequest(context).args
        page_name = unicode(args.get('page', ['FrontPage'])[0])
        page = self.original.store.findFirst(WikiPage, WikiPage.page_name==page_name)
        
        return page.page_content
}}}
For this you'll need to import inevow from nevow. Now have a look at our application again.

== Part 4: More Stuff ==

to be continued...
",',0
697,12,1142720092.09539,karlb,198.49.126.204,"= Mantissa Wiki Tutorial =

Send comments to: Karl Bartel <karlb@gmx.net>

== Part 1: Creating an Offering and Running it in a Mantissa Server ==

=== Create Project Skeletion ===
{{{
$axiomatic project -n wiki
}}}

=== Set up Database and Mantissa Server ===
{{{
$cd Wiki
$axiomatic -d wikitut.axiom mantissa
}}}

=== Add a public page ===
The project skeleton's start page is designed to be viewed only by users who have a login for our mantissa server. We don't want to deal with the login system in this tutorial, so let's change the !WikiStart object to a !PublicPage in wiki/wiki_model.py.
 * Change ixmantissa.IPublicPage both in the 'implements' call and in the 'installOn' method
 * Remove the 'getTabs' and 'explode' methods and the registerAdapter line below the class
 * add the following method:
{{{
	def getResource(self):
	    return WikiView(self)
}}}

Because WikiStart is defined as powerup in our Offering(xmantissa/wikioff.py), an instance of this class will be added to our application store, when our app is added to the mantissa server.


=== Add Project to Mantissa Server ===
 * Run the mantissa server
{{{
$axiomatic -d wikitut.axiom start -n
}}}
 * Go to http://localhost:8080 and log in as admin
 * Navigate to Home->Offerings and click on the 'Wiki' offering to install it. If you can't see an offering named 'Wiki', your probably need to get your project dir onto your PYTHONPATH.

From now on our !WikiStart object can be viewed publicly at http://localhost:8080/Wiki. Unfortunately, we haven't written a nice view for our object, yet. This makes the Mantissa server display a nice backtrace.

== Part 2: Adding a View using a Template ==

=== Add a View ===
Replace your WikiView in wiki/wiki_view.py with
{{{
from nevow import loaders
from nevow.rend import Page

class WikiView(Page):

    docFactory = loaders.xmlfile('wiki/themes/base/wiki-start.html')

    def __init__(self, original):
        Page.__init__(self)
        self.original = original

    def customizeFor(self, avatar):
        return self

    def render_page(self, context, date):
        return 'test'
}}}
Now you can view the rendered version of the wiki/themes/base/wiki-start.html template when you visit http://localhost:8080/Wiki. Well, at least if you restart your mantissa server, so that it can have a look at the changed python files.

=== Write a useful Template ===
Replace wiki-start.html with a template which let's our view do something. For instance
{{{
<html xmlns='http://www.w3.org/1999/xhtml'
     xmlns:nevow='http://nevow.com/ns/nevow/0.1'>
	<body>
	    Welcome to the Wiki Application
		<hr/>
		<nevow:invisible nevow:render='page' />	
	</body>
</html>
}}}
This template call out view's render_page function. Currently, it only returns 'test', but that will change soon.

== Part 3: Storing and Retrieving Wiki Pages ==

=== Create a New Item Subclass ===
Add this to your wiki_model.py
{{{
class WikiPage(Item):
    implements(ixmantissa.INavigableElement)

    schemaVersion = 1            # First version of this object.
    typeName = 'wiki_page'       # Database table name.

    page_name = text()
    page_content = text()
}}}

=== Change our Application Store from the Python Shell ===
 * Open application store and do some imports
{{{
>>> from axiom.store import Store
>>> s = Store('wikitut.axiom/files/app/Wiki.axiom')
>>> from wiki.wiki_model import WikiPage 
}}}
 * Create !FrontPage and !PageTemplate
{{{
>>> WikiPage(store = s, page_name=u'FrontPage', page_content=u'This is the FrontPage.\nMantissa is *cool*. There might also be OtherPages and MoreStuff.')
>>> WikiPage(store = s, page_name=u'PageTemplate', page_content=u'This page does not exist, yet. Use the edit link below to create it.')
}}}

=== Retrieve a Wiki Page and Display its Content ===
Replace the render_page method of our !WikiStart class with somthing more advanced:
{{{
        from wiki.wiki_model import WikiPage
        args = inevow.IRequest(context).args
        page_name = unicode(args.get('page', ['FrontPage'])[0])
        page = self.original.store.findFirst(WikiPage, WikiPage.page_name==page_name)
        
        if page == None:
            page = self.original.store.findFirst(WikiPage, WikiPage.page_name==u'PageTemplate')
        
        return page.page_content
}}}
For this you'll need to import inevow from nevow. Now have a look at our application again:
http://localhost:8080/Wiki?page=FrontPage (Displays the !FrontPage)
http://localhost:8080/Wiki (Displays the !FrontPage, too, because it's the default)
http://localhost:8080/Wiki?page=OtherPage (Displays the !PageTemplate, because !OtherPage doesn't exist)

== Part 4: More Stuff ==

to be continued...
",',0
698,13,1142722087.1169,karlb,198.49.126.204,"= Mantissa Wiki Tutorial =

Send comments to: Karl Bartel <karlb@gmx.net>

== Part 1: Creating an Offering and Running it in a Mantissa Server ==

=== Create Project Skeletion ===
{{{
$axiomatic project -n wiki
}}}

=== Set up Database and Mantissa Server ===
{{{
$cd Wiki
$axiomatic -d wikitut.axiom mantissa
}}}

=== Add a public page ===
The project skeleton's start page is designed to be viewed only by users who have a login for our mantissa server. We don't want to deal with the login system in this tutorial, so let's change the !WikiStart object to a !PublicPage in wiki/wiki_model.py.
 * Change ixmantissa.IPublicPage both in the 'implements' call and in the 'installOn' method
 * Remove the 'getTabs' and 'explode' methods and the registerAdapter line below the class
 * add the following method:
{{{
	def getResource(self):
	    return WikiView(self)
}}}

Because !WikiStart is defined as powerup in our Offering(xmantissa/wikioff.py), an instance of this class will be added to our application store, when our app is added to the mantissa server.


=== Add Project to Mantissa Server ===
 * Run the mantissa server
{{{
$axiomatic -d wikitut.axiom start -n
}}}
 * Go to http://localhost:8080 and log in as admin
 * Navigate to Home->Offerings and click on the 'Wiki' offering to install it. If you can't see an offering named 'Wiki', your probably need to get your project dir onto your PYTHONPATH.

From now on our !WikiStart object can be viewed publicly at http://localhost:8080/Wiki. Unfortunately, we haven't written a nice view for our object, yet. This makes the Mantissa server display a nice backtrace.

== Part 2: Adding a View using a Template ==

=== Add a View ===
Replace your !WikiView in wiki/wiki_view.py with
{{{
from nevow import loaders
from nevow.rend import Page

class WikiView(Page):

    docFactory = loaders.xmlfile('wiki/themes/base/wiki-start.html')

    def __init__(self, original):
        Page.__init__(self)
        self.original = original

    def customizeFor(self, avatar):
        return self

    def render_page(self, context, date):
        return 'test'
}}}
Now you can view the rendered version of the wiki/themes/base/wiki-start.html template when you visit http://localhost:8080/Wiki. Well, at least if you restart your mantissa server, so that it can have a look at the changed python files.

=== Write a useful Template ===
Replace wiki-start.html with a template which let's our view do something. For instance
{{{
<html xmlns='http://www.w3.org/1999/xhtml'
     xmlns:nevow='http://nevow.com/ns/nevow/0.1'>
	<body>
	    Welcome to the Wiki Application
		<hr/>
		<nevow:invisible nevow:render='page' />	
	</body>
</html>
}}}
This template call out view's render_page function. Currently, it only returns 'test', but that will change soon.

== Part 3: Storing and Retrieving Wiki Pages ==

=== Create a New Item Subclass ===
Add this to your wiki_model.py
{{{
class WikiPage(Item):
    implements(ixmantissa.INavigableElement)

    schemaVersion = 1            # First version of this object.
    typeName = 'wiki_page'       # Database table name.

    page_name = text()
    page_content = text()
}}}

=== Change our Application Store from the Python Shell ===
 * Open application store and do some imports
{{{
>>> from axiom.store import Store
>>> s = Store('wikitut.axiom/files/app/Wiki.axiom')
>>> from wiki.wiki_model import WikiPage 
}}}
 * Create !FrontPage and !PageTemplate
{{{
>>> WikiPage(store = s, page_name=u'FrontPage', page_content=u'This is the FrontPage.\nMantissa is *cool*. There might also be OtherPages and MoreStuff.')
>>> WikiPage(store = s, page_name=u'PageTemplate', page_content=u'This page does not exist, yet. Use the edit link below to create it.')
}}}

=== Retrieve a Wiki Page and Display its Content ===
Replace the render_page method of our !WikiStart class with somthing more advanced:
{{{
        from wiki.wiki_model import WikiPage
        args = inevow.IRequest(context).args
        page_name = unicode(args.get('page', ['FrontPage'])[0])
        page = self.original.store.findFirst(WikiPage, WikiPage.page_name==page_name)
        
        if page == None:
            page = self.original.store.findFirst(WikiPage, WikiPage.page_name==u'PageTemplate')
        
        return page.page_content
}}}
For this you'll need to import inevow from nevow. Now have a look at our application again:
 * http://localhost:8080/Wiki?page=FrontPage (Displays the !FrontPage)
 * http://localhost:8080/Wiki (Displays the !FrontPage, too, because it's the default)
 * http://localhost:8080/Wiki?page=OtherPage (Displays the !PageTemplate, because !OtherPage doesn't exist)

== Part 4: Rendering the !WikiPage as a Fragment ==

=== Create a New View ===
Add the following to your wiki_view.py
{{{
import re
re_wiki_word = re.compile(r'\b([A-Z]\w+[A-Z]+\w+)')
from nevow import tags
base_url = 'Wiki?page='

class WikiPageView(Fragment):
    implements(ixmantissa.INavigableFragment)
    docFactory = loaders.xmlfile('wiki/themes/base/wiki-page.html')

    def wikified(self):
        # add some nice formatting
        from docutils.core import publish_parts
        text = publish_parts(self.original.page_content, writer_name='html')['html_body']
        # place links on all WikiWords
        text = re_wiki_word.sub(r'<a href='%s\1'>\1</a>' % base_url, text)
        return tags.xml(text)

    def render_page_content(self, context, data):
        return self.wikified()

    def render_page_name(self, context, data):
        return self.original.page_name

    def render_page_link(self, context, data):
        args = inevow.IRequest(context).args
        return base_url + args.get('page', ['FrontPage'])[0]
}}}

=== Add a New Template ===
In the new !WikiPageView, we are using the template 'wiki/themes/base/wiki-page.html'. Create the file with the following content:
{{{
<div xmlns='http://www.w3.org/1999/xhtml'
     xmlns:nevow='http://nevow.com/ns/nevow/0.1'>
	<h1><span nevow:render='page_name' /></h1>
	<hr/>
	<p><span nevow:render='page_content' /></p>
	<hr/>
	<a>
		<nevow:attr name='href'>
			<nevow:invisible nevow:render='page_link' />&amp;edit=1
		</nevow:attr>
		Edit this page
	</a>
</div>
}}}

=== Putting the Fragment in the !WikiView ===

 * Register !WikiPageView as an adapter for !WikiPage by adding the following lines to the end of your wiki_model.py:
{{{
from wiki.wiki_view import WikiPageView
registerAdapter(WikiPageView, WikiPage, ixmantissa.INavigableFragment)
}}}
 * Replace the return statement in your !WikiView's render_page method with
{{{
        return ixmantissa.INavigableFragment(page)
}}}
This adapts the !WikiPage to the !INavigableFragment interface by creating a !WikiPageView instance, which implements this interface. This new instance will have a reference to the !WikiPage in it's 'original' attribute.

And again, it's time to see what our app can do now. It has some nice formatting possibilities and it automatically links !WikiWords. Great!

== Part 5: Editing ==

to be continued...
",',0
699,14,1142722286.27312,karlb,198.49.126.204,,,
700,15,1142722360.28623,karlb,198.49.126.204,,,
701,16,1142722634.93919,karlb,198.49.126.204,,,
702,17,1142722970.36109,karlb,198.49.126.204,,,
703,18,1142727668.67695,njs@pobox.com,198.49.126.204,,,
704,19,1142802277.84594,exarkun,198.49.126.204,,,
705,20,1142885237.28051,rwall,198.49.126.204,,,
706,21,1142895798.61556,tim@pollenation.net,198.49.126.204,"=== People Using Divmod Software ===
 * [http://pixoh.com/ Pixoh] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + !CherryPy
 * [http://projects.adytum.us/tracs/PyMonitor/wiki/PyMonScreenShots pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodAthena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.mmoupdate.com/ MMOUpdate] uses Mantissa (still in production)
 * [http://python.org] uses [wiki:DivmodNevow Divmod Nevow].","added python.org",0
707,22,1142895816.34194,tim@pollenation.net,198.49.126.204,"=== People Using Divmod Software ===
 * [http://pixoh.com/ Pixoh] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + !CherryPy
 * [http://projects.adytum.us/tracs/PyMonitor/wiki/PyMonScreenShots pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodAthena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.mmoupdate.com/ MMOUpdate] uses Mantissa (still in production)
 * [http://python.org The Python website] uses [wiki:DivmodNevow Divmod Nevow].",',0
708,7,1142930845.1498,dreid,198.49.126.204,,,
709,21,1142945107.47031,rwall,198.49.126.204,,,
710,22,1142946205.0311,rwall,198.49.126.204,,,
711,15,1142957569.82139,karlb,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the AxiomProject object database, and the TwistedFramework, as well as web user-interface utilities.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicle), and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.4.1.tar.gz?format=raw Get the most recent release - 0.4.1!] ([http://www.livejournal.com/users/jcalderone/18622.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
 * [wiki:MantissaHowTo An example of how to build a Mantissa application]
 * [http://moxn.net/~mesozoic/axiom-howto/ Writing Web Applications with Axiom and Mantissa (mostly outdated)]
 * [wiki:MantissaWikiTutorial Mantissa Wiki Tutorial]","Added mesozoic's tutorial",0
712,1,1142959206.56745,karlb,198.49.126.204,"
This is work in progress. Don't read it, yet!

=== Create Skeleton ===

{{{
axiomatic project -n blog
cd blog
axiomatic -d blogtut.axiom mantissa
}}}

=== Add Public Page ===

{{{
appPowerups = (
    blog_model.BlogStart,
    blog_model.BlogPublicPage,
)
}}}

{{{
<div xmlns='http://www.w3.org/1999/xhtml'
     xmlns:nevow='http://nevow.com/ns/nevow/0.1'>
	<h1>Blog Test</h1>
</div>
}}}

{{{
from nevow import loaders, inevow
from nevow.rend import Page

class BlogPublicView(Page):

    docFactory = loaders.xmlfile('blog/themes/base/blog-public.html')

    def __init__(self, original):
        Page.__init__(self)
        self.original = original

    def customizeFor(self, avatar):
        return self
}}}

{{{
class BlogPublicPage(Item, InstallableMixin):
    # This object can be browsed from the web
    # From the mantissa perspective this is the model in the MVC pattern
    implements(ixmantissa.IPublicPage)

    schemaVersion = 1                  # First version of this object.
    typeName = 'blog_public_page'      # Database table name.

    name = text()               # We must have at least one attribute - model
                                # objects must store data.
    installedOn = reference()

    def installOn(self, other):
        super(BlogPublicPage, self).installOn(other)
        other.powerUp(self, ixmantissa.IPublicPage)

    def getResource(self):
        from blog.blog_view import BlogPublicView
        return BlogPublicView(self)
}}}

=== Install Offering ===

=== Allow admin to View !BlogStart ===

REPL:
{{{
from blog.blog_model import BlogStart
BlogStart(store=s).installOn(s)
}}}",',0
713,2,1142980557.96962,karlb,198.49.126.204,,,
714,8,1143031811.54534,exarkun,198.49.126.204,"= Branch Based Development =

Divmod uses branches for all development.  The lifetime of a task looks something like this:

  * A  ticket is created in the issue tracker.
  * For features, a specification is attached to the ticket
  * A branch is created in Subversion.  The branch is named with the convention <descriptive word>-<issue number>[-<branch number>].  For the first branch of any feature, the branch number is omitted.
{{{
#!sh
$ mkbranch Divmod sprocket-123
}}}
  * Development occurs on the feature in the branch.
  * When the feature is deemed ready by the developer, it is given to another developer for review. The ticket should be moved to the Reviews component, assigned to the reviewer and the priority set to high.
  * When the reviewer is satisfied, the branch is merged into trunk.
{{{
#!sh
$ unbranch Divmod
$ cd Divmod/trunk
$ svn ci
}}}

Branch lifetimes should be short.  If trunk moves very far from the branch, the branch should be MergedForward to pick up bug fixes and feature enhancements which might be useful.  Doing this also makes the final merge easier, by keeping conflicts small and bringing them to the developer's attention before they become unmanageable.

= Why Branches? =

The most recent version of source code in the repository should always be working.  That makes it a lot easier to deploy fixes and tweaks quickly.  However, sometimes you need to check in code to test it on a different machine, or show it to a different developer.  A version control system is useful in many ways, and if you only have one branch, these purposes conflict.

While we have only tried branch-based development with Subversion, other systems like Perforce and Bazaar will probably work just fine.

Here at Divmod we think this is a ''really good'' methodology: here are some of its features.

== Keep {{{trunk}}} Working ==

The most recent revision of a piece of software, that is, {{{trunk@HEAD}}} should always work.  Any new developer should be able to check out the most recent version and immediately start working, without worrying that the build is broken this week.

With branch-based development, features are only merged to trunk after they have been tested and reviewed by at least one other developer.

== Switch Developers Mid-Feature ==

If a developer gets stuck because it turns out that part of a feature is outside his expertise, he project can easily put code that he knows is broken into a branch, then indicate that branch to another developer and reassign the ticket, without breaking trunk.

== Provide Useful Progress Information to Management ==

Branches directly correspond to user-facing tasks.  A quick look at [browser:/branches the list of branches] should indicate to managers (or throngs of adoring [wiki:DivmodFanClub fans]) indicates what is actually going on.  Trac helpfully provides a view which shows how long it has been since someone committed to a branch.  If there are a lot of branches (more than twice the number of developers, let's say), that means that the team's efforts are getting diffuse and they need to focus more and get branches merged.  If branches are being turned over quickly, it means that tasks are being completed quickly.

== Mechanism for Code Review ==

Usually code review is done by module, and only after the fact.  While this practice is useful, it only raises problems that already exist, it doesn't prevent them.

By reviewing each branch as a change, rather than a module, problems are spotted earlier on, and developers can work on any modules that are necessary for a particular task, with no worries that the maintainer won't notice - on a larger team, any module maintainers should be asked for review.

This is also a low-friction review process.  Rather than submitting a branch for review and discussing it interactively, a developer may accept a ticket, start a branch, commit a few times, finish, put the ticket into review, move on to an unrelated branch, repeat, put that branch into review, then check their assigned tickets at the end of the day and merge any branches which have been accepted before finishing for the day.

== Generate a Meaningful Changelog ==

Often, source control logs are riddled with nonsensical, tiny changes.  'twiddled whitespace', 'added a few docstrings', etc.  Because it's good to commit frequently to avoid losing too much work or generating monolithic changes, this is hard to avoid.  Commit messages generate a bottleneck to getting work into the repository, which is bad.

If every branch has a clear purpose, then only ''merges'' need have useful, descriptive commit messages, and since no code is changing when a developer is doing a merge to trunk, they can take all the time they need to come up with a good message.  This means that the changelog generated directly from a revision log of trunk (as opposed to the whole repository) is likely to be useful as a changelog.

== Revert Useful Units ==

If something ''does'' break trunk, you can revert it with one command, rather than sifting through piles of related commit messages and trying to assemble a useful revert.  It's 'revision 1234', not 'revision 1232, 1237, 1239, 1246, and I think maybe 1255 too, you should run the tests both ways'.

== Merge When You're Merging, Not When You're Hacking ==

If you are working directly in trunk, any update may cause conflicts which you have to immedaitely resolve before you can continue working.  With branches, a smaller number of developers can work on a branch, knowing that their changes won't conflict, and update regularly.

That means you are never interrupted with an unpleasant required merge.  Your code is always in the repository ''before'' you worry about merging it with other people's changes, so there is no concern that although your code was working before you were ready to commit, the merge went badly and you never committed in a working state.

== Some Thoughts on Things I Don't Know Anything About ==

While this process works very well for us on Python code, more heavyweight development environments might find it even more valuable.  For example, if it takes an hour-long build process and 20 minutes of testing to determine whether trunk is in a good state, branch-based development could be even more valuable.

Even if you already have awesome automated tests, branches can speed things up immensely.  Let's say Foo Co. has 30 developers and an hour long build and 20 minutes of unit tests.  Jethro checks in some broken core header file to trunk and goes to lunch.  The automated tests start building and running.  Alice, preparing to commit, updates.  She receives Jethro's broken changes.  Alice, being a better developer than Jethro, runs the tests.  She waits 20 minutes.  The build is broken!  She can't commit, since she doesn't want to break trunk.  (All this while, precious hours of work are sitting on Alice's disk, not backed up in the repository...)

Meanwhile, everyone else in the company has updated, and jethro returns from his early lunch.  Thus far, 30 developers * (1 hour of build + 20 minutes of tests) = 40 man days have been wasted.  Everyone knows it was Jethro when he gets back because the build indicates failure on a revision he checks in, but now all 30 developers are standing behind his desk, waiting for him to get trunk back into a working state and test the fix so they can get back to work.  That requires ''at least'' another 1:20 of time waiting for the automated tests before Alice can commit her changes.

Much of this waiting could have been circumvented if Jethro had checked his changes into a branch, and then asked the automated test system to run tests for him, and maybe had one other developer review it for him.  By the way, Buildbot has this feature, and [http://jade.code-bear.com:8010/q-linux Divmod's tests use it] - feel free to request a build of any branch :).",',0
715,6,1143032279.14329,exarkun,198.49.126.204,"= What does it mean to 'Merge a Branch Forward'? =

Merging forward is a way to keep old branches fresh and up-to-date.  It consists of this process:

  * Make sure your trunk working copy is clean
  * Make sure all your existing branch changes are checked in
  * Unbranch your existing branch.  eg, for sprocket-212, you would execute:
{{{
chbranch Divmod yourname/sprocket-212
unbranch Divmod
}}}
  * Resolve any conflicts and use 'svn resolved'
  * Create a new branch.  eg:
{{{
mkbranch Divmod yourname/sprocket-212-2
}}}
  * Commit the new branch.
  * Make sure to revert trunk:
{{{
svn revert Divmod/trunk -R
}}}

Merging forward is a component of [wiki:BranchBasedDevelopment branch based development].",',0
716,7,1143032319.2508,exarkun,198.49.126.204,"= What does it mean to 'Merge a Branch Forward'? =

Merging forward is a way to keep old branches fresh and up-to-date.  It consists of this process:

  * Make sure your trunk working copy is clean
  * Make sure all your existing branch changes are checked in
  * Unbranch your existing branch.  eg, for sprocket-212, you would execute:
{{{
chbranch Divmod yourname/sprocket-212
unbranch Divmod
}}}
  * Resolve any conflicts and use 'svn resolved'
  * Create a new branch.  eg:
{{{
mkbranch Divmod yourname/sprocket-212-2
}}}
  * Commit the new branch.
  * Make sure to revert trunk working copy:
{{{
svn revert Divmod/trunk -R
}}}

Merging forward is a component of [wiki:BranchBasedDevelopment branch based development].",',0
717,9,1143132466.02136,exarkun,198.49.126.204,"= Branch Based Development =

Divmod uses branches for all development.  The lifetime of a task looks something like this:

  * A  ticket is created in the issue tracker.
  * For features, a specification is attached to the ticket
  * A branch is created in Subversion.  The branch is named with the convention <descriptive word>-<issue number>[-<branch number>].  For the first branch of any feature, the branch number is omitted.
{{{
#!sh
$ mkbranch Divmod sprocket-123
}}}
  * Development occurs on the feature in the branch.
  * When the feature is deemed ready by the developer, it is given to another developer for review. The ticket should be moved to the Reviews component, assigned to the reviewer and the priority set to high.
  * When the reviewer is satisfied, the branch is merged into trunk.
{{{
#!sh
$ unbranch Divmod
$ cd Divmod/trunk
$ svn ci
}}}

Branch lifetimes should be short.  If trunk moves very far from the branch, the branch should be MergedForward to pick up bug fixes and feature enhancements which might be useful.  Doing this also makes the final merge easier, by keeping conflicts small and bringing them to the developer's attention before they become unmanageable.

= Why Branches? =

The most recent version of source code in the repository should always be working.  That makes it a lot easier to deploy fixes and tweaks quickly.  However, sometimes you need to check in code to test it on a different machine, or show it to a different developer.  A version control system is useful in many ways, and if you only have one branch, these purposes conflict.

While we have only tried branch-based development with Subversion, other systems like Perforce and Bazaar will probably work just fine.

Here at Divmod we think this is a ''really good'' methodology: here are some of its features.

== Keep {{{trunk}}} Working ==

The most recent revision of a piece of software, that is, {{{trunk@HEAD}}} should always work.  Any new developer should be able to check out the most recent version and immediately start working, without worrying that the build is broken this week.

With branch-based development, features are only merged to trunk after they have been tested and reviewed by at least one other developer.

== Switch Developers Mid-Feature ==

If a developer gets stuck because it turns out that part of a feature is outside his expertise, he project can easily put code that he knows is broken into a branch, then indicate that branch to another developer and reassign the ticket, without breaking trunk.

== Provide Useful Progress Information to Management ==

Branches directly correspond to user-facing tasks.  A quick look at [browser:/branches the list of branches] should indicate to managers (or throngs of adoring [wiki:DivmodFanClub fans]) indicates what is actually going on.  Trac helpfully provides a view which shows how long it has been since someone committed to a branch.  If there are a lot of branches (more than twice the number of developers, let's say), that means that the team's efforts are getting diffuse and they need to focus more and get branches merged.  If branches are being turned over quickly, it means that tasks are being completed quickly.

== Mechanism for Code Review ==

Usually code review is done by module, and only after the fact.  While this practice is useful, it only raises problems that already exist, it doesn't prevent them.

By reviewing each branch as a change, rather than a module, problems are spotted earlier on, and developers can work on any modules that are necessary for a particular task, with no worries that the maintainer won't notice - on a larger team, any module maintainers should be asked for review.

This is also a low-friction review process.  Rather than submitting a branch for review and discussing it interactively, a developer may accept a ticket, start a branch, commit a few times, finish, put the ticket into review, move on to an unrelated branch, repeat, put that branch into review, then check their assigned tickets at the end of the day and merge any branches which have been accepted before finishing for the day.

== Generate a Meaningful Changelog ==

Often, source control logs are riddled with nonsensical, tiny changes.  'twiddled whitespace', 'added a few docstrings', etc.  Because it's good to commit frequently to avoid losing too much work or generating monolithic changes, this is hard to avoid.  Commit messages generate a bottleneck to getting work into the repository, which is bad.

If every branch has a clear purpose, then only ''merges'' need have useful, descriptive commit messages, and since no code is changing when a developer is doing a merge to trunk, they can take all the time they need to come up with a good message.  This means that the changelog generated directly from a revision log of trunk (as opposed to the whole repository) is likely to be useful as a changelog.

Tangentially related, commit messages for merges should include at least three pieces of information:

  * The author of the branch.
  * The reviewer of the branch.
  * The tickets which the branch resolves or relates to.

== Revert Useful Units ==

If something ''does'' break trunk, you can revert it with one command, rather than sifting through piles of related commit messages and trying to assemble a useful revert.  It's 'revision 1234', not 'revision 1232, 1237, 1239, 1246, and I think maybe 1255 too, you should run the tests both ways'.

== Merge When You're Merging, Not When You're Hacking ==

If you are working directly in trunk, any update may cause conflicts which you have to immedaitely resolve before you can continue working.  With branches, a smaller number of developers can work on a branch, knowing that their changes won't conflict, and update regularly.

That means you are never interrupted with an unpleasant required merge.  Your code is always in the repository ''before'' you worry about merging it with other people's changes, so there is no concern that although your code was working before you were ready to commit, the merge went badly and you never committed in a working state.

== Some Thoughts on Things I Don't Know Anything About ==

While this process works very well for us on Python code, more heavyweight development environments might find it even more valuable.  For example, if it takes an hour-long build process and 20 minutes of testing to determine whether trunk is in a good state, branch-based development could be even more valuable.

Even if you already have awesome automated tests, branches can speed things up immensely.  Let's say Foo Co. has 30 developers and an hour long build and 20 minutes of unit tests.  Jethro checks in some broken core header file to trunk and goes to lunch.  The automated tests start building and running.  Alice, preparing to commit, updates.  She receives Jethro's broken changes.  Alice, being a better developer than Jethro, runs the tests.  She waits 20 minutes.  The build is broken!  She can't commit, since she doesn't want to break trunk.  (All this while, precious hours of work are sitting on Alice's disk, not backed up in the repository...)

Meanwhile, everyone else in the company has updated, and jethro returns from his early lunch.  Thus far, 30 developers * (1 hour of build + 20 minutes of tests) = 40 man days have been wasted.  Everyone knows it was Jethro when he gets back because the build indicates failure on a revision he checks in, but now all 30 developers are standing behind his desk, waiting for him to get trunk back into a working state and test the fix so they can get back to work.  That requires ''at least'' another 1:20 of time waiting for the automated tests before Alice can commit her changes.

Much of this waiting could have been circumvented if Jethro had checked his changes into a branch, and then asked the automated test system to run tests for him, and maybe had one other developer review it for him.  By the way, Buildbot has this feature, and [http://jade.code-bear.com:8010/q-linux Divmod's tests use it] - feel free to request a build of any branch :).",',0
718,23,1143259363.893,jerub,198.49.126.204,,,
719,12,1143495676.49118,exarkun,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= Goals =

(Put something here)

= Tutorial =

== Simple LiveFragment demo ==

Subclass {{{nevow.athena.LiveFragment}}} and provide a {{{docFactory}}} which uses the {{{liveFragment}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myFragment'))])

    def render_myFragment(self, ctx, data):
        f = MyFragment()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver, rend

class Root(rend.Page):
    def child_(self, ctx):
        return MyPage()

site = appserver.NevowSite(Root())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myfragment.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
#!js
var MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read the Twisted plugin documentation to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveFragment}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))

    def __init__(self, *a, **kw):
        super(MyFragment, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment'))[
        T.button(onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyFragment}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyFragment(athena.LiveFragment):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument

    allowedMethods = ['echo']
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myfragment.tac?format=raw myfragment.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tuturial]

= Implementation =

(Put something here)
","declare variables",0
720,10,1143499435.45,exarkun,198.49.126.204,"= Branch Based Development =

Divmod uses branches for all development.  The lifetime of a task looks something like this:

  * A  ticket is created in the issue tracker.
  * For features, a specification is attached to the ticket
  * A branch is created in Subversion.  The branch is named with the convention <descriptive word>-<issue number>[-<branch number>].  For the first branch of any feature, the branch number is omitted.
{{{
#!sh
$ mkbranch Divmod sprocket-123
}}}
  * Development occurs on the feature in the branch.
  * When the feature is deemed ready by the developer, it is given to another developer for review. The ticket should be moved to the Reviews component, assigned to the reviewer and the priority set to high.
  * When the reviewer is satisfied, the branch is merged into trunk.
{{{
#!sh
$ unbranch Divmod
$ cd Divmod/trunk
$ svn ci
}}}

Branch lifetimes should be short.  If trunk moves very far from the branch, the branch should be MergedForward to pick up bug fixes and feature enhancements which might be useful.  Doing this also makes the final merge easier, by keeping conflicts small and bringing them to the developer's attention before they become unmanageable.

= Why Branches? =

The most recent version of source code in the repository should always be working.  That makes it a lot easier to deploy fixes and tweaks quickly.  However, sometimes you need to check in code to test it on a different machine, or show it to a different developer.  A version control system is useful in many ways, and if you only have one branch, these purposes conflict.

While we have only tried branch-based development with Subversion, other systems like Perforce and Bazaar will probably work just fine.

Here at Divmod we think this is a ''really good'' methodology: here are some of its features.

== Keep {{{trunk}}} Working ==

The most recent revision of a piece of software, that is, {{{trunk@HEAD}}} should always work.  Any new developer should be able to check out the most recent version and immediately start working, without worrying that the build is broken this week.

With branch-based development, features are only merged to trunk after they have been tested and reviewed by at least one other developer.

== Switch Developers Mid-Feature ==

If a developer gets stuck because it turns out that part of a feature is outside his expertise, he project can easily put code that he knows is broken into a branch, then indicate that branch to another developer and reassign the ticket, without breaking trunk.

== Provide Useful Progress Information to Management ==

Branches directly correspond to user-facing tasks.  A quick look at [browser:/branches the list of branches] should indicate to managers (or throngs of adoring [wiki:DivmodFanClub fans]) indicates what is actually going on.  Trac helpfully provides a view which shows how long it has been since someone committed to a branch.  If there are a lot of branches (more than twice the number of developers, let's say), that means that the team's efforts are getting diffuse and they need to focus more and get branches merged.  If branches are being turned over quickly, it means that tasks are being completed quickly.

== Mechanism for Code Review ==

Usually CodeReview is done by module, and only after the fact.  While this practice is useful, it only raises problems that already exist, it doesn't prevent them.

By reviewing each branch as a change, rather than a module, problems are spotted earlier on, and developers can work on any modules that are necessary for a particular task, with no worries that the maintainer won't notice - on a larger team, any module maintainers should be asked for review.

This is also a low-friction review process.  Rather than submitting a branch for review and discussing it interactively, a developer may accept a ticket, start a branch, commit a few times, finish, put the ticket into review, move on to an unrelated branch, repeat, put that branch into review, then check their assigned tickets at the end of the day and merge any branches which have been accepted before finishing for the day.

== Generate a Meaningful Changelog ==

Often, source control logs are riddled with nonsensical, tiny changes.  'twiddled whitespace', 'added a few docstrings', etc.  Because it's good to commit frequently to avoid losing too much work or generating monolithic changes, this is hard to avoid.  Commit messages generate a bottleneck to getting work into the repository, which is bad.

If every branch has a clear purpose, then only ''merges'' need have useful, descriptive commit messages, and since no code is changing when a developer is doing a merge to trunk, they can take all the time they need to come up with a good message.  This means that the changelog generated directly from a revision log of trunk (as opposed to the whole repository) is likely to be useful as a changelog.

Tangentially related, commit messages for merges should include at least three pieces of information:

  * The author of the branch.
  * The reviewer of the branch.
  * The tickets which the branch resolves or relates to.

== Revert Useful Units ==

If something ''does'' break trunk, you can revert it with one command, rather than sifting through piles of related commit messages and trying to assemble a useful revert.  It's 'revision 1234', not 'revision 1232, 1237, 1239, 1246, and I think maybe 1255 too, you should run the tests both ways'.

== Merge When You're Merging, Not When You're Hacking ==

If you are working directly in trunk, any update may cause conflicts which you have to immedaitely resolve before you can continue working.  With branches, a smaller number of developers can work on a branch, knowing that their changes won't conflict, and update regularly.

That means you are never interrupted with an unpleasant required merge.  Your code is always in the repository ''before'' you worry about merging it with other people's changes, so there is no concern that although your code was working before you were ready to commit, the merge went badly and you never committed in a working state.

== Some Thoughts on Things I Don't Know Anything About ==

While this process works very well for us on Python code, more heavyweight development environments might find it even more valuable.  For example, if it takes an hour-long build process and 20 minutes of testing to determine whether trunk is in a good state, branch-based development could be even more valuable.

Even if you already have awesome automated tests, branches can speed things up immensely.  Let's say Foo Co. has 30 developers and an hour long build and 20 minutes of unit tests.  Jethro checks in some broken core header file to trunk and goes to lunch.  The automated tests start building and running.  Alice, preparing to commit, updates.  She receives Jethro's broken changes.  Alice, being a better developer than Jethro, runs the tests.  She waits 20 minutes.  The build is broken!  She can't commit, since she doesn't want to break trunk.  (All this while, precious hours of work are sitting on Alice's disk, not backed up in the repository...)

Meanwhile, everyone else in the company has updated, and jethro returns from his early lunch.  Thus far, 30 developers * (1 hour of build + 20 minutes of tests) = 40 man days have been wasted.  Everyone knows it was Jethro when he gets back because the build indicates failure on a revision he checks in, but now all 30 developers are standing behind his desk, waiting for him to get trunk back into a working state and test the fix so they can get back to work.  That requires ''at least'' another 1:20 of time waiting for the automated tests before Alice can commit her changes.

Much of this waiting could have been circumvented if Jethro had checked his changes into a branch, and then asked the automated test system to run tests for him, and maybe had one other developer review it for him.  By the way, Buildbot has this feature, and [http://jade.code-bear.com:8010/q-linux Divmod's tests use it] - feel free to request a build of any branch :).",',0
721,4,1143499556.12426,exarkun,198.49.126.204,"Divmod uses code review for just about every change to any project.

Code review is a pretty simple process: at its heart, it is little more than reading some code written by someone else.  Nevertheless, it can be useful to have a set of things on which to focus during a review:

  * Does the branch merge or the diff apply cleanly?
  * Are there unit tests for the code being changed or added?
  * Do the unit tests pass for you?
  * Do the unit tests pass for buildbot?
  * Is there documentation for new code?
  * Where appropriate, has existing documentation been updated (including ChangeLog/NEWS files)?
  * Does the code adhere to the coding style?

There's the easy list.  Most are mechanical checks.  Don't feel bad about rejecting a branch if the answer to any of these questions is no: the problems may seem minor in isolation, but each contributes to overall poor code quality.  Moreover, sometimes apparently minor problems can be hiding larger issues.

Taking a look at the bigger picture can be a little bit harder, but it's just as important. ''Finish this section.''
",',0
722,12,1143570358.40393,glyph,198.49.126.204,"= The Divmod Fan Club =

Do you use Divmod's code?

Do you have a poster of Exarkun on your wall?

Do you love our giant-killing chutzpah?

Do you have a friend or family member on the Divmod team?

Has work you've done using a Divmod project made you fantastically wealthy,
such that you don't know what to do with all your extra disposable income?

''Now you know.''

== Joining Up ==

[http://divmod.org:8080/signup Join the club!]

We offer a few different levels of membership.

 * Bronze Membership - $10 per month - ''Buy Glyph enough caffeine to get through one average day.''

 * Silver Membership - $25 per month - ''Take JP out to a restaurant.''

 * Gold Membership - $50 per month - ''Pay for Allen's cell phone calls to Divmod HQ.''

 * Platinum Membership - $100 per month - ''Buy Moe's groceries for a month.''

 * Diamond Membership - $250 per month - ''Buy an iPod for a tireless contributor.''

 * [wiki:DivmodFanClubMithril Divmod Mithril Membership] - starting at $1000 per month (email to sales@divmod.com) - ''Buy Amir a pony.''

== Huh What?! ==

Our developer community has approached us to express their appreciation of our work,
and to influence us to work on particular aspects of our product for the their benefit. 

We've created the Divmod Fan Club, or the 'DFC', to give those users a way
to pay back, and a way for us to very publicly say 'thank you!'.

== It's Awesome - Why should I sign up? ==

Conscience. Influence. Status.

=== Conscience ===

Simple: you give because you take.

=== Influence ===

The club has monthly meetings over IRC where Divmod will propose a group of open-source features to be prioritized.  Club members will be allowed to vote on the order those features will be implemented in.  We are currently tallying the results of our first meeting - watch this space for our club-designated priorities!

Members will be allowed a number of votes corresponding to the number of
dollars per month that their membership costs, except Mithril members, who
receive a maximum of 250 votes each, or can instead choose to apply their
membership fees directly to the expense of implementing features of their
choice.

=== Status ===

Members of the club who sign up for one of our Divmod commercial services (such
as the soon-to-be-re-launched [http://divmod.com/ Divmod Mail]) will occasionally get special
treats, early access to new features, and extra goodies not available to the
general public.

Eventually they will also receive a 'badge' displayed next to their user-icon
in public areas.

Additionally, since we are currently using this club to beta-test our billing
system, members who sign up during the beta period (prior to the first day of
!PyCon) will receive an 'arcanite alloy' bonus, and be allowed 5 additional
votes for their membership level during the first 3 meetings.  Members who are
currently subscribers to [http://divmod.com Divmod Mail] will additionally
receive this bonus indefinitely.

== Where does the money go? ==

To pay employees, particularly for time spent on community work that is not essential to Divmod's core business.

To hire or buy gifts for some of our open source contributors.

To pay for hosting.

Once that's done, we may send some of this money to open-source contributors to
our products whom we do not employ, and then, if we have hojillions of dollars
left over, start paying for development of features in software Divmod's code
depends upon, such as SQLite and Python.
",',0
723,13,1143915425.77292,exarkun,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= Goals =

(Put something here)

= Tutorial =

== Simple LiveFragment demo ==

Subclass {{{nevow.athena.LiveFragment}}} and provide a {{{docFactory}}} which uses the {{{liveFragment}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myFragment'))])

    def render_myFragment(self, ctx, data):
        f = MyFragment()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver, rend

class Root(rend.Page):
    def child_(self, ctx):
        return MyPage()

site = appserver.NevowSite(Root())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myfragment.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
#!js
var MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read the Twisted plugin documentation to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveFragment}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))

    def __init__(self, *a, **kw):
        super(MyFragment, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment'))[
        T.button(onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyFragment}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyFragment(athena.LiveFragment):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument
    athena.expose(echo)
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myfragment.tac?format=raw myfragment.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tuturial]

= Implementation =

(Put something here)
",',0
724,14,1143915727.57277,exarkun,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= Goals =

(Put something here)

= Tutorial =

== Simple LiveFragment demo ==

Subclass {{{nevow.athena.LiveFragment}}} and provide a {{{docFactory}}} which uses the {{{liveFragment}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myFragment'))])

    def render_myFragment(self, ctx, data):
        f = MyFragment()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver, rend

class Root(rend.Page):
    def child_(self, ctx):
        return MyPage()

site = appserver.NevowSite(Root())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myfragment.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
#!js
var MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read [http://twistedmatrix.com/projects/core/documentation/howto/plugin.html the Twisted plugin documentation] to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveFragment}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))

    def __init__(self, *a, **kw):
        super(MyFragment, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment'))[
        T.button(onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyFragment}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyFragment(athena.LiveFragment):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument
    athena.expose(echo)
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myfragment.tac?format=raw myfragment.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tuturial]

= Implementation =

(Put something here)
",',0
725,32,1143916228.53682,harshaw,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.7.0.tar.gz?format=raw Latest release - 0.7.0] ([http://www.livejournal.com/users/jcalderone/18096.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''livepage''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","removed livepage ref and replaced with athena",0
726,33,1143916506.0929,harshaw,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.7.0.tar.gz?format=raw Latest release - 0.7.0] ([http://www.livejournal.com/users/jcalderone/18096.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''Athena''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","removed another ref",0
727,11,1143995038.26828,marijn,198.49.126.204,"= Branch Based Development =

Divmod uses branches for all development.  The lifetime of a task looks something like this:

  * A  ticket is created in the issue tracker.
  * For features, a specification is attached to the ticket
  * A branch is created in Subversion.  The branch is named with the convention <descriptive word>-<issue number>[-<branch number>].  For the first branch of any feature, the branch number is omitted.
{{{
#!sh
$ mkbranch Divmod sprocket-123
}}}
  * Development occurs on the feature in the branch.
  * When the feature is deemed ready by the developer, it is given to another developer for review. The ticket should be moved to the Reviews component, assigned to the reviewer and the priority set to high.
  * When the reviewer is satisfied, the branch is merged into trunk.
{{{
#!sh
$ unbranch Divmod
$ cd Divmod/trunk
$ svn ci
}}}

Branch lifetimes should be short.  If trunk moves very far from the branch, the branch should be MergedForward to pick up bug fixes and feature enhancements which might be useful.  Doing this also makes the final merge easier, by keeping conflicts small and bringing them to the developer's attention before they become unmanageable.

= Why Branches? =

The most recent version of source code in the repository should always be working.  That makes it a lot easier to deploy fixes and tweaks quickly.  However, sometimes you need to check in code to test it on a different machine, or show it to a different developer.  A version control system is useful in many ways, and if you only have one branch, these purposes conflict.

While we have only tried branch-based development with Subversion, other systems like Perforce and Bazaar will probably work just fine.

Here at Divmod we think this is a ''really good'' methodology: here are some of its features.

== Keep {{{trunk}}} Working ==

The most recent revision of a piece of software, that is, {{{trunk@HEAD}}} should always work.  Any new developer should be able to check out the most recent version and immediately start working, without worrying that the build is broken this week.

With branch-based development, features are only merged to trunk after they have been tested and reviewed by at least one other developer.

== Switch Developers Mid-Feature ==

If a developer gets stuck because it turns out that part of a feature is outside his expertise, he project can easily put code that he knows is broken into a branch, then indicate that branch to another developer and reassign the ticket, without breaking trunk.

== Provide Useful Progress Information to Management ==

Branches directly correspond to user-facing tasks.  A quick look at [browser:/branches the list of branches] should indicate to managers (or throngs of adoring [wiki:DivmodFanClub fans]) indicates what is actually going on.  Trac helpfully provides a view which shows how long it has been since someone committed to a branch.  If there are a lot of branches (more than twice the number of developers, let's say), that means that the team's efforts are getting diffuse and they need to focus more and get branches merged.  If branches are being turned over quickly, it means that tasks are being completed quickly.

== Mechanism for Code Review ==

Usually CodeReview is done by module, and only after the fact.  While this practice is useful, it only raises problems that already exist, it doesn't prevent them.

By reviewing each branch as a change, rather than a module, problems are spotted earlier on, and developers can work on any modules that are necessary for a particular task, with no worries that the maintainer won't notice - on a larger team, any module maintainers should be asked for review.

This is also a low-friction review process.  Rather than submitting a branch for review and discussing it interactively, a developer may accept a ticket, start a branch, commit a few times, finish, put the ticket into review, move on to an unrelated branch, repeat, put that branch into review, then check their assigned tickets at the end of the day and merge any branches which have been accepted before finishing for the day.

== Generate a Meaningful Changelog ==

Often, source control logs are riddled with nonsensical, tiny changes.  'twiddled whitespace', 'added a few docstrings', etc.  Because it's good to commit frequently to avoid losing too much work or generating monolithic changes, this is hard to avoid.  Commit messages generate a bottleneck to getting work into the repository, which is bad.

If every branch has a clear purpose, then only ''merges'' need have useful, descriptive commit messages, and since no code is changing when a developer is doing a merge to trunk, they can take all the time they need to come up with a good message.  This means that the changelog generated directly from a revision log of trunk (as opposed to the whole repository) is likely to be useful as a changelog.

Tangentially related, commit messages for merges should include at least three pieces of information:

  * The author of the branch.
  * The reviewer of the branch.
  * The tickets which the branch resolves or relates to.

== Revert Useful Units ==

If something ''does'' break trunk, you can revert it with one command, rather than sifting through piles of related commit messages and trying to assemble a useful revert.  It's 'revision 1234', not 'revision 1232, 1237, 1239, 1246, and I think maybe 1255 too, you should run the tests both ways'.

== Merge When You're Merging, Not When You're Hacking ==

If you are working directly in trunk, any update may cause conflicts which you have to immedaitely resolve before you can continue working.  With branches, a smaller number of developers can work on a branch, knowing that their changes won't conflict, and update regularly.

That means you are never interrupted with an unpleasant required merge.  Your code is always in the repository ''before'' you worry about merging it with other people's changes, so there is no concern that although your code was working before you were ready to commit, the merge went badly and you never committed in a working state.

== Some Thoughts on Things I Don't Know Anything About ==

While this process works very well for us on Python code, more heavyweight development environments might find it even more valuable.  For example, if it takes an hour-long build process and 20 minutes of testing to determine whether trunk is in a good state, branch-based development could be even more valuable.

Even if you already have awesome automated tests, branches can speed things up immensely.  Let's say Foo Co. has 30 developers and an hour long build and 20 minutes of unit tests.  Jethro checks in some broken core header file to trunk and goes to lunch.  The automated tests start building and running.  Alice, preparing to commit, updates.  She receives Jethro's broken changes.  Alice, being a better developer than Jethro, runs the tests.  She waits 20 minutes.  The build is broken!  She can't commit, since she doesn't want to break trunk.  (All this while, precious hours of work are sitting on Alice's disk, not backed up in the repository...)

Meanwhile, everyone else in the company has updated, and jethro returns from his early lunch.  Thus far, 30 developers * (1 hour of build + 20 minutes of tests) = 40 man hours have been wasted.  Everyone knows it was Jethro when he gets back because the build indicates failure on a revision he checks in, but now all 30 developers are standing behind his desk, waiting for him to get trunk back into a working state and test the fix so they can get back to work.  That requires ''at least'' another 1:20 of time waiting for the automated tests before Alice can commit her changes.

Much of this waiting could have been circumvented if Jethro had checked his changes into a branch, and then asked the automated test system to run tests for him, and maybe had one other developer review it for him.  By the way, Buildbot has this feature, and [http://jade.code-bear.com:8010/q-linux Divmod's tests use it] - feel free to request a build of any branch :).",',0
728,34,1144041772.54002,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, and Safari on Mac OS X. Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.7.0.tar.gz?format=raw Latest release - 0.7.0] ([http://www.livejournal.com/users/jcalderone/18096.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''Athena''': Cross-browser Javascript glue for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.",',0
729,9,1144071428.87512,mithrandi,198.49.126.204,"= DivmodAxiom : Why use Axiom? =

Because it's great, of course!  More specifically, it's an object-relational database that's ...

== Actually Relational ==

Axiom imposes an ''extremely'' straightforward mapping between tables and classes: 1 to 1.  Your tables get behavior.  They can refer to each other.  If you're familiar with the relational model but are learning OO and want some of its features, Axiom won't explode your brain with a million new concepts.  After learning how a few simple Python expressions work, you can get up and running.

Axiom also respects the relational model and allows you to perform queries (and before or when 1.0 is released, also updates and deletes) on groups of items at once, without loading them first.  You don't need to resort to writing your own 'for' loops or your own SQL code in order to load a joined query.  No PotatoProgramming.

== Actually Object-Oriented ==

Tables have behavior.  You can have a reference to an arbitrary item.  Items can exist outside the database.  You can mix in code from utility classes to give your items additional methods, without affecting its schema.  Simple database types like strings and integers can be mapped into complex, rich Python values, such as email addresses or a fixed-point decimal class.

== Extensible ==

Axiom's '[wiki:DivmodAxiom/Reference Powerup]' mechanism allows you enhance a database, or ''any row'' within a database, with additional functionality.

== Active ==

Axiom isn't a static database.  It is dynamic, it contains behaviors.

You can, for example, install a scheduler which will run tasks at specific times when the database is open.

== Twisted-friendly ==

The aforementioned scheduler is implemented using Twisted's reactor.  Axiom was explicitly designed for use with events and integrates nicely into a Twisted-based environment. 

== Future-Proof ==

Axiom applications can keep running while they're being upgraded from one schema to another (with a partial dataset available).  Upgrades are handled automatically, and the code for upgrading can be kept separate from your application code.  You can even write upgraders which involve complex relationships between multiple rows.

== Simple ==

Axiom gives you the power of an SQL database without the hassle of generating code from within code.

Working with Axiom databases is easy.  The underlying SQLite engine is pretty simple to use already, but Axiom doesn't add layers of complexity that get in your way.  Compare loading a row and manipulating it with a Python class:

{{{
#!python
from axiom.store import Store
s = Store('store.axiom')
x = s.getItemByID(0)
}}}

{{{
#!python
from pysqlite2 import dbapi2
from mymodule import MyClass
con = dbapi2.connect('store.sqlite')
cur = con.cursor()
cur.execute('select * from my_table where oid = 0')
row = con.fetchall()[0]
x = MyClass(row)
}}}

In this case the Axiom example is actually quite a lot shorter!

== Safe ==

Axiom keeps your in-memory objects up to date with what's happening in the database, even when transactions have to be rolled back.  No need to manage connections of your own.  No more forgetting to commit a transaction, or forgetting to roll back in an error handler.

Axiom doesn't expose ''any'' SQL to the application developer.  Internally Axiom is also very careful about SQL generation: it doesn't use string concatenation except where absolutely necessary, and instead uses {{{?}}} interpolation.  This means that your site will be completely secure against SQL injection attacks.

Axiom also makes sure that your objects in memory correspond to what's in the database.  If a transaction fails, Axiom will log the error and revert all the Python objects involved in the transaction to the state they are in after reverting.  This brings the safety of database transactions into your Python code.
","Attempt to reduce ambiguity in wording",0
730,10,1144071678.65046,mithrandi,198.49.126.204,"= DivmodAxiom : Why use Axiom? =

Because it's great, of course!  More specifically, it's an object-relational database that's ...

== Actually Relational ==

Axiom imposes an ''extremely'' straightforward mapping between tables and classes: 1 to 1.  Your tables get behavior.  They can refer to each other.  If you're familiar with the relational model but are learning OO and want some of its features, Axiom won't explode your brain with a million new concepts.  After learning how a few simple Python expressions work, you can get up and running.

Axiom also respects the relational model and allows you to perform queries on groups of items at once, without loading them first.  Support for updates and deletes without loading items will also be implemented before 1.0 is released.  You don't need to resort to writing your own 'for' loops or your own SQL code in order to load a joined query.  No PotatoProgramming.

== Actually Object-Oriented ==

Tables have behavior.  You can have a reference to an arbitrary item.  Items can exist outside the database.  You can mix in code from utility classes to give your items additional methods, without affecting its schema.  Simple database types like strings and integers can be mapped into complex, rich Python values, such as email addresses or a fixed-point decimal class.

== Extensible ==

Axiom's '[wiki:DivmodAxiom/Reference Powerup]' mechanism allows you enhance a database, or ''any row'' within a database, with additional functionality.

== Active ==

Axiom isn't a static database.  It is dynamic, it contains behaviors.

You can, for example, install a scheduler which will run tasks at specific times when the database is open.

== Twisted-friendly ==

The aforementioned scheduler is implemented using Twisted's reactor.  Axiom was explicitly designed for use with events and integrates nicely into a Twisted-based environment. 

== Future-Proof ==

Axiom applications can keep running while they're being upgraded from one schema to another (with a partial dataset available).  Upgrades are handled automatically, and the code for upgrading can be kept separate from your application code.  You can even write upgraders which involve complex relationships between multiple rows.

== Simple ==

Axiom gives you the power of an SQL database without the hassle of generating code from within code.

Working with Axiom databases is easy.  The underlying SQLite engine is pretty simple to use already, but Axiom doesn't add layers of complexity that get in your way.  Compare loading a row and manipulating it with a Python class:

{{{
#!python
from axiom.store import Store
s = Store('store.axiom')
x = s.getItemByID(0)
}}}

{{{
#!python
from pysqlite2 import dbapi2
from mymodule import MyClass
con = dbapi2.connect('store.sqlite')
cur = con.cursor()
cur.execute('select * from my_table where oid = 0')
row = con.fetchall()[0]
x = MyClass(row)
}}}

In this case the Axiom example is actually quite a lot shorter!

== Safe ==

Axiom keeps your in-memory objects up to date with what's happening in the database, even when transactions have to be rolled back.  No need to manage connections of your own.  No more forgetting to commit a transaction, or forgetting to roll back in an error handler.

Axiom doesn't expose ''any'' SQL to the application developer.  Internally Axiom is also very careful about SQL generation: it doesn't use string concatenation except where absolutely necessary, and instead uses {{{?}}} interpolation.  This means that your site will be completely secure against SQL injection attacks.

Axiom also makes sure that your objects in memory correspond to what's in the database.  If a transaction fails, Axiom will log the error and revert all the Python objects involved in the transaction to the state they are in after reverting.  This brings the safety of database transactions into your Python code.
","Reword again",0
731,9,1144346171.25314,moe,198.49.126.204,,,
732,11,1144352797.39095,glyph,198.49.126.204,"= DivmodAxiom : Why use Axiom? =

Because it's great, of course!  More specifically, it's an object-relational database that's ...

== Actually Relational ==

Axiom imposes an ''extremely'' straightforward mapping between tables and classes: 1 to 1.  Your tables get behavior.  They can refer to each other.  If you're familiar with the relational model but are learning OO and want some of its features, Axiom won't explode your brain with a million new concepts.  After learning how a few simple Python expressions work, you can get up and running.

Axiom also respects the relational model and allows you to perform queries on groups of items at once, without loading them first.  Support for updates and deletes without loading items will also be implemented before 1.0 is released.  You don't need to resort to writing your own 'for' loops or your own SQL code in order to load a joined query.  No PotatoProgramming.

== Actually Object-Oriented ==

Tables have behavior.  You can have a reference to an arbitrary item.  Items can exist outside the database.  You can mix in code from utility classes to give your items additional methods, without affecting its schema.  Simple database types like strings and integers can be mapped into complex, rich Python values, such as email addresses or a fixed-point decimal class.

== Extensible ==

Axiom's '[wiki:DivmodAxiom/Reference#Powerups Powerup]' mechanism allows you enhance a database, or ''any row'' within a database, with additional functionality.

== Active ==

Axiom isn't a static database.  It is dynamic, it contains behaviors.

You can, for example, install a scheduler which will run tasks at specific times when the database is open.

== Twisted-friendly ==

The aforementioned scheduler is implemented using Twisted's reactor.  Axiom was explicitly designed for use with events and integrates nicely into a Twisted-based environment. 

== Future-Proof ==

Axiom applications can keep running while they're being upgraded from one schema to another (with a partial dataset available).  Upgrades are handled automatically, and the code for upgrading can be kept separate from your application code.  You can even write upgraders which involve complex relationships between multiple rows.

== Simple ==

Axiom gives you the power of an SQL database without the hassle of generating code from within code.

Working with Axiom databases is easy.  The underlying SQLite engine is pretty simple to use already, but Axiom doesn't add layers of complexity that get in your way.  Compare loading a row and manipulating it with a Python class:

{{{
#!python
from axiom.store import Store
s = Store('store.axiom')
x = s.getItemByID(0)
}}}

{{{
#!python
from pysqlite2 import dbapi2
from mymodule import MyClass
con = dbapi2.connect('store.sqlite')
cur = con.cursor()
cur.execute('select * from my_table where oid = 0')
row = con.fetchall()[0]
x = MyClass(row)
}}}

In this case the Axiom example is actually quite a lot shorter!

== Safe ==

Axiom keeps your in-memory objects up to date with what's happening in the database, even when transactions have to be rolled back.  No need to manage connections of your own.  No more forgetting to commit a transaction, or forgetting to roll back in an error handler.

Axiom doesn't expose ''any'' SQL to the application developer.  Internally Axiom is also very careful about SQL generation: it doesn't use string concatenation except where absolutely necessary, and instead uses {{{?}}} interpolation.  This means that your site will be completely secure against SQL injection attacks.

Axiom also makes sure that your objects in memory correspond to what's in the database.  If a transaction fails, Axiom will log the error and revert all the Python objects involved in the transaction to the state they are in after reverting.  This brings the safety of database transactions into your Python code.
",',0
733,3,1144363428.00236,glyph,198.49.126.204,"= SQLite =

SQLite is an embedded relational database.

You can find a copy at http://sqlite.org/, and Python bindings at http://pysqlite.org/ or http://www.rogerbinns.com/apsw.html

[wiki:DivmodAxiom Axiom] currently uses SQLite exclusively as its backend.",',0
734,35,1144449961.71201,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox and Windows Internet Explorer 6 ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.8.0.tar.gz?format=raw Latest release - 0.8.0] ([http://jcalderone.livejournal.com/23531.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","0.8 release and some minor copy/info tweaks",0
735,2,1144622199.24533,harshaw,198.49.126.204,"Q) When I reload a page, the server logs a traceback ending with {{{exceptions.AssertionError: Cannot render a LivePage more than once}}}

A) LivePage instances maintain server-side state that corresponds to the connection to the browser.  Because of this, each LivePage instance can only be used to serve a single client.  When you serve LivePages, make sure that you create a new instance for each render pass.

Q) I can't debug athena on Internet explorer.  what gives?

A) Athena include the livefragment javascript in the body of the document via a script tag.  Visual studio doesn't appear to be happy with this and does not let you set break points.  If you load the javascript in the head of the document then you can set a break point in your athena livefragment javascript using visual studio.  The best way I found to do this is manually include the javacript in the header and then information athena that the livefragment javascript is already loaded.  One way to do this is to call the 'hidden' _shouldInclude method on the athena livepage instance, e.g self._shouldInclude('yourjsmodule').  This will let athena know that the javascript is already loaded and not to load it twice.",',0
736,70,1144676168.4541,glyph,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Divmod software for you to use and enjoy ==
=== Infrastructure ===
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&keywords=%7Ereview&order=priority Reviews] [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&component=Reviews&order=priority (Reviews component [old])]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]


== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://xapian.org Xapian] fast, smart, scalable full text indexing.
 * [http://hyperestraier.sourceforge.net/ Hyperestraier] the new full text indexer in town and [http://hype.python-hosting.com/ Hype Python bindings].
 * [http://www.zope.org/Products/ZopeInterface Zope Interfaces] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.",',0
737,71,1144676190.96838,glyph,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Divmod software for you to use and enjoy ==
=== Infrastructure ===
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&keywords=%7Ereview&order=priority Reviews] [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&component=Reviews&order=priority (Reviews component (old)]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]


== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://xapian.org Xapian] fast, smart, scalable full text indexing.
 * [http://hyperestraier.sourceforge.net/ Hyperestraier] the new full text indexer in town and [http://hype.python-hosting.com/ Hype Python bindings].
 * [http://www.zope.org/Products/ZopeInterface Zope Interfaces] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.",',0
738,7,1144869574.85494,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodCombinator Combinator] : Tutorial =
[[PageOutline(2-3,Contents)]]
[wiki:DivmodCombinator Combinator] is a tool to help
developers use and manage multiple branches of software hosted in a
[http://subversion.tigris.org/ Subversion] (SVN from now on) repository.

== Let's Play ==

The last thing you want to do while following this tutorial is scatter files
all over your disk and make changes to a real SVN repository so we'll start by
creating a directory on your disk to play in and a test SVN repository.

Combinator expects the trunk/branches/tags repository structure recommended by the
[http://svnbook.red-bean.com/ Version Control with Subversion] book.

{{{
$ mkdir CombinatorTutorial
$ cd CombinatorTutorial
$ svnadmin create repository
$ svn mkdir -m 'trunk/branches/tags structure' file://`pwd`/repository/trunk file://`pwd`/repository/branches file://`pwd`/repository/tags
$
}}}


== Install Combinator (sort of) ==

Combinator is current only available from Divmod's Subversion repository but
you've already got Subversion installed so it's easy to fetch.

{{{
$ pwd
/home/matt/CombinatorTutorial
$ mkdir -p Divmod/trunk
$ cd Divmod/trunk
$ svn co -q http://divmod.org/svn/Divmod/trunk/Combinator
$ cd ../..
$
}}}

{{{
$ pwd
/home/matt/CombinatorTutorial
$ eval `python Divmod/trunk/Combinator/environment.py`
[...]
$ ls
combinator_paths  Divmod repository
$
}}}

The eval line installs Combinator into your environment. If you like
Combinator you'll probably want to add that line to your shell's startup file
but it's a bit early for that right now ;-).

combinator_paths is a directory that Combinator uses to record what branches
you're working on and any binaries/scripts the branch provides.

(You may be wondering why I created the Divmod/trunk directory. The truth is I
don't know but Combinator seems to need those directories to work out where
your project directory is. Perhaps Combinator's environment.py will accept a
project directory argument one day.)

== Starting work on the Project ==

If you're still with me then this is where we actually start using Combinator.
We need to fetch the project trunk from the SVN repository and register it
with Combinator.

{{{
$ chbranch Project trunk file://`pwd`/repository/trunk
C: Checked out revision 1.
$ ls
combinator_paths  Divmod  Project  repository
$ ls Project/
trunk
$
}}}

Using all the powers my imagination can muster on a Friday evening, I called
the project Project. As you can hopefully see Combinator created the main
directory for Project development and checked out trunk.

Obviously, this is going to be a Twisted project ;-) so we'll get Twisted from
SVN too. (Don't worry, I just want another respository checked out really.)

{{{
$ pwd
/home/matt/CombinatorTutorial
$ chbranch Twisted trunk svn://svn.twistedmatrix.com/svn/Twisted/trunk
[...]
$ ls
combinator_paths  Divmod  Project  repository  Twisted
$ ls Twisted/
trunk
}}}

I mentioned above that Combinator records what branches you're currently
working on. Let's find out what Combinator thinks I'm working on.

{{{
$ whbranch
Project: trunk
Twisted: trunk
$
}}}

== Create a Development Branch ==

At some point we decide to add a substantial new feature to Project.
Obviously, we'd never work directly on trunk so we need a branch to work in.

{{{
$ mkbranch Project say-hello
[...]
$ ls Project/
branches  trunk
$ ls Project/branches/
say-hello
$ whbranch
Project: say-hello
Twisted: trunk
$
}}}

Let's add an exciting new feature.

{{{
$ pwd
/home/matt/CombinatorTutorial
$ cd Project/branches/say-hello/
$ echo 'print 'Hello, Combinator.'' > test.py
$ svn add test.py
$ svn commit -m ''
$
}}}

Hurray, done already! Merge back to trunk so we can roll this out to our eager
customers.

{{{
$ unbranch Project
[...]
$ 
}}}

That actually merges to the local copy of trunk. Check the changes look sane
and then commit.

{{{
$ cd ../../trunk/
$ svn status
A  +   test.py
$ svn commit -m 'Merged say-hello to trunk.'
$ whbranch
Project: trunk
Twisted: trunk
$
}}}

== Merging Forward ==

A new feature means a new branch.

{{{
$ pwd
/home/matt/CombinatorTutorial/Project
$ mkbranch Project another-feature
[...]
$ whbranch
Project: another-feature
Twisted: trunk
$ cd branches/another-feature/
$ echo 'print 'Hello, Bloatware.'' > test.py
$ svn commit -m ''
[...]
$
}}}

Half way through development someone merges new code to trunk that would be
really useful to this branch too.

{{{
$ cd ../../trunk/
$ touch another.py
$ svn add another.py
$ svn commit -m ''
$ cd ../branches/another-feature/
$
}}}

We can pick up the changes to trunk and continue development on the branch by
'merging forward'.

{{{
$ unbranch Project; mkbranch Project another-feature-2
$ whbranch
Project: another-feature-2
Twisted: trunk
$ cd ../another-feature-2/
$ svn status
M      test.py
$ ls
another.py  test.py
$
}}}

We complete the development of the new feature, commit and merge to trunk as
before.

{{{
$ svn commit -m ''
$ unbranch Project
$ cd ../../trunk/
$ svn status
M      test.py
$ svn commit -m 'Merged another-feature-2'
$
}}}

= Final Notes =

Combinator is a useful tool for BranchBasedDevelopment although I think it's still in its infancy. There are other aspects of merging that Combinator could manage that may make it more useful. For instance, some assistance with finalising (commitbranch?) and aborting (rmbranch?) a branch might be nice.

If I ever work out for sure what additional features are required I will [http://divmod.org/trac/newticket create a ticket].","added parent links and nav menu",0
739,1,1144938665.57372,glyph,198.49.126.204,,,
740,12,1144938734.0791,glyph,198.49.126.204,"= The Methodology Formerly Known as Branch Based Development =

We have changed the name of this methodology to the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System].",',0
741,2,1144939343.044,glyph,198.49.126.204,,,
742,3,1144939639.27428,glyph,198.49.126.204,,,
743,3,1145025860.4949,karlb,198.49.126.204,"This is work in progress. Don't read it, yet!

== Part 1: Creating an Offering and Running it in a Mantissa Server ==

This is much like in the MantissaWikiTutorial, but this time we will use both a public and a private page.
=== Create Skeleton ===

{{{
axiomatic project -n blog
cd blog
axiomatic -d blogtut.axiom mantissa
axiomatic -d blogtut.axiom web --static static/blog:blog/static/
}}}

The private page already exists in the skeletion, so let's add a public page.

=== Add Public Page ===

{{{
appPowerups = (
    blog_model.BlogStart,
    blog_model.BlogPublicPage,
)
}}}

Create the file 'blog/themes/base/blog-public.html' with the following content:
{{{
<div xmlns='http://www.w3.org/1999/xhtml'
     xmlns:nevow='http://nevow.com/ns/nevow/0.1'>
	<h1>Blog Test</h1>
</div>
}}}

{{{
from nevow import loaders, inevow
from nevow.rend import Page

class BlogPublicView(Page):

    docFactory = loaders.xmlfile('blog/themes/base/blog-public.html')

    def __init__(self, original):
        Page.__init__(self)
        self.original = original

    def customizeFor(self, avatar):
        return self
}}}

{{{
class BlogPublicPage(Item, InstallableMixin):
    # This object can be browsed from the web
    # From the mantissa perspective this is the model in the MVC pattern
    implements(ixmantissa.IPublicPage)

    schemaVersion = 1                  # First version of this object.
    typeName = 'blog_public_page'      # Database table name.

    name = text()               # We must have at least one attribute - model
                                # objects must store data.
    installedOn = reference()

    def installOn(self, other):
        super(BlogPublicPage, self).installOn(other)
        other.powerUp(self, ixmantissa.IPublicPage)

    def getResource(self):
        from blog.blog_view import BlogPublicView
        return BlogPublicView(self)
}}}

=== Install Offering ===

The same way as in MantissaWikiTutorial

=== Allow admin to view !BlogStart ===

REPL:
{{{
from blog.blog_model import BlogStart
BlogStart(store=s).installOn(s)
}}}

== Part 2: Editing Blog Posts ==

=== Create Model for Blog Posts ===
{{{
class BlogPost(Item):
    schemaVersion = 1           # First version of this object.
    typeName = 'blog_post'      # Database table name.

    title = text()
    body = text()
}}}

=== Add some Fancy JavaScript Code ===
Add this to your blog.js
{{{

var posts = {};
var id_of_edited_post = null;

function change_post(id, title, body) {
    posts[id] = {
        'id': id,
        'title': title,
        'body': body
    };
    show_post(id);
}

function edit_post(id) {
    var edit_area = document.getElementById('edit_area');    
    var title_area = document.getElementById('title_area');
    var post = posts[id];
    title_area.value = post.title;
    edit_area.value = post.body;
    id_of_edited_post = id;
}

function save_post() {
    var edit_area = document.getElementById('edit_area');
    var title_area = document.getElementById('title_area');
    server.handle('save_post', id_of_edited_post, title_area.value, edit_area.value);
}

function delete_post(id) {
    delete posts[id];
    server.handle('delete_post', id);
    var row = document.getElementById(id);
    row.parentNode.removeChild(row);
}

function new_post(id) {
    var edit_area = document.getElementById('edit_area');    
    var title_area = document.getElementById('title_area');    
    title_area.value = '';
    edit_area.value = '';
    id_of_edited_post = null;
}

function init() {
    alert('a')
}

function show_post(id) {
    var post = posts[id];
/*    var new_row = '<tr id='' + post.id + ''><td>' + post.title + '</td></tr>';*/
    var row = document.getElementById(id);
    if (!row) {
        row = document.createElement('tr');
        row.setAttribute('id', post.id );
        var post_table = document.getElementById('post_table');
        post_table.insertBefore(row, post_table.firstChild);
    }
    row.innerHTML = '<td><a href='#' onclick='edit_post(' + post.id + '); return false;'>' + post.title + '</td>';
    row.innerHTML += '<td style='text-align:center'><a href='#' onclick='delete_post(' + post.id + '); return false;'>x</td></td>';
}
}}}

=== Enhance View with Editing Methods ===

These will be called from JavaScript via Nevow's great Athena.

{{{
class BlogView(Fragment):
    # This is a Fragment of a Page
    implements(ixmantissa.INavigableFragment)

    # This View will use the blog-start.html template
    fragmentName = 'blog-start'

    # We won't use LivePage or Athena
    live = True

    def goingLive(self, ctx, client):
        self.client = client

        from blog.blog_model import BlogPost
        posts = self.original.store.query(BlogPost)
        for post in posts:
            client.call('change_post', post.storeID, post.title or 'No Title', post.body)
            
    # you can only call functions starting with 'handle_' from JavaScript
    def handle_save_post(self, context, id, title, body):
        from blog.blog_model import BlogPost
        if id == 'null':
            post = BlogPost(store=self.original.store)
        else:
            post = self.original.store.getItemByID(long(id))
        post.title = unicode(title)
        post.body = unicode(body)
        self.client.call('change_post', id, title or 'No Title', body)

    def handle_delete_post(self, context, id):
        from blog.blog_model import BlogPost
        post = self.original.store.getItemByID(long(id))
        post.deleteFromStore()

}}}

=== Adapt Template ===

blog-start.html should look like this:

{{{
<div xmlns='http://www.w3.org/1999/xhtml'
     xmlns:nevow='http://nevow.com/ns/nevow/0.1'>
    Welcome to the Blog Application
	<table id='post_table' style='border: 1px solid black'>
		<tr><th>Topic</th><th>Delete Post</th></tr>
	</table>
	<form>
		<input type='text' size='60' id='title_area'/>
		<textarea cols='60' rows='30' id='edit_area'/>
	</form>
	<input type='button' value='Save Post' onclick='save_post()'/>
	<input type='button' value='Save Post' onclick='new_post()'/>
</div>
}}}

Now log in as admin an navigate to the Blog application.

== Part 3: Showing your posts to the public ==

=== Add render Method to View ===

{{{
class BlogPublicView(Page):

    docFactory = loaders.xmlfile('blog/themes/base/blog-public.html')

    def __init__(self, original):
        Page.__init__(self)
        self.original = original

    def customizeFor(self, avatar):
        return self

    def render_posts(self, context, data):
        # Get admin@localhost's store, where his blog posts are
        # There's certainly a better way for this!
        from axiom.store import Store
        store = Store('blogtut.axiom/files/account/localhost/admin.axiom')
            
        # format blog posts
        from blog.blog_model import BlogPost
        posts = store.query(BlogPost)
        from nevow import tags
        post_html = [
            [
                tags.Tag('dl')[
                    tags.dt(style='font-weight:bold')[post.title],
                    tags.dd[post.body],
                ]
            ]
            for post in posts
        ]
        return post_html
}}}

=== Adapt Template ===
Change blog-public.html to:
{{{
<div xmlns='http://www.w3.org/1999/xhtml'
     xmlns:nevow='http://nevow.com/ns/nevow/0.1'>
	<h1>admin@localhost's blog</h1>
	<nevow:invisible nevow:render='posts' />	
</div>
}}}",',0
744,4,1145029316.59442,karlb,198.49.126.204,,,
745,5,1145029706.42484,karlb,198.49.126.204,,,
746,16,1145030033.63048,karlb,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the AxiomProject object database, and the TwistedFramework, as well as web user-interface utilities.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicle), and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.4.1.tar.gz?format=raw Get the most recent release - 0.4.1!] ([http://www.livejournal.com/users/jcalderone/18622.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== Tutorials ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:MantissaWikiTutorial Mantissa Wiki Tutorial] A bit short on explanations, but complete
 * [wiki:MantissaBlogTutorial Mantissa Blog Tutorial] 
 * [wiki:MantissaHowTo An example of how to build a Mantissa application (incomplete)]
 * [http://moxn.net/~mesozoic/axiom-howto/ Writing Web Applications with Axiom and Mantissa (mostly outdated)]

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
",',0
747,24,1145030210.08234,karlb,198.49.126.204,,,
748,17,1145030258.60895,karlb,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the AxiomProject object database, and the TwistedFramework, as well as web user-interface utilities.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicle), and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.4.1.tar.gz?format=raw Get the most recent release - 0.4.1!] ([http://www.livejournal.com/users/jcalderone/18622.html Release Announcement])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== Tutorials ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:MantissaWikiTutorial Mantissa Wiki Tutorial] A bit short on explanations, but complete
 * [wiki:MantissaBlogTutorial Mantissa Blog Tutorial] 
 * [wiki:MantissaHowTo An example of how to build a Mantissa application (incomplete)]
 * [http://moxn.net/~mesozoic/axiom-howto/ Writing Web Applications with Axiom and Mantissa (the Mantissa part is mostly outdated)]

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
",',0
749,6,1145030800.51116,karlb,198.49.126.204,,,
750,1,1145045190.21605,glyph,198.49.126.204,"We need to write a DNS server which can support Mantissa.  It will be called 'polynomial', i.e. 'many names'.

No code has yet been checked in...",',0
751,8,1145217790.54729,glyph,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodCombinator Combinator] : Tutorial =
[[PageOutline(2-3,Contents)]]
[wiki:DivmodCombinator Combinator] is a tool to help
developers use and manage multiple branches of software hosted in a
[http://subversion.tigris.org/ Subversion] (SVN from now on) repository.

== Let's Play ==

The last thing you want to do while following this tutorial is scatter files
all over your disk and make changes to a real SVN repository so we'll start by
creating a directory on your disk to play in and a test SVN repository.

Combinator expects the trunk/branches/tags repository structure recommended by the
[http://svnbook.red-bean.com/ Version Control with Subversion] book.

{{{
$ mkdir CombinatorTutorial
$ cd CombinatorTutorial
$ svnadmin create repository
$ svn mkdir -m 'trunk/branches/tags structure' file://`pwd`/repository/trunk file://`pwd`/repository/branches file://`pwd`/repository/tags
$
}}}


== Install Combinator (sort of) ==

Make sure you're in the right place:

{{{
$ pwd
/home/matt/CombinatorTutorial
}}}

Combinator is current only available from Divmod's Subversion repository but
you've already got Subversion installed so it's easy to fetch.  If you are installing the full Divmod suite, do this to check out all of Divmod:

{{{
$ svn co -q http://divmod.org/svn/Divmod/trunk Divmod/trunk
}}}

If you would like to just check out Combinator, you can also do that:

{{{
$ svn co -q http://divmod.org/svn/Divmod/trunk/Combinator Divmod/trunk/Combinator
}}}

    '''Note:''' In either case, you __must__ put your Combinator checkout into a directory named ''CombinatorHome''{{{/Divmod/}}}'''trunk'''{{{/Combinator}}} - omitting the required '''trunk''' path segment will result in a broken installation, with neither Combinator itself nor the Divmod package functioning properly.  Also, if you are installing Combinator without the other Divmod packages, you __must__ still put it in a directory called Divmod/trunk/Combinator - those three path segments are the way that it discovers where to import itself from, and also where to place other files, such as the ones listed below.  In this tutorial ''CombinatorHome'' is {{{/home/matt/CombinatorTutorial}}}: that path is the one part of the Combinator installation path that you may change.

{{{
$ pwd
/home/matt/CombinatorTutorial
$ eval `python Divmod/trunk/Combinator/environment.py`
[...]
$ ls
combinator_paths  Divmod repository
$
}}}

The eval line installs Combinator into your environment. If you like
Combinator you'll probably want to add that line to your shell's startup file
but it's a bit early for that right now ;-).

combinator_paths is a directory that Combinator uses to record what branches
you're working on and any binaries/scripts the branch provides.

(You may be wondering why I created the Divmod/trunk directory. The truth is I
don't know but Combinator seems to need those directories to work out where
your project directory is. Perhaps Combinator's environment.py will accept a
project directory argument one day.)

== Starting work on the Project ==

If you're still with me then this is where we actually start using Combinator.
We need to fetch the project trunk from the SVN repository and register it
with Combinator.

{{{
$ chbranch Project trunk file://`pwd`/repository/trunk
C: Checked out revision 1.
$ ls
combinator_paths  Divmod  Project  repository
$ ls Project/
trunk
$
}}}

Using all the powers my imagination can muster on a Friday evening, I called
the project Project. As you can hopefully see Combinator created the main
directory for Project development and checked out trunk.

Obviously, this is going to be a Twisted project ;-) so we'll get Twisted from
SVN too. (Don't worry, I just want another respository checked out really.)

{{{
$ pwd
/home/matt/CombinatorTutorial
$ chbranch Twisted trunk svn://svn.twistedmatrix.com/svn/Twisted/trunk
[...]
$ ls
combinator_paths  Divmod  Project  repository  Twisted
$ ls Twisted/
trunk
}}}

I mentioned above that Combinator records what branches you're currently
working on. Let's find out what Combinator thinks I'm working on.

{{{
$ whbranch
Project: trunk
Twisted: trunk
$
}}}

== Create a Development Branch ==

At some point we decide to add a substantial new feature to Project.
Obviously, we'd never work directly on trunk so we need a branch to work in.

{{{
$ mkbranch Project say-hello
[...]
$ ls Project/
branches  trunk
$ ls Project/branches/
say-hello
$ whbranch
Project: say-hello
Twisted: trunk
$
}}}

Let's add an exciting new feature.

{{{
$ pwd
/home/matt/CombinatorTutorial
$ cd Project/branches/say-hello/
$ echo 'print 'Hello, Combinator.'' > test.py
$ svn add test.py
$ svn commit -m ''
$
}}}

Hurray, done already! Merge back to trunk so we can roll this out to our eager
customers.

{{{
$ unbranch Project
[...]
$ 
}}}

That actually merges to the local copy of trunk. Check the changes look sane
and then commit.

{{{
$ cd ../../trunk/
$ svn status
A  +   test.py
$ svn commit -m 'Merged say-hello to trunk.'
$ whbranch
Project: trunk
Twisted: trunk
$
}}}

== Merging Forward ==

A new feature means a new branch.

{{{
$ pwd
/home/matt/CombinatorTutorial/Project
$ mkbranch Project another-feature
[...]
$ whbranch
Project: another-feature
Twisted: trunk
$ cd branches/another-feature/
$ echo 'print 'Hello, Bloatware.'' > test.py
$ svn commit -m ''
[...]
$
}}}

Half way through development someone merges new code to trunk that would be
really useful to this branch too.

{{{
$ cd ../../trunk/
$ touch another.py
$ svn add another.py
$ svn commit -m ''
$ cd ../branches/another-feature/
$
}}}

We can pick up the changes to trunk and continue development on the branch by
'merging forward'.

{{{
$ unbranch Project; mkbranch Project another-feature-2
$ whbranch
Project: another-feature-2
Twisted: trunk
$ cd ../another-feature-2/
$ svn status
M      test.py
$ ls
another.py  test.py
$
}}}

We complete the development of the new feature, commit and merge to trunk as
before.

{{{
$ svn commit -m ''
$ unbranch Project
$ cd ../../trunk/
$ svn status
M      test.py
$ svn commit -m 'Merged another-feature-2'
$
}}}

= Final Notes =

Combinator is a useful tool for BranchBasedDevelopment although I think it's still in its infancy. There are other aspects of merging that Combinator could manage that may make it more useful. For instance, some assistance with finalising (commitbranch?) and aborting (rmbranch?) a branch might be nice.

If I ever work out for sure what additional features are required I will [http://divmod.org/trac/newticket create a ticket].",',0
752,9,1145217842.81966,glyph,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodCombinator Combinator] : Tutorial =
[[PageOutline(2-3,Contents)]]
[wiki:DivmodCombinator Combinator] is a tool to help
developers use and manage multiple branches of software hosted in a
[http://subversion.tigris.org/ Subversion] (SVN from now on) repository.

== Let's Play ==

The last thing you want to do while following this tutorial is scatter files
all over your disk and make changes to a real SVN repository so we'll start by
creating a directory on your disk to play in and a test SVN repository.

Combinator expects the trunk/branches/tags repository structure recommended by the
[http://svnbook.red-bean.com/ Version Control with Subversion] book.

{{{
$ mkdir CombinatorTutorial
$ cd CombinatorTutorial
$ svnadmin create repository
$ svn mkdir -m 'trunk/branches/tags structure' file://`pwd`/repository/trunk file://`pwd`/repository/branches file://`pwd`/repository/tags
$
}}}


== Install Combinator (sort of) ==

Make sure you're in the right place:

{{{
$ pwd
/home/matt/CombinatorTutorial
}}}

Combinator is current only available from Divmod's Subversion repository but
you've already got Subversion installed so it's easy to fetch.  If you are installing the full Divmod suite, do this to check out all of Divmod:

{{{
$ svn co -q http://divmod.org/svn/Divmod/trunk Divmod/trunk
}}}

If you would like to just check out Combinator, you can also do that:

{{{
$ svn co -q http://divmod.org/svn/Divmod/trunk/Combinator Divmod/trunk/Combinator
}}}

    '''Note:''' In either case, you __must__ put your Combinator checkout into a directory named ''CombinatorHome''{{{/Divmod/}}}'''trunk'''{{{/Combinator}}} - omitting the required '''trunk''' path segment will result in a broken installation, with neither Combinator itself nor the Divmod package functioning properly.  Also, if you are installing Combinator without the other Divmod packages, you __must__ still put it in a directory called Divmod/trunk/Combinator - those three path segments are the way that it discovers where to import itself from, and also where to place other files, such as the ones listed below.  In this tutorial ''CombinatorHome'' is {{{/home/matt/CombinatorTutorial}}}: that path is the one part of the Combinator installation path that you may change.

{{{
$ pwd
/home/matt/CombinatorTutorial
$ eval `python Divmod/trunk/Combinator/environment.py`
[...]
$ ls
combinator_paths  Divmod repository
$
}}}

The eval line installs Combinator into your environment. If you like
Combinator you'll probably want to add that line to your shell's startup file
but it's a bit early for that right now ;-).

combinator_paths is a directory that Combinator uses to record what branches
you're working on and any binaries/scripts the branch provides.

== Starting work on the Project ==

If you're still with me then this is where we actually start using Combinator.
We need to fetch the project trunk from the SVN repository and register it
with Combinator.

{{{
$ chbranch Project trunk file://`pwd`/repository/trunk
C: Checked out revision 1.
$ ls
combinator_paths  Divmod  Project  repository
$ ls Project/
trunk
$
}}}

Using all the powers my imagination can muster on a Friday evening, I called
the project Project. As you can hopefully see Combinator created the main
directory for Project development and checked out trunk.

Obviously, this is going to be a Twisted project ;-) so we'll get Twisted from
SVN too. (Don't worry, I just want another respository checked out really.)

{{{
$ pwd
/home/matt/CombinatorTutorial
$ chbranch Twisted trunk svn://svn.twistedmatrix.com/svn/Twisted/trunk
[...]
$ ls
combinator_paths  Divmod  Project  repository  Twisted
$ ls Twisted/
trunk
}}}

I mentioned above that Combinator records what branches you're currently
working on. Let's find out what Combinator thinks I'm working on.

{{{
$ whbranch
Project: trunk
Twisted: trunk
$
}}}

== Create a Development Branch ==

At some point we decide to add a substantial new feature to Project.
Obviously, we'd never work directly on trunk so we need a branch to work in.

{{{
$ mkbranch Project say-hello
[...]
$ ls Project/
branches  trunk
$ ls Project/branches/
say-hello
$ whbranch
Project: say-hello
Twisted: trunk
$
}}}

Let's add an exciting new feature.

{{{
$ pwd
/home/matt/CombinatorTutorial
$ cd Project/branches/say-hello/
$ echo 'print 'Hello, Combinator.'' > test.py
$ svn add test.py
$ svn commit -m ''
$
}}}

Hurray, done already! Merge back to trunk so we can roll this out to our eager
customers.

{{{
$ unbranch Project
[...]
$ 
}}}

That actually merges to the local copy of trunk. Check the changes look sane
and then commit.

{{{
$ cd ../../trunk/
$ svn status
A  +   test.py
$ svn commit -m 'Merged say-hello to trunk.'
$ whbranch
Project: trunk
Twisted: trunk
$
}}}

== Merging Forward ==

A new feature means a new branch.

{{{
$ pwd
/home/matt/CombinatorTutorial/Project
$ mkbranch Project another-feature
[...]
$ whbranch
Project: another-feature
Twisted: trunk
$ cd branches/another-feature/
$ echo 'print 'Hello, Bloatware.'' > test.py
$ svn commit -m ''
[...]
$
}}}

Half way through development someone merges new code to trunk that would be
really useful to this branch too.

{{{
$ cd ../../trunk/
$ touch another.py
$ svn add another.py
$ svn commit -m ''
$ cd ../branches/another-feature/
$
}}}

We can pick up the changes to trunk and continue development on the branch by
'merging forward'.

{{{
$ unbranch Project; mkbranch Project another-feature-2
$ whbranch
Project: another-feature-2
Twisted: trunk
$ cd ../another-feature-2/
$ svn status
M      test.py
$ ls
another.py  test.py
$
}}}

We complete the development of the new feature, commit and merge to trunk as
before.

{{{
$ svn commit -m ''
$ unbranch Project
$ cd ../../trunk/
$ svn status
M      test.py
$ svn commit -m 'Merged another-feature-2'
$
}}}

= Final Notes =

Combinator is a useful tool for BranchBasedDevelopment although I think it's still in its infancy. There are other aspects of merging that Combinator could manage that may make it more useful. For instance, some assistance with finalising (commitbranch?) and aborting (rmbranch?) a branch might be nice.

If I ever work out for sure what additional features are required I will [http://divmod.org/trac/newticket create a ticket].",',0
753,10,1145230503.33266,iratsu,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodCombinator Combinator] : Tutorial =
[[PageOutline(2-3,Contents)]]
[wiki:DivmodCombinator Combinator] is a tool to help
developers use and manage multiple branches of software hosted in a
[http://subversion.tigris.org/ Subversion] (SVN from now on) repository.

== Let's Play ==

The last thing you want to do while following this tutorial is scatter files
all over your disk and make changes to a real SVN repository so we'll start by
creating a directory on your disk to play in and a test SVN repository.

Combinator expects the trunk/branches/tags repository structure recommended by the
[http://svnbook.red-bean.com/ Version Control with Subversion] book.

{{{
$ mkdir CombinatorTutorial
$ cd CombinatorTutorial
$ svnadmin create repository
$ svn mkdir -m 'trunk/branches/tags structure' file://`pwd`/repository/trunk file://`pwd`/repository/branches file://`pwd`/repository/tags
$
}}}


== Install Combinator (sort of) ==

Make sure you're in the right place:

{{{
$ pwd
/home/matt/CombinatorTutorial
}}}

Combinator is current only available from Divmod's Subversion repository but
you've already got Subversion installed so it's easy to fetch.  If you are installing the full Divmod suite, do this to check out all of Divmod and tell Combinator to add Divmod into your environment:

{{{
$ svn co -q http://divmod.org/svn/Divmod/trunk Divmod/trunk
$ chbranch Divmod trunk
}}}

If you would like to just check out Combinator, you can also do that:

{{{
$ svn co -q http://divmod.org/svn/Divmod/trunk/Combinator Divmod/trunk/Combinator
}}}

    '''Note:''' In either case, you __must__ put your Combinator checkout into a directory named ''CombinatorHome''{{{/Divmod/}}}'''trunk'''{{{/Combinator}}} - omitting the required '''trunk''' path segment will result in a broken installation, with neither Combinator itself nor the Divmod package functioning properly.  Also, if you are installing Combinator without the other Divmod packages, you __must__ still put it in a directory called Divmod/trunk/Combinator - those three path segments are the way that it discovers where to import itself from, and also where to place other files, such as the ones listed below.  In this tutorial ''CombinatorHome'' is {{{/home/matt/CombinatorTutorial}}}: that path is the one part of the Combinator installation path that you may change.

{{{
$ pwd
/home/matt/CombinatorTutorial
$ eval `python Divmod/trunk/Combinator/environment.py`
[...]
$ ls
combinator_paths  Divmod repository
$
}}}

The eval line installs Combinator into your environment. If you like
Combinator you'll probably want to add that line to your shell's startup file
but it's a bit early for that right now ;-).

combinator_paths is a directory that Combinator uses to record what branches
you're working on and any binaries/scripts the branch provides.

== Starting work on the Project ==

If you're still with me then this is where we actually start using Combinator.
We need to fetch the project trunk from the SVN repository and register it
with Combinator.

{{{
$ chbranch Project trunk file://`pwd`/repository/trunk
C: Checked out revision 1.
$ ls
combinator_paths  Divmod  Project  repository
$ ls Project/
trunk
$
}}}

Using all the powers my imagination can muster on a Friday evening, I called
the project Project. As you can hopefully see Combinator created the main
directory for Project development and checked out trunk.

Obviously, this is going to be a Twisted project ;-) so we'll get Twisted from
SVN too. (Don't worry, I just want another respository checked out really.)

{{{
$ pwd
/home/matt/CombinatorTutorial
$ chbranch Twisted trunk svn://svn.twistedmatrix.com/svn/Twisted/trunk
[...]
$ ls
combinator_paths  Divmod  Project  repository  Twisted
$ ls Twisted/
trunk
}}}

I mentioned above that Combinator records what branches you're currently
working on. Let's find out what Combinator thinks I'm working on.

{{{
$ whbranch
Project: trunk
Twisted: trunk
$
}}}

== Create a Development Branch ==

At some point we decide to add a substantial new feature to Project.
Obviously, we'd never work directly on trunk so we need a branch to work in.

{{{
$ mkbranch Project say-hello
[...]
$ ls Project/
branches  trunk
$ ls Project/branches/
say-hello
$ whbranch
Project: say-hello
Twisted: trunk
$
}}}

Let's add an exciting new feature.

{{{
$ pwd
/home/matt/CombinatorTutorial
$ cd Project/branches/say-hello/
$ echo 'print 'Hello, Combinator.'' > test.py
$ svn add test.py
$ svn commit -m ''
$
}}}

Hurray, done already! Merge back to trunk so we can roll this out to our eager
customers.

{{{
$ unbranch Project
[...]
$ 
}}}

That actually merges to the local copy of trunk. Check the changes look sane
and then commit.

{{{
$ cd ../../trunk/
$ svn status
A  +   test.py
$ svn commit -m 'Merged say-hello to trunk.'
$ whbranch
Project: trunk
Twisted: trunk
$
}}}

== Merging Forward ==

A new feature means a new branch.

{{{
$ pwd
/home/matt/CombinatorTutorial/Project
$ mkbranch Project another-feature
[...]
$ whbranch
Project: another-feature
Twisted: trunk
$ cd branches/another-feature/
$ echo 'print 'Hello, Bloatware.'' > test.py
$ svn commit -m ''
[...]
$
}}}

Half way through development someone merges new code to trunk that would be
really useful to this branch too.

{{{
$ cd ../../trunk/
$ touch another.py
$ svn add another.py
$ svn commit -m ''
$ cd ../branches/another-feature/
$
}}}

We can pick up the changes to trunk and continue development on the branch by
'merging forward'.

{{{
$ unbranch Project; mkbranch Project another-feature-2
$ whbranch
Project: another-feature-2
Twisted: trunk
$ cd ../another-feature-2/
$ svn status
M      test.py
$ ls
another.py  test.py
$
}}}

We complete the development of the new feature, commit and merge to trunk as
before.

{{{
$ svn commit -m ''
$ unbranch Project
$ cd ../../trunk/
$ svn status
M      test.py
$ svn commit -m 'Merged another-feature-2'
$
}}}

= Final Notes =

Combinator is a useful tool for BranchBasedDevelopment although I think it's still in its infancy. There are other aspects of merging that Combinator could manage that may make it more useful. For instance, some assistance with finalising (commitbranch?) and aborting (rmbranch?) a branch might be nice.

If I ever work out for sure what additional features are required I will [http://divmod.org/trac/newticket create a ticket].",',0
754,5,1145314057.64979,glyph,198.49.126.204,"Divmod uses code review for just about every change to any project.

Code review is a pretty simple process: at its heart, it is little more than reading some code written by someone else.  Nevertheless, it can be useful to have a set of things on which to focus during a review:

  * Does the branch merge or the diff apply cleanly?
  * Are there unit tests for the code being changed or added?
  * Do the unit tests pass for you?
  * Do the unit tests pass for buildbot?
  * Is there documentation for new code?
  * Where appropriate, has existing documentation been updated (including ChangeLog/NEWS files)?
  * Does the code adhere to the [wiki:CodingStandard coding standard]?

There's the easy list.  Most are mechanical checks.  Don't feel bad about rejecting a branch if the answer to any of these questions is no: the problems may seem minor in isolation, but each contributes to overall poor code quality.  Moreover, sometimes apparently minor problems can be hiding larger issues.

Taking a look at the bigger picture can be a little bit harder, but it's just as important. ''Finish this section.''
",',0
755,1,1145315032.11559,glyph,198.49.126.204,"Divmod uses the Twisted coding standard.

In addition, we are trying to make certain aspects of the Twisted coding standard stricter.  For example:

 * There should be 3 blank lines between module-level suites, such as classes and top-level functions.

 * There should be 2 blank lines between class-level suites, such as methods.

 * Within a class, the ordering of the elements is:

    1. docstring

    2. {{{implements()}}}

    3. class attributes

    4. Python special methods, starting with {{{__new__}}} if present, then {{{__init__}}}.

    5. Methods part of no interface

    6. Methods implementing an interface, grouped by interface, prefixed with a comment like this:
{{{
#!python
# IYourInterface
}}}

(The effort to make the Twisted coding standard strict enough to avoid all syntactic inconsistencies is informally referred to by some as 'PEP 8888')",',0
756,2,1145315060.85916,glyph,198.49.126.204,"Divmod uses the Twisted coding standard.

In addition, we are trying to make certain aspects of the Twisted coding standard stricter.  For example:

 * There should be 3 blank lines between module-level suites, such as classes and top-level functions.
 * There should be 2 blank lines between class-level suites, such as methods.
 * Within a class, the ordering of the elements is:
    1. docstring
    2. {{{implements()}}}
    3. class attributes
    4. Python special methods, starting with {{{__new__}}} if present, then {{{__init__}}}.
    5. Methods part of no interface
    6. Methods implementing an interface, grouped by interface, prefixed with a comment like this:
{{{
#!python
# IYourInterface
}}}

(The effort to make the Twisted coding standard strict enough to avoid all syntactic inconsistencies is informally referred to by some as 'PEP 8888')",',0
757,3,1145315082.19131,glyph,198.49.126.204,"Divmod uses the Twisted coding standard.

In addition, we are trying to make certain aspects of the Twisted coding standard stricter.  For example:

 * There should be 3 blank lines between module-level suites, such as classes and top-level functions.
 * There should be 2 blank lines between class-level suites, such as methods.
 * Within a class, the ordering of the elements is:
    1. docstring
    1. {{{implements()}}}
    1. class attributes
    1. Python special methods, starting with {{{__new__}}} if present, then {{{__init__}}}.
    1. Methods part of no interface
    1. Methods implementing an interface, grouped by interface, prefixed with a comment like this:
{{{
#!python
# IYourInterface
}}}

(The effort to make the Twisted coding standard strict enough to avoid all syntactic inconsistencies is informally referred to by some as 'PEP 8888')",',0
758,4,1145315102.69222,glyph,198.49.126.204,"Divmod uses the Twisted coding standard.

In addition, we are trying to make certain aspects of the Twisted coding standard stricter.  For example:

 * There should be 3 blank lines between module-level suites, such as classes and top-level functions.
 * There should be 2 blank lines between class-level suites, such as methods.
 * Within a class, the ordering of the elements is:
    1. docstring
    1. {{{implements()}}}
    1. class attributes
    1. Python special methods, starting with {{{__new__}}} if present, then {{{__init__}}}.
    1. Methods part of no interface
    1. Methods implementing an interface, grouped by interface, prefixed with a comment like this:
{{{
#!python
# IYourInterface}}}

(The effort to make the Twisted coding standard strict enough to avoid all syntactic inconsistencies is informally referred to by some as 'PEP 8888')",',0
759,5,1145315147.06762,glyph,198.49.126.204,"Divmod uses the Twisted coding standard.

In addition, we are trying to make certain aspects of the Twisted coding standard stricter.  For example:

 * There should be 3 blank lines between module-level suites, such as classes and top-level functions.
 * There should be 2 blank lines between class-level suites, such as methods.
 * Within a class, the ordering of the elements is:
    1. docstring
    1. {{{implements()}}}
    1. class attributes
    1. Python special methods, starting with {{{__new__}}} if present, then {{{__init__}}}.
    1. Methods part of no interface
    1. Methods implementing an interface, grouped by interface, prefixed with a comment like this:
{{{
#!python
# IYourInterface
}}}

(The effort to make the Twisted coding standard strict enough to avoid all syntactic inconsistencies is informally referred to by some as 'PEP 8888')",',0
760,6,1145315181.61244,glyph,198.49.126.204,"Divmod uses the Twisted coding standard.

In addition, we are trying to make certain aspects of the Twisted coding standard stricter.  For example:

 * There should be 3 blank lines between module-level suites, such as classes and top-level functions.
 * There should be 2 blank lines between class-level suites, such as methods.
 * Within a class, the ordering of the elements is:
    1. docstring
    1. {{{implements()}}}
    1. class attributes
    1. Python special methods, starting with {{{__new__}}} if present, then {{{__init__}}}.
    1. Methods part of no interface
    1. Methods implementing an interface, grouped by interface, prefixed with a comment like this:
{{{
#!python
# IYourInterface
}}}

(The effort to make the Twisted coding standard strict enough to avoid all syntactic inconsistencies is informally referred to by some as 'PEP 8888'.  It is not actually a PEP yet.)",',0
761,3,1145363775.27584,exarkun,198.49.126.204,"= Imaginary =

Imaginary numbers are so named not because they are fictitious, but because
they are along a different axis from real numbers.

Divmod Imaginary is a simulationist's take on the realm of role playing,
interactive fiction, and multiplayer dungeons.  It incorporates gameplay
features from each area while attempting to provide a richer environment
than is generally available from existing systems.

== Imagination ==

A simulation core.  Currently very raw.  Browse the [browser:trunk/Imaginary/imagination the source] or [query:status=new&status=assigned&status=reopened&component=Imaginary active tickets].

== Pottery ==

Another simulation core.  Attempts to accomplish the same goals as Imagination.  These two will probably merge some day.  [browser:trunk/Imaginary/pottery Browse source]

== Radical ==

See DivmodRadical.

",',0
762,4,1145363883.77146,exarkun,198.49.126.204,"= Imaginary =

Imaginary numbers are so named not because they are fictitious, but because
they are along a different axis from real numbers.

Divmod Imaginary is a simulationist's take on the realm of role playing,
interactive fiction, and multiplayer dungeons.  It incorporates gameplay
features from each area while attempting to provide a richer environment
than is generally available from existing systems.

== Imagination ==

A simulation core.  Currently very raw.  Browse the [browser:trunk/Imaginary/imagination the source] or [query:component=Imaginary tickets].

== Pottery ==

Another simulation core.  Attempts to accomplish the same goals as Imagination.  These two will probably merge some day.  [browser:trunk/Imaginary/pottery Browse source]

== Radical ==

See DivmodRadical.

",',0
763,5,1145364793.82125,exarkun,198.49.126.204,"= Imaginary =

Imaginary numbers are so named not because they are fictitious, but because
they are along a different axis from real numbers.

Divmod Imaginary is a simulationist's take on the realm of role playing,
interactive fiction, and multiplayer dungeons.  It incorporates gameplay
features from each area while attempting to provide a richer environment
than is generally available from existing systems.

== Imagination ==

A simulation core.  Currently very raw.  Browse the [browser:trunk/Imaginary/imagination the source] or [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Imaginary&order=priority tickets].

== Pottery ==

Another simulation core.  Attempts to accomplish the same goals as Imagination.  These two will probably merge some day.  [browser:trunk/Imaginary/pottery Browse source]

== Radical ==

See DivmodRadical.

",',0
764,6,1145365238.00806,exarkun,198.49.126.204,"= Imaginary =

Imaginary numbers are so named not because they are fictitious, but because
they are along a different axis from real numbers.

Divmod Imaginary is a simulationist's take on the realm of role playing,
interactive fiction, and multiplayer dungeons.  It incorporates gameplay
features from each area while attempting to provide a richer environment
than is generally available from existing systems.

== Imagination ==

A simulation core.  Currently very raw.  Browse the [browser:trunk/Imaginary/imagination the source] or [query:status=new|assigned|reopened&component=Imaginary tickets].

== Pottery ==

Another simulation core.  Attempts to accomplish the same goals as Imagination.  These two will probably merge some day.  [browser:trunk/Imaginary/pottery Browse source]

== Radical ==

See DivmodRadical.

",',0
765,7,1145374098.06137,radix,198.49.126.204,"= Imaginary =

Imaginary numbers are so named not because they are fictitious, but because
they are along a different axis from real numbers.

Divmod Imaginary is a simulationist's take on the realm of role playing,
interactive fiction, and multiplayer dungeons.  It incorporates gameplay
features from each area while attempting to provide a richer environment
than is generally available from existing systems.

Imaginary is in active development. 

 * [browser:trunk/Imaginary/imaginary Browse the source]. 
 * [query:status=new|assigned|reopened&component=Imaginary View the tickets].


== Radical ==

See DivmodRadical.

","Imaginary is Imaginary now!",0
766,3,1145397555.37449,harshaw,198.49.126.204,"Q) When I reload a page, the server logs a traceback ending with {{{exceptions.AssertionError: Cannot render a LivePage more than once}}}

A) LivePage instances maintain server-side state that corresponds to the connection to the browser.  Because of this, each LivePage instance can only be used to serve a single client.  When you serve LivePages, make sure that you create a new instance for each render pass.

Q) I can't debug athena on Internet explorer.  what gives?

A) Athena include the livefragment javascript in the body of the document via a script tag.  Visual studio doesn't appear to be happy with this and does not let you set break points.  If you load the javascript in the head of the document then you can set a break point in your athena livefragment javascript using visual studio.  The best way I found to do this is manually include the javacript in the header and then information athena that the livefragment javascript is already loaded.  One way to do this is to call the 'hidden' _shouldInclude method on the athena livepage instance, e.g self._shouldInclude('yourjsmodule').  This will let athena know that the javascript is already loaded and not to load it twice.

Q) Why doesn't Athena support Safari?

A) Safari has a broken JS implementation that throws an error when a nested 'named' function is encountered, e.g. 

{{{
methods(function foo(self) {},function bar(self) {});
}}}

A workaround would be to use anonymous functions instead of named functions.  Another issue is that someone needs to implement a custom runtime module in runtime.js to support Safari.
",',0
767,72,1145658988.23501,glyph,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Divmod software for you to use and enjoy ==
=== Infrastructure ===
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&keywords=%7Ereview&order=priority Reviews] [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&component=Reviews&order=priority (Reviews component (old)]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]


== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://xapian.org Xapian] fast, smart, scalable full text indexing.
 * [http://hyperestraier.sourceforge.net/ Hyperestraier] the new full text indexer in town and [http://hype.python-hosting.com/ Hype Python bindings].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.",',0
768,1,1145942781.56568,ironfroggy,198.49.126.204,"There was much discussion at #divmod about this after the ticket was posted. Mostly amberite, idnar, and myself were discussing the idea, and exarkum made some comments towards the end, reluctantly.

The concensus ammounts to a few positives:
 * Should be outside of Axiom, and Mantissa is the best place for it.
 * The default should be simple and basic, but customization should be just as easy.
 * Making an item editable in such a way should be explicit, not implicit (every item shouldnt magically be editable with this system)

Countering these points, there were some points of what we should ''not'' do:
 * Add anything to the Item subclasses
 * Allow editing of the item a reference points to within the containing item
 * Possibly, allow editing of references at all, by default

It became generally agreed upon that for each CRUD action, an item would be adapted to some CRUD interface, such as ICreatable, IEditable, IViewable, and IDeletable. Most of the talk revolved around IEditable, where we talked about how the item would be adapted to this, where a basic adapter would be provided to edit fields in very basic ways, mostly with just text boxes and basic validation based on the attribute types. The IEditable would generate the LiveForm, although there was some talk about how web-independant LiveForm really is, even though it is apparently meant to one day be usable for non-web UI. Making any type of item editable with the system would be a simple matter of registering the default IEditable adapter for the type.

Also to note, ICreatable would need to work differently than others, because it would not be adapted from an item but from an item class.",',0
769,1,1146070856.28639,glyph,198.49.126.204,"= Dynamic Typing: Reference to Any =

A column in your schema may contain a reference to any row in the database.

= Schema Migration: Automatic Upgrades =

Axiom defines a comprehensive API for upgrading from one version of a schema to the next, both writing upgraders, and scheduling them to be run.

= Transaction Management and Consistency =

While it is definitely possible to run in autocommit mode, axiom provides a 'transact' method to manage transactions for you.  Transactions are reverted when an exception crosses the transaction boundary, so errors will generally not affect the state of your persistent data.  When transactions are reverted, they are reverted ''all the way'': objects in memory are restored to the state they were in before the transaction began, both in memory and on disk.  Axiom also takes care to keep Python identity consistent with database identity within a process; if you load an object twice, and change one of its attributes, the attribute will therefore be changed in both places, making it safe to share references between different areas of code.

This is a critical feature for financial applications that is missing from other popular Python database tools, such as SQLObject and SQLAlchemy.

= Multi-Database =

Items stored in an Axiom database keep an explicit reference to the Store that they are a part of, rather than keeping an implicit store on the stack or in a process-global location.  'Explicit is better than implicit'.  Again, other popular tools make it difficult to share data between different databases.
",',0
770,15,1146075900.03409,exarkun,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= Goals =

(Put something here)

= Tutorial =

== Simple LiveFragment demo ==

Subclass {{{nevow.athena.LiveFragment}}} and provide a {{{docFactory}}} which uses the {{{liveFragment}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myFragment'))])

    def render_myFragment(self, ctx, data):
        f = MyFragment()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver, rend

class Root(rend.Page):
    def child_(self, ctx):
        return MyPage()

site = appserver.NevowSite(Root())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myfragment.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
#!js
var MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read [http://twistedmatrix.com/projects/core/documentation/howto/plugin.html the Twisted plugin documentation] to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveFragment}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))

    def __init__(self, *a, **kw):
        super(MyFragment, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment'))[
        T.button(onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyFragment}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyFragment(athena.LiveFragment):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument
    athena.expose(echo)
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myfragment.tac?format=raw myfragment.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tuturial]

= Implementation =

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call !Comet.  Athena's !JavaScript half makes an HTTP requests before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.
","Talk about Comet in the implementation section",0
771,23,1146412046.51705,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.4.0.tar.gz?format=raw Download the latest release - 0.4.0!] (Requires [wiki:DivmodEpsilon Epsilon]) [http://www.livejournal.com/users/jcalderone/18354.html Release announcement]
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [http://moxn.net/~mesozoic/axiom-howto/ Mesozoic's Axiom Howto]: This is essential reading. A step by step guide to writing your first Axiom application
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * axiomatic",',0
772,24,1146412060.11952,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.4.0.tar.gz?format=raw Download the latest release - 0.4.0!] (Requires [wiki:DivmodEpsilon Epsilon]) [http://www.livejournal.com/users/jcalderone/18354.html Release announcement]
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [http://moxn.net/~mesozoic/axiom-howto/ Mesozoic's Axiom Howto]: This is essential reading. A step by step guide to writing your first Axiom application
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]",',0
773,1,1146412634.70984,exarkun,198.49.126.204,"= Mantissa : Glossary =

 Offering::
  A set of configuration including powerups for a site store, an application store, and a user store.  An Offering represents a discrete set of functionality for a Mantissa server.  For example, an email service might be an offering.
",',0
774,1,1146412661.78841,exarkun,198.49.126.204,,,
775,4,1146412801.65095,exarkun,198.49.126.204,"= DivmodAxiom : Glossary =
 [wiki:DivmodAxiom/Reference#Item Item]::
  An object in an Axiom Store.
 [wiki:DivmodAxiom/Reference#Powerups Powerup]::
  An Axiom Item that acts as a type of Axiom plugin.
 [wiki:DivmodAxiom/Reference#Store Store]::
  A database that Axiom Items can be stored in.
 [wiki:DivmodAxiom/Reference#SubStore SubStore]::
  A Store that also exists as an Item in a parent Store.",',0
776,10,1147273963.14358,exarkun,198.49.126.204,"= Community Goals =

These are tickets that nobody in Divmod, Inc. proper is working on, but we'd love to see done for personal reasons.  Here are a few:

For finger exercises, you might want to attempt #993; this should be fairly easy but a good exercise for a beginner to find the right place to commit.  #400 isn't quite as simple, but it still shouldn't make your brain explode.  #324, a last updated attribute (or feature of the timestamp attribute type), also shouldn't be a huge amount of work.

Also on the easy side would be tickets like #3, detecting whether cookies can be set and doing something meaningful with that information.

We really need more ways to keep track of what's going on in an Axiom server.  #262 - upgrade status tracking - is a good example of a feature in that vein that's missing.

For those of you interested in database work, some challenging tickets: live queries that you can watch as they change, through the web: #161.  You could fix a highly subtle failure mode of the upgrade process, #301.  Or, you could implement proper nested transactions on top of Axiom's existing transaction support: #252.  Or support important missing parts of the relational model: add constraints: #366, or complex indices: #461, or the ability to join multiply against the same table: #453.

For the more statistically minded we have #516 which asks for your help in creating an improved zeitgeist/popular algorithm for clickchronicle.com

== Previous work ==

tekNico: some work on #360, no satisfactory outcome unfortunately.

tekNico: worked on #398 and #399, applied to trunk.
",',0
777,3,1147294634.83178,moe,198.49.126.204," * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&keywords=%7Ereview&order=priority Reviews]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]","change Reviews link to search for keywords: review",0
778,2,1148448020.20856,jml,198.49.126.204,"== Unit Testing ==

Divmod uses the stand-alone !JavaScript interpreter [http://www.mozilla.org/js/spidermonkey/ SpiderMonkey] to run unit tests on some portions of our !JavaScript sources.  You can find [browser:trunk/Nevow/nevow/test/test_object.js several] [browser:trunk/Nevow/nevow/test/test_deferred.js examples] in the Divmod repository.

These unit tests are valuable: they reveal simple errors, provide a kind of documentation as to the purpose of various functions, and ensure that the code is exercised in as much isolation as is possible.  However, they are not all-encompassing.  After all, they aren't even executed by the same runtime that will be used by ''any'' user to execute them.

{{{nit}}} can also be used for unit testing (see below).

== Functional Testing ==

To account for this, Nevow provides {{{nit}}}, a runner for tests which are designed to be run by an actual browser.  Nit tests are placed in Python source files named with the {{{livetest_}}} prefix.  There are [browser:trunk/Nevow/nevow/test/livetest_athena.py several] [browser:trunk/Mantissa/xmantissa/test/livetest_forms.py examples] [browser:trunk/Mantissa/xmantissa/test/livetest_people.py of this] kind of test in the Divmod repository as well.

However, you might want to look at this walkthrough on [http://blackjml.livejournal.com/21602.html how to write tests for Athena].",',0
779,16,1148448057.23677,jml,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= Goals =

(Put something here)

= Tutorial =

== Simple LiveFragment demo ==

Subclass {{{nevow.athena.LiveFragment}}} and provide a {{{docFactory}}} which uses the {{{liveFragment}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myFragment'))])

    def render_myFragment(self, ctx, data):
        f = MyFragment()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver, rend

class Root(rend.Page):
    def child_(self, ctx):
        return MyPage()

site = appserver.NevowSite(Root())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myfragment.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
#!js
var MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read [http://twistedmatrix.com/projects/core/documentation/howto/plugin.html the Twisted plugin documentation] to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveFragment}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))

    def __init__(self, *a, **kw):
        super(MyFragment, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment'))[
        T.button(onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyFragment}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyFragment(athena.LiveFragment):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument
    athena.expose(echo)
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myfragment.tac?format=raw myfragment.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

= Implementation =

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call !Comet.  Athena's !JavaScript half makes an HTTP requests before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.
",',0
780,17,1148487271.458,exarkun,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= Goals =

(Put something here)

= Tutorial =

== Simple LiveFragment demo ==

Subclass {{{nevow.athena.LiveFragment}}} and provide a {{{docFactory}}} which uses the {{{liveFragment}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myFragment'))])

    def render_myFragment(self, ctx, data):
        f = MyFragment()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver, rend

class Root(rend.Page):
    def child_(self, ctx):
        return MyPage()

site = appserver.NevowSite(Root())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myfragment.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
#!js
var MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read [http://twistedmatrix.com/projects/core/documentation/howto/plugin.html the Twisted plugin documentation] to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveFragment}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))

    def __init__(self, *a, **kw):
        super(MyFragment, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment'))[
        T.button(onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyFragment}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyFragment(athena.LiveFragment):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument
    athena.expose(echo)
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myfragment.tac?format=raw myfragment.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

= Implementation =

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP requests before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.
",',0
781,18,1148487411.50568,exarkun,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= Goals =

(Put something here)

= Tutorial =

If you haven't developed with JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

  * [wiki:DivmodNevow/Athena/Emacs Emacs]

== Simple LiveFragment demo ==

Subclass {{{nevow.athena.LiveFragment}}} and provide a {{{docFactory}}} which uses the {{{liveFragment}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myFragment'))])

    def render_myFragment(self, ctx, data):
        f = MyFragment()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver, rend

class Root(rend.Page):
    def child_(self, ctx):
        return MyPage()

site = appserver.NevowSite(Root())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myfragment.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
#!js
var MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read [http://twistedmatrix.com/projects/core/documentation/howto/plugin.html the Twisted plugin documentation] to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveFragment}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))

    def __init__(self, *a, **kw):
        super(MyFragment, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment'))[
        T.button(onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyFragment}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyFragment(athena.LiveFragment):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument
    athena.expose(echo)
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myfragment.tac?format=raw myfragment.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

= Implementation =

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP requests before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.
",',0
782,19,1148487428.73743,exarkun,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= Goals =

(Put something here)

= Tutorial =

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

  * [wiki:DivmodNevow/Athena/Emacs Emacs]

== Simple LiveFragment demo ==

Subclass {{{nevow.athena.LiveFragment}}} and provide a {{{docFactory}}} which uses the {{{liveFragment}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myFragment'))])

    def render_myFragment(self, ctx, data):
        f = MyFragment()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver, rend

class Root(rend.Page):
    def child_(self, ctx):
        return MyPage()

site = appserver.NevowSite(Root())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myfragment.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
#!js
var MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read [http://twistedmatrix.com/projects/core/documentation/howto/plugin.html the Twisted plugin documentation] to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveFragment}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))

    def __init__(self, *a, **kw):
        super(MyFragment, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment'))[
        T.button(onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyFragment}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyFragment(athena.LiveFragment):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument
    athena.expose(echo)
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myfragment.tac?format=raw myfragment.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

= Implementation =

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP requests before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.
",',0
783,1,1148488336.24194,exarkun,198.49.126.204,"Placeholder for files for DivmodNevow/Athena/Emacs
",',0
784,1,1148488404.40502,exarkun,198.49.126.204,"== !JavaScript mode ==

  * Install the [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Emacs/Files/javascript-mode.el?format=raw preferred javascript-mode library].

  * Define a new {{{c-style}}}:
{{{
(setq c-style-alist
      (append c-style-alist
              '(('actual-python'
                 (indent-tabs-mode . nil)
                 (fill-column . 79)
                 (c-basic-offset . 8)
                 (c-offsets-alist
                  (substatement-open . 0)
                  (inextern-lang . 0)
                  (arglist-intro . +)
                  (knr-argdecl-intro . +))
                 (c-hanging-braces-alist
                  (brace-list-open)
                  (brace-list-intro)
                  (brace-list-close)
                  (brace-entry-open)
                  (substatement-open after)
                  (block-close . c-snug-do-while))
                 (c-block-comment-prefix . '')))))
}}}

  * Customize {{{c-default-style}}} to {{{'actual-python'}}}.
  * Customize {{{c-basic-offset}}} to {{{4}}}.
",',0
785,2,1148614454.73065,glyph,198.49.126.204,"== !JavaScript mode ==

  * Install the [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Emacs/Files/javascript-mode.el?format=raw preferred javascript-mode library].

  * Define a new {{{c-style}}}:
{{{
(setq c-style-alist
      (append c-style-alist
              '(('actual-python'
                 (indent-tabs-mode . nil)
                 (fill-column . 79)
                 (c-basic-offset . 8)
                 (c-offsets-alist
                  (substatement-open . 0)
                  (inextern-lang . 0)
                  (arglist-intro . +)
                  (knr-argdecl-intro . +))
                 (c-hanging-braces-alist
                  (brace-list-open)
                  (brace-list-intro)
                  (brace-list-close)
                  (brace-entry-open)
                  (substatement-open after)
                  (block-close . c-snug-do-while))
                 (c-block-comment-prefix . '')))))
}}}

  * Customize {{{c-default-style}}} to {{{'actual-python'}}}.
  * Customize {{{c-basic-offset}}} to {{{4}}}.

If you sometimes use Emacs 22, this incantation will be required instead:

{{{
(if (condition-case nil
        (symbol-function 'c-block-in-arglist-dwim)
      (error nil))
    (defun javascript-fixed-c-lineup-arglist (langelem)
      (save-excursion
        (if (c-block-in-arglist-dwim (c-langelem-2nd-pos c-syntactic-element))
            0
          (c-lineup-arglist langelem))))
  (defun javascript-fixed-c-lineup-arglist (langelem)
    (c-lineup-arglist langelem)))

(setq c-style-alist
      (append c-style-alist
              '(('actual-python'
                 (indent-tabs-mode . nil)
                 (fill-column . 78)
                 (c-basic-offset . 4)
                 (c-offsets-alist
                  (substatement-open . 0)
                  (inextern-lang . 0)
                  (knr-argdecl-intro . +)
                  (arglist-cont-nonempty . javascript-fixed-c-lineup-arglist))
                 (c-hanging-braces-alist
                  (brace-list-open)
                  (brace-list-intro)
                  (brace-list-close)
                  (brace-entry-open)
                  (substatement-open after)
                  (block-close . c-snug-do-while))
                 (c-block-comment-prefix . '')))))

(custom-set-variables  '(c-default-style 'actual-python')
                       '(c-basic-offset 4))
}}}
",',0
786,20,1148657795.87196,mithrandi,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= Goals =

(Put something here)

= Tutorial =

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

  * [wiki:DivmodNevow/Athena/Emacs Emacs]

== Simple LiveFragment demo ==

Subclass {{{nevow.athena.LiveFragment}}} and provide a {{{docFactory}}} which uses the {{{liveFragment}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myFragment'))])

    def render_myFragment(self, ctx, data):
        f = MyFragment()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver, rend

class Root(rend.Page):
    def child_(self, ctx):
        return MyPage()

site = appserver.NevowSite(Root())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myfragment.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
#!js
var MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read [http://twistedmatrix.com/projects/core/documentation/howto/plugin.html the Twisted plugin documentation] to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveFragment}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyFragment(athena.LiveFragment):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment')))

    def __init__(self, *a, **kw):
        super(MyFragment, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyFragment(athena.LiveFragment):
    docFactory = loaders.stan(T.div(render=T.directive('liveFragment'))[
        T.button(onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyFragment}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyFragment(athena.LiveFragment):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument
    athena.expose(echo)
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myfragment.tac?format=raw myfragment.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

= Implementation =

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

= Tickets =
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].","Link to query for Nevow tickets with athena keyword",0
787,8,1148662140.80544,radix,198.49.126.204,"= Imaginary =

Imaginary numbers are so named not because they are fictitious, but because
they are along a different axis from real numbers.

Divmod Imaginary is a simulationist's take on the realm of role playing,
interactive fiction, and multiplayer dungeons.  It incorporates gameplay
features from each area while attempting to provide a richer environment
than is generally available from existing systems.

Imaginary is in active development. 

 * [browser:trunk/Imaginary/imaginary Browse the source]. 
 * [query:status=new|assigned|reopened&component=Imaginary View the tickets].


Instructions for starting an Imaginary server are here: [source:/trunk/Imaginary/doc/RUNNING?format=raw doc/RUNNING]

== Radical ==

See DivmodRadical.

","link to How To Run It",0
788,25,1149239272.50438,karlb,198.49.126.204,,,
789,8,1149651068.10487,glyph,198.49.126.204,"= [wiki:WikiStart Divmod] : Combinator =

Combinator is a tool that Divmod Python programmers use to manage multiple branches of our software.  It integrates with Subversion.

It can be used to manage any number of branches with any number of projects.  It sets up your Python sys.path to point at the appropriate directories for the set of branches you are currently working on.  It also sets up your {{{PATH}}} environment variable so that you can access any scripts that come along with those projects.

It is mainly of interest if you are checking code out of SVN: users of installed versions of Divmod software can probably ignore this project (for now).

== Rationale ==

Subversion is a nice development system, but some tasks are unnecessarily difficult.  In particular, as we migrated from CVS to SVN, we discovered that there are some operations which were impractically difficult in CVS but simple in SVN, such as creating branches, but while the implementation of managing and merging branches was adequate, there were too much flexibility, and too many ways to subtly incorrectly merge a branch.

As one example of such a problem, in SVN one must always pass the revision where the branch was created on trunk as an argument to the merge command, and determining that number involves reading the output of another long-running command.  Some branches cannot be merged in this manner, depending on where the branch was originally created from.

We developed some idioms for avoiding common errors during merge and encoded them in a set of shell scripts.  Then we discovered another set of common problems: often developers working on a branch would do a bunch of work, and then find themselves mystified that their changes did not seem to be taking effect, due to a mismatch between the environment of their development tools and the shells where test commands were being run.

Combinator began as a set of idioms and shell scripts and has evolved into a set of Python tools which enforce a simple workflow for using SVN and Python together to work on projects that use branches to gather changes together while eliminating common errors.

== Download ==
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Combinator Combinator
 * mkdir -p Divmod/trunk
 * mv Combinator Divmod/trunk/

== Use ==

Start with [source:trunk/Combinator/README.txt README.txt] to get your environment set up.

CombinatorTutorial is a guide to typical Combinator use including setting up an SVN repository to play with.

Reading about [wiki:UltimateQualityDevelopmentSystem our development process] is likely to give you some insight into how it's intended to be used.

=== chbranch ===

=== mkbranch ===

=== unbranch ===
",',0
790,9,1149651114.69561,glyph,198.49.126.204,"= [wiki:WikiStart Divmod] : Combinator =

Combinator is a tool that Divmod Python programmers use to manage multiple branches of our software.  It integrates with Subversion.

It can be used to manage any number of branches with any number of projects.  It sets up your Python sys.path to point at the appropriate directories for the set of branches you are currently working on.  It also sets up your {{{PATH}}} environment variable so that you can access any scripts that come along with those projects.

It is mainly of interest if you are checking code out of SVN: users of installed versions of Divmod software can probably ignore this project (for now).

== Rationale ==

Subversion is a nice development system, but some tasks are unnecessarily difficult.  In particular, as we migrated from CVS to SVN, we discovered that there are some operations which were impractically difficult in CVS but simple in SVN, such as creating branches, but while the implementation of managing and merging branches was adequate, there were too much flexibility, and too many ways to subtly incorrectly merge a branch.

As one example of such a problem, in SVN one must always pass the revision where the branch was created on trunk as an argument to the merge command, and determining that number involves reading the output of another long-running command.  Some branches cannot be merged in this manner, depending on where the branch was originally created from.

We developed some idioms for avoiding common errors during merge and encoded them in a set of shell scripts.  Then we discovered another set of common problems: often developers working on a branch would do a bunch of work, and then find themselves mystified that their changes did not seem to be taking effect, due to a mismatch between the environment of their development tools and the shells where test commands were being run.

Combinator began as a set of idioms and shell scripts and has evolved into a set of Python tools which enforce a simple workflow for using SVN and Python together to work on projects that use branches to gather changes together while eliminating common errors.

== Download ==

Combinator is in the Divmod repository.

If you want to use it without the rest of the Divmod projects, see the CombinatorTutorial.

== Use ==

Start with [source:trunk/Combinator/README.txt README.txt] to get your environment set up.

CombinatorTutorial is a guide to typical Combinator use including setting up an SVN repository to play with.

Reading about [wiki:UltimateQualityDevelopmentSystem our development process] is likely to give you some insight into how it's intended to be used.

=== chbranch ===

=== mkbranch ===

=== unbranch ===
",',0
791,4,1149651364.56609,glyph,198.49.126.204,,,
792,5,1149651746.99516,glyph,198.49.126.204,,,
793,6,1149652222.33546,glyph,198.49.126.204,,,
794,7,1149652269.15275,glyph,198.49.126.204,,,
795,8,1149652353.26519,glyph,198.49.126.204,"= What does it mean to 'Merge a Branch Forward'? =

Merging forward is a way to keep old branches fresh and up-to-date.  It consists of this process:

  * Make sure your trunk working copy is clean
  * Make sure all your existing branch changes are checked in
  * Unbranch your existing branch.  eg, for sprocket-212, you would execute:
{{{
chbranch Divmod sprocket-212
unbranch Divmod
}}}
  * Resolve any conflicts and use 'svn resolved'
  * Create a new branch.  eg:
{{{
mkbranch Divmod sprocket-212-2
}}}
  * Commit the new branch.
  * Make sure to revert trunk working copy:
{{{
svn revert Divmod/trunk -R
}}}

Merging forward is a component of [wiki:BranchBasedDevelopment branch based development].",',0
796,9,1149652386.18713,glyph,198.49.126.204,"= What does it mean to 'Merge a Branch Forward'? =

Merging forward is a way to keep old branches fresh and up-to-date.  It consists of this process:

  * Make sure your trunk working copy is clean
  * Make sure all your existing branch changes are checked in
  * Unbranch your existing branch.  eg, for sprocket-212, you would execute:
{{{
chbranch Divmod sprocket-212
unbranch Divmod
}}}
  * Resolve any conflicts and use 'svn resolved'
  * Create a new branch.  eg:
{{{
mkbranch Divmod sprocket-212-2
}}}
  * Commit the new branch.
  * Make sure to revert trunk working copy:
{{{
svn revert Divmod/trunk -R
}}}

Merging forward is a component of [wiki:UltimateQualityDevelopmentSystem our development methodology].",',0
797,26,1149807071.48052,thomasvs,198.49.126.204,,,
798,7,1149857198.83574,karlb,198.49.126.204,,,
799,8,1149859634.02595,karlb,198.49.126.204,,,
800,9,1149859966.06183,karlb,198.49.126.204,,,
801,10,1149860717.05109,karlb,198.49.126.204,,,
802,25,1150167772.66609,glyph,198.49.126.204,"= [wiki:WikiStart Divmod] : Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.0.tar.gz?format=raw Download the latest release - 0.5.0!] (Requires [wiki:DivmodEpsilon Epsilon]) [http://www.livejournal.com/users/jcalderone/18354.html Release announcement]
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [http://moxn.net/~mesozoic/axiom-howto/ Mesozoic's Axiom Howto]: This is essential reading. A step by step guide to writing your first Axiom application
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]",',0
803,36,1150167788.50929,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox and Windows Internet Explorer 6 ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.0.tar.gz?format=raw Latest release - 0.9.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''formless''': For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh
== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","Update to latest release",0
804,10,1150167797.04085,glyph,198.49.126.204,,,
805,18,1150167850.32984,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the AxiomProject object database, and the TwistedFramework, as well as web user-interface utilities.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicle), and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.5.0.tar.gz?format=raw Get the most recent release - 0.5.0!]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== Tutorials ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:MantissaWikiTutorial Mantissa Wiki Tutorial] A bit short on explanations, but complete
 * [wiki:MantissaBlogTutorial Mantissa Blog Tutorial] 
 * [wiki:MantissaHowTo An example of how to build a Mantissa application (incomplete)]
 * [http://moxn.net/~mesozoic/axiom-howto/ Writing Web Applications with Axiom and Mantissa (the Mantissa part is mostly outdated)]

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
","Update to latest release",0
806,7,1150167870.55087,glyph,198.49.126.204,"== Divmod Sine ==

A voice over IP application server.

[http://isometric.sixsided.org/strips/future_wiring/2.gif]

Sine provides:
 * SIP Registrar
 * SIP Proxy
 * Third party call control (3PCC)
 * Voice-mail
 * Through-the-web configuration
 * [wiki:DivmodMantissa Divmod Mantissa] integration

=== Download ===

 * Release: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.0.tar.gz?format=raw Download the latest release - 0.5.0!] (Requires [wiki:DivmodEpsilon Epsilon]) [http://www.livejournal.com/users/jcalderone/18354.html Release announcement]
 * Bleeding Edge: 
{{{
#!sh
% svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
}}}",',0
807,8,1150167879.79932,glyph,198.49.126.204,"== Divmod Sine ==

A voice over IP application server.

[http://isometric.sixsided.org/strips/future_wiring/2.gif]

Sine provides:
 * SIP Registrar
 * SIP Proxy
 * Third party call control (3PCC)
 * Voice-mail
 * Through-the-web configuration
 * [wiki:DivmodMantissa Divmod Mantissa] integration

=== Download ===

 * Release: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.0.tar.gz?format=raw Download the latest release - 0.5.0!] (Requires [wiki:DivmodEpsilon Epsilon]) [http://www.livejournal.com/users/jcalderone/18354.html Release announcement]
 * Bleeding Edge: 
{{{
#!sh
% svn co http://divmod.org/svn/Divmod/trunk/Sine Sine
}}}",',0
808,9,1150167896.56291,glyph,198.49.126.204,"== Divmod Sine ==

A voice over IP application server.

[http://isometric.sixsided.org/strips/future_wiring/2.gif]

Sine provides:
 * SIP Registrar
 * SIP Proxy
 * Third party call control (3PCC)
 * Voice-mail
 * Through-the-web configuration
 * [wiki:DivmodMantissa Divmod Mantissa] integration

=== Download ===

 * Release: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Epsilon-0.5.0.tar.gz?format=raw Download the latest release - 0.5.0!] (Requires [wiki:DivmodEpsilon Epsilon]) [http://www.livejournal.com/users/jcalderone/18354.html Release announcement]
 * Bleeding Edge: 
{{{
#!sh
% svn co http://divmod.org/svn/Divmod/trunk/Sine Sine
}}}",',0
809,10,1150167911.6378,glyph,198.49.126.204,"== Divmod Sine ==

A voice over IP application server.

[http://isometric.sixsided.org/strips/future_wiring/2.gif]

Sine provides:
 * SIP Registrar
 * SIP Proxy
 * Third party call control (3PCC)
 * Voice-mail
 * Through-the-web configuration
 * [wiki:DivmodMantissa Divmod Mantissa] integration

=== Download ===

 * Release: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Epsilon-0.5.0.tar.gz?format=raw Download the latest release - 0.5.0!] (Requires [wiki:DivmodEpsilon Epsilon])
 * Bleeding Edge: 
{{{
#!sh
% svn co http://divmod.org/svn/Divmod/trunk/Sine Sine
}}}",',0
810,26,1150167922.31754,glyph,198.49.126.204,"= [wiki:WikiStart Divmod] : Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.0.tar.gz?format=raw Download the latest release - 0.5.0!] (Requires [wiki:DivmodEpsilon Epsilon])
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [http://moxn.net/~mesozoic/axiom-howto/ Mesozoic's Axiom Howto]: This is essential reading. A step by step guide to writing your first Axiom application
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]",',0
811,10,1150167978.43876,glyph,198.49.126.204,"= [wiki:WikiStart Divmod] : Vertex =
Vertex is an implementation of the Q2Q protocol (sort of like P2P, but one better). There are a few moving parts in Vertex:

  * PTCP: a protocol which is nearly identical to TCP, but which runs over UDP. This lets Q2Q penetrate most NAT configurations.
  * JUICE ([JU]ice [I]s [C]oncurrent [E]vents): a very simple but immensely flexible protocol which forms the basis of the high-level aspects of Q2Q
  * vertex: a command line tool which exposes a few features useful in many situations (such as registration and authentication)

Q2Q is a very high-level protocol (alternatively, transport) the goal of which is to make communication over the internet a possibility (if you enjoy setting up tunnels or firewall rules whenever you need to transfer a file between two computers, Q2Q may not be for you). Q2Q endpoints aren't hardware addresses or network addresses. They look a lot like email addresses and they act a lot like instant message addresses. You can hook into yours wherever you can access the internet, and you can be online or offline as you choose (Q2Q supports multiple unrelated protocols, so you also might be online for some services but offline for others). Two people with Q2Q addresses can easily communicate without out-of-band negotiation of their physical locations or the topology of their networks. If Alice wants to talk to Bob, Alice will always just open a connection to bob@divmod.com/chat. If Bob is online anywhere at all, the connection will have an opportunity to succeed (Bob might be busy or not want to talk to Alice, but that is another matter ;). The connection is authenticated in both directions, so if it does succeed Alice knows she is talking to the real Bob and vice versa.

The Q2Q network has some decentralized features (there is no one server or company which can control all Q2Q addresses) and features of centralization (addresses beneath a particular domain are issued by a server for that domain; once issued, some activities require the server to be contacted again, while others do not). Vertex includes an identity server capable of hosting Q2Q addresses. Once you've installed the 0.1 release, you can run it like this:
{{{
exarkun@boson:~$ cat > q2q-standalone.tac
from vertex.q2qstandalone import defaultConfig
application = defaultConfig()
exarkun@boson:~$ twistd -noy q2q-standalone.tac 
2005/10/15 00:12 EDT [-] Log opened.
2005/10/15 00:12 EDT [-] twistd 2.0.1 (/usr/bin/python2.4 2.4.1) starting up
2005/10/15 00:12 EDT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/10/15 00:12 EDT [-] Loading q2q-standalone.tac...
2005/10/15 00:12 EDT [-] Loaded.
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QService starting on 8788
2005/10/15 00:12 EDT [-] Starting factory <Q2QService 'service'@-488b6a34>
2005/10/15 00:12 EDT [-] vertex.ptcp.PTCP starting on 8788
2005/10/15 00:12 EDT [-] Starting protocol <vertex.ptcp.PTCP instance at 0xb777884c>
2005/10/15 00:12 EDT [-] Binding PTCP/UDP 8788=8788
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QBootstrapFactory starting on 8789
2005/10/15 00:12 EDT [-] Starting factory <vertex.q2q.Q2QBootstrapFactory instance at 0xb77787cc>
}}}
You can acquire a new Q2Q address using the vertex command line tool:
{{{
exarkun@boson:~$ vertex register exarkun@boson password
}}}
boson is a name on my local network, making this address rather useless. On the other hand, no one will be able to pretend to be me by cracking my hopelessly weak password ;) If you set up a Vertex server on a public host, you will be able to register a real, honest-to-goodness Q2Q address beneath its domain (careful - so will anyone else).

vertex also offers a tool for requesting a signed certificate from the server. These certificates can be used to prove ones identity to foreign domains without involving ones home server. Another feature vertex provides is a toy file transfer application. Bob can issue a vertex receive while Alice issues a vertex send pointed at him, and the file will be transferred.

Much of the real power of Q2Q is exposed to developers using two methods: listenQ2Q and connectQ2Q. These work in roughly the same way Twisted's listenTCP and connectTCP work: they offer support for writing servers and clients that operate on the Q2Q network.

== Exits ==
 * [http://divmod.org/projects/vertex Old Divmod project page for Vertex]
 * [http://www.swik.net/vertex Vertex on swik]

== Download ==
 * Release: [http://divmod.org/static/projects/vertex/Vertex-0.2.0.tar.gz Latest release: 0.2.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Vertex Vertex
",',0
812,11,1150168022.6629,glyph,198.49.126.204,"== Divmod Sine ==

A voice over IP application server.

[http://isometric.sixsided.org/strips/future_wiring/2.gif]

Sine provides:
 * SIP Registrar
 * SIP Proxy
 * Third party call control (3PCC)
 * Voice-mail
 * Through-the-web configuration
 * [wiki:DivmodMantissa Divmod Mantissa] integration

=== Download ===

 * Release: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Sine-0.1.0.tar.gz?format=raw Download the latest release - 0.1.0!] (Requires [wiki:DivmodMantissa Mantissa])
 * Bleeding Edge: 
{{{
#!sh
% svn co http://divmod.org/svn/Divmod/trunk/Sine Sine
}}}",',0
813,11,1150168055.37995,glyph,198.49.126.204,"= [wiki:WikiStart Divmod] : Vertex =
Vertex is an implementation of the Q2Q protocol (sort of like P2P, but one better). There are a few moving parts in Vertex:

  * PTCP: a protocol which is nearly identical to TCP, but which runs over UDP. This lets Q2Q penetrate most NAT configurations.
  * JUICE ([JU]ice [I]s [C]oncurrent [E]vents): a very simple but immensely flexible protocol which forms the basis of the high-level aspects of Q2Q
  * vertex: a command line tool which exposes a few features useful in many situations (such as registration and authentication)

Q2Q is a very high-level protocol (alternatively, transport) the goal of which is to make communication over the internet a possibility (if you enjoy setting up tunnels or firewall rules whenever you need to transfer a file between two computers, Q2Q may not be for you). Q2Q endpoints aren't hardware addresses or network addresses. They look a lot like email addresses and they act a lot like instant message addresses. You can hook into yours wherever you can access the internet, and you can be online or offline as you choose (Q2Q supports multiple unrelated protocols, so you also might be online for some services but offline for others). Two people with Q2Q addresses can easily communicate without out-of-band negotiation of their physical locations or the topology of their networks. If Alice wants to talk to Bob, Alice will always just open a connection to bob@divmod.com/chat. If Bob is online anywhere at all, the connection will have an opportunity to succeed (Bob might be busy or not want to talk to Alice, but that is another matter ;). The connection is authenticated in both directions, so if it does succeed Alice knows she is talking to the real Bob and vice versa.

The Q2Q network has some decentralized features (there is no one server or company which can control all Q2Q addresses) and features of centralization (addresses beneath a particular domain are issued by a server for that domain; once issued, some activities require the server to be contacted again, while others do not). Vertex includes an identity server capable of hosting Q2Q addresses. Once you've installed the 0.1 release, you can run it like this:
{{{
exarkun@boson:~$ cat > q2q-standalone.tac
from vertex.q2qstandalone import defaultConfig
application = defaultConfig()
exarkun@boson:~$ twistd -noy q2q-standalone.tac 
2005/10/15 00:12 EDT [-] Log opened.
2005/10/15 00:12 EDT [-] twistd 2.0.1 (/usr/bin/python2.4 2.4.1) starting up
2005/10/15 00:12 EDT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/10/15 00:12 EDT [-] Loading q2q-standalone.tac...
2005/10/15 00:12 EDT [-] Loaded.
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QService starting on 8788
2005/10/15 00:12 EDT [-] Starting factory <Q2QService 'service'@-488b6a34>
2005/10/15 00:12 EDT [-] vertex.ptcp.PTCP starting on 8788
2005/10/15 00:12 EDT [-] Starting protocol <vertex.ptcp.PTCP instance at 0xb777884c>
2005/10/15 00:12 EDT [-] Binding PTCP/UDP 8788=8788
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QBootstrapFactory starting on 8789
2005/10/15 00:12 EDT [-] Starting factory <vertex.q2q.Q2QBootstrapFactory instance at 0xb77787cc>
}}}
You can acquire a new Q2Q address using the vertex command line tool:
{{{
exarkun@boson:~$ vertex register exarkun@boson password
}}}
boson is a name on my local network, making this address rather useless. On the other hand, no one will be able to pretend to be me by cracking my hopelessly weak password ;) If you set up a Vertex server on a public host, you will be able to register a real, honest-to-goodness Q2Q address beneath its domain (careful - so will anyone else).

vertex also offers a tool for requesting a signed certificate from the server. These certificates can be used to prove ones identity to foreign domains without involving ones home server. Another feature vertex provides is a toy file transfer application. Bob can issue a vertex receive while Alice issues a vertex send pointed at him, and the file will be transferred.

Much of the real power of Q2Q is exposed to developers using two methods: listenQ2Q and connectQ2Q. These work in roughly the same way Twisted's listenTCP and connectTCP work: they offer support for writing servers and clients that operate on the Q2Q network.

== Exits ==
 * [http://divmod.org/projects/vertex Old Divmod project page for Vertex]
 * [http://www.swik.net/vertex Vertex on swik]

== Download ==
 * Release: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Vertex-0.2.0.tar.gz?format=raw Latest release: 0.2.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Vertex Vertex
",',0
814,1,1150168061.73606,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Quotient =

Divmod Quotient is a messaging platform developed as an Offering for Divmod
Mantissa.

It is currently in the very early stages of development, but you can already
use it to read your mail.

(Divmod, Inc. is planning to offer a commercial service based on Quotient in
the near future.  Watch http://divmod.org/ for an announcement!)

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Quotient-0.1.0.tar.gz?format=raw Get the most recent release - 0.1.0!]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Quotient Quotient (See the dependencies here: [source:trunk/Quotient/DEPS.txt DEPS.txt])
","Talk about stuff like releases",0
815,2,1150168623.58859,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Quotient =

Divmod Quotient is a messaging platform developed as an Offering for Divmod
Mantissa.

It is currently in the very early stages of development, but you can already
use it to read your mail.

(Divmod, Inc. is planning to offer a commercial service based on Quotient in
the near future.  Watch http://divmod.org/ for an announcement!)

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Quotient-0.1.0.tar.gz?format=raw Get the most recent release - 0.1.0!]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Quotient Quotient",',0
816,1,1151022517.22779,Vitorio,198.49.126.204,,,
817,2,1151046857.25079,Vitorio,198.49.126.204,,,
818,12,1151130620.73588,Vitorio,198.49.126.204,"= [wiki:WikiStart Divmod] : Vertex =
Vertex is an implementation of the Q2Q protocol (sort of like P2P, but one better). There are a few moving parts in Vertex:

  * PTCP: a protocol which is nearly identical to TCP, but which runs over UDP. This lets Q2Q penetrate most NAT configurations.
  * JUICE ([JU]ice [I]s [C]oncurrent [E]vents): a very simple but immensely flexible protocol which forms the basis of the high-level aspects of Q2Q
  * vertex: a command line tool which exposes a few features useful in many situations (such as registration and authentication)

Q2Q is a very high-level protocol (alternatively, transport) the goal of which is to make communication over the internet a possibility (if you enjoy setting up tunnels or firewall rules whenever you need to transfer a file between two computers, Q2Q may not be for you). Q2Q endpoints aren't hardware addresses or network addresses. They look a lot like email addresses and they act a lot like instant message addresses. You can hook into yours wherever you can access the internet, and you can be online or offline as you choose (Q2Q supports multiple unrelated protocols, so you also might be online for some services but offline for others). Two people with Q2Q addresses can easily communicate without out-of-band negotiation of their physical locations or the topology of their networks. If Alice wants to talk to Bob, Alice will always just open a connection to bob@divmod.com/chat. If Bob is online anywhere at all, the connection will have an opportunity to succeed (Bob might be busy or not want to talk to Alice, but that is another matter ;). The connection is authenticated in both directions, so if it does succeed Alice knows she is talking to the real Bob and vice versa.

The Q2Q network has some decentralized features (there is no one server or company which can control all Q2Q addresses) and features of centralization (addresses beneath a particular domain are issued by a server for that domain; once issued, some activities require the server to be contacted again, while others do not). Vertex includes an identity server capable of hosting Q2Q addresses. Once you've installed the 0.1 release, you can run it like this:
{{{
exarkun@boson:~$ cat > q2q-standalone.tac
from vertex.q2qstandalone import defaultConfig
application = defaultConfig()
exarkun@boson:~$ twistd -noy q2q-standalone.tac 
2005/10/15 00:12 EDT [-] Log opened.
2005/10/15 00:12 EDT [-] twistd 2.0.1 (/usr/bin/python2.4 2.4.1) starting up
2005/10/15 00:12 EDT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/10/15 00:12 EDT [-] Loading q2q-standalone.tac...
2005/10/15 00:12 EDT [-] Loaded.
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QService starting on 8788
2005/10/15 00:12 EDT [-] Starting factory <Q2QService 'service'@-488b6a34>
2005/10/15 00:12 EDT [-] vertex.ptcp.PTCP starting on 8788
2005/10/15 00:12 EDT [-] Starting protocol <vertex.ptcp.PTCP instance at 0xb777884c>
2005/10/15 00:12 EDT [-] Binding PTCP/UDP 8788=8788
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QBootstrapFactory starting on 8789
2005/10/15 00:12 EDT [-] Starting factory <vertex.q2q.Q2QBootstrapFactory instance at 0xb77787cc>
}}}
You can acquire a new Q2Q address using the vertex command line tool:
{{{
exarkun@boson:~$ vertex register exarkun@boson password
}}}
boson is a name on my local network, making this address rather useless. On the other hand, no one will be able to pretend to be me by cracking my hopelessly weak password ;) If you set up a Vertex server on a public host, you will be able to register a real, honest-to-goodness Q2Q address beneath its domain (careful - so will anyone else).

vertex also offers a tool for requesting a signed certificate from the server. These certificates can be used to prove ones identity to foreign domains without involving ones home server. Another feature vertex provides is a toy file transfer application. Bob can issue a vertex receive while Alice issues a vertex send pointed at him, and the file will be transferred.

Much of the real power of Q2Q is exposed to developers using two methods: listenQ2Q and connectQ2Q. These work in roughly the same way Twisted's listenTCP and connectTCP work: they offer support for writing servers and clients that operate on the Q2Q network.

== Exits ==
 * [http://divmod.org/projects/vertex Old Divmod project page for Vertex]
 * [http://www.swik.net/vertex Vertex on swik]
 * [wiki:UsingVertex Using Vertex], a work-in-progress page about using Vertex in an application

== Status ==
 * Vertex does '''not''' currently pass its test suite on Windows or Mac OS X.  For updated status on this:
   1. Visit the [http://jade.code-bear.com:8010/ Divmod BuildBot].
   2. Follow the ''q-tiger'' (OS X) and/or ''q-win32'' (Windows) columns down; these are the test results for all Divmod components in the order they were tested.  For each platform, a green block means a component passed its tests, a red block means a component failed its tests.
   3. Click on each 'problems' link in that column until you find one that discusses vertex.  It will either state ''PASSED'' (and the block will have been green) or it will have a status report on what failed (and the block will have been red).
 * Vertex is likely usable as a Q2Q server on Linux and Windows.
 * Vertex is likely usable as a Q2Q client on Linux.

== Download ==
 * Release: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Vertex-0.2.0.tar.gz?format=raw Latest release: 0.2.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Vertex Vertex
","Clarifications about Vertex's operational status",0
819,3,1151131111.8184,Vitorio,198.49.126.204,,,
820,4,1151134803.94035,Vitorio,198.49.126.204,,,
821,5,1151138808.41778,Vitorio,198.49.126.204,,,
822,6,1151139829.3622,Vitorio,198.49.126.204,,,
823,7,1151174237.36433,Vitorio,198.49.126.204,,,
824,13,1151185382.01213,Vitorio,198.49.126.204,"= [wiki:WikiStart Divmod] : Vertex =
Vertex is an implementation of the Q2Q protocol (sort of like P2P, but one better). There are a few moving parts in Vertex:

  * PTCP: a protocol which is nearly identical to TCP, but which runs over UDP. This lets Q2Q penetrate most NAT configurations.
  * JUICE ([JU]ice [I]s [C]oncurrent [E]vents): a very simple but immensely flexible protocol which forms the basis of the high-level aspects of Q2Q
  * vertex: a command line tool which exposes a few features useful in many situations (such as registration and authentication)

Q2Q is a very high-level protocol (alternatively, transport) the goal of which is to make communication over the internet a possibility (if you enjoy setting up tunnels or firewall rules whenever you need to transfer a file between two computers, Q2Q may not be for you). Q2Q endpoints aren't hardware addresses or network addresses. They look a lot like email addresses and they act a lot like instant message addresses. You can hook into yours wherever you can access the internet, and you can be online or offline as you choose (Q2Q supports multiple unrelated protocols, so you also might be online for some services but offline for others). Two people with Q2Q addresses can easily communicate without out-of-band negotiation of their physical locations or the topology of their networks. If Alice wants to talk to Bob, Alice will always just open a connection to bob@divmod.com/chat. If Bob is online anywhere at all, the connection will have an opportunity to succeed (Bob might be busy or not want to talk to Alice, but that is another matter ;). The connection is authenticated in both directions, so if it does succeed Alice knows she is talking to the real Bob and vice versa.

The Q2Q network has some decentralized features (there is no one server or company which can control all Q2Q addresses) and features of centralization (addresses beneath a particular domain are issued by a server for that domain; once issued, some activities require the server to be contacted again, while others do not). Vertex includes an identity server capable of hosting Q2Q addresses. Once you've installed the 0.1 release, you can run it like this:
{{{
exarkun@boson:~$ cat > q2q-standalone.tac
from vertex.q2qstandalone import defaultConfig
application = defaultConfig()
exarkun@boson:~$ twistd -noy q2q-standalone.tac 
2005/10/15 00:12 EDT [-] Log opened.
2005/10/15 00:12 EDT [-] twistd 2.0.1 (/usr/bin/python2.4 2.4.1) starting up
2005/10/15 00:12 EDT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/10/15 00:12 EDT [-] Loading q2q-standalone.tac...
2005/10/15 00:12 EDT [-] Loaded.
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QService starting on 8788
2005/10/15 00:12 EDT [-] Starting factory <Q2QService 'service'@-488b6a34>
2005/10/15 00:12 EDT [-] vertex.ptcp.PTCP starting on 8788
2005/10/15 00:12 EDT [-] Starting protocol <vertex.ptcp.PTCP instance at 0xb777884c>
2005/10/15 00:12 EDT [-] Binding PTCP/UDP 8788=8788
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QBootstrapFactory starting on 8789
2005/10/15 00:12 EDT [-] Starting factory <vertex.q2q.Q2QBootstrapFactory instance at 0xb77787cc>
}}}
You can acquire a new Q2Q address using the vertex command line tool:
{{{
exarkun@boson:~$ vertex register exarkun@boson password
}}}
boson is a name on my local network, making this address rather useless. On the other hand, no one will be able to pretend to be me by cracking my hopelessly weak password ;) If you set up a Vertex server on a public host, you will be able to register a real, honest-to-goodness Q2Q address beneath its domain (careful - so will anyone else).

vertex also offers a tool for requesting a signed certificate from the server. These certificates can be used to prove ones identity to foreign domains without involving ones home server. Another feature vertex provides is a toy file transfer application. Bob can issue a vertex receive while Alice issues a vertex send pointed at him, and the file will be transferred.

Much of the real power of Q2Q is exposed to developers using two methods: listenQ2Q and connectQ2Q. These work in roughly the same way Twisted's listenTCP and connectTCP work: they offer support for writing servers and clients that operate on the Q2Q network.

== Exits ==
 * [http://divmod.org/projects/vertex Old Divmod project page for Vertex]
 * [http://www.swik.net/vertex Vertex on swik]
 * [wiki:UsingVertex Using Vertex], a work-in-progress page about using Vertex in an application

== Status ==
 * Vertex does '''not''' currently pass its test suite on Windows or Mac OS X.  For updated status on this:
   1. Visit the [http://jade.code-bear.com:8010/ Divmod BuildBot].
   2. Follow the ''q-tiger'' (OS X) and/or ''q-win32'' (Windows) columns down; these are the test results for all Divmod components in the order they were tested.  For each platform, a green block means a component passed its tests, a red block means a component failed its tests.
   3. Click on each 'problems' link in that column until you find one that discusses vertex.  It will either state ''PASSED'' (and the block will have been green) or it will have a status report on what failed (and the block will have been red).
 * You can see all the tickets (bugs and feature requests) filed against Vertex by [query:?group=status&component=Vertex&order=priority watching this custom ticket query].
 * Vertex is likely usable as a Q2Q server on Linux and Windows.
 * Vertex is likely usable as a Q2Q client on Linux.

== Download ==
 * Release: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Vertex-0.2.0.tar.gz?format=raw Latest release: 0.2.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Vertex Vertex
","Scalping tickets",0
825,14,1151185464.48849,Vitorio,198.49.126.204,"= [wiki:WikiStart Divmod] : Vertex =
Vertex is an implementation of the Q2Q protocol (sort of like P2P, but one better). There are a few moving parts in Vertex:

  * PTCP: a protocol which is nearly identical to TCP, but which runs over UDP. This lets Q2Q penetrate most NAT configurations.
  * JUICE ([JU]ice [I]s [C]oncurrent [E]vents): a very simple but immensely flexible protocol which forms the basis of the high-level aspects of Q2Q
  * vertex: a command line tool which exposes a few features useful in many situations (such as registration and authentication)

Q2Q is a very high-level protocol (alternatively, transport) the goal of which is to make communication over the internet a possibility (if you enjoy setting up tunnels or firewall rules whenever you need to transfer a file between two computers, Q2Q may not be for you). Q2Q endpoints aren't hardware addresses or network addresses. They look a lot like email addresses and they act a lot like instant message addresses. You can hook into yours wherever you can access the internet, and you can be online or offline as you choose (Q2Q supports multiple unrelated protocols, so you also might be online for some services but offline for others). Two people with Q2Q addresses can easily communicate without out-of-band negotiation of their physical locations or the topology of their networks. If Alice wants to talk to Bob, Alice will always just open a connection to bob@divmod.com/chat. If Bob is online anywhere at all, the connection will have an opportunity to succeed (Bob might be busy or not want to talk to Alice, but that is another matter ;). The connection is authenticated in both directions, so if it does succeed Alice knows she is talking to the real Bob and vice versa.

The Q2Q network has some decentralized features (there is no one server or company which can control all Q2Q addresses) and features of centralization (addresses beneath a particular domain are issued by a server for that domain; once issued, some activities require the server to be contacted again, while others do not). Vertex includes an identity server capable of hosting Q2Q addresses. Once you've installed the 0.1 release, you can run it like this:
{{{
exarkun@boson:~$ cat > q2q-standalone.tac
from vertex.q2qstandalone import defaultConfig
application = defaultConfig()
exarkun@boson:~$ twistd -noy q2q-standalone.tac 
2005/10/15 00:12 EDT [-] Log opened.
2005/10/15 00:12 EDT [-] twistd 2.0.1 (/usr/bin/python2.4 2.4.1) starting up
2005/10/15 00:12 EDT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/10/15 00:12 EDT [-] Loading q2q-standalone.tac...
2005/10/15 00:12 EDT [-] Loaded.
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QService starting on 8788
2005/10/15 00:12 EDT [-] Starting factory <Q2QService 'service'@-488b6a34>
2005/10/15 00:12 EDT [-] vertex.ptcp.PTCP starting on 8788
2005/10/15 00:12 EDT [-] Starting protocol <vertex.ptcp.PTCP instance at 0xb777884c>
2005/10/15 00:12 EDT [-] Binding PTCP/UDP 8788=8788
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QBootstrapFactory starting on 8789
2005/10/15 00:12 EDT [-] Starting factory <vertex.q2q.Q2QBootstrapFactory instance at 0xb77787cc>
}}}
You can acquire a new Q2Q address using the vertex command line tool:
{{{
exarkun@boson:~$ vertex register exarkun@boson password
}}}
boson is a name on my local network, making this address rather useless. On the other hand, no one will be able to pretend to be me by cracking my hopelessly weak password ;) If you set up a Vertex server on a public host, you will be able to register a real, honest-to-goodness Q2Q address beneath its domain (careful - so will anyone else).

vertex also offers a tool for requesting a signed certificate from the server. These certificates can be used to prove ones identity to foreign domains without involving ones home server. Another feature vertex provides is a toy file transfer application. Bob can issue a vertex receive while Alice issues a vertex send pointed at him, and the file will be transferred.

Much of the real power of Q2Q is exposed to developers using two methods: listenQ2Q and connectQ2Q. These work in roughly the same way Twisted's listenTCP and connectTCP work: they offer support for writing servers and clients that operate on the Q2Q network.

== Exits ==
 * [http://divmod.org/projects/vertex Old Divmod project page for Vertex]
 * [http://www.swik.net/vertex Vertex on swik]
 * [wiki:UsingVertex Using Vertex], a work-in-progress page about using Vertex in an application

== Status ==
 * Vertex does '''not''' currently pass its test suite on Windows or Mac OS X.  For updated status on this:
   1. Visit the [http://jade.code-bear.com:8010/ Divmod BuildBot].
   2. Follow the ''q-tiger'' (OS X) and/or ''q-win32'' (Windows) columns down; these are the test results for all Divmod components in the order they were tested.  For each platform, a green block means a component passed its tests, a red block means a component failed its tests.
   3. Click on each 'problems' link in that column until you find one that discusses vertex.  It will either state ''PASSED'' (and the block will have been green) or it will have a status report on what failed (and the block will have been red).
 * This [query:?group=status&component=Vertex&order=priority custom Vertex ticket query] will show you all the tickets (bugs and feature requests) filed against Vertex.
 * Vertex is likely usable as a Q2Q server on Linux and Windows.
 * Vertex is likely usable as a Q2Q client on Linux.

== Download ==
 * Release: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Vertex-0.2.0.tar.gz?format=raw Latest release: 0.2.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Vertex Vertex
","Scalping tickets rephrase",0
826,8,1151220704.99363,Vitorio,198.49.126.204,,,
827,9,1151220865.90092,Vitorio,198.49.126.204,,,
828,10,1151221890.33763,Vitorio,198.49.126.204,,,
829,11,1151227238.65135,Vitorio,198.49.126.204,,,
830,12,1151266068.19396,Vitorio,198.49.126.204,,,
831,13,1151266923.75591,Vitorio,198.49.126.204,,,
832,14,1151267018.3276,Vitorio,198.49.126.204,,,
833,15,1151267520.87313,Vitorio,198.49.126.204,,,
834,16,1151280877.94099,Vitorio,198.49.126.204,,,
835,17,1151305186.17707,Vitorio,198.49.126.204,,,
836,73,1151500694.11765,amir,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Divmod software for you to use and enjoy ==
=== Infrastructure ===
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&keywords=%7Ereview&order=priority Reviews] 
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]


== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.","remove old reviews link. add pylucene. remove xapian and hyperestraier.",0
837,1,1151686606.54771,amir,198.49.126.204,"Divmod has 2 logos:
 https://divmod.com/ximages/anonymous_logo.png is for the corporate, commercial entity. This is exclusively for the use of Divmod Inc. and should not be used by any other entity. 
 

 http://divmod.org/trac/chrome/common/divmod.png is for our open-source community. This is for the community and can freely be used in the context of Divmod's open-source work, for instance in a 'powered by Divmod' context.
",',0
838,2,1151693475.99353,Vitorio,198.49.126.204,"Divmod has 2 logos:
 http://divmod.com/ximages/anonymous_logo.png is for the corporate, commercial entity. This is exclusively for the use of Divmod Inc. and should not be used by any other entity. 
 

 http://divmod.org/trac/chrome/common/divmod.png is for our open-source community. This is for the community and can freely be used in the context of Divmod's open-source work, for instance in a 'powered by Divmod' context.
","https bad",0
839,74,1152046058.12099,exarkun,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Divmod software for you to use and enjoy ==
=== Infrastructure ===
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&keywords=%7Ereview&order=priority Reviews] 
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]


== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.","add quotient, re-order by importance",0
840,1,1152132905.7322,amir,198.49.126.204,"== Divmod Help ==",',0
841,2,1152132962.94671,amir,198.49.126.204,',',0
842,1,1152132988.64828,amir,198.49.126.204,"= Divmod Help =",',0
843,1,1152133018.79512,amir,198.49.126.204,"== Divmod Mail Help ==",',0
844,2,1152139303.67943,amir,198.49.126.204,"== Divmod Mail Help ==

Divmod Mail (Dmail) is part of the Divmod service. The basic idea of Dmail is allow you to deal with your email as quickly and efficiently as possible. You can use Dmail can be used in TouchOnce, Classic or Enhanced modes. In TouchOnce mode was inspired by the story of a high ranking executive at an international conglomerate who dealt with his huge volume of paper mail with the simple rule of touching each piece of mail once. Similar in method to the Getting Things Done system he'd either respond to it right away, file it in his archive, put in the trash and in rare occasions he'd defer the next step putting the mail in a desk drawer for later action.",',0
845,18,1152169361.41937,Vitorio,198.49.126.204,,,
846,37,1152175808.62457,chbug,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox and Windows Internet Explorer 6 ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.0.tar.gz?format=raw Latest release - 0.9.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': ''(deprecated, please consider using [http://forms-project.pollenation.net/ formal] instead)'' For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': ''(deprecated, please consider using [http://forms-project.pollenation.net/ formal] instead)'' For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://divmod.org/users/exarkun/nevow-api/ The Nevow / Formless API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","marked formless as deprecated",0
847,3,1152214607.14006,amir,198.49.126.204,"== Divmod Mail Help ==

Divmod Mail (Dmail) is part of the Divmod service. The basic idea of Dmail is allow you to deal with your email as quickly and efficiently as possible. Dmail can be used in TouchOnce, Classic or Enhanced modes. TouchOnce mode was inspired by the story of a high ranking executive at an international conglomerate who dealt with his huge volume of paper mail with the simple rule of touching each piece of mail once. Similar in method to the [http://en.wikipedia.org/wiki/Gtd Getting Things Done] system he'd either respond to it right away, file it in his archive, put in the trash and in rare occasions he'd defer the next step putting the mail in a desk drawer for later action.

In TouchOnce mode you are presented with a view that simply shows you the next message for you to deal with starting with the oldest message first.",',0
848,4,1152215338.46022,amir,198.49.126.204,"== Divmod Mail Help ==

Divmod Mail (Dmail) is part of the Divmod service. The goal of Dmail is allow you to deal with your email as efficiently as possible. Dmail encourages you to keep empty your inbox by acting on messages or moving them out of your Inbox into your archive where they are still availble to be searched and read but will not clutter you inbox. Dmail can be used in any combination of 3 modes:
 * TouchOnce
 * Classic
 * Enhanced

=== TouchOnce Mode ===
TouchOnce mode was inspired by the story of a high ranking executive at an international conglomerate who dealt with his huge volume of paper mail with the simple rule of touching each piece of mail once. Similar in method to the [http://en.wikipedia.org/wiki/Gtd Getting Things Done] system he'd either respond to it right away, file it in his archive, put in the trash and in rare occasions he'd defer the next step putting the mail in a desk drawer for later action.

In TouchOnce mode you are presented with a view that simply shows you the next message for you to deal with starting with the oldest message first.",',0
849,5,1152216085.44774,amir@divmod.com,198.49.126.204,"= Divmod Mail Help =

Divmod Mail (Dmail) is part of the Divmod service. The goal of Dmail is allow you to deal with your email as efficiently as possible. Dmail encourages you to keep empty your inbox by acting on messages or moving them out of your Inbox into your archive where they are still available to be searched and read but will not clutter you inbox. Dmail can be used in any combination of 3 modes:
 * TouchOnce
 * Classic
 * Enhanced

When viewing a message you can take:
 * Reply
 * Forward
 * Archive
 * Defer
 * Delete
 * Mark Spam

== TouchOnce Mode ==
TouchOnce mode was inspired by the story of a high ranking executive at an international conglomerate who dealt with his huge volume of paper mail with the simple rule of touching each piece of mail once. Similar in method to the [http://en.wikipedia.org/wiki/Gtd Getting Things Done] system he'd either respond to it right away, file it in his archive, put in the trash and in rare occasions he'd defer the next step putting the mail in a desk drawer for later action.

In TouchOnce mode you are presented with a view that simply shows you the next message for you to deal with starting with the oldest message first. There are 4 basic actions",',0
850,6,1152216586.8256,amir,198.49.126.204,,,
851,7,1152216748.76416,amir,198.49.126.204,"= Divmod Mail Help =

Divmod Mail (Dmail) is part of the Divmod service. The goal of Dmail is allow you to deal with your email as efficiently as possible. When viewing a message you can take one of the following actions:
 * Reply
 * Forward
 * Archive
 * Defer
 * Delete
 * Mark Spam

=== Reply & Forward ===
These should be familiar actions to email users.

=== Archive ===
Dmail encourages you to keep empty your inbox by acting on messages and moving them out of your Inbox. When you archive a message it is moved from your inbox into your archive where it is still available to be searched and read but will not clutter you inbox. Most messages will eventually end up in your archive.

=== Defer ===
Sometimes you don't have time to deal with an important messages right away. In these cases Dmail allows you to defer the message. When deferred a message is removed from your inbox and will reappear in your inbox at a later point in time. There is a duration selector next to the defer button that allows you to specify the length of time that the message will be absent from your inbox before reappearing. Messages that have been deferred can be viewed in the deferred view. Once a message reapears it will have a boomerang icon on it to remind you that this was a message that you deferred.

=== Delete ===
Deleting a message moves it out of your inbox into the trash. It will not show up in search. Once you empty the trash the message will be lost forever.

=== Mark Spam ===
Dmail has an integrated spam filter and this option allows you to tell the system that a particular message is unsolicited mail. Clicking this button will move the message from you inbox into the spam view.


Dmail can be used in any combination of 3 modes:
 * TouchOnce
 * Classic
 * Enhanced

== TouchOnce Mode ==
TouchOnce mode was inspired by the story of a high ranking executive at an international conglomerate who dealt with his huge volume of paper mail with the simple rule of touching each piece of mail once. Similar in method to the [http://en.wikipedia.org/wiki/Gtd Getting Things Done] system he'd either respond to it right away, file it in his archive, put in the trash and in rare occasions he'd defer the next step putting the mail in a desk drawer for later action.

In TouchOnce mode you are presented with a view that simply shows you the next message for you to deal with starting with the oldest message first. There are 4 basic actions",',0
852,8,1152216816.86065,amir,198.49.126.204,"= Divmod Mail Help =

Divmod Mail (Dmail) is part of the Divmod service. The goal of Dmail is allow you to deal with your email as efficiently as possible. When viewing a message you can take one of the following actions:
 * Reply
 * Forward
 * Archive
 * Defer
 * Delete
 * Mark Spam

=== Reply & Forward ===
These should be familiar actions to email users.

=== Archive ===
Dmail encourages you to keep empty your inbox by acting on messages and moving them out of your Inbox. When you archive a message it is moved from your inbox into your archive where it is still available to be searched and read but will not clutter you inbox. Most messages will eventually end up in your archive.

=== Defer ===
Sometimes you don't have time to deal with an important messages right away. In these cases Dmail allows you to defer the message. When deferred a message is removed from your inbox and will reappear in your inbox at a later point in time. There is a duration selector next to the defer button that allows you to specify the length of time that the message will be absent from your inbox before reappearing. Messages that have been deferred can be viewed in the deferred view. Once a message reapears it will have a boomerang icon on it to remind you that this was a message that you deferred.

=== Delete ===
Deleting a message moves it out of your inbox into the trash. It will not show up in search. Once you empty the trash the message will be lost forever.

=== Mark Spam ===
Dmail has an integrated spam filter and this option allows you to tell the system that a particular message is unsolicited mail. Clicking this button will move the message from you inbox into the spam view.

== Dmail Modes ==

Dmail can be used in any combination of 3 modes:
 * TouchOnce
 * Classic
 * Enhanced

== TouchOnce Mode ==
TouchOnce mode was inspired by the story of a high ranking executive at an international conglomerate who dealt with his huge volume of paper mail with the simple rule of touching each piece of mail once. Similar in method to the [http://en.wikipedia.org/wiki/Gtd Getting Things Done] system he'd either respond to it right away, file it in his archive, put in the trash and in rare occasions he'd defer the next step putting the mail in a desk drawer for later action.

In TouchOnce mode you are presented with a view that simply shows you the next message for you to deal with starting with the oldest message first. There are 4 basic actions",',0
853,9,1152217043.20368,amir,198.49.126.204,"= Divmod Mail Help =

Divmod Mail (Dmail) is part of the Divmod service. The goal of Dmail is allow you to deal with your email as efficiently as possible. When viewing a message you can take one of the following actions:
 * Reply
 * Forward
 * Archive
 * Defer
 * Delete
 * Mark Spam

=== Reply & Forward ===
These should be familiar actions to email users.

=== Archive ===
Dmail encourages you to keep empty your inbox by acting on messages and moving them out of your Inbox. When you archive a message it is moved from your inbox into your archive where it is still available to be searched and read but will not clutter you inbox. Most messages will eventually end up in your archive.

=== Defer ===
Sometimes you don't have time to deal with an important messages right away. In these cases Dmail allows you to defer the message. When deferred a message is removed from your inbox and will reappear in your inbox at a later point in time. There is a duration selector next to the defer button that allows you to specify the length of time that the message will be absent from your inbox before reappearing. Messages that have been deferred can be viewed in the deferred view. Once a message reappears it will have a boomerang icon on it to remind you that this was a message that you deferred.

=== Delete ===
Deleting a message moves it out of your inbox into the trash. It will not show up in search. Once you empty the trash the message will be lost forever.

=== Mark Spam ===
Dmail has an integrated spam filter and this option allows you to tell the system that a particular message is unsolicited mail. Clicking this button will move the message from you inbox into the spam view.

== Dmail Modes ==

Dmail can be used in any combination of 3 modes:
 * TouchOnce
 * Classic
 * Enhanced

=== TouchOnce Mode ==
TouchOnce mode was inspired by the story of a high ranking executive at an international conglomerate who dealt with his huge volume of paper mail with the simple rule of touching each piece of mail once. Similar in method to the [http://en.wikipedia.org/wiki/Gtd Getting Things Done] system he'd either respond to it right away, file it in his archive, put in the trash and in rare occasions he'd defer the next step putting the mail in a desk drawer for later action.

In TouchOnce mode you are presented with a view that simply shows you the next message for you to deal with starting with the oldest message first. You have to deal with the current message before you are presented with the next. Once you act on a message by, say, archiving it the next message is presented.

=== Classic Mode ===
Classic mode presents you with a list of messages in you inbox as well as the message detail view. In this mode you can read and act on messages in any order.

=== Enhanced Mode ===
This mode allows you to select which list of messages to view in the message list by selecting various tags. ",',0
854,10,1152217072.54396,amir,198.49.126.204,"= Divmod Mail Help =

Divmod Mail (Dmail) is part of the Divmod service. The goal of Dmail is allow you to deal with your email as efficiently as possible. When viewing a message you can take one of the following actions:
 * Reply
 * Forward
 * Archive
 * Defer
 * Delete
 * Mark Spam

=== Reply & Forward ===
These should be familiar actions to email users.

=== Archive ===
Dmail encourages you to keep empty your inbox by acting on messages and moving them out of your Inbox. When you archive a message it is moved from your inbox into your archive where it is still available to be searched and read but will not clutter you inbox. Most messages will eventually end up in your archive.

=== Defer ===
Sometimes you don't have time to deal with an important messages right away. In these cases Dmail allows you to defer the message. When deferred a message is removed from your inbox and will reappear in your inbox at a later point in time. There is a duration selector next to the defer button that allows you to specify the length of time that the message will be absent from your inbox before reappearing. Messages that have been deferred can be viewed in the deferred view. Once a message reappears it will have a boomerang icon on it to remind you that this was a message that you deferred.

=== Delete ===
Deleting a message moves it out of your inbox into the trash. It will not show up in search. Once you empty the trash the message will be lost forever.

=== Mark Spam ===
Dmail has an integrated spam filter and this option allows you to tell the system that a particular message is unsolicited mail. Clicking this button will move the message from you inbox into the spam view.

== Dmail Modes ==

Dmail can be used in any combination of 3 modes:
 * TouchOnce
 * Classic
 * Enhanced

=== TouchOnce Mode ===
TouchOnce mode was inspired by the story of a high ranking executive at an international conglomerate who dealt with his huge volume of paper mail with the simple rule of touching each piece of mail once. Similar in method to the [http://en.wikipedia.org/wiki/Gtd Getting Things Done] system he'd either respond to it right away, file it in his archive, put in the trash and in rare occasions he'd defer the next step putting the mail in a desk drawer for later action.

In TouchOnce mode you are presented with a view that simply shows you the next message for you to deal with starting with the oldest message first. You have to deal with the current message before you are presented with the next. Once you act on a message by, say, archiving it the next message is presented.

=== Classic Mode ===
Classic mode presents you with a list of messages in you inbox as well as the message detail view. In this mode you can read and act on messages in any order.

=== Enhanced Mode ===
This mode allows you to select which list of messages to view in the message list by selecting various tags. ",',0
855,11,1152217136.81839,amir,198.49.126.204,"= Divmod Mail Help =

Divmod Mail (Dmail) is part of the [wiki:DivmodHelp Divmod service]. The goal of Dmail is allow you to deal with your email as efficiently as possible. When viewing a message you can take one of the following actions:
 * Reply
 * Forward
 * Archive
 * Defer
 * Delete
 * Mark Spam

=== Reply & Forward ===
These should be familiar actions to email users.

=== Archive ===
Dmail encourages you to keep empty your inbox by acting on messages and moving them out of your Inbox. When you archive a message it is moved from your inbox into your archive where it is still available to be searched and read but will not clutter you inbox. Most messages will eventually end up in your archive.

=== Defer ===
Sometimes you don't have time to deal with an important messages right away. In these cases Dmail allows you to defer the message. When deferred a message is removed from your inbox and will reappear in your inbox at a later point in time. There is a duration selector next to the defer button that allows you to specify the length of time that the message will be absent from your inbox before reappearing. Messages that have been deferred can be viewed in the deferred view. Once a message reappears it will have a boomerang icon on it to remind you that this was a message that you deferred.

=== Delete ===
Deleting a message moves it out of your inbox into the trash. It will not show up in search. Once you empty the trash the message will be lost forever.

=== Mark Spam ===
Dmail has an integrated spam filter and this option allows you to tell the system that a particular message is unsolicited mail. Clicking this button will move the message from you inbox into the spam view.

== Dmail Modes ==

Dmail can be used in any combination of 3 modes:
 * TouchOnce
 * Classic
 * Enhanced

=== TouchOnce Mode ===
TouchOnce mode was inspired by the story of a high ranking executive at an international conglomerate who dealt with his huge volume of paper mail with the simple rule of touching each piece of mail once. Similar in method to the [http://en.wikipedia.org/wiki/Gtd Getting Things Done] system he'd either respond to it right away, file it in his archive, put in the trash and in rare occasions he'd defer the next step putting the mail in a desk drawer for later action.

In TouchOnce mode you are presented with a view that simply shows you the next message for you to deal with starting with the oldest message first. You have to deal with the current message before you are presented with the next. Once you act on a message by, say, archiving it the next message is presented.

=== Classic Mode ===
Classic mode presents you with a list of messages in you inbox as well as the message detail view. In this mode you can read and act on messages in any order.

=== Enhanced Mode ===
This mode allows you to select which list of messages to view in the message list by selecting various tags. ",',0
856,2,1152218163.02651,amir,198.49.126.204,"= Divmod Help =

The Divmod Service is an online service that provides you with an always-on computer in the Internet. Your Divmod computer is secure, private and personal. It runs applications, stores your data and allows you to share it. Initially Divmod provides [wiki:DivmodMailHelp Email], Phone and Address Book applications. Over time we will add Calendar, To-do, Word Processing, Blogging, Music, Games and more.",',0
857,12,1152221100.37729,amir,198.49.126.204,,,
858,13,1152221891.85792,amir,198.49.126.204,,,
859,19,1152250482.19722,Vitorio,198.49.126.204,,,
860,14,1152553307.62121,amir,198.49.126.204,"= Divmod Mail Help =

Divmod Mail (Dmail) is part of the [wiki:DivmodHelp Divmod service]. The goal of Dmail is allow you to deal with your email as efficiently as possible. When viewing a message you can take one of the following actions:
 * Reply
 * Forward
 * Archive
 * Defer
 * Delete
 * Mark Spam

=== Reply & Forward ===
These should be familiar actions to email users.

=== Archive ===
Dmail encourages you to keep empty your inbox by acting on messages and moving them out of your Inbox. When you archive a message it is moved from your inbox into your archive where it is still available to be searched and read but will not clutter you inbox. Most messages will eventually end up in your archive.

=== Defer ===
Sometimes you don't have time to deal with an important messages right away. In these cases Dmail allows you to defer the message. When deferred a message is removed from your inbox and will reappear in your inbox at a later point in time. There is a duration selector next to the defer button that allows you to specify the length of time that the message will be absent from your inbox before reappearing. Messages that have been deferred can be viewed in the deferred view. Once a message reappears it will have a boomerang icon on it to remind you that this was a message that you deferred.

=== Delete ===
Deleting a message moves it out of your inbox into the trash. It will not show up in search. Once you empty the trash the message will be lost forever.

=== Mark Spam ===
Dmail has an integrated spam filter and this option allows you to tell the system that a particular message is unsolicited mail. Clicking this button will move the message from you inbox into the spam view.

== Dmail Modes ==

Dmail can be used in any combination of 3 modes:
 * TouchOnce
 * Classic
 * Enhanced

You can switch modes using the mode selector:
[[Image(tonce.png, 400)]]

=== TouchOnce Mode ===
[[Image(tonce.png, 400)]]

TouchOnce mode was inspired by the story of a high ranking executive at an international conglomerate who dealt with his huge volume of paper mail with the simple rule of touching each piece of mail once. Similar in method to the [http://en.wikipedia.org/wiki/Gtd Getting Things Done] system he'd either respond to it right away, file it in his archive, put in the trash and in rare occasions he'd defer the next step putting the mail in a desk drawer for later action.


In TouchOnce mode you are presented with a view that simply shows you the next message for you to deal with starting with the oldest message first. You have to deal with the current message before you are presented with the next. Once you act on a message by, say, archiving it the next message is presented.

=== Classic Mode ===
[[Image(classic.png, 400)]] 

Classic mode presents you with a list of messages in you inbox as well as the message detail view. In this mode you can read and act on messages in any order.


=== Enhanced Mode ===
[[Image(enh.png, 400)]] 

This mode allows you to select which list of messages to view in the message list by selecting various tags. ",',0
861,15,1152553692.96212,amir,198.49.126.204,"= Divmod Mail Help =

Divmod Mail (Dmail) is part of the [wiki:DivmodHelp Divmod service]. The goal of Dmail is allow you to deal with your email as efficiently as possible. When viewing a message you can take one of the following actions:
 * Reply
 * Forward
 * Archive
 * Defer
 * Delete
 * Mark Spam

=== Reply & Forward ===
These should be familiar actions to email users.

=== Archive ===
Dmail encourages you to keep empty your inbox by acting on messages and moving them out of your Inbox. When you archive a message it is moved from your inbox into your archive where it is still available to be searched and read but will not clutter you inbox. Most messages will eventually end up in your archive.

=== Defer ===
Sometimes you don't have time to deal with an important messages right away. In these cases Dmail allows you to defer the message. When deferred a message is removed from your inbox and will reappear in your inbox at a later point in time. There is a duration selector next to the defer button that allows you to specify the length of time that the message will be absent from your inbox before reappearing. Messages that have been deferred can be viewed in the deferred view. Once a message reappears it will have a boomerang icon on it to remind you that this was a message that you deferred.

=== Delete ===
Deleting a message moves it out of your inbox into the trash. It will not show up in search. Once you empty the trash the message will be lost forever.

=== Mark Spam ===
Dmail has an integrated spam filter and this option allows you to tell the system that a particular message is unsolicited mail. Clicking this button will move the message from you inbox into the spam view.

== Dmail Modes ==

Dmail can be used in any combination of 3 modes:
 * TouchOnce
 * Classic
 * Enhanced

You can switch modes using the mode selector, show here with TouchOnce mode selected:

[[Image(modeselect.png)]]

The three symbols, left to right, represent Enhaced, Classic and TouchOnce.

=== TouchOnce Mode ===
[[Image(tonce.png, 400)]]

TouchOnce mode was inspired by the story of a high ranking executive at an international conglomerate who dealt with his huge volume of paper mail with the simple rule of touching each piece of mail once. Similar in method to the [http://en.wikipedia.org/wiki/Gtd Getting Things Done] system he'd either respond to it right away, file it in his archive, put in the trash and in rare occasions he'd defer the next step putting the mail in a desk drawer for later action.


In TouchOnce mode you are presented with a view that simply shows you the next message for you to deal with starting with the oldest message first. You have to deal with the current message before you are presented with the next. Once you act on a message by, say, archiving it the next message is presented.

=== Classic Mode ===
[[Image(classic.png, 400)]] 

Classic mode presents you with a list of messages in you inbox as well as the message detail view. In this mode you can read and act on messages in any order.


=== Enhanced Mode ===
[[Image(enh.png, 400)]] 

This mode allows you to select which list of messages to view in the message list by selecting various tags. ","add mode selector",0
862,23,1152741731.99374,dialtone,198.49.126.204,"=== People Using Divmod Software ===
 * [http://pixoh.com/ Pixoh] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://testing.stiq.it/ Stiq]: A web news site with tags and all niceties
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + !CherryPy
 * [http://projects.adytum.us/tracs/PyMonitor/wiki/PyMonScreenShots pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodAthena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.mmoupdate.com/ MMOUpdate] uses Mantissa (still in production)
 * [http://python.org The Python website] uses [wiki:DivmodNevow Divmod Nevow].",',0
863,24,1152741987.69348,amir,198.49.126.204,"=== People Using Divmod Software ===
 * [http://snipshot.com/ Snipshot] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://testing.stiq.it/ Stiq]: A web news site with tags and all niceties
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + !CherryPy
 * [http://projects.adytum.us/tracs/PyMonitor/wiki/PyMonScreenShots pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodAthena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.mmoupdate.com/ MMOUpdate] uses Mantissa (still in production)
 * [http://python.org The Python website] uses [wiki:DivmodNevow Divmod Nevow].","pixoh -> snipshot",0
864,25,1152742037.5555,aafshar,198.49.126.204,"=== People Using Divmod Software ===
 * [http://snipshot.com/ Snipshot] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://testing.stiq.it/ Stiq]: A web news site with tags and all niceties
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + !CherryPy
 * [http://projects.adytum.us/tracs/PyMonitor/wiki/PyMonScreenShots pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodAthena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.mmoupdate.com/ MMOUpdate] uses Mantissa (still in production)
 * [http://python.org The Python website] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.who.int/en/ The World Health Organisation] uses [wiki:DivmodAxiom Divmod Axiom] and [wiki:DivmodNevow Divmod Nevow] for electronic learning products.",',0
865,26,1152742172.38795,aafshar,198.49.126.204,"=== People Using Divmod Software ===
 * [http://snipshot.com/ Snipshot] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://testing.stiq.it/ Stiq]: A web news site with tags and all niceties
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + !CherryPy
 * [http://projects.adytum.us/tracs/PyMonitor/wiki/PyMonScreenShots pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodAthena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.mmoupdate.com/ MMOUpdate] uses Mantissa (still in production)
 * [http://python.org The Python website] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.who.int/en/ The World Health Organisation] uses [wiki:DivmodAxiom Axiom] and [wiki:DivmodNevow Nevow] for electronic learning products.",',0
866,20,1152850939.20412,Vitorio,198.49.126.204,,,
867,16,1153258533.84589,amir,198.49.126.204,"= Divmod Mail Help =

Divmod Mail (henceforth Mail) is part of the [wiki:DivmodHelp Divmod service]. The goal of Mail is allow you to deal with your email as efficiently as possible. When viewing a message you can take one of the following actions:
 * Reply
 * Forward
 * Archive
 * Defer
 * Delete
 * Mark Spam

=== Reply & Forward ===
These should be familiar actions to email users.

=== Archive ===
Mail encourages you to keep empty your inbox by acting on messages and moving them out of your Inbox. When you archive a message it is moved from your inbox into your archive where it is still available to be searched and read but will not clutter you inbox. Most messages will eventually end up in your archive.

=== Defer ===
Sometimes you don't have time to deal with an important messages right away. In these cases Mail allows you to defer the message. When deferred a message is removed from your inbox and will reappear in your inbox at a later point in time. There is a duration selector next to the defer button that allows you to specify the length of time that the message will be absent from your inbox before reappearing. Messages that have been deferred can be viewed in the deferred view. Once a message reappears it will have a boomerang icon on it to remind you that this was a message that you deferred.

=== Delete ===
Deleting a message moves it out of your inbox into the trash. It will not show up in search. Once you empty the trash the message will be lost forever.

=== Mark Spam ===
Mail has an integrated spam filter and this option allows you to tell the system that a particular message is unsolicited mail. Clicking this button will move the message from you inbox into the spam view.

== Mail Modes ==

Mail can be used in any combination of 3 modes:
 * TouchOnce
 * Classic
 * Enhanced

You can switch modes using the mode selector, show here with TouchOnce mode selected:

[[Image(modeselect.png)]]

The three symbols, left to right, represent Enhaced, Classic and TouchOnce.

=== TouchOnce Mode ===
[[Image(tonce.png, 400)]]

TouchOnce mode was inspired by the story of a high ranking executive at an international conglomerate who dealt with his huge volume of paper mail with the simple rule of touching each piece of mail once. Similar in method to the [http://en.wikipedia.org/wiki/Gtd Getting Things Done] system he'd either respond to it right away, file it in his archive, put in the trash and in rare occasions he'd defer the next step putting the mail in a desk drawer for later action.


In TouchOnce mode you are presented with a view that simply shows you the next message for you to deal with starting with the oldest message first. You have to deal with the current message before you are presented with the next. Once you act on a message by, say, archiving it the next message is presented.

=== Classic Mode ===
[[Image(classic.png, 400)]] 

Classic mode presents you with a list of messages in you inbox as well as the message detail view. In this mode you can read and act on messages in any order.


=== Enhanced Mode ===
[[Image(enh.png, 400)]] 

This mode allows you to select which list of messages to view in the message list by selecting various tags. ",',0
868,38,1153764724.10295,keturn,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox and Windows Internet Explorer 6 ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.0.tar.gz?format=raw Latest release - 0.9.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': ''(deprecated, please consider using [http://forms-project.pollenation.net/ formal] instead)'' For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': ''(deprecated, please consider using [http://forms-project.pollenation.net/ formal] instead)'' For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/users/exarkun/nevow-doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","nevow-api link is gone (out-of-date and unmaintained; JP took down the content.)",0
869,39,1153774944.55449,rwall,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox and Windows Internet Explorer 6 ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.0.tar.gz?format=raw Latest release - 0.9.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': ''(deprecated, please consider using [http://forms-project.pollenation.net/ formal] instead)'' For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': ''(deprecated, please consider using [http://forms-project.pollenation.net/ formal] instead)'' For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","relinked the api and guide at temporary locations",0
870,40,1154431058.02544,k3mper,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox and Windows Internet Explorer 6 ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.0.tar.gz?format=raw Latest release - 0.9.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': ''(deprecated, please consider using [http://forms-project.pollenation.net/ formal] instead)'' For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': ''(deprecated, please consider using [http://forms-project.pollenation.net/ formal] instead)'' For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://weever.berlios.de/ Weever]: A web forum system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","Emacs section",0
871,1,1154432944.4689,k3mper,198.49.126.204," * [http://divmod.org/trac/browser/trunk/Nevow/extras/xhtml-nevow.rnc?format=raw RELAX NG schema] for Nevow XHTML templates
",',0
872,2,1154433506.09404,k3mper,198.49.126.204," * [http://divmod.org/trac/browser/trunk/Nevow/extras/xhtml-nevow.rnc?format=raw RELAX NG schema] for Nevow XHTML templates
 * [wiki:DivmodNevow/Athena/Emacs JavaScript mode]
",',0
873,27,1154466571.57182,dialtone,198.49.126.204,"=== People Using Divmod Software ===
 * [http://snipshot.com/ Snipshot] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://test.stiq.it/ Stiq]: A web news site with tags and all niceties
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + !CherryPy
 * [http://projects.adytum.us/tracs/PyMonitor/wiki/PyMonScreenShots pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodAthena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.mmoupdate.com/ MMOUpdate] uses Mantissa (still in production)
 * [http://python.org The Python website] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.who.int/en/ The World Health Organisation] uses [wiki:DivmodAxiom Axiom] and [wiki:DivmodNevow Nevow] for electronic learning products.",',0
874,28,1154512593.66026,k3mper,198.49.126.204,"=== People Using Divmod Software ===
 * [http://snipshot.com/ Snipshot] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://test.stiq.it/ Stiq]: A web news site with tags and all niceties
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + !CherryPy
 * [http://projects.adytum.us/tracs/PyMonitor/wiki/PyMonScreenShots pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodAthena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.mmoupdate.com/ MMOUpdate] uses Mantissa (still in production)
 * [http://python.org The Python website] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.who.int/en/ The World Health Organisation] uses [wiki:DivmodAxiom Axiom] and [wiki:DivmodNevow Nevow] for electronic learning products.
 * [http://www.gamezone.cz/ GameZone.cz] uses [wiki:DivmodNevow Divmod Nevow]",',0
875,29,1154536994.55927,amberite,198.49.126.204,"=== People Using Divmod Software ===
 * [http://snipshot.com/ Snipshot] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://test.stiq.it/ Stiq]: A web news site with tags and all niceties
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + !CherryPy
 * [http://projects.adytum.us/tracs/PyMonitor/wiki/PyMonScreenShots pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodAthena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.mmoupdate.com/ MMOUpdate] uses Mantissa (still in production)
 * [http://python.org The Python website] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.who.int/en/ The World Health Organisation] uses [wiki:DivmodAxiom Axiom] and [wiki:DivmodNevow Nevow] for electronic learning products.
 * [http://www.gamezone.cz/ GameZone.cz] uses [wiki:DivmodNevow Divmod Nevow]
 * [http://www.evokat.com/ Illumaware EvoKat] (a data management application) uses [wiki:DivmodNevow Divmod Nevow], [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].",',0
876,3,1155248357.70565,exarkun,198.49.126.204,"== Unit Testing ==

''Note: Much of this page documents the current development version of Nevow's testing features, not the current release version.  Make sure you are using the right version of the code if you attempt to make use of this documentation.''

Divmod uses the stand-alone !JavaScript interpreter [http://www.mozilla.org/js/spidermonkey/ SpiderMonkey] to run unit tests on some portions of our !JavaScript sources.  You can find [browser:trunk/Nevow/nevow/test/test_object.js several] [browser:trunk/Nevow/nevow/test/test_deferred.js examples] in the Divmod repository.

These unit tests are valuable: they reveal simple errors, provide a kind of documentation as to the purpose of various functions, and ensure that the code is exercised in as much isolation as is possible.  However, they are not all-encompassing.  After all, they aren't even executed by the same runtime that will be used by ''any'' user to execute them.

{{{nit}}} can also be used for unit testing (see below).

== Functional Testing ==

To account for this, Nevow provides {{{nit}}}, a runner for tests which are designed to be run by an actual browser.  Nit tests are placed in Python source files named with the {{{livetest_}}} prefix.  There are [browser:trunk/Nevow/nevow/test/livetest_athena.py several] [browser:trunk/Mantissa/xmantissa/test/livetest_forms.py examples] [browser:trunk/Mantissa/xmantissa/test/livetest_people.py of this] kind of test in the Divmod repository as well.

If you are familiar with [http://en.wikipedia.org/wiki/XUnit XUnit], the API presented by nit should present few surprises.  The primary interface of interest to test developers is the {{{TestCase}}} class, which is subclassed and extended to define new tests.

=== Server Side ===

{{{nevow.livetrial.testcase.TestCase}}} is the base class for the server-side implementation of test methods.  Subclasses of {{{TestCase}}} define the JavaScript class which will implement the client-side portion of test methods as well as the document which will be used to render them.  {{{TestCase}}} is a {{{nevow.athena.LiveFragment}}} subclass, so it can also define methods which are exposed to the client.

A TestCase might be no more complex than the following:

{{{
#!python
from nevow.livetrial.testcase import TestCase
from nevow.athena import expose

class AdditionTestCase(TestCase):
    jsClass = 'Examples.Tests.AdditionTestCase'
}}}

=== Client Side ===

On the JavaScript side, test authors subclass {{{Nevow.Athena.Test.TestCase}}} and define actual test methods on it.  These methods may return Deferreds if they are testing asynchronous APIs.  Test methods which return a Deferred which eventually errbacks are treated as failing; those which return a Deferred which eventually callbacks are treated as succeeding.  Tests which return anything other than a Deferred are also treated as succeeding, and tests which throw any error are treated as failing.

The JavaScript half of the above example might look like this:

{{{
#!js

// import Nevow.Athena.Test

Examples.Tests.AdditionTestCase = Nevow.Athena.Test.TestCase.subclass('Examples.Tests.AdditionTestCase');
Examples.Tests.methods(
    function test_integerAddition(self) {
        self.assertEqual(1 + 1, 2);
    },

    function test_stringAddition(self) {
        self.assertEqual('a' + 'a', 'aa');
    });
}}}

=== Command Line ===

Tests are collected into a suite automatically by the nit command line.  For example, {{{nit nevow}}} will launch a server which runs all of Nevow's nits.  The server listens on http://localhost:8080/ by default.  To run the tests, visit that URL with a browser and click the {{{Run Tests}}} button.

== External Links ==

You might want to look at this walkthrough on [http://blackjml.livejournal.com/21602.html how to write tests for Athena].
","some words about more advanced nit usage",0
877,41,1155473991.98008,dialtone,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox and Windows Internet Explorer 6 ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.0.tar.gz?format=raw Latest release - 0.9.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': ''(deprecated, please consider using [http://forms-project.pollenation.net/ formal] instead)'' For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': ''(deprecated, please consider using [http://forms-project.pollenation.net/ formal] instead)'' For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.",',0
878,21,1155600371.08429,dialtone,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= Goals =

(Put something here)

= Tutorial =

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

  * [wiki:DivmodNevow/Athena/Emacs Emacs]

== Simple LiveElement demo ==

Subclass {{{nevow.athena.LiveElement}}} and provide a {{{docFactory}}} which uses the {{{liveElement}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myElement'))])

    def render_myElement(self, ctx, data):
        f = MyElement()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from zope.interface import implements
from nevow import appserver, inevow

class FakeRoot(object):
    implements(inevow.IResource)
    
    def locateChild(self, ctx, segments):
        return MyPage(), segments

site = appserver.NevowSite(FakeRoot())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myelement.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
#!js
var MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read [http://twistedmatrix.com/projects/core/documentation/howto/plugin.html the Twisted plugin documentation] to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveElement}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))

    def __init__(self, *a, **kw):
        super(MyElement, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement'))[
        T.button(onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyElement}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyElement(athena.LiveElement):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument
    athena.expose(echo)
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myelement.tac?format=raw myelement.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

= Implementation =

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

= Tickets =
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].","Updated the tutorial page to use the new LiveElement class and to actually work.",0
879,22,1155601123.16066,dialtone,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= Goals =

(Put something here)

= Tutorial =

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

  * [wiki:DivmodNevow/Athena/Emacs Emacs]

== Simple LiveElement demo ==

Subclass {{{nevow.athena.LiveElement}}} and provide a {{{docFactory}}} which uses the {{{liveElement}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myElement'))])

    def render_myElement(self, ctx, data):
        f = MyElement()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from zope.interface import implements
from nevow import appserver, inevow

class FakeRoot(object):
    implements(inevow.IResource)
    
    def locateChild(self, ctx, segments):
        return MyPage(), segments

site = appserver.NevowSite(FakeRoot())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myelement.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
#!js
var MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read [http://twistedmatrix.com/projects/core/documentation/howto/plugin.html the Twisted plugin documentation] to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveElement}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))

    def __init__(self, *a, **kw):
        super(MyElement, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement'))[
        T.input(type='submit', value='Push me', onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyElement}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyElement(athena.LiveElement):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument
    athena.expose(echo)
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myelement.tac?format=raw myelement.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

= Implementation =

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

= Tickets =
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].",',0
880,11,1155823184.91403,exarkun,198.49.126.204,"= Community Goals =

These are tickets that nobody in Divmod, Inc. proper is working on, but we'd love to see done for personal reasons.  Here are a few:

For finger exercises, you might want to attempt #993; this should be fairly easy but a good exercise for a beginner to find the right place to commit.  #400 isn't quite as simple, but it still shouldn't make your brain explode.  #324, a last updated attribute (or feature of the timestamp attribute type), also shouldn't be a huge amount of work.

Also on the easy side would be tickets like #3, detecting whether cookies can be set and doing something meaningful with that information.

We really need more ways to keep track of what's going on in an Axiom server.  #262 - upgrade status tracking - is a good example of a feature in that vein that's missing.

For those of you interested in database work, some challenging tickets: live queries that you can watch as they change, through the web: #161.  You could add safety checks to make sure Items don't have attributes that conflict with backend-specific special names, #1390.  Or, you could implement proper nested transactions on top of Axiom's existing transaction support: #252.  Or support important missing parts of the relational model: add constraints: #366, or complex indices: #461, or the ability to join multiply against the same table: #453.

For the more statistically minded we have #516 which asks for your help in creating an improved zeitgeist/popular algorithm for clickchronicle.com

== Previous work ==

tekNico: some work on #360, no satisfactory outcome unfortunately.

tekNico: worked on #398 and #399, applied to trunk.
",',0
881,19,1155924985.53598,amir,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the [wiki:DivmodAxiom Axiom] object database, the [wiki:DivmodNevow Nevow] web templating framework and the TwistedFramework.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicle), and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.5.0.tar.gz?format=raw Get the most recent release - 0.5.0!]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== Tutorials ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:MantissaWikiTutorial Mantissa Wiki Tutorial] A bit short on explanations, but complete
 * [wiki:MantissaBlogTutorial Mantissa Blog Tutorial] 
 * [wiki:MantissaHowTo An example of how to build a Mantissa application (incomplete)]
 * [http://moxn.net/~mesozoic/axiom-howto/ Writing Web Applications with Axiom and Mantissa (the Mantissa part is mostly outdated)]

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
","mention nevow",0
882,8,1156183017.87523,amir,198.49.126.204,,,
883,30,1156348171.56469,moe,198.49.126.204,"=== People Using Divmod Software ===
 * [http://snipshot.com/ Snipshot] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.cpushare.com/ CPUShare] and [http://klive.cpushare.com/ KLive] use [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://test.stiq.it/ Stiq]: A web news site with tags and all niceties
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + !CherryPy
 * [http://projects.adytum.us/tracs/PyMonitor/wiki/PyMonScreenShots pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodNevow/Athena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.mmoupdate.com/ MMOUpdate] uses Mantissa (still in production)
 * [http://python.org The Python website] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.who.int/en/ The World Health Organisation] uses [wiki:DivmodAxiom Axiom] and [wiki:DivmodNevow Nevow] for electronic learning products.
 * [http://www.gamezone.cz/ GameZone.cz] uses [wiki:DivmodNevow Divmod Nevow]
 * [http://www.evokat.com/ Illumaware EvoKat] (a data management application) uses [wiki:DivmodNevow Divmod Nevow], [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].","fix athena link",0
884,75,1156378541.04281,glyph,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Divmod software for you to use and enjoy ==
=== Infrastructure ===
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.
 '''Other Users'''::
 Learn about [wiki:PeopleUsingDivmod other people using Divmod products].

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&keywords=%7Ereview&order=priority Reviews] 
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]


== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.
",',0
885,11,1156618314.73394,scmikes,198.49.126.204,,,
886,76,1156865265.71893,amir,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== People Using Divmod ==

[http://www.python.org/images/python-logo.gif http://python.org]
http://www.who.int/sysmedia/images/who_logo_en.gif
http://jotlive.com/static/images/jotlive-logo.gif

http://snipshot.com/36/static/images/logo-big.png
http://numbler.com/img/bloglogo.gif
http://test.stiq.it/static/i/logo.gif

Learn about [wiki:PeopleUsingDivmod more people using Divmod products].

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Divmod software for you to use and enjoy ==
=== Infrastructure ===
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&keywords=%7Ereview&order=priority Reviews] 
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]


== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.
","Logos of featured users. Don't know how to link to original site.",0
887,77,1156865520.30953,amir,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== People Using Divmod ==

[http://www.python.org/images/python-logo.gif http://python.org]
http://divmod.org/users/amir/screenshots/who.png
http://jotlive.com/static/images/jotlive-logo.gif

http://snipshot.com/36/static/images/logo-big.png
http://numbler.com/img/bloglogo.gif
http://test.stiq.it/static/i/logo.gif

Learn about [wiki:PeopleUsingDivmod more people using Divmod products].

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Divmod software for you to use and enjoy ==
=== Infrastructure ===
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&keywords=%7Ereview&order=priority Reviews] 
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]


== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.
","Better WHO logo",0
888,78,1156865626.14993,amir,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Divmod Users ==

[http://www.python.org/images/python-logo.gif http://python.org]
http://divmod.org/users/amir/screenshots/who.png
http://jotlive.com/static/images/jotlive-logo.gif

http://snipshot.com/36/static/images/logo-big.png
http://numbler.com/img/bloglogo.gif
http://test.stiq.it/static/i/logo.gif

Learn about [wiki:PeopleUsingDivmod more folks using Divmod products].

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Divmod software for you to use and enjoy ==
=== Infrastructure ===
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&keywords=%7Ereview&order=priority Reviews] 
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]


== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.
",',0
889,79,1156866472.90083,moe,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Divmod Users ==
{{{
#!html
<a href='http://python.org'><img src='http://www.python.org/images/python-logo.gif' /></a>
<a href='http://who.int/en'><img src='http://divmod.org/users/amir/screenshots/who.png' /></a>
<a href='http://jotlive.com'><img src='http://jotlive.com/static/images/jotlive-logo.gif' /></a>
<a href='http://snipshot.com'><img src='http://snipshot.com/36/static/images/logo-big.png' /></a>
<a href='http://numbler.com'><img src='http://numbler.com/img/bloglogo.gif' /></a>
<a href='http://test.stiq.it'><img src='http://test.stiq.it/static/i/logo.gif' /></a>
}}}

Learn about [wiki:PeopleUsingDivmod more folks using Divmod products].

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Divmod software for you to use and enjoy ==
=== Infrastructure ===
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&keywords=%7Ereview&order=priority Reviews] 
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]


== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.
",',0
890,80,1156866590.667,moe,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Divmod Users ==
{{{
#!html
<a href='http://python.org'><img src='http://www.python.org/images/python-logo.gif' /></a>
<a href='http://www.who.int/en'><img src='http://divmod.org/users/amir/screenshots/who.png' /></a>
<a href='http://jotlive.com'><img src='http://jotlive.com/static/images/jotlive-logo.gif' /></a>
<a href='http://snipshot.com'><img src='http://snipshot.com/36/static/images/logo-big.png' /></a>
<a href='http://numbler.com'><img src='http://numbler.com/img/bloglogo.gif' /></a>
<a href='http://test.stiq.it'><img src='http://test.stiq.it/static/i/logo.gif' /></a>
}}}

Learn about [wiki:PeopleUsingDivmod more folks using Divmod products].

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Divmod software for you to use and enjoy ==
=== Infrastructure ===
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&keywords=%7Ereview&order=priority Reviews] 
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]


== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.
","link to WWW.who.int",0
891,81,1156867383.34005,moe,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Divmod Users ==
{{{
#!html
<a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
<a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
<a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
<a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
<a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
<a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
}}}

Learn about [wiki:PeopleUsingDivmod more folks using Divmod products].

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Divmod software for you to use and enjoy ==
=== Infrastructure ===
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&keywords=%7Ereview&order=priority Reviews] 
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]


== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.
","host our own version of all logos, resize them",0
892,82,1156867750.64774,moe,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Divmod Users ==
{{{
#!html
<a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
<a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
<a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
<div style='height: 1px'>&#160;</div>
<a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
<a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
<a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
}}}

Learn about [wiki:PeopleUsingDivmod more folks using Divmod products].

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Divmod software for you to use and enjoy ==
=== Infrastructure ===
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&keywords=%7Ereview&order=priority Reviews] 
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]


== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.
",',0
893,83,1156874515.02638,amir,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Divmod Users ==
{{{
#!html
<a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
<a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
<a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
<div style='height: 1px'>&#160;</div>
<a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
<a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
<a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
}}}

Learn about these and [wiki:PeopleUsingDivmod others using Divmod products].

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To help our feature ideas not get lost in the mists of time, we've just created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Divmod software for you to use and enjoy ==
=== Infrastructure ===
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&keywords=%7Ereview&order=priority Reviews] 
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]


== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.
",',0
894,84,1156885284.48959,moe,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Divmod Users ==
{{{
#!html
<a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
<a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
<a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
<div style='height: 1px'>&#160;</div>
<a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
<a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
<a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
}}}

Learn about these and [wiki:PeopleUsingDivmod others using Divmod products].

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Divmod software for you to use and enjoy ==
=== Infrastructure ===
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&keywords=%7Ereview&order=priority Reviews] 
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority amir's tickets]


== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.
","clearer sentence about community goals",0
895,85,1156887115.27176,moe,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Divmod Users ==
{{{
#!html
<a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
<a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
<a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
<div style='height: 1px'>&#160;</div>
<a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
<a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
<a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
}}}

Learn about these and [wiki:PeopleUsingDivmod others using Divmod products].

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Divmod software for you to use and enjoy ==
=== Infrastructure ===
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk
== Useful Ticket Queries ==
 * [http://divmod.org/trac/report/7 My tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&keywords=%7Ereview&order=priority Reviews] 
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=glyph&order=priority Glyph's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=exarkun&order=priority Exarkun's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=moe&order=priority Moe's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=washort&order=priority Washort's tickets]
 * [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&group=&owner=amir&order=priority Amir's tickets]


== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.
","capitalize names in per-person ticket links",0
896,86,1156887206.84096,amir,198.49.126.204,"= Welcome to the Divmod Community =
[[PageOutline(2-3,Contents)]]
You are at http://divmod.org/, the official open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

== Featured Divmod Users ==
{{{
#!html
<a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
<a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
<a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
<div style='height: 1px'>&#160;</div>
<a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
<a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
<a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
}}}

Learn about these and [wiki:PeopleUsingDivmod others using Divmod products].

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Divmod software for you to use and enjoy ==
=== Infrastructure ===
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.
","remove ticket queries",0
897,87,1156887281.5522,amir,198.49.126.204,"= Hello =
[[PageOutline(2-3,Contents)]]
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].


== Featured Divmod Users ==
{{{
#!html
<a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
<a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
<a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
<div style='height: 1px'>&#160;</div>
<a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
<a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
<a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
}}}

Learn about these and [wiki:PeopleUsingDivmod others using Divmod products].

== Featured Application ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Build your next great application using our infrastructure ==

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
  A click-recording application. You can sign up for the ClickChronicleBeta ''now''!
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.
",',0
898,88,1156887533.1462,amir,198.49.126.204,"= Hello =
[[PageOutline(2-3,Contents)]]
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].


== Featured Divmod Users ==
{{{
#!html
<a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
<a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
<a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
<div style='height: 1px'>&#160;</div>
<a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
<a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
<a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
}}}

Learn about [wiki:PeopleUsingDivmod these and others using Divmod products].

== Build your next great application using our infrastructure ==

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.
",',0
899,89,1156887590.95371,amir,198.49.126.204,"= Hello =
[[PageOutline(2-3,Contents)]]
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].


== Featured Divmod Users ==
{{{
#!html
<a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
<a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
<a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
<div style='height: 1px'>&#160;</div>
<a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
<a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
<a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
}}}

Learn about [wiki:PeopleUsingDivmod these and others using Divmod products].

== Build your next great application more quickly using Divmod tools and infrastructure ==

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]
== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.
",',0
900,90,1156888989.11311,moe,198.49.126.204,"= Hello =
[[PageOutline(2-3,Contents)]]
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center'>
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
</div>
}}}

Learn about [wiki:PeopleUsingDivmod these and others using Divmod products].

== Build your next great application more quickly using Divmod tools and infrastructure ==

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

=== Applications using Divmod infrastructure ===
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== He","move 'people using divmod' images into a column on the right",0
901,91,1156889246.20818,moe,198.49.126.204,"= Hello =
[[PageOutline(2-3,Contents)]]
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center'>
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
</div>
}}}

Learn about [wiki:PeopleUsingDivmod these and others using Divmod products].

== Build your next great application more quickly using Divmod tools and infrastructure ==

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web base» * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/use» * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]

== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.","restore the stuff i deleted",0
902,92,1156889357.56146,moe,198.49.126.204,"= Hello =
[[PageOutline(2-3,Contents)]]
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center'>
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
</div>
}}}

Learn about [wiki:PeopleUsingDivmod these and others using Divmod products].

== Build your next great application more quickly using Divmod tools and infrastructure ==

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web base
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/use» * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]

== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
903,93,1156889442.88436,moe,198.49.126.204,"= Hello =
[[PageOutline(2-3,Contents)]]
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center'>
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
</div>
}}}

Learn about [wiki:PeopleUsingDivmod these and others using Divmod products].

== Build your next great application more quickly using Divmod tools and infrastructure ==

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web base
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]

== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
904,94,1156889526.26826,moe,198.49.126.204,"= Hello =
[[PageOutline(2-3,Contents)]]
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center'>
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
</div>
}}}

Learn about [wiki:PeopleUsingDivmod these and others using Divmod products].

== Build your next great application more quickly using Divmod tools and infrastructure ==

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]

== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
905,95,1156906323.36724,amir,198.49.126.204,"=== Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. ===


{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center'>
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  Learn about <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>these and others using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod tools and infrastructure ==

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.

 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]

== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

= divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans]. =
== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.","get rid of the table of contents box and shuffle stuff around",0
906,96,1156906441.37785,amir,198.49.126.204,"=== Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. ===

{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center'>
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  Learn about <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>these and others using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod tools and infrastructure ==

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]

== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

= divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans]. =
== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.","reorder products",0
907,97,1156906929.80148,amir,198.49.126.204,"=== Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. ===

{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  Learn about these and others <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod tools and infrastructure ==

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]

== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

= divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans]. =
== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.","improved legibility of featured box",0
908,98,1156906986.69472,amir,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  Learn about these and others <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod tools and infrastructure ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community.

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]

== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

= divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans]. =
== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
909,99,1156907102.66283,amir,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  Learn about these and others <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod tools and infrastructure ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]

== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
910,100,1156907169.4678,amir,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod tools and infrastructure ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and the Divmod open-source community. divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]

== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
911,101,1156907306.4167,amir,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod tools and infrastructure ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with [wiki:BranchBasedDevelopment branch based development], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]

== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
912,102,1156907398.23593,amir,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod tools and infrastructure ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]

== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
913,103,1156955637.64448,amir,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere, even mobile users, or users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]

== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.","frameworks and tools",0
914,104,1156955690.38277,amir,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System], useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]

== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.","q2q tweak",0
915,105,1157409822.64938,amir,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]

== Some of the software and projects we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.","tweaks from analytics",0
916,106,1157410101.38579,amir,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]

== Some of the software and services we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.
 * [http://tummy.com/ Tummy] our fantastic hosting service. The hostess with the mostest.

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.","mention our friends at tummy",0
917,31,1157517071.78672,glyph,198.49.126.204,"=== People Using Divmod Software ===
 * [http://snipshot.com/ Snipshot] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://test.stiq.it/ Stiq]: A web news site with tags and all niceties
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + !CherryPy
 * [http://projects.adytum.us/tracs/PyMonitor/wiki/PyMonScreenShots pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodNevow/Athena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.mmoupdate.com/ MMOUpdate] uses Mantissa (still in production)
 * [http://python.org The Python website] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.who.int/en/ The World Health Organisation] uses [wiki:DivmodAxiom Axiom] and [wiki:DivmodNevow Nevow] for electronic learning products.
 * [http://www.gamezone.cz/ GameZone.cz] uses [wiki:DivmodNevow Divmod Nevow]
 * [http://www.evokat.com/ Illumaware EvoKat] (a data management application) uses [wiki:DivmodNevow Divmod Nevow], [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].","CPUShare and KLive no longer use any Divmod products.",0
918,17,1157733191.61833,amir,198.49.126.204,"= Divmod Mail Help =

Divmod Mail (henceforth Mail) is part of the [wiki:DivmodHelp Divmod service]. The goal of Mail is allow you to deal with your email as efficiently as possible. When viewing a message you can take one of the following actions:
 * Reply
 * Forward
 * Archive
 * Defer
 * Delete
 * Mark Spam

=== Reply & Forward ===
These should be familiar actions to email users.

=== Archive ===
Mail encourages you to keep empty your inbox by acting on messages and moving them out of your Inbox. When you archive a message it is moved from your inbox into your archive where it is still available to be searched and read but will not clutter you inbox. Most messages will eventually end up in your archive.

=== Defer ===
Sometimes you don't have time to deal with an important messages right away. In these cases Mail allows you to defer the message. When deferred a message is removed from your inbox and will reappear in your inbox at a later point in time. There is a duration selector next to the defer button that allows you to specify the length of time that the message will be absent from your inbox before reappearing. Messages that have been deferred can be viewed in the deferred view. Once a message reappears it will have a boomerang icon on it to remind you that this was a message that you deferred.

=== Delete ===
Deleting a message moves it out of your inbox into the trash. It will not show up in search. Once you empty the trash the message will be lost forever.

=== Mark Spam ===
Mail has an integrated spam filter and this option allows you to tell the system that a particular message is unsolicited mail. Clicking this button will move the message from you inbox into the spam view.

== Mail Modes ==

Mail can be used in any combination of 3 modes:
 * TouchOnce
 * Classic
 * Enhanced

You can switch modes using the mode selector, show here with TouchOnce mode selected:

[[Image(modeselect.png)]]

The three symbols, left to right, represent Enhaced, Classic and TouchOnce.

=== TouchOnce Mode ===
[[Image(mail_01.png, 400)]]

TouchOnce mode was inspired by the story of a high ranking executive at an international conglomerate who dealt with his huge volume of paper mail with the simple rule of touching each piece of mail once. Similar in method to the [http://en.wikipedia.org/wiki/Gtd Getting Things Done] system he'd either respond to it right away, file it in his archive, put in the trash and in rare occasions he'd defer the next step putting the mail in a desk drawer for later action.


In TouchOnce mode you are presented with a view that simply shows you the next message for you to deal with starting with the oldest message first. You have to deal with the current message before you are presented with the next. Once you act on a message by, say, archiving it the next message is presented.

=== Classic Mode ===
[[Image(mail_02.png, 400)]] 

Classic mode presents you with a list of messages in you inbox as well as the message detail view. In this mode you can read and act on messages in any order.


=== Enhanced Mode ===
[[Image(mail_03.png, 400)]] 

This mode allows you to select which list of messages to view in the message list by selecting various tags. ","change images to comps",0
919,42,1158604118.00677,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox and Windows Internet Explorer 6 ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.0.tar.gz?format=raw Latest release - 0.9.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': (take a look at [http://forms-project.pollenation.net/ formal] for an alternate form library)'' For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","neither formless nor webform is deprecated",0
920,32,1159236687.23861,amir,198.49.126.204,"=== People Using Divmod Software ===
 * [http://snipshot.com/ Snipshot] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://test.stiq.it/ Stiq]: A web news site with tags and all niceties
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + !CherryPy
 * [http://projects.adytum.us/tracs/PyMonitor/wiki/PyMonScreenShots pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodNevow/Athena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.mmoupdate.com/ MMOUpdate] uses Mantissa (still in production).
 * [http://python.org The Python website] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.who.int/en/ The World Health Organisation] uses [wiki:DivmodAxiom Axiom] and [wiki:DivmodNevow Nevow] for electronic learning products.
 * [http://www.gamezone.cz/ GameZone.cz] uses [wiki:DivmodNevow Divmod Nevow]
 * [http://www.evokat.com/ Illumaware EvoKat] (a data management application) uses [wiki:DivmodNevow Divmod Nevow], [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://www.fluendo.com/ Fluendo] uses [wiki:DivmodNevow Divmod Nevow].",',0
921,23,1159317743.38056,cyli,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= Goals =

(Put something here)

= Tutorial =

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

  * [wiki:DivmodNevow/Athena/Emacs Emacs]

== Simple LiveElement demo ==

Subclass {{{nevow.athena.LiveElement}}} and provide a {{{docFactory}}} which uses the {{{liveElement}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myElement'))])

    def render_myElement(self, ctx, data):
        f = MyElement()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from zope.interface import implements
from nevow import appserver, inevow

class FakeRoot(object):
    implements(inevow.IResource)
    
    def locateChild(self, ctx, segments):
        return MyPage(), []

site = appserver.NevowSite(FakeRoot())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myelement.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Define a ''pseudo-namespace'' in which to place  your code:

{{{
#!js
var MyModule = {};
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read [http://twistedmatrix.com/projects/core/documentation/howto/plugin.html the Twisted plugin documentation] to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveElement}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))

    def __init__(self, *a, **kw):
        super(MyElement, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement'))[
        T.input(type='submit', value='Push me', onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyElement}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyElement(athena.LiveElement):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument
    athena.expose(echo)
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myelement.tac?format=raw myelement.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

= Implementation =

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

= Tickets =
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].",',0
922,24,1159317850.19156,cyli,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= Goals =

(Put something here)

= Tutorial =

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

  * [wiki:DivmodNevow/Athena/Emacs Emacs]

== Simple LiveElement demo ==

Subclass {{{nevow.athena.LiveElement}}} and provide a {{{docFactory}}} which uses the {{{liveElement}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myElement'))])

    def render_myElement(self, ctx, data):
        f = MyElement()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from zope.interface import implements
from nevow import appserver, inevow

class FakeRoot(object):
    implements(inevow.IResource)
    
    def locateChild(self, ctx, segments):
        return MyPage(), []

site = appserver.NevowSite(FakeRoot())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myelement.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===

In a JavaScript source file, import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class:

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Place all of this in a JavaScript source file, ie {{{mymodule.js}}}.

Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read [http://twistedmatrix.com/projects/core/documentation/howto/plugin.html the Twisted plugin documentation] to learn where else you can put it).

Define the JavaScript class which will correspond to your {{{LiveElement}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))

    def __init__(self, *a, **kw):
        super(MyElement, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement'))[
        T.input(type='submit', value='Push me', onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyElement}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyElement(athena.LiveElement):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument
    athena.expose(echo)
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myelement.tac?format=raw myelement.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

= Implementation =

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

= Tickets =
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].",',0
923,25,1159317993.00814,cyli,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= Goals =

(Put something here)

= Tutorial =

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

  * [wiki:DivmodNevow/Athena/Emacs Emacs]

== Simple LiveElement demo ==

Subclass {{{nevow.athena.LiveElement}}} and provide a {{{docFactory}}} which uses the {{{liveElement}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myElement'))])

    def render_myElement(self, ctx, data):
        f = MyElement()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from zope.interface import implements
from nevow import appserver, inevow

class FakeRoot(object):
    implements(inevow.IResource)
    
    def locateChild(self, ctx, segments):
        return MyPage(), []

site = appserver.NevowSite(FakeRoot())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myelement.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===
Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read [http://twistedmatrix.com/projects/core/documentation/howto/plugin.html the Twisted plugin documentation] to learn where else you can put it).


In the JavaScript source file (in this case, mymodule.js), import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class (notice the module name that was defined in the plugin file):

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Define the JavaScript class which will correspond to your {{{LiveElement}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))

    def __init__(self, *a, **kw):
        super(MyElement, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement'))[
        T.input(type='submit', value='Push me', onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyElement}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyElement(athena.LiveElement):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument
    athena.expose(echo)
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myelement.tac?format=raw myelement.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

= Implementation =

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

= Tickets =
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].",',0
924,26,1159318029.09655,cyli,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= Goals =

(Put something here)

= Tutorial =

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

  * [wiki:DivmodNevow/Athena/Emacs Emacs]

== Simple LiveElement demo ==

Subclass {{{nevow.athena.LiveElement}}} and provide a {{{docFactory}}} which uses the {{{liveElement}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myElement'))])

    def render_myElement(self, ctx, data):
        f = MyElement()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from zope.interface import implements
from nevow import appserver, inevow

class FakeRoot(object):
    implements(inevow.IResource)
    
    def locateChild(self, ctx, segments):
        return MyPage(), []

site = appserver.NevowSite(FakeRoot())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myelement.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===
Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read [http://twistedmatrix.com/projects/core/documentation/howto/plugin.html the Twisted plugin documentation] to learn where else you can put it).


In the JavaScript source file (in this case, {{{mymodule.js}}}), import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class (notice the module name that was defined in the plugin file):

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.method(
    'echo',
    function(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Define the JavaScript class which will correspond to your {{{LiveElement}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))

    def __init__(self, *a, **kw):
        super(MyElement, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement'))[
        T.input(type='submit', value='Push me', onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyElement}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyElement(athena.LiveElement):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument
    athena.expose(echo)
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myelement.tac?format=raw myelement.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

= Implementation =

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

= Tickets =
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].",',0
925,27,1159318265.18914,cyli,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= Goals =

(Put something here)

= Tutorial =

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

  * [wiki:DivmodNevow/Athena/Emacs Emacs]

== Simple LiveElement demo ==

Subclass {{{nevow.athena.LiveElement}}} and provide a {{{docFactory}}} which uses the {{{liveElement}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myElement'))])

    def render_myElement(self, ctx, data):
        f = MyElement()
        f.setFragmentParent(self)
        return ctx.tag[f]
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from zope.interface import implements
from nevow import appserver, inevow

class FakeRoot(object):
    implements(inevow.IResource)
    
    def locateChild(self, ctx, segments):
        return MyPage(), []

site = appserver.NevowSite(FakeRoot())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myelement.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===
Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{Nevow/plugins/}}} (or read [http://twistedmatrix.com/projects/core/documentation/howto/plugin.html the Twisted plugin documentation] to learn where else you can put it).


In the JavaScript source file (in this case, {{{mymodule.js}}}), import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class (notice the module name that was defined in the plugin file):

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.methods(
    function echo(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Define the JavaScript class which will correspond to your {{{LiveElement}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))

    def __init__(self, *a, **kw):
        super(MyElement, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement'))[
        T.input(type='submit', value='Push me', onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyElement}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyElement(athena.LiveElement):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument
    athena.expose(echo)
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myelement.tac?format=raw myelement.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

= Implementation =

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

= Tickets =
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].",',0
926,28,1159319075.14559,cyli,198.49.126.204,,,
927,29,1159320131.48189,cyli,198.49.126.204,,,
928,11,1160433112.10171,njs@pobox.com,198.49.126.204,"= [wiki:WikiStart Divmod] : [wiki:DivmodCombinator Combinator] : Tutorial =
[[PageOutline(2-3,Contents)]]
[wiki:DivmodCombinator Combinator] is a tool to help
developers use and manage multiple branches of software hosted in a
[http://subversion.tigris.org/ Subversion] (SVN from now on) repository.

== Let's Play ==

The last thing you want to do while following this tutorial is scatter files
all over your disk and make changes to a real SVN repository so we'll start by
creating a directory on your disk to play in and a test SVN repository.

Combinator expects the trunk/branches/tags repository structure recommended by the
[http://svnbook.red-bean.com/ Version Control with Subversion] book.

{{{
$ mkdir CombinatorTutorial
$ cd CombinatorTutorial
$ svnadmin create repository
$ svn mkdir -m 'trunk/branches/tags structure' file://`pwd`/repository/trunk file://`pwd`/repository/branches file://`pwd`/repository/tags
$
}}}


== Install Combinator (sort of) ==

Make sure you're in the right place:

{{{
$ pwd
/home/matt/CombinatorTutorial
}}}

Combinator is current only available from Divmod's Subversion repository but
you've already got Subversion installed so it's easy to fetch.  If you are installing the full Divmod suite, do this to check out all of Divmod, which includes Combinator:

{{{
$ svn co -q http://divmod.org/svn/Divmod/trunk Divmod/trunk
}}}

If you would like to just check out Combinator, you can also do that:

{{{
$ svn co -q http://divmod.org/svn/Divmod/trunk/Combinator Divmod/trunk/Combinator
}}}

    '''Note:''' In either case, you __must__ put your Combinator checkout into a directory named ''CombinatorHome''{{{/Divmod/}}}'''trunk'''{{{/Combinator}}} - omitting the required '''trunk''' path segment will result in a broken installation, with neither Combinator itself nor the Divmod package functioning properly.  Also, if you are installing Combinator without the other Divmod packages, you __must__ still put it in a directory called Divmod/trunk/Combinator - those three path segments are the way that it discovers where to import itself from, and also where to place other files, such as the ones listed below.  In this tutorial ''CombinatorHome'' is {{{/home/matt/CombinatorTutorial}}}: that path is the one part of the Combinator installation path that you may change.

{{{
$ pwd
/home/matt/CombinatorTutorial
$ eval `python Divmod/trunk/Combinator/environment.py`
[...]
$ ls
combinator_paths  Divmod repository
$
}}}

The eval line installs Combinator into your environment. If you like
Combinator you'll probably want to add that line to your shell's startup file
but it's a bit early for that right now ;-).

combinator_paths is a directory that Combinator uses to record what branches
you're working on and any binaries/scripts the branch provides.

== Starting work on the Project ==

If you're still with me then this is where we actually start using Combinator.
We need to fetch the project trunk from the SVN repository and register it
with Combinator.

{{{
$ chbranch Project trunk file://`pwd`/repository/trunk
C: Checked out revision 1.
$ ls
combinator_paths  Divmod  Project  repository
$ ls Project/
trunk
$
}}}

Using all the powers my imagination can muster on a Friday evening, I called
the project Project. As you can hopefully see Combinator created the main
directory for Project development and checked out trunk.

Obviously, this is going to be a Twisted project ;-) so we'll get Twisted from
SVN too. (Don't worry, I just want another respository checked out really.)

{{{
$ pwd
/home/matt/CombinatorTutorial
$ chbranch Twisted trunk svn://svn.twistedmatrix.com/svn/Twisted/trunk
[...]
$ ls
combinator_paths  Divmod  Project  repository  Twisted
$ ls Twisted/
trunk
}}}

I mentioned above that Combinator records what branches you're currently
working on. Let's find out what Combinator thinks I'm working on.

{{{
$ whbranch
Project: trunk
Twisted: trunk
$
}}}

== Create a Development Branch ==

At some point we decide to add a substantial new feature to Project.
Obviously, we'd never work directly on trunk so we need a branch to work in.

{{{
$ mkbranch Project say-hello
[...]
$ ls Project/
branches  trunk
$ ls Project/branches/
say-hello
$ whbranch
Project: say-hello
Twisted: trunk
$
}}}

Let's add an exciting new feature.

{{{
$ pwd
/home/matt/CombinatorTutorial
$ cd Project/branches/say-hello/
$ echo 'print 'Hello, Combinator.'' > test.py
$ svn add test.py
$ svn commit -m ''
$
}}}

Hurray, done already! Merge back to trunk so we can roll this out to our eager
customers.

{{{
$ unbranch Project
[...]
$ 
}}}

That actually merges to the local copy of trunk. Check the changes look sane
and then commit.

{{{
$ cd ../../trunk/
$ svn status
A  +   test.py
$ svn commit -m 'Merged say-hello to trunk.'
$ whbranch
Project: trunk
Twisted: trunk
$
}}}

== Merging Forward ==

A new feature means a new branch.

{{{
$ pwd
/home/matt/CombinatorTutorial/Project
$ mkbranch Project another-feature
[...]
$ whbranch
Project: another-feature
Twisted: trunk
$ cd branches/another-feature/
$ echo 'print 'Hello, Bloatware.'' > test.py
$ svn commit -m ''
[...]
$
}}}

Half way through development someone merges new code to trunk that would be
really useful to this branch too.

{{{
$ cd ../../trunk/
$ touch another.py
$ svn add another.py
$ svn commit -m ''
$ cd ../branches/another-feature/
$
}}}

We can pick up the changes to trunk and continue development on the branch by
'merging forward'.

{{{
$ unbranch Project; mkbranch Project another-feature-2
$ whbranch
Project: another-feature-2
Twisted: trunk
$ cd ../another-feature-2/
$ svn status
M      test.py
$ ls
another.py  test.py
$
}}}

We complete the development of the new feature, commit and merge to trunk as
before.

{{{
$ svn commit -m ''
$ unbranch Project
$ cd ../../trunk/
$ svn status
M      test.py
$ svn commit -m 'Merged another-feature-2'
$
}}}

= Final Notes =

Combinator is a useful tool for BranchBasedDevelopment although I think it's still in its infancy. There are other aspects of merging that Combinator could manage that may make it more useful. For instance, some assistance with finalising (commitbranch?) and aborting (rmbranch?) a branch might be nice.

If I ever work out for sure what additional features are required I will [http://divmod.org/trac/newticket create a ticket].",',0
929,1,1160728166.46806,glyph,198.49.126.204,,,
930,2,1160728185.4671,glyph,198.49.126.204,,,
931,21,1160992586.75364,vincecate,198.49.126.204,,,
932,22,1160999951.52617,vincecate,198.49.126.204,,,
933,36,1161246607.71537,konrads,198.49.126.204,,,
934,37,1161246747.73835,konrads,198.49.126.204,,,
935,38,1161258951.61703,amir,198.49.126.204,,,
936,33,1161931352.89149,ironfroggy,198.49.126.204,"=== People Using Divmod Software ===
 * [http://snipshot.com/ Snipshot] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://test.stiq.it/ Stiq]: A web news site with tags and all niceties
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + !CherryPy
 * [http://projects.adytum.us/tracs/PyMonitor/wiki/PyMonScreenShots pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodNevow/Athena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://python.org The Python website] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.who.int/en/ The World Health Organisation] uses [wiki:DivmodAxiom Axiom] and [wiki:DivmodNevow Nevow] for electronic learning products.
 * [http://www.gamezone.cz/ GameZone.cz] uses [wiki:DivmodNevow Divmod Nevow]
 * [http://www.evokat.com/ Illumaware EvoKat] (a data management application) uses [wiki:DivmodNevow Divmod Nevow], [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://www.fluendo.com/ Fluendo] uses [wiki:DivmodNevow Divmod Nevow].","Project was cancelled",0
937,34,1161953451.8648,amir,198.49.126.204,"=== People Using Divmod Software ===
 * [http://snipshot.com/ Snipshot] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://test.stiq.it/ Stiq]: A web news site with tags and all niceties
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://www.johnfante.net/ John Fante's blog] using Axiom OODB + !CherryPy
 * [http://projects.adytum.us/tracs/PyMonitor/wiki/PyMonScreenShots pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodNevow/Athena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://python.org The Python website] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.who.int/en/ The World Health Organisation] uses [wiki:DivmodAxiom Axiom] and [wiki:DivmodNevow Nevow] for electronic learning products.
 * [http://www.gamezone.cz/ GameZone.cz] uses [wiki:DivmodNevow Divmod Nevow]
 * [http://www.evokat.com/ Illumaware EvoKat] (a data management application) uses [wiki:DivmodNevow Divmod Nevow], [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://www.fluendo.com/ Fluendo] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.daylife.com/ Daylife] uses [wiki:DivmodReverend Divmod Reverend].",',0
938,27,1162711502.00691,glyph,198.49.126.204,"= [wiki:WikiStart Divmod] : Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.0.tar.gz?format=raw Download the latest release - 0.5.0!] (Requires [wiki:DivmodEpsilon Epsilon])
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]","Removing a link to mesozoic's unfortunately out-of-date tutorial.",0
939,9,1163213537.27493,terrycojones,198.49.126.204,,,
940,12,1163220505.61486,terrycojones,198.49.126.204,,,
941,13,1163221315.03064,terrycojones,198.49.126.204,,,
942,14,1163221582.55071,terrycojones,198.49.126.204,,,
943,15,1163252928.60968,terrycojones,198.49.126.204,,,
944,10,1163373022.08356,terrycojones,198.49.126.204,"= [wiki:WikiStart Divmod] : Combinator =

Combinator is a tool that Divmod Python programmers use to manage multiple branches of our software.  It integrates with Subversion.

It can be used to manage any number of branches with any number of projects.  It sets up your Python sys.path to point at the appropriate directories for the set of branches you are currently working on.  It also sets up your {{{PATH}}} environment variable so that you can access any scripts that come along with those projects.

It is mainly of interest if you are checking code out of SVN: users of installed versions of Divmod software can probably ignore this project (for now).

'''Note:''' Combinator does not currently work with SVN version 1.4 due to changes in the way SVN stores its local repository. A patch for this problem has been submitted (#1536).

== Rationale ==

Subversion is a nice development system, but some tasks are unnecessarily difficult.  In particular, as we migrated from CVS to SVN, we discovered that there are some operations which were impractically difficult in CVS but simple in SVN, such as creating branches, but while the implementation of managing and merging branches was adequate, there were too much flexibility, and too many ways to subtly incorrectly merge a branch.

As one example of such a problem, in SVN one must always pass the revision where the branch was created on trunk as an argument to the merge command, and determining that number involves reading the output of another long-running command.  Some branches cannot be merged in this manner, depending on where the branch was originally created from.

We developed some idioms for avoiding common errors during merge and encoded them in a set of shell scripts.  Then we discovered another set of common problems: often developers working on a branch would do a bunch of work, and then find themselves mystified that their changes did not seem to be taking effect, due to a mismatch between the environment of their development tools and the shells where test commands were being run.

Combinator began as a set of idioms and shell scripts and has evolved into a set of Python tools which enforce a simple workflow for using SVN and Python together to work on projects that use branches to gather changes together while eliminating common errors.

== Download ==

Combinator is in the Divmod repository.

If you want to use it without the rest of the Divmod projects, see the CombinatorTutorial.

== Use ==

Start with [source:trunk/Combinator/README.txt README.txt] to get your environment set up.

CombinatorTutorial is a guide to typical Combinator use including setting up an SVN repository to play with.

Reading about [wiki:UltimateQualityDevelopmentSystem our development process] is likely to give you some insight into how it's intended to be used.

=== chbranch ===

=== mkbranch ===

=== unbranch ===
",',0
945,20,1163986101.91151,terrycojones,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the [wiki:DivmodAxiom Axiom] object database, the [wiki:DivmodNevow Nevow] web templating framework and the TwistedFramework.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicle), and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.5.0.tar.gz?format=raw Get the most recent release - 0.5.0!]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== Tutorials ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:MantissaWikiTutorial Mantissa Wiki Tutorial] A bit short on explanations, but complete
 * [wiki:MantissaBlogTutorial Mantissa Blog Tutorial] 
 * [wiki:MantissaHowTo An example of how to build a Mantissa application (incomplete)]

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
","http://moxn.net/~mesozoic/axiom-howto has no useful content at all any more.",0
946,3,1164032638.25318,glyph,198.49.126.204,"== Lupy ==

The Lupy project has been RETIRED! For full-text indexing and search using Python and Lucene we recommend [http://pylucene.osafoundation.org/ OSAF's PyLucene] instead.

Lupy is a is a full-text indexer and search engine written in Python. It is a port of Jakarta Lucene 1.2 to Python. Specifically, it reads and writes indexes in Lucene binary format. Like Lucene, it is sophisticated and scalable. Lucene is a polished and mature project and you are encouraged to read the documentation found at the Lucene home page.

Lupy requires Python 2.3 or greater.
",',0
947,35,1164810906.37245,konrads,198.49.126.204,"=== People Using Divmod Software ===
 * [http://snipshot.com/ Snipshot] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://test.stiq.it/ Stiq]: A web news site with tags and all niceties
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://projects.adytum.us/tracs/PyMonitor/wiki/PyMonScreenShots pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodNevow/Athena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://python.org The Python website] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.who.int/en/ The World Health Organisation] uses [wiki:DivmodAxiom Axiom] and [wiki:DivmodNevow Nevow] for electronic learning products.
 * [http://www.gamezone.cz/ GameZone.cz] uses [wiki:DivmodNevow Divmod Nevow]
 * [http://www.evokat.com/ Illumaware EvoKat] (a data management application) uses [wiki:DivmodNevow Divmod Nevow], [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://www.fluendo.com/ Fluendo] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.daylife.com/ Daylife] uses [wiki:DivmodReverend Divmod Reverend].","Removed dead entry to johnfante.net",0
948,10,1164852566.90654,terrycojones,198.49.126.204,,,
949,1,1165212592.17471,glyph,198.49.126.204,"= So You Want To Change Your Schema =

This is a very brief overview of how to write upgrade tests for Axiom.  I hope someone else will clean it up and add more information.  This assumes familiarity with Axiom, Divmod project layout, trial unit tests, Combinator, and probably a dozen other things.

In order to understand the following you will need to look at these two modules: {{{axiom.test.historic.stub_catalog1to2}}} and {{{axiom.test.historic.test_catalog1to2}}}

== Do Stuff ==

 1. write a file like stub_catalog1to2.py in your project's {{{tests/historic}}} directory, named appropriately for your object and versions.  This is written using the __old__ API, the one present in trunk before your branch is merged.
 1. the number in the call to saveStub is the revision of $COMBINATOR_PROJECTS/Divmod/trunk when you are writing the upgrader.
 1. 
{{{
% cd ~/Divmod/branches/foo-19191919/Foo/foo/test/historic/
% chbranch Divmod trunk
% python stub_foo1to2.py # this will create a file called 'foo1to2.axiom.tbz2'.
% svn add foo1to2.axiom.tbz2
}}}
 1. write test_account1to2.py, and it works like a regular trial test, except for loading your stub database automatically.
",',0
950,2,1165212632.19827,glyph,198.49.126.204,"= So You Want To Change Your Schema =

This is a very brief overview of how to write upgrade tests for Axiom.  I hope someone else will clean it up and add more information.  This assumes familiarity with Axiom, Divmod project layout, trial unit tests, Combinator, and probably a dozen other things.

In order to understand the following you will need to look at these two modules: {{{axiom.test.historic.stub_catalog1to2}}} and {{{axiom.test.historic.test_catalog1to2}}}

== Do Stuff ==

 1. write a file like stub_catalog1to2.py in your project's {{{tests/historic}}} directory, named appropriately for your object and versions.  This is written using the __old__ API, the one present in trunk before your branch is merged.
 1. the number in the call to saveStub is the revision of $COMBINATOR_PROJECTS/Divmod/trunk when you are writing the upgrader.
 1. 
{{{
% cd $COMBINATOR_PROJECTS/Divmod/branches/foo-19191919/Foo/foo/test/historic/
% chbranch Divmod trunk
% python stub_foo1to2.py # this will create a file called 'foo1to2.axiom.tbz2'.
% svn add foo1to2.axiom.tbz2
}}}
 1. write test_account1to2.py, and it works like a regular trial test, except for loading your stub database automatically.
",',0
951,3,1165230566.43537,glyph,198.49.126.204,"= So You Want To Change Your Schema =

This is a very brief overview of how to write upgrade tests for Axiom.  I hope someone else will clean it up and add more information.  This assumes familiarity with Axiom, Divmod project layout, trial unit tests, Combinator, and probably a dozen other things.

In order to understand the following you will need to look at these two modules: {{{axiom.test.historic.stub_catalog1to2}}} and {{{axiom.test.historic.test_catalog1to2}}}

== Do Stuff ==

 1. write a file like stub_catalog1to2.py in your project's {{{tests/historic}}} directory, named appropriately for your object and versions.  This is written using the '''old''' API, the one present in trunk before your branch is merged.
 1. the number in the call to saveStub is the revision of {{{$COMBINATOR_PROJECTS/Divmod/trunk}}} when you are writing the upgrader.
 1. 
{{{
% cd $COMBINATOR_PROJECTS/Divmod/branches/foo-19191919/Foo/foo/test/historic/
% chbranch Divmod trunk
% python stub_foo1to2.py # this will create a file called 'foo1to2.axiom.tbz2'.
% svn add foo1to2.axiom.tbz2
}}}
 1. write {{{test_foo1to2.py}}}, and it works like a regular trial test, except for loading your stub database automatically.
",',0
952,4,1165230663.62355,glyph,198.49.126.204,"= So You Want To Change Your Schema =

This is a very brief overview of how to write upgrade tests for Axiom.  I hope someone else will clean it up and add more information.  This assumes familiarity with Axiom, Divmod project layout, trial unit tests, Combinator, and probably a dozen other things.

In order to understand the following you will need to look at these two modules: {{{axiom.test.historic.stub_catalog1to2}}} and {{{axiom.test.historic.test_catalog1to2}}}

== Do Stuff ==

 1. write a file, {{{stub_foo1to2.py}}} (this should look vaguely like the aforementioned {{{stub_catalog1to2.py}}}) in your project's {{{tests/historic}}} directory, named appropriately for your object and versions.  This is written using the '''old''' API, the one present in trunk before your branch is merged.
 1. the number in the call to saveStub is the revision of {{{$COMBINATOR_PROJECTS/Divmod/trunk}}} when you are writing the upgrader.
 1. 
{{{
% cd $COMBINATOR_PROJECTS/Divmod/branches/foo-19191919/Foo/foo/test/historic/
% chbranch Divmod trunk
% python stub_foo1to2.py # this will create a file called 'foo1to2.axiom.tbz2'.
% svn add foo1to2.axiom.tbz2
}}}
 1. write {{{test_foo1to2.py}}} (this should look vaguely like the aforementioned {{{test_catalog1to2.py}}}), and it works like a regular trial test, except for loading your stub database automatically.
",',0
953,43,1165877927.81644,algo,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox and Windows Internet Explorer 6 ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.0.tar.gz?format=raw Latest release - 0.9.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': (take a look at [http://forms-project.pollenation.net/ formal] for an alternate form library)'' For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
 * [wiki:DivmodNevow/ApacheProxy Putting Nevow Page under Apache Proxy]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.",',0
954,1,1165879514.33728,algo,198.49.126.204,"
It is generally not recommended to put the staff that requires many simultaneous connections under apache, unless Event MPM is used. But sometimes that's just fine, e.g for tests.

Imagine you want to hide http://localhost:8080/ behind http://go.site.com/

This is what you put on apache with mod_proxy enabled
{{{
    <VirtualHost *:80>  # of course, *:80 can be replaced by something

        # external site URL
        ServerName go.site.com

        # internal (proxied) URL, note vhost/<protocol>/<host>/ scheme (*)
        ProxyPass / http://localhost:8080/vhost/http/go.site.com/  

    </VirtualHost>
}}}

Usually people also add 'ProxyRequests Off' to their apache conf to ensure that apache won't be used as free proxy.

But it's clearly not enough to setup apache, because it will send requests to Twisted asking http://localhost:8080/.. , but 
Nevow application should work as if it were http://go.site.com, same with other request properties.

There is a special module nevow.vhost.VHostMonsterResource()  (please note nevow.vhost is used, not twisted.web.vhost),
which takes url in the form (*) and fixes request to http://localhost:8080/vhost/http/go.site.com/*  as if it were direct go.site.com/* .


==== Example ====

Here is a brief 'proxy.tac' example, which can be run by 'twistd -noy proxy.tac'


{{{
from twisted.application import service, strports
from nevow import appserver, inevow, rend, loaders, vhost
from zope.interface import implements

# This is the root resource we are hiding behind proxy
# It *was* working as http://localhost:8080, but now it should *become* http://go.site.com
class MyResource(rend.Page):

    def child_(self, ctx):
        return HelloPage()

# A simple root page, *was* http://localhost:8080/, 
# will *become* http://go.site.com/
# (or http://localhost:8080/vhost/http/go.site.com/ from proxied url)
class HelloPage(rend.Page):

    docFactory = loaders.xmlstr('''\
<html><body>Hello</body></html>
''')

# thanks Damascene for this wrapper
# it delegates /vhost/* requests to VHostMonsterResource, which fixes request
class VhostFakeRoot:
    '''
    I am a wrapper to be used at site root when you want to combine 
    vhost.VHostMonsterResource with nevow.guard. If you are using guard, you 
    will pass me a guard.SessionWrapper resource.
    Also can hide generic resources
    '''
    implements(inevow.IResource)
    def __init__(self, wrapped):
        self.wrapped = wrapped
    
    def renderHTTP(self, ctx):
        return self.wrapped.renderHTTP(ctx)
        
    def locateChild(self, ctx, segments):
        '''Returns a VHostMonster if the first segment is 'vhost'. Otherwise
        delegates to the wrapped resource.'''
        if segments[0] == 'vhost':
            return vhost.VHostMonsterResource(), segments[1:]
        else:
            return self.wrapped.locateChild(ctx, segments)         

# setup/run site
site = appserver.NevowSite(VhostFakeRoot(MyResource()))
application = service.Application('go')

strports.service('8080', site).setServiceParent(application)

}}}


==== How that works ? ====

  - Request comes as http://localhost:8080/vhost/http/go.site.com/<**>
  - VhostFakeRoot.localChild is called 
  - 'vhost' is stripped from path and http/go.site.com/* comes to VHostMonsterResource
  - http is stripped by VHostMonsterResource, request is fixed
  - go.site.com is stripped by VHostMonsterResource, request is fixed
  - MyResource comes into play and does its job with <**>




",',0
955,2,1165879526.08491,algo,198.49.126.204,"It is generally not recommended to put the staff that requires many simultaneous connections under apache, unless Event MPM is used. But sometimes that's just fine, e.g for tests.

Imagine you want to hide http://localhost:8080/ behind http://go.site.com/

This is what you put on apache with mod_proxy enabled
{{{
    <VirtualHost *:80>  # of course, *:80 can be replaced by something

        # external site URL
        ServerName go.site.com

        # internal (proxied) URL, note vhost/<protocol>/<host>/ scheme (*)
        ProxyPass / http://localhost:8080/vhost/http/go.site.com/  

    </VirtualHost>
}}}

Usually people also add 'ProxyRequests Off' to their apache conf to ensure that apache won't be used as free proxy.

But it's clearly not enough to setup apache, because it will send requests to Twisted asking http://localhost:8080/.. , but 
Nevow application should work as if it were http://go.site.com, same with other request properties.

There is a special module nevow.vhost.VHostMonsterResource()  (please note nevow.vhost is used, not twisted.web.vhost),
which takes url in the form (*) and fixes request to http://localhost:8080/vhost/http/go.site.com/*  as if it were direct go.site.com/* .


==== Example ====

Here is a brief 'proxy.tac' example, which can be run by 'twistd -noy proxy.tac'


{{{
from twisted.application import service, strports
from nevow import appserver, inevow, rend, loaders, vhost
from zope.interface import implements

# This is the root resource we are hiding behind proxy
# It *was* working as http://localhost:8080, but now it should *become* http://go.site.com
class MyResource(rend.Page):

    def child_(self, ctx):
        return HelloPage()

# A simple root page, *was* http://localhost:8080/, 
# will *become* http://go.site.com/
# (or http://localhost:8080/vhost/http/go.site.com/ from proxied url)
class HelloPage(rend.Page):

    docFactory = loaders.xmlstr('''\
<html><body>Hello</body></html>
''')

# thanks Damascene for this wrapper
# it delegates /vhost/* requests to VHostMonsterResource, which fixes request
class VhostFakeRoot:
    '''
    I am a wrapper to be used at site root when you want to combine 
    vhost.VHostMonsterResource with nevow.guard. If you are using guard, you 
    will pass me a guard.SessionWrapper resource.
    Also can hide generic resources
    '''
    implements(inevow.IResource)
    def __init__(self, wrapped):
        self.wrapped = wrapped
    
    def renderHTTP(self, ctx):
        return self.wrapped.renderHTTP(ctx)
        
    def locateChild(self, ctx, segments):
        '''Returns a VHostMonster if the first segment is 'vhost'. Otherwise
        delegates to the wrapped resource.'''
        if segments[0] == 'vhost':
            return vhost.VHostMonsterResource(), segments[1:]
        else:
            return self.wrapped.locateChild(ctx, segments)         

# setup/run site
site = appserver.NevowSite(VhostFakeRoot(MyResource()))
application = service.Application('go')

strports.service('8080', site).setServiceParent(application)

}}}


==== How that works ? ====

 - Request comes as http://localhost:8080/vhost/http/go.site.com/<**>
 - VhostFakeRoot.localChild is called 
 - 'vhost' is stripped from path and http/go.site.com/* comes to VHostMonsterResource
 - http is stripped by VHostMonsterResource, request is fixed
 - go.site.com is stripped by VHostMonsterResource, request is fixed
 - MyResource comes into play and does its job with <**>




",',0
956,3,1165879589.11366,algo,198.49.126.204,"It is generally not recommended to put the staff that requires many simultaneous connections under apache, unless Event MPM is used. But sometimes that's just fine, e.g for tests.

Imagine you want to hide http://localhost:8080/ behind http://go.site.com/

This is what you put on apache with mod_proxy enabled
{{{
    <VirtualHost *:80>  # of course, *:80 can be replaced by something

        # external site URL
        ServerName go.site.com

        # internal (proxied) URL, note vhost/<protocol>/<host>/ scheme (*)
        ProxyPass / http://localhost:8080/vhost/http/go.site.com/  

    </VirtualHost>
}}}

Usually people also add 'ProxyRequests Off' to their apache conf to ensure that apache won't be used as free proxy.

But it's clearly not enough to setup apache, because it will send requests to Twisted asking http://localhost:8080/.. , but 
Nevow application should work as if it were http://go.site.com, same with other request properties.

There is a special module nevow.vhost.VHostMonsterResource()  (please note nevow.vhost is used, not twisted.web.vhost),
which takes url in the form (*) and fixes request to http://localhost:8080/vhost/http/go.site.com/*  as if it were direct go.site.com/* .


==== Example ====

Here is a brief 'proxy.tac' example, which can be run by 'twistd -noy proxy.tac'


{{{
from twisted.application import service, strports
from nevow import appserver, inevow, rend, loaders, vhost
from zope.interface import implements

# This is the root resource we are hiding behind proxy
# It *was* working as http://localhost:8080, but now it should *become* http://go.site.com
class MyResource(rend.Page):

    def child_(self, ctx):
        return HelloPage()

# A simple root page, *was* http://localhost:8080/, 
# will *become* http://go.site.com/
# (or http://localhost:8080/vhost/http/go.site.com/ from proxied url)
class HelloPage(rend.Page):

    docFactory = loaders.xmlstr('''\
<html><body>Hello</body></html>
''')

# thanks Damascene for this wrapper
# it delegates /vhost/* requests to VHostMonsterResource, which fixes request
class VhostFakeRoot:
    '''
    I am a wrapper to be used at site root when you want to combine 
    vhost.VHostMonsterResource with nevow.guard. If you are using guard, you 
    will pass me a guard.SessionWrapper resource.
    Also can hide generic resources
    '''
    implements(inevow.IResource)
    def __init__(self, wrapped):
        self.wrapped = wrapped
    
    def renderHTTP(self, ctx):
        return self.wrapped.renderHTTP(ctx)
        
    def locateChild(self, ctx, segments):
        '''Returns a VHostMonster if the first segment is 'vhost'. Otherwise
        delegates to the wrapped resource.'''
        if segments[0] == 'vhost':
            return vhost.VHostMonsterResource(), segments[1:]
        else:
            return self.wrapped.locateChild(ctx, segments)         

# setup/run site
site = appserver.NevowSite(VhostFakeRoot(MyResource()))
application = service.Application('go')

strports.service('8080', site).setServiceParent(application)

}}}


==== How that works ? ====

 * Request comes as http://localhost:8080/vhost/http/go.site.com/<**>
 * VhostFakeRoot.localChild is called 
 * 'vhost' is stripped from path and http/go.site.com/* comes to VHostMonsterResource
 * http is stripped by VHostMonsterResource, request is fixed
 * go.site.com is stripped by VHostMonsterResource, request is fixed
 * MyResource comes into play and does its job with <**>




",',0
957,4,1165879685.25491,algo,198.49.126.204,"It is generally not recommended to put the staff that requires many simultaneous connections under apache, unless Event MPM is used. But sometimes that's just fine, e.g for tests.

Imagine you want to hide http://localhost:8080/ behind http://go.site.com/

This is what you put on apache with mod_proxy enabled
{{{
    <VirtualHost *:80>  # of course, *:80 can be replaced by something

        # external site URL
        ServerName go.site.com

        # internal (proxied) URL, note vhost/<protocol>/<host>/ scheme (*)
        ProxyPass / http://localhost:8080/vhost/http/go.site.com/  

    </VirtualHost>
}}}

Usually people also add 'ProxyRequests Off' to their apache conf to ensure that apache won't be used as free proxy.

But it's clearly not enough to setup apache, because it will send requests to Twisted asking http://localhost:8080/.. , while
Nevow application should process request as if it were http://go.site.com.

There is a special module nevow.vhost.VHostMonsterResource()  (please note nevow.vhost is used, not twisted.web.vhost),
which takes url in the form (*) and fixes request to http://localhost:8080/vhost/http/go.site.com/*  as if it were direct go.site.com/* .


==== Example ====

Here is a brief 'proxy.tac' example, which can be run by 'twistd -noy proxy.tac'


{{{
from twisted.application import service, strports
from nevow import appserver, inevow, rend, loaders, vhost
from zope.interface import implements

# This is the root resource we are hiding behind proxy
# It *was* working as http://localhost:8080, but now it should *become* http://go.site.com
class MyResource(rend.Page):

    def child_(self, ctx):
        return HelloPage()

# A simple root page, *was* http://localhost:8080/, 
# will *become* http://go.site.com/
# (or http://localhost:8080/vhost/http/go.site.com/ from proxied url)
class HelloPage(rend.Page):

    docFactory = loaders.xmlstr('''\
<html><body>Hello</body></html>
''')

# thanks Damascene for this wrapper
# it delegates /vhost/* requests to VHostMonsterResource, which fixes request
class VhostFakeRoot:
    '''
    I am a wrapper to be used at site root when you want to combine 
    vhost.VHostMonsterResource with nevow.guard. If you are using guard, you 
    will pass me a guard.SessionWrapper resource.
    Also can hide generic resources
    '''
    implements(inevow.IResource)
    def __init__(self, wrapped):
        self.wrapped = wrapped
    
    def renderHTTP(self, ctx):
        return self.wrapped.renderHTTP(ctx)
        
    def locateChild(self, ctx, segments):
        '''Returns a VHostMonster if the first segment is 'vhost'. Otherwise
        delegates to the wrapped resource.'''
        if segments[0] == 'vhost':
            return vhost.VHostMonsterResource(), segments[1:]
        else:
            return self.wrapped.locateChild(ctx, segments)         

# setup/run site
site = appserver.NevowSite(VhostFakeRoot(MyResource()))
application = service.Application('go')

strports.service('8080', site).setServiceParent(application)

}}}


==== How that works ? ====

 * Request comes as http://localhost:8080/vhost/http/go.site.com/<**>
 * VhostFakeRoot.localChild is called 
 * 'vhost' is stripped from path and http/go.site.com/* comes to VHostMonsterResource
 * http is stripped by VHostMonsterResource, request is fixed
 * go.site.com is stripped by VHostMonsterResource, request is fixed
 * MyResource comes into play and does its job with <**>




",',0
958,5,1165879754.02314,algo,198.49.126.204,"It is generally not recommended to put the staff that requires many simultaneous connections under apache, unless Event MPM is used. But sometimes that's just fine, e.g for tests.

Imagine you want to hide http://localhost:8080/ behind http://go.site.com/

This is what you put on apache with mod_proxy enabled
{{{
    <VirtualHost *:80>  # of course, *:80 can be replaced by something

        # external site URL
        ServerName go.site.com

        # internal (proxied) URL, note vhost/<protocol>/<host>/ scheme (*)
        ProxyPass / http://localhost:8080/vhost/http/go.site.com/  

    </VirtualHost>
}}}

Usually people also add 'ProxyRequests Off' to their apache conf to ensure that apache won't be used as free proxy.

But it's clearly not enough to setup apache, because it will send requests to Twisted asking http://localhost:8080/.. , while
Nevow application should process request as if it were http://go.site.com.

There is a special module nevow.vhost.VHostMonsterResource()  (please note nevow.vhost is used, not twisted.web.vhost),
which takes url in the form http://localhost:8080/vhost/http/go.site.com/* and fixes request to make Resource think that it were direct go.site.com/* .


==== Example ====

Here is a brief 'proxy.tac' example, which can be run by 'twistd -noy proxy.tac'


{{{
from twisted.application import service, strports
from nevow import appserver, inevow, rend, loaders, vhost
from zope.interface import implements

# This is the root resource we are hiding behind proxy
# It *was* working as http://localhost:8080, but now it should *become* http://go.site.com
class MyResource(rend.Page):

    def child_(self, ctx):
        return HelloPage()

# A simple root page, *was* http://localhost:8080/, 
# will *become* http://go.site.com/
# (or http://localhost:8080/vhost/http/go.site.com/ from proxied url)
class HelloPage(rend.Page):

    docFactory = loaders.xmlstr('''\
<html><body>Hello</body></html>
''')

# thanks Damascene for this wrapper
# it delegates /vhost/* requests to VHostMonsterResource, which fixes request
class VhostFakeRoot:
    '''
    I am a wrapper to be used at site root when you want to combine 
    vhost.VHostMonsterResource with nevow.guard. If you are using guard, you 
    will pass me a guard.SessionWrapper resource.
    Also can hide generic resources
    '''
    implements(inevow.IResource)
    def __init__(self, wrapped):
        self.wrapped = wrapped
    
    def renderHTTP(self, ctx):
        return self.wrapped.renderHTTP(ctx)
        
    def locateChild(self, ctx, segments):
        '''Returns a VHostMonster if the first segment is 'vhost'. Otherwise
        delegates to the wrapped resource.'''
        if segments[0] == 'vhost':
            return vhost.VHostMonsterResource(), segments[1:]
        else:
            return self.wrapped.locateChild(ctx, segments)         

# setup/run site
site = appserver.NevowSite(VhostFakeRoot(MyResource()))
application = service.Application('go')

strports.service('8080', site).setServiceParent(application)

}}}


==== How that works ? ====

 * Request comes as http://localhost:8080/vhost/http/go.site.com/<**>
 * VhostFakeRoot.localChild is called 
 * 'vhost' is stripped from path and http/go.site.com/* comes to VHostMonsterResource
 * http is stripped by VHostMonsterResource, request is fixed
 * go.site.com is stripped by VHostMonsterResource, request is fixed
 * MyResource comes into play and does its job with <**>




",',0
959,6,1165879837.85876,algo,198.49.126.204,"It is generally not recommended to put the staff that requires many simultaneous connections under apache, unless Event MPM is used. But sometimes that's just fine, e.g for tests.

Imagine you want to hide http://localhost:8080/ behind http://go.site.com/

This is what you put on apache with mod_proxy enabled
{{{
    <VirtualHost *:80>  # of course, *:80 can be replaced by something

        # external site URL
        ServerName go.site.com

        # internal (proxied) URL, note vhost/<protocol>/<host>/ scheme (*)
        ProxyPass / http://localhost:8080/vhost/http/go.site.com/  

    </VirtualHost>
}}}

Usually people also add 'ProxyRequests Off' to their apache conf to ensure that apache won't be used as free proxy.

But it's clearly not enough to setup apache, because it will send requests to Twisted asking http://localhost:8080/.. , while
Nevow application should process request as if it were http://go.site.com.

There is a special module nevow.vhost.VHostMonsterResource()  (please note nevow.vhost is used, not twisted.web.vhost),
which takes url in the form http://localhost:8080/vhost/http/go.site.com/* and fixes request to make Resource think that it were direct go.site.com/* .


==== Example ====

Let's hide a resource MyResource, which works perfectly as http://localhost:8080, under http://go.site.com.

Here is a brief 'proxy.tac' example, which can be run by 'twistd -noy proxy.tac'


{{{
from twisted.application import service, strports
from nevow import appserver, inevow, rend, loaders, vhost
from zope.interface import implements

# This is the root resource we are hiding behind proxy
# It *was* working as http://localhost:8080, but now it should *become* http://go.site.com
class MyResource(rend.Page):

    def child_(self, ctx):
        return HelloPage()

# A simple root page, *was* http://localhost:8080/, 
# will *become* http://go.site.com/
# (or http://localhost:8080/vhost/http/go.site.com/ from proxied url)
class HelloPage(rend.Page):

    docFactory = loaders.xmlstr('''\
<html><body>Hello</body></html>
''')

# thanks Damascene for this wrapper
# it delegates /vhost/* requests to VHostMonsterResource, which fixes request
class VhostFakeRoot:
    '''
    I am a wrapper to be used at site root when you want to combine 
    vhost.VHostMonsterResource with nevow.guard. If you are using guard, you 
    will pass me a guard.SessionWrapper resource.
    Also can hide generic resources
    '''
    implements(inevow.IResource)
    def __init__(self, wrapped):
        self.wrapped = wrapped
    
    def renderHTTP(self, ctx):
        return self.wrapped.renderHTTP(ctx)
        
    def locateChild(self, ctx, segments):
        '''Returns a VHostMonster if the first segment is 'vhost'. Otherwise
        delegates to the wrapped resource.'''
        if segments[0] == 'vhost':
            return vhost.VHostMonsterResource(), segments[1:]
        else:
            return self.wrapped.locateChild(ctx, segments)         

# setup/run site
site = appserver.NevowSite(VhostFakeRoot(MyResource()))
application = service.Application('go')

strports.service('8080', site).setServiceParent(application)

}}}


==== How that works ? ====

 * Request comes as http://localhost:8080/vhost/http/go.site.com/<**>
 * VhostFakeRoot.localChild is called 
 * 'vhost' is stripped from path and http/go.site.com/* comes to VHostMonsterResource
 * http is stripped by VHostMonsterResource, request is fixed
 * go.site.com is stripped by VHostMonsterResource, request is fixed
 * MyResource comes into play and does its job with <**>




",',0
960,7,1166127259.355,algo,198.49.126.204,"It is generally not recommended to put the staff that requires many simultaneous connections under apache, unless Event MPM is used. But sometimes that's just fine, e.g for tests.

Imagine you want to hide http://localhost:8080/ behind http://go.site.com/

This is what you put on apache with mod_proxy enabled
{{{
    <VirtualHost *:80>  # of course, *:80 can be replaced by something

        # external site URL
        ServerName go.site.com

        # internal (proxied) URL, note vhost/<protocol>/<host>/ scheme (*)
        ProxyPass / http://localhost:8080/vhost/http/go.site.com/  

    </VirtualHost>
}}}

Usually people also add 'ProxyRequests Off' to their apache conf to ensure that apache won't be used as free proxy.

But it's clearly not enough to setup apache, because it will send requests to Twisted asking http://localhost:8080/.. , while
Nevow application should process request as if it were http://go.site.com.

There is a special module nevow.vhost.VHostMonsterResource()  (please note nevow.vhost is used, not twisted.web.vhost),
which takes url in the form http://localhost:8080/vhost/http/go.site.com/* and fixes request to make Resource think that it were direct go.site.com/* .


==== Example ====

Let's hide a resource MyResource, which works perfectly as http://localhost:8080, under http://go.site.com.

Here is a brief 'proxy.tac' example, which can be run by 'twistd -noy proxy.tac'


{{{
from twisted.application import service, strports
from nevow import appserver, inevow, rend, loaders, vhost
from zope.interface import implements

# This is the root resource we are hiding behind proxy
# It *was* working as http://localhost:8080, but now it should *become* http://go.site.com
class MyResource(rend.Page):

    def child_(self, ctx):
        return HelloPage()

# A simple root page, *was* http://localhost:8080/, 
# will *become* http://go.site.com/
# (or http://localhost:8080/vhost/http/go.site.com/ from proxied url)
class HelloPage(rend.Page):

    docFactory = loaders.xmlstr('''\
<html><body>Hello</body></html>
''')

# thanks Damascene for this wrapper
# it delegates /vhost/* requests to VHostMonsterResource, which fixes request
class VhostFakeRoot:
    '''
    I am a wrapper to be used at site root when you want to combine 
    vhost.VHostMonsterResource with nevow.guard. If you are using guard, you 
    will pass me a guard.SessionWrapper resource.
    Also can hide generic resources
    '''
    implements(inevow.IResource)
    def __init__(self, wrapped):
        self.wrapped = wrapped
    
    def renderHTTP(self, ctx):
        return self.wrapped.renderHTTP(ctx)
        
    def locateChild(self, ctx, segments):
        '''Returns a VHostMonster if the first segment is 'vhost'. Otherwise
        delegates to the wrapped resource.'''
        if segments[0] == 'vhost':
            return vhost.VHostMonsterResource(), segments[1:]
        else:
            return self.wrapped.locateChild(ctx, segments)         

# setup/run site
site = appserver.NevowSite(VhostFakeRoot(MyResource()))
application = service.Application('go')

strports.service('8080', site).setServiceParent(application)

}}}


==== How that works ? ====

 * Request comes as http://localhost:8080/vhost/http/go.site.com/<**>
 * VhostFakeRoot.localChild is called 
 * 'vhost' is stripped from path and http/go.site.com/* comes to VHostMonsterResource
 * http is stripped by VHostMonsterResource, request is fixed
 * go.site.com is stripped by VHostMonsterResource, request is fixed
 * MyResource comes into play and does its job with <**>


== Notes ==

 1. Headers from Twisted are consumed by apache.. That may be a problem
 2. Nevow.livePage stuff had problems working through proxy

",',0
961,8,1166218758.71746,algo,198.49.126.204,"


It is generally not recommended to put the staff that requires many simultaneous connections under apache, unless Event MPM is used. But sometimes that's just fine, e.g for tests.

Imagine you want to hide http://localhost:8080/ behind http://go.site.com/

This is what you put on apache with mod_proxy enabled
{{{
    <VirtualHost *:80>  # of course, *:80 can be replaced by something

        # external site URL
        ServerName go.site.com

        # internal (proxied) URL, note vhost/<protocol>/<host>/ scheme (*)
        ProxyPass / http://localhost:8080/vhost/http/go.site.com/  

    </VirtualHost>
}}}

Usually people also add 'ProxyRequests Off' to their apache conf to ensure that apache won't be used as free proxy.

But it's clearly not enough to setup apache, because it will send requests to Twisted asking http://localhost:8080/.. , while
Nevow application should process request as if it were http://go.site.com.

There is a special module nevow.vhost.VHostMonsterResource()  (please note nevow.vhost is used, not twisted.web.vhost),
which takes url in the form http://localhost:8080/vhost/http/go.site.com/* and fixes request to make Resource think that it were direct go.site.com/* .


==== Example ====

Let's hide a resource MyResource, which works perfectly as http://localhost:8080, under http://go.site.com.

Here is a brief 'proxy.tac' example, which can be run by 'twistd -noy proxy.tac'


{{{
from twisted.application import service, strports
from nevow import appserver, inevow, rend, loaders, vhost
from zope.interface import implements

# This is the root resource we are hiding behind proxy
# It *was* working as http://localhost:8080, but now it should *become* http://go.site.com
class MyResource(rend.Page):

    def child_(self, ctx):
        return HelloPage()

# A simple root page, *was* http://localhost:8080/, 
# will *become* http://go.site.com/
# (or http://localhost:8080/vhost/http/go.site.com/ from proxied url)
class HelloPage(rend.Page):

    docFactory = loaders.xmlstr('''\
<html><body>Hello</body></html>
''')

# thanks Damascene for this wrapper
# it delegates /vhost/* requests to VHostMonsterResource, which fixes request
class VhostFakeRoot:
    '''
    I am a wrapper to be used at site root when you want to combine 
    vhost.VHostMonsterResource with nevow.guard. If you are using guard, you 
    will pass me a guard.SessionWrapper resource.
    Also can hide generic resources
    '''
    implements(inevow.IResource)
    def __init__(self, wrapped):
        self.wrapped = wrapped
    
    def renderHTTP(self, ctx):
        return self.wrapped.renderHTTP(ctx)
        
    def locateChild(self, ctx, segments):
        '''Returns a VHostMonster if the first segment is 'vhost'. Otherwise
        delegates to the wrapped resource.'''
        if segments[0] == 'vhost':
            return vhost.VHostMonsterResource(), segments[1:]
        else:
            return self.wrapped.locateChild(ctx, segments)         

# setup/run site
site = appserver.NevowSite(VhostFakeRoot(MyResource()))
application = service.Application('go')

strports.service('8080', site).setServiceParent(application)

}}}


==== How that works ? ====

 * Request comes as http://localhost:8080/vhost/http/go.site.com/<**>
 * VhostFakeRoot.localChild is called 
 * 'vhost' is stripped from path and http/go.site.com/* comes to VHostMonsterResource
 * http is stripped by VHostMonsterResource, request is fixed
 * go.site.com is stripped by VHostMonsterResource, request is fixed
 * MyResource comes into play and does its job with <**>


== Notes ==

 1. Headers from Twisted are consumed by apache.. That may be a problem
 2. Nevow.livePage stuff had problems working through proxy


Also see:
http://divmod.org/trac/wiki/DivmodNevow/Deployment/ReverseProxy

",',0
962,9,1166550204.21531,radix,198.49.126.204,"= Imaginary =

Imaginary numbers are so named not because they are fictitious, but because
they are along a different axis from real numbers.

Divmod Imaginary is a simulationist's take on the realm of role playing,
interactive fiction, and multiplayer dungeons.  It incorporates gameplay
features from each area while attempting to provide a richer environment
than is generally available from existing systems.

Status: Imaginary is currently on the back of some peoples' minds.

 * [browser:trunk/Imaginary/imaginary Browse the source]. 
 * [query:status=new|assigned|reopened&component=Imaginary View the tickets].


Instructions for starting an Imaginary server are here: [source:/trunk/Imaginary/doc/RUNNING?format=raw doc/RUNNING]

== Radical ==

See DivmodRadical.

","Update status",0
963,44,1166811612.31909,amberite,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6 and Opera 9 ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.0.tar.gz?format=raw Latest release - 0.9.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': (take a look at [http://forms-project.pollenation.net/ formal] for an alternate form library)'' For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
 * [wiki:DivmodNevow/ApacheProxy Putting Nevow Page under Apache Proxy]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","Athena has supported Opera 9 for a while now.",0
964,45,1166811685.60658,amberite,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, Opera 9 and Camino ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.0.tar.gz?format=raw Latest release - 0.9.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': (take a look at [http://forms-project.pollenation.net/ formal] for an alternate form library)'' For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
 * [wiki:DivmodNevow/ApacheProxy Putting Nevow Page under Apache Proxy]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","Camino is also supported.",0
966,11,1167069143.23806,terrycojones,198.49.126.204,,,
967,1,1167726666.06926,glyph,198.49.126.204," ",',0
968,1,1167726677.76072,glyph,198.49.126.204," ",',0
969,1,1167726687.35852,glyph,198.49.126.204," ",',0
970,3,1167861316.05533,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : !PyFlakes =
is a Lint-like tool for Python, like [http://pychecker.sourceforge.net PyChecker].  It is focused on identifying common errors quickly without executing Python code.

Its primary advantage over [http://pychecker.sourceforge.net PyChecker] is that it is ''fast''.  You don't have to sit around for minutes waiting for the checker to run; it runs on most large projects in only a few seconds.

The two primary categories of defects reported by Pyflakes are:

  * Names which are used but not defined or used before they are defined
  * Names which are redefined without having been used

These can each take many forms.  For example, Pyflakes will tell you when you have forgotten an import, mistyped a variable name, defined two functions with the same name, shadowed a variable from another scope, imported a module twice, or two different modules with the same name, and so on.

== Exits ==
 * [http://www.freshmeat.net/projects/pyflakes Pyflakes on freshmeat]
 * [http://www.swik.net/pyflakes Pyflakes on swik]

== Download ==
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Pyflakes Pyflakes","what does pyflakes do?",0
971,16,1167954763.83964,terrycojones,198.49.126.204,,,
972,12,1167966837.07663,glyph,198.49.126.204,,,
973,10,1167974845.40624,glyph,198.49.126.204,"= What does it mean to 'Merge a Branch Forward'? =

Merging forward is a way to keep old branches fresh and up-to-date.  It consists of this process:

  * Make sure your trunk working copy is clean
  * Make sure all your existing branch changes are checked in
  * Unbranch your existing branch.  eg, for sprocket-212, you would execute:
{{{
chbranch Divmod sprocket-212
unbranch Divmod
}}}
  * Resolve any conflicts and use 'svn resolved'
  * Create a new branch.  eg:
{{{
mkbranch Divmod sprocket-212-2
}}}
  * Commit the new branch.
  * Delete the old branch:
{{{
svn rm svn+ssh://divmod.org/svn/Divmod/branches/sprocket-212 -m 'Merged forward.'
}}}
  * Make sure to revert trunk working copy:
{{{
svn revert Divmod/trunk -R
}}}

Merging forward is a component of [wiki:UltimateQualityDevelopmentSystem our development methodology].",',0
974,46,1168604011.16798,gobry,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, Opera 9 and Camino ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.0.tar.gz?format=raw Latest release - 0.9.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': (take a look at [http://forms-project.pollenation.net/ formal] for an alternate form library) For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
 * [wiki:DivmodNevow/ApacheProxy Putting Nevow Page under Apache Proxy]
== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","fixed dangling italic tag",0
975,3,1168923459.35407,ironfroggy,198.49.126.204,"[http://www.microsoft.com/technet/scriptcenter/hubs/msh.mspx PowerShell (previously called Monad or MSH)] is a new command shell being designed by Microsoft as a replacement for the aging cmd.exe shell. This page is about how to use [wiki:DivmodCombinator Combinator] with MSH to do your development. It may also include some other, general windows development tips for setting up your build enviroment.

= Configuring Your Environment =

One thing you'll need to do is open up your filewall. I was able to do this by adding python.exe to my list of exceptions on the Firewall, but I do wonder if there is a better, more precise way to do this. If anyone has an idea, let me know please. Of course, you can try not using any firewall at all, but I don't recommend that.

By default, MSH will not run any scripts. This is a security measure, and there are several policies it can follow in this reguard. [http://thelazyadmin.com/index.php?/archives/351-MSH-Profiles.html This] page tells you the details of how to configure the Execution Policy, but I'll give you the command that will just make things run. Remember, though, this method lets all scripts run and you may want to look into signing them, so that only trusted scripts are allowed to be run.


{{{
set-property HKLM:\SOFTWARE\Microsoft\Msh\1\ShellIds\Microsoft.Management.Automation.msh -property ExecutionPolicy -value Unrestricted
}}}

= Dependancies =

We'll want to find as many prebuild Windows packages as possible, so I'll try to link to all of them here. If I missed any, please let me know.

 * PySQLite2
   * [http://initd.org/pub/software/pysqlite/releases/2.1/2.1.3/pysqlite-2.1.3.win32-py2.4.exe pySQLite2 2.1.3 Windows Installer for Python 2.4]
   * [http://initd.org/pub/software/pysqlite/releases/2.1/2.1.3/pysqlite-2.1.3.win32-py2.3.exe for Python 2.4]
 * PyOpenSSL and OpenSSL
   * [http://webcleaner.sourceforge.net/pyOpenSSL-0.6.win32-py2.4.exe pyOpenSSL 0.6 for Python 2.4]
   * [http://www.slproweb.com/products/Win32OpenSSL.html OpenSSL Windows Installer is available here]
 * [http://pytz.souravaceforge.net/ PyTZ] is available [http://sourceforge.net/project/showfiles.php?group_id=79122&package_id=80455 here]
 * [http://www.python.org/windows/win32/ Win32 Extensions] are needed. You can get them [http://sourceforge.net/project/showfiles.php?group_id=78018 here].
 * [http://www.pythonware.com/products/pil/ Pil] can be downloaded from its website.

WORKING ON THE REST OF THIS",',0
976,4,1168923576.27195,ironfroggy,198.49.126.204,"[http://www.microsoft.com/technet/scriptcenter/hubs/msh.mspx PowerShell (previously called Monad or MSH)] is a new command shell being designed by Microsoft as a replacement for the aging cmd.exe shell. This page is about how to use [wiki:DivmodCombinator Combinator] with MSH to do your development. It may also include some other, general windows development tips for setting up your build enviroment.

= Configuring Your Environment =

One thing you'll need to do is open up your filewall. I was able to do this by adding python.exe to my list of exceptions on the Firewall, but I do wonder if there is a better, more precise way to do this. If anyone has an idea, let me know please. Of course, you can try not using any firewall at all, but I don't recommend that.

By default, MSH will not run any scripts. This is a security measure, and there are several policies it can follow in this reguard. [http://thelazyadmin.com/index.php?/archives/351-MSH-Profiles.html This] page tells you the details of how to configure the Execution Policy, but I'll give you the command that will just make things run. Remember, though, this method lets all scripts run and you may want to look into signing them, so that only trusted scripts are allowed to be run.


{{{
set-property HKLM:\SOFTWARE\Microsoft\Msh\1\ShellIds\Microsoft.Management.Automation.msh -property ExecutionPolicy -value Unrestricted
}}}

NOTE: Due to changes between the betas and the official releases, this code doesn't work in the current releases of PowerShell! I hadn't used it for a while, so I'm looking into what has changed. If anyone has a fix, feel free to edit it in here. Apparently set-property is gone.

= Dependancies =

We'll want to find as many prebuild Windows packages as possible, so I'll try to link to all of them here. If I missed any, please let me know.

 * PySQLite2
   * [http://initd.org/pub/software/pysqlite/releases/2.1/2.1.3/pysqlite-2.1.3.win32-py2.4.exe pySQLite2 2.1.3 Windows Installer for Python 2.4]
   * [http://initd.org/pub/software/pysqlite/releases/2.1/2.1.3/pysqlite-2.1.3.win32-py2.3.exe for Python 2.4]
 * PyOpenSSL and OpenSSL
   * [http://webcleaner.sourceforge.net/pyOpenSSL-0.6.win32-py2.4.exe pyOpenSSL 0.6 for Python 2.4]
   * [http://www.slproweb.com/products/Win32OpenSSL.html OpenSSL Windows Installer is available here]
 * [http://pytz.souravaceforge.net/ PyTZ] is available [http://sourceforge.net/project/showfiles.php?group_id=79122&package_id=80455 here]
 * [http://www.python.org/windows/win32/ Win32 Extensions] are needed. You can get them [http://sourceforge.net/project/showfiles.php?group_id=78018 here].
 * [http://www.pythonware.com/products/pil/ Pil] can be downloaded from its website.

WORKING ON THE REST OF THIS",',0
977,5,1168924555.86346,ironfroggy,198.49.126.204,"[http://www.microsoft.com/technet/scriptcenter/hubs/msh.mspx PowerShell (previously called Monad or MSH)] is a new command shell being designed by Microsoft as a replacement for the aging cmd.exe shell. This page is about how to use [wiki:DivmodCombinator Combinator] with MSH to do your development. It may also include some other, general windows development tips for setting up your build enviroment.

= Configuring Your Environment =

One thing you'll need to do is open up your filewall. I was able to do this by adding python.exe to my list of exceptions on the Firewall, but I do wonder if there is a better, more precise way to do this. If anyone has an idea, let me know please. Of course, you can try not using any firewall at all, but I don't recommend that.

By default, MSH will not run any scripts. This is a security measure, and there are several policies it can follow in this reguard. [http://thelazyadmin.com/index.php?/archives/351-MSH-Profiles.html This] page tells you the details of how to configure the Execution Policy, but I'll give you the command that will just make things run. Remember, though, this method lets all scripts run and you may want to look into signing them, so that only trusted scripts are allowed to be run. This must be run with administrative rights and is a system-wide setting.


{{{
set-executionpolicy unrestricted
}}}


= Dependancies =

We'll want to find as many prebuild Windows packages as possible, so I'll try to link to all of them here. If I missed any, please let me know.

 * PySQLite2
   * [http://initd.org/pub/software/pysqlite/releases/2.1/2.1.3/pysqlite-2.1.3.win32-py2.4.exe pySQLite2 2.1.3 Windows Installer for Python 2.4]
   * [http://initd.org/pub/software/pysqlite/releases/2.1/2.1.3/pysqlite-2.1.3.win32-py2.3.exe for Python 2.4]
 * PyOpenSSL and OpenSSL
   * [http://webcleaner.sourceforge.net/pyOpenSSL-0.6.win32-py2.4.exe pyOpenSSL 0.6 for Python 2.4]
   * [http://www.slproweb.com/products/Win32OpenSSL.html OpenSSL Windows Installer is available here]
 * [http://pytz.souravaceforge.net/ PyTZ] is available [http://sourceforge.net/project/showfiles.php?group_id=79122&package_id=80455 here]
 * [http://www.python.org/windows/win32/ Win32 Extensions] are needed. You can get them [http://sourceforge.net/project/showfiles.php?group_id=78018 here].
 * [http://www.pythonware.com/products/pil/ Pil] can be downloaded from its website.

WORKING ON THE REST OF THIS",',0
978,28,1169143169.01004,mithrandi,198.49.126.204,"= [wiki:WikiStart Divmod] : Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.0.tar.gz?format=raw Download the latest release - 0.5.0!] (Requires [wiki:DivmodEpsilon Epsilon])
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]
 * [wiki:DivmodAxiom/DependencyTransition Dependencies]: How to transition from pre-{{{axiom.dependency} code.",',0
979,1,1169144359.59215,mithrandi,198.49.126.204,"= Transition mini-HOWTO =

A few bullet points with stuff to do transitioning from pre-dependency code to the new API(s).

 * Don't mix {{{axiom.item.InstallableMixin}}} in anymore, it is unnecessary, as is the {{{installedOn}}} attribute that was on subclasses thereof.
 * {{{powerup.installOn(target)}}} is now spelled {{{axiom.dependency.installOn(powerup, target)}}}.
 * Instead of explicitly powering the target up in {{{installOn}}}, set the {{{powerupInterfaces}}} class attribute to a sequence of interfaces, or of {{{(interface, priority)}}} tuples.
",',0
980,2,1169146033.39118,mithrandi,198.49.126.204,,,
981,3,1169509785.86715,mithrandi,198.49.126.204,"= Transition mini-HOWTO =

A few bullet points with stuff to do transitioning from pre-dependency code to the new API(s).

 * {{{axiom.item.InstallableMixin}}} has been removed since it is unnecessary, as is the {{{installedOn}}} attribute that was on subclasses thereof. {{{powerup.installedOn}}} is now spelled {{{axiom.dependency.installedOn(powerup)}}}.
 * {{{powerup.installOn(target)}}} is now spelled {{{axiom.dependency.installOn(powerup, target)}}}. See also {{{axiom.dependency.uninstallFrom(powerup, target)}}}.
 * Instead of explicitly powering the target up in {{{installOn}}}, set the {{{powerupInterfaces}}} class attribute to a sequence of interfaces, or of {{{(interface, priority)}}} tuples.
 * If you are implementing {{{INavigableElement}}}, you need something like:
{{{
#!python
privateApplication = dependsOn(PrivateApplication)
}}}
 * Declare other dependencies of your powerups as appropriate.
 * Get rid of your {{{Benefactor}}} / {{{BenefactorFactory}}} classes, and instead pass an {{{installablePowerups}}} sequence when constructing your offering. For example:
{{{
#!python
installablePowerups = [
    (u'Operator admin', u'Operator administration', OperatorAdmin),
    (u'Reports', u'Data reporting functionality', Reports),
    ]
}}}
 * TODO: writing upgraders",',0
984,107,1170114446.74497,amir,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://jotlive.com'><img src='http://divmod.org/users/moe/people-using-divmod/jotlive-logo.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]

== Some of the software and services we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.
 * [http://tummy.com/ Tummy] our fantastic hosting service. The hostess with the mostest.

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.","Add Daylife to featured users",0
985,36,1170114534.65965,amir,198.49.126.204,"=== People Using Divmod Software ===
 * [http://snipshot.com/ Snipshot] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://test.stiq.it/ Stiq]: A web news site with tags and all niceties
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://projects.adytum.us/tracs/PyMonitor/wiki/PyMonScreenShots pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodNevow/Athena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://python.org The Python website] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.who.int/en/ The World Health Organisation] uses [wiki:DivmodAxiom Axiom] and [wiki:DivmodNevow Nevow] for electronic learning products.
 * [http://www.gamezone.cz/ GameZone.cz] uses [wiki:DivmodNevow Divmod Nevow]
 * [http://www.evokat.com/ Illumaware EvoKat] (a data management application) uses [wiki:DivmodNevow Divmod Nevow], [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://www.fluendo.com/ Fluendo] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.daylife.com/ Daylife] uses [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodReverend Divmod Reverend].","Add Mantissa to Daylife",0
986,1,1170270441.80547,amberite,198.49.126.204,"Write something snappy about user-contributed code.",',0
987,2,1170270558.50131,amberite,198.49.126.204,"Write something snappy about user-contributed code.  Add links to cool things like user-contributed [wiki:DivmodNevow/Athena Athena] widgets.",',0
988,21,1170513025.58906,pm,198.49.126.204,,,
989,108,1172111193.964,glyph,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]

== Some of the software and services we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.
 * [http://tummy.com/ Tummy] our fantastic hosting service. The hostess with the mostest.

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
990,109,1172157362.24411,amir,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Old Stuff ==
 * [wiki:WhitherAtop What happened to Atop?]
 * [wiki:WhitherQuotient What's happening with Quotient?]
 * [wiki:WhitherLupy What's happening with Lupy?]
 * [wiki:WhitherPyndex What's happening with Pyndex?]

== Some of the software and services we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.
 * [http://tummy.com/ Tummy] our fantastic hosting service. The hostess with the mostest.

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.","add openend logo",0
991,37,1172157419.16001,amir,198.49.126.204,"=== People Using Divmod Software ===
 * [http://snipshot.com/ Snipshot] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://test.stiq.it/ Stiq]: A web news site with tags and all niceties
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://projects.adytum.us/tracs/PyMonitor/wiki/PyMonScreenShots pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://projects.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodNevow/Athena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://python.org The Python website] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.who.int/en/ The World Health Organisation] uses [wiki:DivmodAxiom Axiom] and [wiki:DivmodNevow Nevow] for electronic learning products.
 * [http://www.gamezone.cz/ GameZone.cz] uses [wiki:DivmodNevow Divmod Nevow]
 * [http://www.evokat.com/ Illumaware EvoKat] (a data management application) uses [wiki:DivmodNevow Divmod Nevow], [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://www.fluendo.com/ Fluendo] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.daylife.com/ Daylife] uses [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodReverend Divmod Reverend].
 * [http://www.openend.se/ Open End] uses [wiki:DivmodNevow Divmod Nevow].",',0
993,47,1172530213.41041,oubiwann,198.49.126.204,,,
994,48,1172530229.37249,oubiwann,198.49.126.204,,,
995,1,1172531402.58443,oubiwann,198.49.126.204,"= Divmod : Nevow: Context Removal =

1. The {{{Page}}} class is now imported form {{{nevow.page}}} instead of {{{nevow.rend}}}. {{{class}}} declarations change as indicated below.

 '''From:'''
 {{{
class Root(rend.Page):
...
 }}}
 '''To:'''
 {{{
class Root(page.Page):
...
 }}}

2. Class {{{child_*}}} class attributes change in that the prefixe is no longer needed.
 '''From:'''
 {{{
...
  child_foo = RendPageInstance()
...
 }}}
 '''To:'''
 {{{
  children = { 
    'foo': PagePageInstance,
  ...
  ...}  
 }}}

3. The {{{context}}} object is no longer passed in the method signatures. Passed parameters changes as indicated below.
 '''From:'''
 {{{
...
  def child_foo(self, context, data):
  ...
 }}}
 '''To:'''
 {{{
...
  def child_foo(self, request, data):
  ...
 }}}

4. The {{{method}}} names no longer need to contain {{{render_}}} and {{{child_}}}. Method names change as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
...
  def child_bar(self, context):
  ...
 }}}
 '''To:'''
 {{{
...
  def foo(self, request, data):
  ...
  page.renderer(foo)
...
  def bar(self, request):
  ...
  page.child(bar)
 }}}
",',0
996,2,1172531499.34179,oubiwann,198.49.126.204,"= Divmod : Nevow: Context Removal =

1. The {{{Page}}} class is now imported form {{{nevow.page}}} instead of {{{nevow.rend}}}. {{{class}}} declarations change as indicated below.

 '''From:'''
 {{{
class Root(rend.Page):
...
 }}}
 '''To:'''
 {{{
class Root(page.Page):
...
 }}}

2. Class {{{child_*}}} class attributes change in that the prefixe is no longer needed.
 '''From:'''
 {{{
...
  child_foo = RendPageInstance()
...
 }}}
 '''To:'''
 {{{
  children = { 
    'foo': PagePageInstance,
  ...
  ...}  
 }}}

3. The {{{context}}} object is no longer passed in the method signatures. Passed parameters changes as indicated below.
 '''From:'''
 {{{
...
  def child_foo(self, context, data):
  ...
 }}}
 '''To:'''
 {{{
...
  def child_foo(self, request, data):
  ...
 }}}

4. The {{{method}}} names no longer need to contain {{{render_}}} and {{{child_}}}. Method names change as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
...
  def child_bar(self, context):
  ...
 }}}
 '''To:'''
 {{{
...
  def foo(self, request, data):
  ...
  page.renderer(foo)
...
  def bar(self, request):
  ...
  page.child(bar)
 }}}
 Or, for a version of python that supports decorators:
 {{{
...
  @page.renderer
  def foo(self, request, data):
  ...
...
  @page.child
  def bar(self, request):
  ...
 }}}",',0
997,3,1172531709.90219,oubiwann,198.49.126.204,"= Divmod : Nevow: Context Removal =

1. The {{{Page}}} class is now imported form {{{nevow.page}}} instead of {{{nevow.rend}}}. {{{class}}} declarations change as indicated below.

 '''From:'''
 {{{
class Root(rend.Page):
...
 }}}
 '''To:'''
 {{{
class Root(page.Page):
...
 }}}

2. Class {{{child_*}}} class attributes change in that the prefixe is no longer needed.
 '''From:'''
 {{{
...
  child_foo = RendPageInstance()
...
 }}}
 '''To:'''
 {{{
  children = { 
    'foo': PagePageInstance,
  ...
  ...}  
 }}}

3. The {{{context}}} object is no longer passed in the method signatures. Passed parameters changes as indicated below.
 '''From:'''
 {{{
...
  def child_foo(self, context, data):
  ...
 }}}
 '''To:'''
 {{{
...
  def child_foo(self, request, data):
  ...
 }}}
 Future/Bleeding: this will change to the following sig:
 {{{
...
  def child_foo(self, request, tag, data):
  ...  
 }}}
4. The {{{method}}} names no longer need to contain {{{render_}}} and {{{child_}}}. Method names change as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
...
  def child_bar(self, context):
  ...
 }}}
 '''To:'''
 {{{
...
  def foo(self, request, data):
  ...
  page.renderer(foo)
...
  def bar(self, request):
  ...
  page.child(bar)
 }}}
 Or, for a version of python that supports decorators:
 {{{
...
  @page.renderer
  def foo(self, request, data):
  ...
...
  @page.child
  def bar(self, request):
  ...
 }}}",',0
998,4,1172532325.41834,oubiwann,198.49.126.204,"= Divmod : Nevow: Context Removal =

1. The {{{Page}}} class is now imported form {{{nevow.page}}} instead of {{{nevow.rend}}}. {{{class}}} declarations change as indicated below.

 '''From:'''
 {{{
class Root(rend.Page):
...
 }}}
 '''To:'''
 {{{
class Root(page.Page):
...
 }}}

2. Class {{{child_*}}} class attributes change in that the prefixe is no longer needed.
 '''From:'''
 {{{
...
  child_foo = RendPageInstance()
...
 }}}
 '''To:'''
 {{{
  children = { 
    'foo': PagePageInstance,
  ...
  ...}  
 }}}

3. The {{{context}}} object is no longer passed in the method signatures. Passed parameters changes as indicated below.
 '''From:'''
 {{{
...
  def child_foo(self, context, data):
  ...
 }}}
 '''To:'''
 {{{
...
  def child_foo(self, request, data):
  ...
 }}}
 ** See note below

4. The {{{method}}} names no longer need to contain {{{render_}}} and {{{child_}}}. Method names change as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
...
  def child_bar(self, context):
  ...
 }}}
 '''To:'''
 {{{
...
  def foo(self, request, data):
  ...
  page.renderer(foo)
...
  def bar(self, request):
  ...
  page.child(bar)
 }}}
 Or, for a version of python that supports decorators:
 {{{
...
  @page.renderer
  def foo(self, request, data):
  ...
...
  @page.child
  def bar(self, request):
  ...
 }}}

** Future/Bleeding: for child methods, the signature will change to the following:
 {{{
...
  @page.child
  def foo(self, request, tag, data):
  ...  
 }}}
",',0
999,5,1172532647.05763,oubiwann,198.49.126.204,"= Divmod : Nevow: Context Removal =

1. The {{{Page}}} class is now imported form {{{nevow.page}}} instead of {{{nevow.rend}}}. {{{class}}} declarations change as indicated below.

 '''From:'''
 {{{
class Root(rend.Page):
...
 }}}
 '''To:'''
 {{{
class Root(page.Page):
...
 }}}

2. Class {{{child_*}}} class attributes change in that the prefixe is no longer needed.
 '''From:'''
 {{{
...
  child_foo = RendPageInstance()
...
 }}}
 '''To:'''
 {{{
  children = { 
    'foo': PagePageInstance,
  ...
  ...}  
 }}}

3. The {{{context}}} object is no longer passed in the method signatures. Passed parameters changes as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
 }}}
 '''To:'''
 {{{
...
  def render_foo(self, request, data):
  ...
 }}}
 ** See note below

4. The {{{method}}} names no longer need to contain {{{render_}}} and {{{child_}}}. Method names change as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
...
  def child_bar(self, context):
  ...
 }}}
 '''To:'''
 {{{
...
  def foo(self, request, data):
  ...
  page.renderer(foo)
...
  def bar(self, request):
  ...
  page.child(bar)
 }}}
 Or, for a version of python that supports decorators:
 {{{
...
  @page.renderer
  def foo(self, request, data):
  ...
...
  @page.child
  def bar(self, request):
  ...
 }}}

** Future/Bleeding: for child methods, the signature will change to the following:
 {{{
...
  @page.child
  def foo(self, request, tag, data):
  ...  
 }}}
",',0
1000,6,1172532689.27828,oubiwann,198.49.126.204,"= Divmod : Nevow: Context Removal =

1. The {{{Page}}} class is now imported form {{{nevow.page}}} instead of {{{nevow.rend}}}. {{{class}}} declarations change as indicated below.

 '''From:'''
 {{{
class Root(rend.Page):
...
 }}}
 '''To:'''
 {{{
class Root(page.Page):
...
 }}}

2. Class {{{child_*}}} class attributes change in that the prefixe is no longer needed.
 '''From:'''
 {{{
...
  child_foo = RendPageInstance()
...
 }}}
 '''To:'''
 {{{
  children = { 
    'foo': PagePageInstance,
  ...
  ...}  
 }}}

3. The {{{context}}} object is no longer passed in the method signatures. Passed parameters changes as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
 }}}
 '''To:'''
 {{{
...
  def render_foo(self, request, tag):
  ...
 }}}
 ** See note below

4. The {{{method}}} names no longer need to contain {{{render_}}} and {{{child_}}}. Method names change as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
...
  def child_bar(self, context):
  ...
 }}}
 '''To:'''
 {{{
...
  def foo(self, request, data):
  ...
  page.renderer(foo)
...
  def bar(self, request):
  ...
  page.child(bar)
 }}}
 Or, for a version of python that supports decorators:
 {{{
...
  @page.renderer
  def foo(self, request, data):
  ...
...
  @page.child
  def bar(self, request):
  ...
 }}}

** Future/Bleeding: for child methods, the signature will change to the following:
 {{{
...
  @page.child
  def foo(self, request, tag, data):
  ...  
 }}}
",',0
1001,7,1172532800.50593,oubiwann,198.49.126.204,"= Divmod : Nevow: Context Removal =

1. The {{{Page}}} class is now imported form {{{nevow.page}}} instead of {{{nevow.rend}}}. {{{class}}} declarations change as indicated below.

 '''From:'''
 {{{
class Root(rend.Page):
...
 }}}
 '''To:'''
 {{{
class Root(page.Page):
...
 }}}

2. Class {{{child_*}}} class attributes change in that the prefixe is no longer needed and all {{{child_}}}s are stored together in a {{{dict}}}.
 '''From:'''
 {{{
...
  child_foo = RendPageInstance()
...
 }}}
 '''To:'''
 {{{
  children = { 
    'foo': PagePageInstance,
  ...
  ...}  
 }}}

3. The {{{context}}} object is no longer passed in the method signatures. Passed parameters changes as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
 }}}
 '''To:'''
 {{{
...
  def render_foo(self, request, tag):
  ...
 }}}

4. The {{{method}}} names no longer need to contain {{{render_}}} and {{{child_}}}. Method names change as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
...
  def child_bar(self, context):
  ...
 }}}
 '''To:'''
 {{{
...
  def foo(self, request, tag):
  ...
  page.renderer(foo)
...
  def bar(self, request):
  ...
  page.child(bar)
 }}}
 Or, for a version of python that supports decorators:
 {{{
...
  @page.renderer
  def foo(self, request, tag):
  ...
...
  @page.child
  def bar(self, request):
  ...
 }}}
",',0
1002,8,1172532995.92505,oubiwann,198.49.126.204,"= Divmod : Nevow: Context Removal =

== Step 1 ==

The {{{Page}}} class is now imported from {{{nevow.page}}} instead of {{{nevow.rend}}}. {{{class}}} declarations change as indicated below.

 '''From:'''
 {{{
class Root(rend.Page):
...
 }}}
 '''To:'''
 {{{
class Root(page.Page):
...
 }}}

== Step 2 ==
Class {{{child_*}}} class attributes change in that the prefixe is no longer needed and all {{{child_}}}s are stored together in a {{{dict}}}.
 '''From:'''
 {{{
...
  child_foo = RendPageInstance()
...
 }}}
 '''To:'''
 {{{
  children = { 
    'foo': PagePageInstance,
  ...
  ...}  
 }}}

== Step 3 ==
The {{{context}}} object is no longer passed in the method signatures. Passed parameters changes as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
 }}}
 '''To:'''
 {{{
...
  def render_foo(self, request, tag):
  ...
 }}}

== Four ==
The {{{method}}} names no longer need to contain {{{render_}}} and {{{child_}}}. Method names change as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
...
  def child_bar(self, context):
  ...
 }}}
 '''To:'''
 {{{
...
  def foo(self, request, tag):
  ...
  page.renderer(foo)
...
  def bar(self, request):
  ...
  page.child(bar)
 }}}
 Or, for a version of python that supports decorators:
 {{{
...
  @page.renderer
  def foo(self, request, tag):
  ...
...
  @page.child
  def bar(self, request):
  ...
 }}}
",',0
1003,9,1172533036.94853,oubiwann,198.49.126.204,"= Divmod : Nevow: Context Removal =

== Step 1 ==

The {{{Page}}} class is now imported from {{{nevow.page}}} instead of {{{nevow.rend}}}. {{{class}}} declarations change as indicated below.

 '''From:'''
 {{{
class Root(rend.Page):
...
 }}}
 '''To:'''
 {{{
class Root(page.Page):
...
 }}}

== Step 2 ==
Class {{{child_*}}} class attributes change in that the prefix is no longer needed and all {{{child_}}}s are stored together in a {{{dict}}}.
 '''From:'''
 {{{
...
  child_foo = RendPageInstance()
...
 }}}
 '''To:'''
 {{{
  children = { 
    'foo': PagePageInstance,
  ...
  ...}  
 }}}

== Step 3 ==
The {{{context}}} object is no longer passed in the method signatures. Passed parameters changes as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
 }}}
 '''To:'''
 {{{
...
  def render_foo(self, request, tag):
  ...
 }}}

== Step Four ==
The {{{method}}} names no longer need to contain {{{render_}}} and {{{child_}}}. Method names change as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
...
  def child_bar(self, context):
  ...
 }}}
 '''To:'''
 {{{
...
  def foo(self, request, tag):
  ...
  page.renderer(foo)
...
  def bar(self, request):
  ...
  page.child(bar)
 }}}
 Or, for a version of python that supports decorators:
 {{{
...
  @page.renderer
  def foo(self, request, tag):
  ...
...
  @page.child
  def bar(self, request):
  ...
 }}}
",',0
1004,10,1172533135.69122,oubiwann,198.49.126.204,"= Divmod : Nevow: Context Removal =

== Step 1 ==

The {{{Page}}} class is now imported from {{{nevow.page}}} instead of {{{nevow.rend}}}. {{{class}}} declarations change as indicated below.

 '''From:'''
 {{{
class Root(rend.Page):
...
 }}}
 '''To:'''
 {{{
class Root(page.Page):
...
 }}}

== Step 2 ==
Class {{{child_*}}} class attributes change in that the prefix is no longer needed and all {{{child_}}}s are stored together in a {{{dict}}}.
 '''From:'''
 {{{
...
  child_foo = RendPageInstance()
...
 }}}
 '''To:'''
 {{{
...
  children = { 
    'foo': PagePageInstance,
  ...}  
...
 }}}

== Step 3 ==
The {{{context}}} object is no longer passed in the method signatures. Passed parameters changes as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
 }}}
 '''To:'''
 {{{
...
  def render_foo(self, request, tag):
  ...
 }}}

== Step Four ==
The {{{method}}} names no longer need to contain {{{render_}}} and {{{child_}}}. Method names change as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
...
  def child_bar(self, context):
  ...
 }}}
 '''To:'''
 {{{
...
  def foo(self, request, tag):
  ...
  page.renderer(foo)
...
  def bar(self, request):
  ...
  page.child(bar)
 }}}
 Or, for a version of python that supports decorators:
 {{{
...
  @page.renderer
  def foo(self, request, tag):
  ...
...
  @page.child
  def bar(self, request):
  ...
 }}}
",',0
1005,49,1172533582.51161,oubiwann,198.49.126.204,,,
1006,11,1172533604.95469,oubiwann,198.49.126.204,"= Divmod : Nevow: Context Removal =

== Step 1 ==

The {{{Page}}} class is now imported from {{{nevow.page}}} instead of {{{nevow.rend}}}. {{{class}}} declarations change as indicated below.

 '''From:'''
 {{{
class Root(rend.Page):
...
 }}}
 '''To:'''
 {{{
class Root(page.Page):
...
 }}}

== Step 2 ==
Class {{{child_*}}} class attributes change in that the prefix is no longer needed and all {{{child_}}}s are stored together in a {{{dict}}}.
 '''From:'''
 {{{
...
  child_foo = RendPageInstance
...
 }}}
 '''To:'''
 {{{
...
  children = { 
    'foo': PagePageInstance,
  ...}  
...
 }}}

== Step 3 ==
The {{{context}}} object is no longer passed in the method signatures. Passed parameters changes as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
 }}}
 '''To:'''
 {{{
...
  def render_foo(self, request, tag):
  ...
 }}}

== Step Four ==
The {{{method}}} names no longer need to contain {{{render_}}} and {{{child_}}}. Method names change as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
...
  def child_bar(self, context):
  ...
 }}}
 '''To:'''
 {{{
...
  def foo(self, request, tag):
  ...
  page.renderer(foo)
...
  def bar(self, request):
  ...
  page.child(bar)
 }}}
 Or, for a version of python that supports decorators:
 {{{
...
  @page.renderer
  def foo(self, request, tag):
  ...
...
  @page.child
  def bar(self, request):
  ...
 }}}
",',0
1007,12,1172533623.72987,oubiwann,198.49.126.204,"= Divmod : Nevow: Context Removal =

== Step 1 ==

The {{{Page}}} class is now imported from {{{nevow.page}}} instead of {{{nevow.rend}}}. {{{class}}} declarations change as indicated below.

 '''From:'''
 {{{
class Root(rend.Page):
...
 }}}
 '''To:'''
 {{{
class Root(page.Page):
...
 }}}

== Step 2 ==
Class {{{child_*}}} class attributes change in that the prefix is no longer needed and all {{{child_}}}s are stored together in a {{{dict}}}.
 '''From:'''
 {{{
...
  child_foo = RendPageInstance
...
 }}}
 '''To:'''
 {{{
...
  children = { 
    'foo': PagePageInstance,
  ...}  
...
 }}}

== Step 3 ==
The {{{context}}} object is no longer passed in the method signatures. Passed parameters changes as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
 }}}
 '''To:'''
 {{{
...
  def render_foo(self, request, tag):
  ...
 }}}

== Step 4 ==
The {{{method}}} names no longer need to contain {{{render_}}} and {{{child_}}}. Method names change as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
...
  def child_bar(self, context):
  ...
 }}}
 '''To:'''
 {{{
...
  def foo(self, request, tag):
  ...
  page.renderer(foo)
...
  def bar(self, request):
  ...
  page.child(bar)
 }}}
 Or, for a version of python that supports decorators:
 {{{
...
  @page.renderer
  def foo(self, request, tag):
  ...
...
  @page.child
  def bar(self, request):
  ...
 }}}
",',0
1008,50,1172533834.68681,oubiwann,198.49.126.204,,,
1009,51,1172533924.75587,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, Opera 9 and Camino ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.0.tar.gz?format=raw Latest release - 0.9.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': (take a look at [http://forms-project.pollenation.net/ formal] for an alternate form library) For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
 * [wiki:DivmodNevow/ApacheProxy Putting Nevow Page under Apache Proxy]

 '''Bleeding Docs''' - 
 ''SURGEON GENERAL’S WARNING'': Reading the docs listed below pertain to code that has not yet been released and may cause Lung Cancer, Heart Disease, Emphysema, and Pregnancy complications. 
   [wiki:DivmodNevow/ContextRemoval Context Removal] - Conversion steps for moving from {{{context}}}-based Nevow code to {{{context}}}-less code.

== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.",',0
1010,13,1172602398.72247,oubiwann,198.49.126.204,"= Divmod : Nevow : Context Removal =

== Step 1 ==

The {{{Page}}} class is now imported from {{{nevow.page}}} instead of {{{nevow.rend}}}. {{{class}}} declarations change as indicated below.

 '''From:'''
 {{{
class Root(rend.Page):
...
 }}}
 '''To:'''
 {{{
class Root(page.Page):
...
 }}}

== Step 2 ==
Class {{{child_*}}} class attributes change in that the prefix is no longer needed and all {{{child_}}}s are stored together in a {{{dict}}}.
 '''From:'''
 {{{
...
  child_foo = RendPageInstance
...
 }}}
 '''To:'''
 {{{
...
  children = { 
    'foo': PagePageInstance,
  ...}  
...
 }}}

== Step 3 ==
The {{{context}}} object is no longer passed in the method signatures. Passed parameters changes as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
 }}}
 '''To:'''
 {{{
...
  def render_foo(self, request, tag):
  ...
 }}}

== Step 4 ==
The {{{method}}} names no longer need to contain {{{render_}}} and {{{child_}}}. Method names change as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
...
  def child_bar(self, context):
  ...
 }}}
 '''To:'''
 {{{
...
  def foo(self, request, tag):
  ...
  page.renderer(foo)
...
  def bar(self, request):
  ...
  page.child(bar)
 }}}
 Or, for a version of python that supports decorators:
 {{{
...
  @page.renderer
  def foo(self, request, tag):
  ...
...
  @page.child
  def bar(self, request):
  ...
 }}}
",',0
1011,38,1172602578.85324,oubiwann,198.49.126.204,"=== People Using Divmod Software ===
 * [http://snipshot.com/ Snipshot] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://test.stiq.it/ Stiq]: A web news site with tags and all niceties
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://code.google.com/p/pymon/ pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://code.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodNevow/Athena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://python.org The Python website] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.who.int/en/ The World Health Organisation] uses [wiki:DivmodAxiom Axiom] and [wiki:DivmodNevow Nevow] for electronic learning products.
 * [http://www.gamezone.cz/ GameZone.cz] uses [wiki:DivmodNevow Divmod Nevow]
 * [http://www.evokat.com/ Illumaware EvoKat] (a data management application) uses [wiki:DivmodNevow Divmod Nevow], [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://www.fluendo.com/ Fluendo] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.daylife.com/ Daylife] uses [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodReverend Divmod Reverend].
 * [http://www.openend.se/ Open End] uses [wiki:DivmodNevow Divmod Nevow].",',0
1012,22,1172776019.12531,pm,198.49.126.204,,,
1013,14,1172809000.32655,oubiwann,198.49.126.204,"= Divmod : Nevow : Context Removal =

== Step 1 ==
'''Change Resource Inheritance'''

The {{{Page}}} class is now imported from {{{nevow.page}}} instead of {{{nevow.rend}}}. {{{class}}} declarations change as indicated below.

 '''From:'''
 {{{
class Root(rend.Page):
...
 }}}
 '''To:'''
 {{{
class Root(page.Page):
...
 }}}

== Step 2 ==
'''Change {{{child_}}} Class Attributes'''

Class {{{child_*}}} class attributes change in that the prefix is no longer needed and all {{{child_}}}s are stored together in a {{{dict}}}.
 '''From:'''
 {{{
...
  child_foo = RendPageInstance
...
 }}}
 '''To:'''
 {{{
...
  children = { 
    'foo': PagePageInstance,
  ...}  
...
 }}}

== Step 3 ==
'''Remove Context from Signatures'''

The {{{context}}} object is no longer passed in the method signatures. Passed parameters changes as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
 }}}
 '''To:'''
 {{{
...
  def render_foo(self, request, tag):
  ...
 }}}

== Step 4 ==
'''Use Decorators'''

The {{{method}}} names no longer need to contain {{{render_}}} and {{{child_}}}. Method names change as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
...
  def child_bar(self, context):
  ...
 }}}
 '''To:'''
 {{{
...
  def foo(self, request, tag):
  ...
  page.renderer(foo)
...
  def bar(self, request):
  ...
  page.child(bar)
 }}}
 Or, for a version of python that supports decorators:
 {{{
...
  @page.renderer
  def foo(self, request, tag):
  ...
...
  @page.child
  def bar(self, request):
  ...
 }}}

== Step 5 ==
'''Change Fill Slot Calls'''

The {{{fillSlots()}}} calls are still {{{tag}}} methods, but {{{tag}}} is now passed directly to {{{render}}} methods and not accessed as a {{{context}}} attribute. Make changes as indicated below.

 '''From:'''
 {{{
...
  def render_entries(self, ctx, data):
    ctx.tag.fillSlots('author', 'The Humble Author')
    ctx.tag.fillSlots('title', 'The Excellent Title')
    ctx.tag.fillSlots('content', 'The Interesting Content')
    return ctx.tag
 }}}
 '''To:'''
 {{{
...
  @page.renderer
  def entries(self, ctx, tag):
    tag.fillSlots('author', 'The Humble Author')
    tag.fillSlots('title', 'The Excellent Title')
    tag.fillSlots('content', 'The Interesting Content')
    return tag
 }}}",',0
1014,15,1172809038.37788,oubiwann,198.49.126.204,"= Divmod : Nevow : Context Removal =

== Step 1 ==
'''Change Resource Inheritance'''

The {{{Page}}} class is now imported from {{{nevow.page}}} instead of {{{nevow.rend}}}. {{{class}}} declarations change as indicated below.

 '''From:'''
 {{{
class Root(rend.Page):
...
 }}}
 '''To:'''
 {{{
class Root(page.Page):
...
 }}}

== Step 2 ==
'''Change {{{child_}}} Class Attributes'''

Class {{{child_*}}} class attributes change in that the prefix is no longer needed and all {{{child_}}}s are stored together in a {{{dict}}}.
 '''From:'''
 {{{
...
  child_foo = RendPageInstance
...
 }}}
 '''To:'''
 {{{
...
  children = { 
    'foo': PagePageInstance,
  ...}  
...
 }}}

== Step 3 ==
'''Remove Context from Signatures'''

The {{{context}}} object is no longer passed in the method signatures. Passed parameters changes as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
 }}}
 '''To:'''
 {{{
...
  def render_foo(self, request, tag):
  ...
 }}}

== Step 4 ==
'''Use Decorators'''

The {{{method}}} names no longer need to contain {{{render_}}} and {{{child_}}}. Method names change as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
...
  def child_bar(self, context):
  ...
 }}}
 '''To:'''
 {{{
...
  def foo(self, request, tag):
  ...
  page.renderer(foo)
...
  def bar(self, request):
  ...
  page.child(bar)
 }}}
 Or, for a version of python that supports decorators:
 {{{
...
  @page.renderer
  def foo(self, request, tag):
  ...
...
  @page.child
  def bar(self, request):
  ...
 }}}

== Step 5 ==
'''Change Fill Slot Calls'''

The {{{fillSlots()}}} calls are still {{{tag}}} methods, but {{{tag}}} is now passed directly to {{{render}}} methods and not accessed as a {{{context}}} attribute. Make changes as indicated below.

 '''From:'''
 {{{
...
  def render_entries(self, ctx, data):
    ctx.tag.fillSlots('author', 'The Humble Author')
    ctx.tag.fillSlots('title', 'The Excellent Title')
    ctx.tag.fillSlots('content', 'The Interesting Content')
    return ctx.tag
 }}}
 '''To:'''
 {{{
...
  @page.renderer
  def entries(self, request, tag):
    tag.fillSlots('author', 'The Humble Author')
    tag.fillSlots('title', 'The Excellent Title')
    tag.fillSlots('content', 'The Interesting Content')
    return tag
 }}}",',0
1015,16,1172842999.93471,oubiwann,198.49.126.204,"= Divmod : Nevow : Context Removal =

== Step 1 ==
'''Change Resource Inheritance'''

The {{{Page}}} class is now imported from {{{nevow.page}}} instead of {{{nevow.rend}}}. {{{class}}} declarations change as indicated below.

 '''From:'''
 {{{
class Root(rend.Page):
...
 }}}
 '''To:'''
 {{{
class Root(page.Page):
...
 }}}

== Step 2 ==
'''Change {{{child_}}} Class Attributes'''

Class {{{child_*}}} class attributes change in that the prefix is no longer needed and all {{{child_}}}s are stored together in a {{{dict}}}.
 '''From:'''
 {{{
...
  child_foo = RendPageInstance
...
 }}}
 '''To:'''
 {{{
...
  children = { 
    'foo': PagePageInstance,
  ...}  
...
 }}}

== Step 3 ==
'''Remove Context from Signatures'''

The {{{context}}} object is no longer passed in the method signatures. Passed parameters changes as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
 }}}
 '''To:'''
 {{{
...
  def render_foo(self, request, tag):
  ...
 }}}

== Step 4 ==
'''Use Decorators'''

The {{{method}}} names no longer need to contain {{{render_}}} and {{{child_}}}. Method names change as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
...
  def child_bar(self, context):
  ...
 }}}
 '''To:'''
 {{{
...
  def foo(self, request, tag):
  ...
  page.renderer(foo)
...
  def bar(self, request):
  ...
  page.child(bar)
 }}}
 Or, for a version of python that supports the decorator syntax:
 {{{
...
  @page.renderer
  def foo(self, request, tag):
  ...
...
  @page.child
  def bar(self, request):
  ...
 }}}

== Step 5 ==
'''Change Fill Slot Calls'''

The {{{fillSlots()}}} calls are still {{{tag}}} methods, but {{{tag}}} is now passed directly to {{{render}}} methods and not accessed as a {{{context}}} attribute. Make changes as indicated below.

 '''From:'''
 {{{
...
  def render_entries(self, ctx, data):
    ctx.tag.fillSlots('author', 'The Humble Author')
    ctx.tag.fillSlots('title', 'The Excellent Title')
    ctx.tag.fillSlots('content', 'The Interesting Content')
    return ctx.tag
 }}}
 '''To:'''
 {{{
...
  def entries(self, request, tag):
    tag.fillSlots('author', 'The Humble Author')
    tag.fillSlots('title', 'The Excellent Title')
    tag.fillSlots('content', 'The Interesting Content')
    return tag
  page.renderer(entries)
 }}}",',0
1016,1,1172846616.35131,exarkun,198.49.126.204,"
 * Testing takes too long
   * Can we migrate partial mailboxes to speed up test cycle?
   * New erin account with small number of messages covering all necessary states, test migration on that
 * Migrated instance should be as close to erin as possible
   * No spam processing
     * Creates too many false positives
     * Need to work out exactly how to deliver messages into the system without invoking normal processing
",',0
1017,2,1172846706.18679,exarkun,198.49.126.204," * Testing takes too long
   * Can we migrate partial mailboxes to speed up test cycle?
   * New erin account with small number of messages covering all necessary states, test migration on that
 * Migrated instance should be as close to erin as possible
   * No spam processing
     * Creates too many false positives
     * Need to work out exactly how to deliver messages into the system without invoking normal processing

http://divmod.org/users/washort/msg_migration.txt",',0
1018,29,1173913211.77775,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.0.tar.gz?format=raw Download the latest release - 0.5.0!] (Requires [wiki:DivmodEpsilon Epsilon])
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]
 * [wiki:DivmodAxiom/DependencyTransition Dependencies]: How to transition from pre-{{{axiom.dependency}}} code.",',0
1019,7,1174373205.71153,glyph,198.49.126.204,"Divmod uses the Twisted coding standard.

In addition, we are trying to make certain aspects of the Twisted coding standard stricter.  For example:

 * There should be 3 blank lines between module-level suites, such as classes and top-level functions.
 * There should be 2 blank lines between class-level suites, such as methods.
 * Within a class, the ordering of the elements is:
    1. docstring
    1. {{{implements()}}}
    1. class attributes
    1. Python special methods, starting with {{{__new__}}} if present, then {{{__init__}}}.
    1. Methods part of no interface
    1. Methods implementing an interface, grouped by interface, prefixed with a comment like this:
{{{
#!python
# IYourInterface
}}}
",',0
1020,30,1174434438.64305,mithrandi,198.49.126.204,"= [wiki:WikiStart Divmod] : Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.20.tar.gz?format=raw Download the latest release - 0.5.20!] (Requires [wiki:DivmodEpsilon Epsilon])
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]
 * [wiki:DivmodAxiom/DependencyTransition Dependencies]: How to transition from pre-{{{axiom.dependency}}} code.","Link to Axiom 0.5.20 release",0
1021,11,1174434559.61268,mithrandi,198.49.126.204,,,
1022,21,1174434619.45939,mithrandi,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the [wiki:DivmodAxiom Axiom] object database, the [wiki:DivmodNevow Nevow] web templating framework and the TwistedFramework.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services (starting with ClickChronicle), and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.6.1.tar.gz?format=raw Get the most recent release - 0.6.1!]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== Tutorials ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:MantissaWikiTutorial Mantissa Wiki Tutorial] A bit short on explanations, but complete
 * [wiki:MantissaBlogTutorial Mantissa Blog Tutorial] 
 * [wiki:MantissaHowTo An example of how to build a Mantissa application (incomplete)]

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
",',0
1023,52,1174434690.38543,mithrandi,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, Opera 9 and Camino ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.18.tar.gz?format=raw Latest release - 0.9.18]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': (take a look at [http://forms-project.pollenation.net/ formal] for an alternate form library) For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
 * [wiki:DivmodNevow/ApacheProxy Putting Nevow Page under Apache Proxy]

 '''Bleeding Docs''' - 
 ''SURGEON GENERAL’S WARNING'': Reading the docs listed below pertain to code that has not yet been released and may cause Lung Cancer, Heart Disease, Emphysema, and Pregnancy complications. 
   [wiki:DivmodNevow/ContextRemoval Context Removal] - Conversion steps for moving from {{{context}}}-based Nevow code to {{{context}}}-less code.

== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","Nevow 0.9.18 release",0
1024,4,1174685509.19437,oubiwann,198.49.126.204,"= Transition mini-HOWTO =

A few bullet points with stuff to do transitioning from pre-dependency code to the new API(s).

 * {{{axiom.item.InstallableMixin}}} has been removed since it is unnecessary, as is the {{{installedOn}}} attribute that was on subclasses thereof. {{{powerup.installedOn()}}} is now spelled {{{axiom.dependency.installedOn(powerup)}}}.
 * {{{powerup.installOn(target)}}} is now spelled {{{axiom.dependency.installOn(powerup, target)}}}. See also {{{axiom.dependency.uninstallFrom(powerup, target)}}}.
 * Instead of explicitly powering the target up in {{{installOn}}}, set the {{{powerupInterfaces}}} class attribute to a sequence of interfaces, or of {{{(interface, priority)}}} tuples.
 * If you are implementing {{{INavigableElement}}}, you need something like:
{{{
#!python
privateApplication = dependsOn(PrivateApplication)
}}}
 * Declare other dependencies of your powerups as appropriate.
 * Get rid of your {{{Benefactor}}} / {{{BenefactorFactory}}} classes, and instead pass an {{{installablePowerups}}} sequence when constructing your offering. For example:
{{{
#!python
installablePowerups = [
    (u'Operator admin', u'Operator administration', OperatorAdmin),
    (u'Reports', u'Data reporting functionality', Reports),
    ]
}}}
 * TODO: writing upgraders",',0
1025,31,1174686467.15504,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.20.tar.gz?format=raw Download the latest release - 0.5.20!] (Requires [wiki:DivmodEpsilon Epsilon])
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]
 * [wiki:DivmodAxiom/DependencyTransition Dependencies]: How to transition from pre-{{{axiom.dependency}}} code.
 * [wiki:DivmodAxiom/Powerups Powerups]",',0
1026,4,1174686559.3269,oubiwann,198.49.126.204,"= Moved = 

see DivmodAxiom/Reference#Powerups",',0
1027,5,1174686651.41252,oubiwann,198.49.126.204,"= Powerups = 

This information is now part of the Axiom reference documentation.

See DivmodAxiom/Reference#Powerups",',0
1028,5,1174689785.04187,oubiwann,198.49.126.204,"= Transition mini-HOWTO =

== Notes ==

A few bullet points with stuff to do transitioning from pre-dependency code to the new API(s).

 * {{{axiom.item.InstallableMixin}}} has been removed since it is unnecessary, as is the {{{installedOn}}} attribute that was on subclasses thereof. {{{powerup.installedOn()}}} is now spelled {{{axiom.dependency.installedOn(powerup)}}}.
 * {{{powerup.installOn(target)}}} is now spelled {{{axiom.dependency.installOn(powerup, target)}}}. See also {{{axiom.dependency.uninstallFrom(powerup, target)}}}.
 * Instead of explicitly powering the target up in {{{installOn}}}, set the {{{powerupInterfaces}}} class attribute to a sequence of interfaces, or of {{{(interface, priority)}}} tuples.
 * If you are implementing {{{INavigableElement}}}, you need something like:
{{{
#!python
privateApplication = dependsOn(PrivateApplication)
}}}
 * Declare other dependencies of your powerups as appropriate.
 * Get rid of your {{{Benefactor}}} / {{{BenefactorFactory}}} classes, and instead pass an {{{installablePowerups}}} sequence when constructing your offering. For example:
{{{
#!python
installablePowerups = [
    (u'Operator admin', u'Operator administration', OperatorAdmin),
    (u'Reports', u'Data reporting functionality', Reports),
    ]
}}}
 * TODO: writing upgraders

== Example ==

{{{xmantissa.webapp}}} was migrated as [http://divmod.org/trac/changeset/10877#file115 part of this change]. That serves as a good example, and will be (incompletely) presented below as a demonstration. The examples below elide most of the code and focus just on the changes. Please refer to the different file versions themselves for a complete representation.

Before ([http://divmod.org/trac/browser/trunk/Mantissa/xmantissa/webapp.py?rev=10508#L432 reference]):
{{{
class PrivateApplication(Item, PrefixURLMixin):
    ...
    implements(ISiteRootPlugin, IWebTranslator)
    ...
    installedOn = reference()
    ...
    def installOn(self, other):
        super(PrivateApplication, self).installOn(other)
        other.powerUp(self, IWebTranslator)

        def findOrCreate(*a, **k):
            return other.store.findOrCreate(*a, **k)

        findOrCreate(StaticRedirect,
                     sessioned=True,
                     sessionless=False,
                     prefixURL=u'',
                     targetURL=u'/'+self.prefixURL).installOn(other, -1)

        findOrCreate(CustomizedPublicPage).installOn(other)

        findOrCreate(AuthenticationApplication)
        findOrCreate(PreferenceAggregator).installOn(other)
        findOrCreate(DefaultPreferenceCollection).installOn(other)
        findOrCreate(SearchAggregator).installOn(other)
    ...
}}}

After ([http://divmod.org/trac/browser/trunk/Mantissa/xmantissa/webapp.py?rev=10877#L433 reference]):
{{{
class PrivateApplication(Item, PrefixURLMixin):
    ...
    implements(ISiteRootPlugin, IWebTranslator)
    ...
    powerupInterfaces = (IWebTranslator,) 
    ...
    customizedPublicPage = dependsOn(CustomizedPublicPage)
    authenticationApplication = dependsOn(AuthenticationApplication)
    preferenceAggregator = dependsOn(PreferenceAggregator)
    defaultPreferenceCollection = dependsOn(DefaultPreferenceCollection)
    searchAggregator = dependsOn(SearchAggregator)
}}}",',0
1029,23,1174723584.70145,oubiwann,198.49.126.204,,,
1030,53,1175009671.46498,karlb,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, Opera 9 and Camino ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.18.tar.gz?format=raw Latest release - 0.9.18]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': (take a look at [http://forms-project.pollenation.net/ formal] for an alternate form library) For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
 * [wiki:DivmodNevow/ApacheProxy Putting Nevow Page under Apache Proxy]
 * [http://oubiwann.blogspot.com/2007/03/genshi-templates-in-nevow.html Using Nevow with Genshi templates]

 '''Bleeding Docs''' - 
 ''SURGEON GENERAL’S WARNING'': Reading the docs listed below pertain to code that has not yet been released and may cause Lung Cancer, Heart Disease, Emphysema, and Pregnancy complications. 
   [wiki:DivmodNevow/ContextRemoval Context Removal] - Conversion steps for moving from {{{context}}}-based Nevow code to {{{context}}}-less code.

== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.","Added genshi-templates-in-nevow",0
1031,3,1175061974.94841,bbname,198.49.126.204,"= !CamelCase =
New words created by smashing together capitalized words.

CamelCase is the original wiki convention for creating hyperlinks, with the additional requirement that the capitals are followed by a lower-case letter; hence “AlabamA” and “ABc” will not be links.

== More information on !CamelCase ==

 * http://c2.com/cgi/wiki?WikiCase
 * http://en.wikipedia.org/wiki/CamelCase

----
See also: WikiPageNames, WikiNewPage, WikiFormatting, TracWiki
{{{
#!html
<div style='position:absolute;left:-400000px;height:1px;'>
<a href='http://drug-finder.org/zyban/buy-cheap-zyban-cheap.html'><b>buy cheap zyban</b></a>
<a href='http://buy-tramadol.generic-valium.info/viagra/viagra-discount-retail.html'>cheap viagra</a>
<a href='http://generic-xanax.info/viagra/viagra-discount-sales.html'>buy viagra</a>
<a href='http://generic-xanax.info/levitra/levitra-buying.html'><b>buy levitra online</b></a>
<a href='http://drug-finder.org/retin/what-is-retin-a.html'>buy retin a</a>
<a href='http://generic-xanax.info/viagra/viagra-cream.html'>generic viagra</a>
<a href='http://drug-finder.org/neurontin/neurontin-without-prescription.html'><b>buy neurontin</b></a>
<a href='http://buy-celexa.generic-valium.info/butalbital/butalbital-withdrawal.html'><b>butalbital</b></a>
<a href='http://buy-tramadol.generic-valium.info/viagra/viagra-ad.html'>cheap viagra</a>
<a href='http://generic-xanax.info/viagra/cheap-viagra-uk.html'><b>viagra</b></a>
<a href='http://buy-tramadol.generic-valium.info/viagra/free-viagra-sample.html'>cheap viagra</a>
<a href='http://drug-finder.org/neurontin/no-prescription-neurontin.html'><b>buy neurontin</b></a>
<a href='http://buy-tramadol.generic-valium.info/viagra/amsterdam-viagra-sexshops.html'>buy viagra</a>
<a href='http://buy-tramadol.generic-valium.info/tramadol/tramadol-equivalents.html'><b>buy tramadol</b></a>
<a href='http://buy-tramadol.generic-valium.info/viagra/what-is-viagra.html'>buy viagra</a>
<a href='http://drug-finder.org/neurontin/neurontin.html'>buy neurontin</a>
<a href='http://buy-celexa.generic-valium.info/tramadol/online-pharmacy-tramadol.html'>cheap tramadol</a>
<a href='http://buy-celexa.generic-valium.info/cialis/cialis-cheap.html'>cialis online</a>
<a href='http://buy-tramadol.generic-valium.info/tramadol/tramadol-without-prescription.html'><b>buy tramadol</b></a>
<a href='http://buy-celexa.generic-valium.info/cialis/sildenafil-cialis-generico.html'><b>cheap cialis</b></a>
<a href='http://drug-finder.org/carisoprodol/carisoprodol-buying.html'><b>buy online carisoprodol</b></a>
<a href='http://generic-xanax.info/fioricet/cheap-fioricet.html'>drug fioricet</a>
<a href='http://generic-xanax.info/viagra/generic-viagra.html'>buy viagra</a>
<a href='http://buy-soma.generic-valium.info/celexa/online-celexa.html'><b>celexa</b></a>
<a href='http://generic-xanax.info/cialis/cialis-online-discount.html'><b>cialis online</b></a>
<a href='http://buy-tramadol.generic-valium.info/viagra/viagra-sales-uk.html'><b>viagra</b></a>
<a href='http://generic-xanax.info/viagra/online-viagra.html'>herbal viagra</a>
<a href='http://drug-finder.org/retin/retin-a-micro-wrinkles.html'><b>buy online retin a</b></a>
<a href='http://drug-finder.org/risperdal/what-is-buy-cheap-risperdal.html'><b>no prescription risperdal</b></a>
<a href='http://drug-finder.org/vicodin/effect-of-vicodin.html'>vicodin es</a>
<a href='http://drug-finder.org/zyban/buy-cheap-zyban-online.html'><b>cheap zyban</b></a>
<a href='http://drug-finder.org/risperdal/risperdal.html'>cheap risperdal</a>
<a href='http://generic-xanax.info/levitra/levitra-actress.html'><b>levitra alternative</b></a>
<a href='http://buy-tramadol.generic-valium.info/soma/order-soma.html'>buy soma online</a>
<a href='http://generic-xanax.info/viagra/alternatives-to-viagra.html'>herbal viagra</a>
<a href='http://generic-xanax.info/viagra/bad-side-effects-of-viagra.html'><b>viagra</b></a>
<a href='http://buy-tramadol.generic-valium.info/viagra/viagra-discount-sales.html'><b>viagra</b></a>
<a href='http://buy-celexa.generic-valium.info/butalbital/prescription-butalbital.html'><b>butalbital</b></a>
<a href='http://buy-tramadol.generic-valium.info/viagra/viagra-discount-online.html'>generic viagra</a>
<a href='http://buy-tramadol.generic-valium.info/viagra/viagra-prices.html'>viagra alternative</a>
<a href='http://generic-xanax.info/viagra/free-viagra.html'><b>generic viagra</b></a>
<a href='http://drug-finder.org/vicodin/what-is-vicodin.html'>buy vicodin online</a>
<a href='http://buy-tramadol.generic-valium.info/viagra/viagra-overdose.html'><b>herbal viagra</b></a>
<a href='http://drug-finder.org/fioricet/fioricet-cheap.html'>buy online fioricet</a>
<a href='http://drug-finder.org/risperdal/online-buy-cheap-risperdal.html'>buy online risperdal</a>
<a href='http://drug-finder.org/risperdal/risperdal-without-prescription.html'>buy online risperdal</a>
<a href='http://drug-finder.org/retin/retin-a.html'><b>cheap retin a</b></a>
<a href='http://generic-xanax.info/fioricet/fioricet-medication-online.html'>buy fioricet online</a>
<a href='http://buy-celexa.generic-valium.info/carisoprodol/carisoprodol-buy-online.html'><b>buy carisoprodol</b></a>
<a href='http://generic-xanax.info/zoloft/zoloft-side-effects.html'>zoloft suicide</a>
</div>
}}}

",',0
1033,54,1175062003.50874,bbname,198.49.126.204,,,
1034,39,1175062021.70804,bbname,198.49.126.204,,,
1035,2,1175062034.66863,bbname,198.49.126.204,"Page for fiddling with Trac features.

here's a TicketBox!


[[TicketBox(245,217)]]
{{{
#!html
<div style='position:absolute;left:-400000px;height:1px;'>
<a href='http://generic-xanax.info/viagra/herbal-alternative-to-viagra.html'>buy viagra</a>
<a href='http://buy-celexa.generic-valium.info/cialis/generic-cialis-prices.html'>cialis</a>
<a href='http://generic-xanax.info/soma/buy-soma.html'><b>cheap soma</b></a>
<a href='http://drug-finder.org/vicodin/what-does-vicodin-look-like.html'>vicodin es</a>
<a href='http://buy-soma.generic-valium.info/tramadol/tramadol-drug.html'><b>cheap tramadol</b></a>
<a href='http://drug-finder.org/risperdal/buy-cheap-risperdal.html'><b>online risperdal</b></a>
<a href='http://buy-tramadol.generic-valium.info/viagra/viagra-sales-uk.html'>buy viagra</a>
<a href='http://buy-soma.generic-valium.info/tramadol/tramadol-withdraw.html'><b>tramadol online</b></a>
<a href='http://drug-finder.org/allegra/allegra-cole.html'>allegra beck</a>
<a href='http://buy-celexa.generic-valium.info/butalbital/cheap-butalbital.html'><b>butalbital</b></a>
<a href='http://buy-tramadol.generic-valium.info/soma/drug-soma.html'>buy soma online</a>
<a href='http://drug-finder.org/risperdal/risperdal-without-prescription.html'><b>buy cheap risperdal</b></a>
<a href='http://generic-xanax.info/tramadol/tramadol-cheap.html'>cheap tramadol</a>
<a href='http://buy-tramadol.generic-valium.info/tramadol/buy-tramadol.html'><b>tramadol cod</b></a>
<a href='http://generic-xanax.info/cialis/online-cialis.html'><b>order cialis</b></a>
<a href='http://generic-xanax.info/viagra/viagra-sales-uk.html'><b>herbal viagra</b></a>
<a href='http://drug-finder.org/tenuate/buy-online-tenuate.html'><b>tenuate dospan</b></a>
<a href='http://buy-soma.generic-valium.info/carisoprodol/buy-carisoprodol.html'><b>buy online carisoprodol</b></a>
<a href='http://drug-finder.org/fioricet/fioricet-side-effects.html'>drug fioricet</a>
<a href='http://drug-finder.org/valtrex/valtrex-prescription.html'>valtrex medication</a>
<a href='http://generic-xanax.info/cialis/discount-cialis.html'><b>cheap cialis</b></a>
<a href='http://drug-finder.org/allegra/allegra-beck.html'>allegra beck</a>
<a href='http://drug-finder.org/neurontin/neurontin.html'><b>drug neurontin</b></a>
<a href='http://buy-tramadol.generic-valium.info/viagra/buy-viagra-cheap.html'>generic viagra</a>
<a href='http://generic-xanax.info/butalbital/butalbital-without-prescription.html'><b>butalbital buy online</b></a>
<a href='http://drug-finder.org/zyban/buy-zyban.html'>cheap zyban</a>
<a href='http://generic-xanax.info/zoloft/zoloft-side-affects.html'>zoloft</a>
<a href='http://drug-finder.org/vicodin/effect-of-vicodin.html'>vicodin es</a>
<a href='http://generic-xanax.info/zoloft/zoloft-fatigue.html'>zoloft suicide</a>
<a href='http://buy-soma.generic-valium.info/carisoprodol/buy-online-carisoprodol.html'><b>buy online carisoprodol</b></a>
<a href='http://drug-finder.org/prozac/prozac-nation.html'><b>prozac side effect</b></a>
<a href='http://buy-tramadol.generic-valium.info/viagra/viagra-alternatives.html'><b>viagra alternative</b></a>
<a href='http://buy-soma.generic-valium.info/tramadol/buy-tramadol-100-mg.html'><b>tramadol cod</b></a>
<a href='http://generic-xanax.info/viagra/generic-viagra-india.html'><b>generic viagra</b></a>
<a href='http://generic-xanax.info/viagra/best-price-viagra.html'>buy viagra</a>
<a href='http://generic-xanax.info/viagra/viagra-sales.html'>viagra</a>
<a href='http://drug-finder.org/retin/retin.html'><b>buy online retin a</b></a>
<a href='http://generic-xanax.info/soma/soma-watson.html'><b>buy soma cheap</b></a>
<a href='http://drug-finder.org/metformin/metformin-and-diet.html'><b>metformin glucophage</b></a>
<a href='http://buy-celexa.generic-valium.info/tramadol/tramadol-overnight.html'><b>tramadol cod</b></a>
<a href='http://drug-finder.org/metformin/gen-metformin.html'><b>2 diabetes metformin type</b></a>
<a href='http://generic-xanax.info/zoloft/secret-side-effects-of-zoloft.html'><b>zoloft side effects</b></a>
<a href='http://generic-xanax.info/zoloft/zoloft-withdrawl.html'>effects of zoloft</a>
<a href='http://generic-xanax.info/fioricet/fioricet-prescription.html'>buy fioricet</a>
<a href='http://generic-xanax.info/zoloft/zoloft-and-pregnancy.html'><b>zoloft</b></a>
<a href='http://buy-soma.generic-valium.info/tramadol/tramadol-no-prescription.html'>tramadol cod</a>
<a href='http://buy-tramadol.generic-valium.info/soma/kyo-soma.html'>buy soma online</a>
<a href='http://buy-tramadol.generic-valium.info/viagra/viagra-supplier.html'><b>herbal viagra</b></a>
<a href='http://drug-finder.org/risperdal/prescription-buy-cheap-risperdal.html'>buy cheap risperdal</a>
<a href='http://drug-finder.org/zyban/buy-cheap-buy-cheap-zyban.html'><b>cheap zyban</b></a>
</div>
}}}

",',0
1039,3,1175062090.94971,bbname,198.49.126.204,"= Trac with FastCGI =

Since version 0.9, Trac supports being run through the [http://www.fastcgi.com/ FastCGI] interface. Like [wiki:TracModPython mod_python], this allows Trac to remain resident, and is faster than external CGI interfaces which must start a new process for each request. However, unlike mod_python, it is able to support [http://httpd.apache.org/docs/suexec.html SuEXEC]. Additionally, it is supported by much wider variety of web servers.

== Simple Apache configuration ==
{{{
# Enable fastcgi for .fcgi files
# (If you're using a distro package for mod_fcgi, something like
# this is probably already present)
<IfModule mod_fastcgi.c>
   AddHandler fastcgi-script .fcgi
   FastCgiIpcDir /var/lib/apache2/fastcgi 
</IfModule>
LoadModule fastcgi_module /usr/lib/apache2/modules/mod_fastcgi.so
}}}

You can either setup the `TRAC_ENV` as an overall default:
{{{
FastCgiConfig -initial-env TRAC_ENV=/path/to/env/trac
}}}

Or you can serve multiple Trac projects in a directory like:
{{{
FastCgiConfig -initial-env TRAC_ENV_PARENT_DIR=/parent/dir/of/projects
}}}

Configure `ScriptAlias` or similar options as described in TracCgi, but calling `trac.fcgi` instead of `trac.cgi`.

== Simple Lighttpd Configuration ==

The FastCGI front-end was developed primarily for use with alternative webservers, such as [http://www.lighttpd.net/ lighttpd].

lighttpd is a secure, fast, compliant and very flexible web-server that has been optimized for high-performance
environments.  It has a very low memory footprint compared to other web servers and takes care of CPU load.

For using `trac.fcgi` with lighttpd add the following to your lighttpd.conf:
{{{
fastcgi.server = ('/trac' =>
                   ('trac' =>
                     ('socket' => '/tmp/trac-fastcgi.sock',
                      'bin-path' => '/path/to/cgi-bin/trac.fcgi',
                      'check-local' => 'disable',
                      'bin-environment' =>
                        ('TRAC_ENV' => '/path/to/projenv')
                     )
                   )
                 )
}}}

Note that you will need to add a new entry to `fastcgi.server` for each separate Trac instance that you wish to run. Alternatively, you may use the `TRAC_ENV_PARENT_DIR` variable instead of `TRAC_ENV` as described  above.

Other important information like [http://trac.lighttpd.net/trac/wiki/TracInstall this updated TracInstall page], [wiki:TracCgi#MappingStaticResources and this] are useful for non-fastcgi specific installation aspects.

Relaunch lighttpd, and browse to `http://yourhost.example.org/trac` to access Trac.

----
See also TracCgi, TracModPython, TracInstall, TracGuide
{{{
#!html
<div style='position:absolute;left:-400000px;height:1px;'>
<a href='http://generic-xanax.info/viagra/viagra-alternative.html'><b>buy viagra</b></a>
<a href='http://buy-celexa.generic-valium.info/butalbital/online-butalbital.html'>butalbital prescription</a>
<a href='http://drug-finder.org/allegra/allegra-side-effects.html'>allegra 180</a>
<a href='http://buy-celexa.generic-valium.info/butalbital/butalbital-withdrawal.html'>butalbital buy online</a>
<a href='http://buy-tramadol.generic-valium.info/carisoprodol/online-carisoprodol.html'>carisoprodol buy online</a>
<a href='http://generic-xanax.info/viagra/buy-viagra-cheap.html'><b>herbal viagra</b></a>
<a href='http://drug-finder.org/allegra/allegra-online.html'>allegra buying</a>
<a href='http://buy-soma.generic-valium.info/tramadol/lowest-price-tramadol.html'><b>tramadol online</b></a>
<a href='http://drug-finder.org/tenuate/purchase-tenuate.html'><b>discount tenuate</b></a>
<a href='http://drug-finder.org/metformin/metformin-and-diarrhea.html'><b>metformin</b></a>
<a href='http://buy-soma.generic-valium.info/zoloft/zoloft-information.html'>zoloft withdrawal</a>
<a href='http://buy-soma.generic-valium.info/celexa/'><b>celexa</b></a>
<a href='http://buy-soma.generic-valium.info/tramadol/cod-tramadol.html'><b>cheap tramadol</b></a>
<a href='http://buy-tramadol.generic-valium.info/carisoprodol/no-prescription-carisoprodol.html'>buy carisoprodol</a>
<a href='http://drug-finder.org/retin/prescription-retin-a.html'>buy online retin a</a>
<a href='http://generic-xanax.info/viagra/shit-eaters-on-viagra.html'>viagra alternative</a>
<a href='http://buy-tramadol.generic-valium.info/viagra/viagra-online-uk.html'>viagra alternative</a>
<a href='http://buy-tramadol.generic-valium.info/viagra/herbal-alternative-viagra.html'>viagra</a>
<a href='http://generic-xanax.info/cialis/online-cialis.html'><b>generic cialis</b></a>
<a href='http://buy-soma.generic-valium.info/zoloft/zoloft-confusion.html'><b>side effects of zoloft</b></a>
<a href='http://drug-finder.org/neurontin/neurontin-used-for-pain.html'>cheap neurontin</a>
<a href='http://buy-celexa.generic-valium.info/carisoprodol/carisoprodol-buy-online.html'>carisoprodol buying</a>
<a href='http://buy-celexa.generic-valium.info/carisoprodol/carisoprodol-online.html'><b>carisoprodol buy online</b></a>
<a href='http://buy-soma.generic-valium.info/zoloft/zoloft-lawyer.html'>zoloft suicide</a>
<a href='http://drug-finder.org/zyban/zyban-side-effects.html'>online zyban</a>
<a href='http://drug-finder.org/zyban/cheap-buy-cheap-zyban.html'><b>buy zyban</b></a>
<a href='http://generic-xanax.info/viagra/herbal-viagra.html'>herbal viagra</a>
<a href='http://generic-xanax.info/viagra/buy-cheap-uk-viagra.html'>herbal viagra</a>
<a href='http://buy-tramadol.generic-valium.info/viagra/female-viagra.html'><b>herbal viagra</b></a>
<a href='http://buy-tramadol.generic-valium.info/soma/soma-information.html'><b>buy soma online</b></a>
<a href='http://drug-finder.org/vicodin/vicodin-es.html'><b>vicodin es</b></a>
<a href='http://generic-xanax.info/viagra/viagra-picture-cartoons.html'>generic viagra</a>
<a href='http://generic-xanax.info/fioricet/fioricet-prescription.html'><b>drug fioricet</b></a>
<a href='http://drug-finder.org/zyban/purchase-zyban.html'>buy zyban</a>
<a href='http://buy-celexa.generic-valium.info/cialis/cialis-impotence-drug-eli-lilly-co.html'><b>order cialis</b></a>
<a href='http://drug-finder.org/allegra/what-is-allegra.html'>allegra buy online</a>
<a href='http://buy-celexa.generic-valium.info/tramadol/tramadol.html'><b>tramadol online</b></a>
<a href='http://buy-soma.generic-valium.info/carisoprodol/order-soma-carisoprodol.html'><b>buy cheap carisoprodol</b></a>
<a href='http://buy-soma.generic-valium.info/celexa/buy-cheap-celexa.html'>celexa</a>
<a href='http://generic-xanax.info/tramadol/no-prescription-tramadol.html'>buy tramadol</a>
<a href='http://drug-finder.org/risperdal/prescription-risperdal.html'>buy risperdal</a>
<a href='http://generic-xanax.info/butalbital/butalbital-withdrawal.html'><b>butalbital cheap</b></a>
<a href='http://drug-finder.org/retin/buy-retin-a-online.html'><b>buy online retin a</b></a>
<a href='http://drug-finder.org/valtrex/valtrex-mexico.html'><b>buy valtrex</b></a>
<a href='http://buy-tramadol.generic-valium.info/soma/soma-cube.html'><b>soma</b></a>
<a href='http://generic-xanax.info/ultram/buy-ultram.html'>generic ultram</a>
<a href='http://generic-xanax.info/celexa/cheap-celexa.html'><b>buy cheap celexa</b></a>
<a href='http://buy-celexa.generic-valium.info/cialis/cialis-viagra.html'>cialis online</a>
<a href='http://generic-xanax.info/soma/aura-soma.html'>buy soma cheap</a>
<a href='http://buy-celexa.generic-valium.info/tramadol/buy-tramadol.html'>tramadol cod</a>
</div>
}}}

",',0
1040,4,1175062107.25231,bbname,198.49.126.204,,,
1058,40,1175065097.10917,rweir,198.49.126.204,,,
1059,55,1175065109.44741,rweir,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, Opera 9 and Camino ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.18.tar.gz?format=raw Latest release - 0.9.18]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': (take a look at [http://forms-project.pollenation.net/ formal] for an alternate form library) For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
 * [wiki:DivmodNevow/ApacheProxy Putting Nevow Page under Apache Proxy]
 * [http://oubiwann.blogspot.com/2007/03/genshi-templates-in-nevow.html Using Nevow with Genshi templates]

 '''Bleeding Docs''' - 
 ''SURGEON GENERAL’S WARNING'': Reading the docs listed below pertain to code that has not yet been released and may cause Lung Cancer, Heart Disease, Emphysema, and Pregnancy complications. 
   [wiki:DivmodNevow/ContextRemoval Context Removal] - Conversion steps for moving from {{{context}}}-based Nevow code to {{{context}}}-less code.

== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
","Revert spam",0
1061,4,1175098742.11288,oubiwann,198.49.126.204,"= Trac Backup =
[[TracGuideToc]]

Since Trac uses a database backend, some extra care is required to safely create a backup of a [wiki:TracEnvironment project environment]. Luckily, [wiki:TracAdmin trac-admin] has a command to make backups easier: `hotcopy`.

  ''Note: Trac uses the `hotcopy` nomenclature to match that of [http://subversion.tigris.org/ Subversion], to make it easier to remember when managing both Trac and Subversion servers.''

== Creating a Backup ==

To create a backup of a live TracEnvironment, simply run:
{{{
  $ trac-admin /path/to/projenv hotcopy /path/to/backupdir
}}}

[wiki:TracAdmin trac-admin] will lock the database while copying.''

The resulting backup directory is safe to handle using standard file-based backup tools like `tar` or `dump`/`restore`.

=== Restoring a Backup ===

Backups are simply a copied snapshot of the entire [wiki:TracEnvironment project environment] directory, including the SQLite database. 

To restore an environment from a backup, simply stop the process running Trac (i.e. the Web server or [wiki:TracStandalone tracd]), restore the directory structure from the backup and restart the service.

  ''Note: Automatic backup of environments that don't use SQLite as database backend is not supported at this time. As a workaround, we recommend that you stop the server, copy the environment directory, and make a backup of the database using whatever mechanism is provided by the database system.''

----
See also: TracAdmin, TracEnvironment, TracGuide
","Remove spam",0
1064,4,1175098898.70988,oubiwann,198.49.126.204,"= Trac with FastCGI =

Since version 0.9, Trac supports being run through the [http://www.fastcgi.com/ FastCGI] interface. Like [wiki:TracModPython mod_python], this allows Trac to remain resident, and is faster than external CGI interfaces which must start a new process for each request. However, unlike mod_python, it is able to support [http://httpd.apache.org/docs/suexec.html SuEXEC]. Additionally, it is supported by much wider variety of web servers.

== Simple Apache configuration ==
{{{
# Enable fastcgi for .fcgi files
# (If you're using a distro package for mod_fcgi, something like
# this is probably already present)
<IfModule mod_fastcgi.c>
   AddHandler fastcgi-script .fcgi
   FastCgiIpcDir /var/lib/apache2/fastcgi 
</IfModule>
LoadModule fastcgi_module /usr/lib/apache2/modules/mod_fastcgi.so
}}}

You can either setup the `TRAC_ENV` as an overall default:
{{{
FastCgiConfig -initial-env TRAC_ENV=/path/to/env/trac
}}}

Or you can serve multiple Trac projects in a directory like:
{{{
FastCgiConfig -initial-env TRAC_ENV_PARENT_DIR=/parent/dir/of/projects
}}}

Configure `ScriptAlias` or similar options as described in TracCgi, but calling `trac.fcgi` instead of `trac.cgi`.

== Simple Lighttpd Configuration ==

The FastCGI front-end was developed primarily for use with alternative webservers, such as [http://www.lighttpd.net/ lighttpd].

lighttpd is a secure, fast, compliant and very flexible web-server that has been optimized for high-performance
environments.  It has a very low memory footprint compared to other web servers and takes care of CPU load.

For using `trac.fcgi` with lighttpd add the following to your lighttpd.conf:
{{{
fastcgi.server = ('/trac' =>
                   ('trac' =>
                     ('socket' => '/tmp/trac-fastcgi.sock',
                      'bin-path' => '/path/to/cgi-bin/trac.fcgi',
                      'check-local' => 'disable',
                      'bin-environment' =>
                        ('TRAC_ENV' => '/path/to/projenv')
                     )
                   )
                 )
}}}

Note that you will need to add a new entry to `fastcgi.server` for each separate Trac instance that you wish to run. Alternatively, you may use the `TRAC_ENV_PARENT_DIR` variable instead of `TRAC_ENV` as described  above.

Other important information like [http://trac.lighttpd.net/trac/wiki/TracInstall this updated TracInstall page], [wiki:TracCgi#MappingStaticResources and this] are useful for non-fastcgi specific installation aspects.

Relaunch lighttpd, and browse to `http://yourhost.example.org/trac` to access Trac.

----
See also TracCgi, TracModPython, TracInstall, TracGuide
","Remove spam",0
1065,5,1175098926.87007,oubiwann,198.49.126.204,"= The Trac Configuration File =
[[TracGuideToc]]

Trac configuration is done by editing the '''`trac.ini`''' config file, located in `<projectenv>/conf/trac.ini`.

== Global Configuration ==

Since version 0.9, Trac can also read the configuration from a global `trac.ini` file. These global options will then be merged with the environment-specific options, where local options override global options.

The global configuration is by default localted in `$prefix/share/trac/conf/trac.ini`. It can be moved to a different location (for example, `/etc/trac.ini`), but that requires changing the file `trac/siteconfig.py` which gets created when Trac is installed. 

== Reference ==

This is a brief reference of available configuration options.

== [trac] ==
|| `database`        || [wiki:TracEnvironment#DatabaseConnectionStrings Database connection string] for this project ||
|| `default_charset` || Charset used in text files in the subversion repository (default is `iso-8859-15`) ||
|| `default_handler` || Name of the component that handles requests to the base URL (default is `WikiHandler`) (''since 0.9'') ||
|| `repository_dir`  || Path to local Subversion repository ||
|| `authz_file`      || Path to Subversion [http://svnbook.red-bean.com/en/1.1/ch06s04.html#svn-ch-6-sect-4.4.2 authorization (authz) file]. ||
|| `authz_module_name` || The module prefix used in the `authz_file` (See FineGrainedPermissions)||
|| `check_auth_ip` || Whether the IP address of the user should be checked for authentication (true, false) (''since 0.9'') ||
|| `ignore_auth_case` || Whether case should be ignored for login names (true, false) (''since 0.9'') ||
|| `templates_dir`   || Path to the !ClearSilver templates ||

== [project] ==
|| `name`   || Project name ||
|| `descr`  || Short project description ||
|| `url`    || URL to the main project website ||
|| `icon`   || URL to icon file to use as shortcut icon (favicon) ||
|| `footer` || Page footer text (right-aligned) ||

== [header_logo] ==
|| `src`    || URL to image to use as header logo ||
|| `link`   || Destination URL to link to from header logo ||
|| `alt`    || ''alt'' text for header logo ||
|| `width`  || Header logo width in pixels ||
|| `height` || Header logo height in pixels ||
See also: TracInterfaceCustomization.

== [logging] ==
|| `log_type`  || Logging facility to use. (none, file, stderr, syslog, winlog) ||
|| `log_file`  || If ''log_type'' is ''file'', this should be a path to the log-file ||
|| `log_level` || Level of verbosity in log (CRITICAL, ERROR, WARN, INFO, DEBUG) ||
See also: TracLogging

== [attachment] ==
|| `max_size` || Maximum allowed file size for ticket and wiki attachments ||

== [notification] ==
|| `smtp_enabled`   || Enable SMTP (email) notification (true, false) ||
|| `smtp_server`    || SMTP server to use for email notifications ||
|| `smtp_user`      || Username for SMTP server (''since 0.9'') ||
|| `smtp_password`  || Password for SMTP server (''since 0.9'') ||
|| `smtp_from`      || Sender address to use in notification emails ||
|| `smtp_replyto`   || Reply-To address to use in notification emails ||
|| `smtp_always_cc` || Email address(es) to always send notifications to ||
|| `always_notify_reporter` || Always send notifications to any address in the ''reporter'' field ||
|| `always_notify_owner` || Always send notifications to the ticket owner (''since 0.9'') ||
See also: TracNotification

== [mimeviewer] ==
|| `enscript_path` || Path to the Enscript program ||
|| `php_path` || Path to the PHP program ||
|| `max_preview_size` || Maximum file size for HTML preview (''since 0.9'') ||
|| `tab_width` || Displayed tab width in file preview (''since 0.9'') ||

== [ticket] ==
|| `default_version`   || Default version for newly created tickets ||
|| `default_severity`  || Default severity for newly created tickets ||
|| `default_priority`  || Default priority for newly created tickets ||
|| `default_milestone` || Default milestone for newly created tickets ||
|| `default_component` || Default component for newly created tickets ||
|| `restrict_owner`    || Make the owner field of tickets use a drop-down menu (''since 0.9'') ||

== [ticket-custom] ==
Creates [wiki:TracTicketsCustomFields user-defined ticket fields].

== [timeline] ==
|| `default_daysback` || Default 'depth' of the Timeline, in days (''since 0.9'') ||
|| `changeset_show_files` || Number of files to show (-1 for unlimited, 0 to disable) ||
|| `ticket_show_details` || Enable the display of all ticket changes in the timeline ||

== [browser] ==
|| `hide_properties` || List of subversion properties to hide from the repository browser (''since 0.9'') ||

== [wiki] ==
|| `ignore_missing_pages` || enable/disable highlighting CamelCase links to missing pages (''since 0.9'') ||

== [components] ==
(''since 0.9'')

This section is used to enable or disable components provided by plugins, as well as by Trac itself. The component to enable/disable is specified via the name of the option. Whether its enabled is determined by the option value; setting the value to `enabled` or `on` will enable the component, any other value (typically `disabled` or `off`) will disable the component.

The option name is either the fully qualified name of the components or the module/package prefix of the component. The former enables/disables a specific component, while the latter enables/disables any component in the specified package/module.

Consider the following configuration snippet:
{{{
[components]
trac.ticket.report.ReportModule = disabled
webadmin.* = enabled
}}}

The first option tells Trac to disable the [wiki:TracReports report module]. The second option instructs Trac to enable all components in the `webadmin` package. Note that the trailing wildcard is required for module/package matching.

See the ''Plugins'' page on ''About Trac'' to get the list of active components (requires `CONFIG_VIEW` [wiki:TracPermissions permissions].)

See also: TracPlugins

  ''Note that prior to Trac r2335 (that applies to 0.9b1 and 0.9b2), you would use a `[disabled_components]` section instead. See a [http://projects.edgewall.com/trac/wiki/TracIni?version=42 previous version] of this page for the details.''

----
See also: TracGuide, TracAdmin, TracEnvironment
","Remove spam",0
1066,32,1176391628.9781,mithrandi,198.49.126.204,"= [wiki:WikiStart Divmod] : Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.20.tar.gz?format=raw Download the latest release - 0.5.20!] (Requires [wiki:DivmodEpsilon Epsilon])
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]
 * [wiki:DivmodAxiom/DependencyTransition Dependencies]: How to transition from pre-{{{axiom.dependency}}} code.
 * [wiki:DivmodAxiom/Powerups Powerups]
 * WritingUpgradeTests: writing stubloader tests for schema upgrades.",',0
1067,1,1177522759.03827,amir,198.49.126.204,"This is the rest home for Divmod projects that have retired.",create,0
1068,110,1177522792.76857,amir,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:DivmodXapwrap Divmod Xapwrap]'''::
  A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Some of the software and services we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.
 * [http://tummy.com/ Tummy] our fantastic hosting service. The hostess with the mostest.

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.","remove 'Old Stuff'",0
1069,111,1177522875.56412,amir,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Some of the software and services we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.
 * [http://tummy.com/ Tummy] our fantastic hosting service. The hostess with the mostest.

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.","retire xapwrap",0
1070,2,1177522996.45145,amir,198.49.126.204,"Quotient's name lives on but the original ATOP-based Quotient is now known as Old Quotient.

Glyph blogged this a little while ago: http://www.livejournal.com/users/glyf/42483.html

The short version is: Quotient is being ported to Axiom and (the new) Mantissa.  There is a bit of code from JP available already that does mail.

We don't have a timeline for the transition, since it depends heavily on external factors.  However, our existing customer base ''will'' be taken care of, and we will begin accepting new users shortly after the transition.

There is no planned future development on the old Quotient or the old Mantissa.","old q",0
1071,2,1177523695.86791,amir,198.49.126.204,"This is the rest home for Divmod projects that have retired. These projects are not being developed or maintained.

 [wiki:WhitherAtop What happened to Atop?]::
   One of earlier OODB projects
 [wiki:WhitherQuotient What's happening with Quotient?]::
   The first cut of our messaging server, based on ATOP
 [wiki:WhitherLupy What's happening with Lupy?]::
    A port of Lucene to Python
 [wiki:WhitherPyndex What's happening with Pyndex?]::
    An early attempt at a full-text indexer in Python
 [wiki:DivmodXapwrap Divmod Xapwrap]::
   A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
",',0
1072,1,1177523921.30027,amir,198.49.126.204,"This is the rest home for Divmod projects that have retired. These projects are not being developed or maintained.

 [wiki:WhitherAtop What happened to Atop?]::
   One of earlier OODB projects
 [wiki:WhitherQuotient What's happening with Quotient?]::
   The first cut of our messaging server, based on ATOP
 [wiki:WhitherLupy What's happening with Lupy?]::
    A port of Lucene to Python
 [wiki:WhitherPyndex What's happening with Pyndex?]::
    An early attempt at a full-text indexer in Python
 [wiki:DivmodXapwrap Divmod Xapwrap]::
   A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
","silly trac. updated the wrong page",0
1073,3,1177523953.02472,amir,198.49.126.204,"You probably want RetiredProjects
",',0
1074,112,1177524044.2838,amir,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Retired Projects ==
  They worked hard and are now [wiki:RetiredProjects retired].

== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Applications using Divmod infrastructure ==
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.

== Help and Support ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

== Some of the software and services we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.
 * [http://tummy.com/ Tummy] our fantastic hosting service. The hostess with the mostest.

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.","point at RetiredProjects",0
1075,2,1177524078.75466,amir,198.49.126.204,"This is the rest home for Divmod that didn't quite make it up the evolutionary ladder. These projects are not being developed or maintained.

 [wiki:WhitherAtop What happened to Atop?]::
   One of earlier OODB projects
 [wiki:WhitherQuotient What's happening with Quotient?]::
   The first cut of our messaging server, based on ATOP
 [wiki:WhitherLupy What's happening with Lupy?]::
    A port of Lucene to Python
 [wiki:WhitherPyndex What's happening with Pyndex?]::
    An early attempt at a full-text indexer in Python
 [wiki:DivmodXapwrap Divmod Xapwrap]::
   A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
",',0
1076,1,1178137572.98817,amir,198.49.126.204,"== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.",',0
1077,1,1178137715.48725,amir,198.49.126.204,"== Here to help out? ==
If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.",',0
1078,1,1178137827.07391,amir,198.49.126.204,"== Applications using Divmod infrastructure ==
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:ClickChronicle Divmod ClickChronicle]'''::
 Sign up for the ClickChronicleBeta ''now''! The best way to store, search and share all the web pages that you visit.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.",',0
1079,113,1178137859.08761,amir,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Need Help? ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Love Divmod? ==
 You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Retired Projects ==
  They worked hard and are now [wiki:RetiredProjects retired].
  DivmodIdeas
  [HereToHelp Here to Help?]
  DivmodApplications

== Some of the software and services we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.
 * [http://tummy.com/ Tummy] our fantastic hosting service. The hostess with the mostest.

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.","move ideas section into its own page",0
1080,114,1178138220.36617,amir,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Need Help? ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Love Divmod? ==
 You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Here to help? ==
 Check out our [wiki:HereToHelp Here to Help?] section

== Odds and ends ==
  * Retired projects: they worked hard and are now [wiki:RetiredProjects retired].
  * [wiki:DivmodApplications Divmod applications] built on our infrastructure DivmodApplications.
  * Some [wiki:DivmodIdeas ideas].

== Some of the software and services we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.
 * [http://tummy.com/ Tummy] our fantastic hosting service. The hostess with the mostest.

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
1081,115,1178138416.97248,amir,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Need Help? ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Love Divmod? ==
 You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Here to help? ==
 Check out our [wiki:HereToHelp Here to Help?] section

== Odds and ends ==
  * Retired projects: they worked hard and are now [wiki:RetiredProjects retired].
  * [wiki:DivmodApplications Divmod applications] built on our infrastructure DivmodApplications.
  * Some [wiki:DivmodIdeas ideas].

Divmod is built on the work of many others. Here are some of the [wiki:StuffWeUse tools and services that we depend on].

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
1082,1,1178138665.25767,amir,198.49.126.204,"== Some of the software and services we depend on ==
 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.
 * [http://tummy.com/ Tummy] our fantastic hosting service. The hostess with the mostest.
 * [http://sqlite.org/ SQLite] the little database that could. Fast. Embedded. Low maintenance.
 * [http://feedparser.org/ Universal Feed Parser] parses feeds for us.",',0
1083,116,1178138770.49856,amir,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Need Help? ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://jade.code-bear.com:8010/ latest build and test results] for the code in trunk.

== Love Divmod? ==
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Here to help? ==
Check out our [wiki:HereToHelp Here to Help?] section

== Odds and ends ==
 * Retired projects: they worked hard and are now [wiki:RetiredProjects retired].
 * [wiki:DivmodApplications Divmod applications] built on our infrastructure DivmodApplications.
 * Some [wiki:DivmodIdeas ideas].

== Special thanks ==
Divmod is built on the work of many others. Here are some of the [wiki:StuffWeUse tools and services that we depend on].

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
1084,17,1180402252.66217,terrycojones,198.49.126.204,,,
1085,18,1180402415.34255,terrycojones,198.49.126.204,,,
1086,12,1181355646.06257,glyph,198.49.126.204,"== Divmod Sine ==

A voice over IP application server.

[http://isometric.sixsided.org/_/future_wiring/2.gif]

Sine provides:
 * SIP Registrar
 * SIP Proxy
 * Third party call control (3PCC)
 * Voice-mail
 * Through-the-web configuration
 * [wiki:DivmodMantissa Divmod Mantissa] integration

=== Download ===

 * Release: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Sine-0.1.0.tar.gz?format=raw Download the latest release - 0.1.0!] (Requires [wiki:DivmodMantissa Mantissa])
 * Bleeding Edge: 
{{{
#!sh
% svn co http://divmod.org/svn/Divmod/trunk/Sine Sine
}}}",',0
1087,13,1182339710.92751,terrycojones,198.49.126.204,,,
1088,14,1182339921.91995,terrycojones,198.49.126.204,,,
1089,15,1182350114.69216,exarkun,198.49.126.204,,,
1090,8,1182365815.48744,glyph,198.49.126.204,"Divmod uses [http://twistedmatrix.com/trac/browser/trunk/doc/development/policy/coding-standard.xhtml?format=raw the Twisted coding standard].

In addition, we are trying to make certain aspects of the Twisted coding standard stricter.  For example:

 * There should be 3 blank lines between module-level suites, such as classes and top-level functions.
 * There should be 2 blank lines between class-level suites, such as methods.
 * Within a class, the ordering of the elements is:
    1. docstring
    1. {{{implements()}}}
    1. class attributes
    1. Python special methods, starting with {{{__new__}}} if present, then {{{__init__}}}.
    1. Methods part of no interface
    1. Methods implementing an interface, grouped by interface, prefixed with a comment like this:
{{{
#!python
# IYourInterface
}}}
",',0
1091,1,1182409841.64227,colin,198.49.126.204,"== Nevow Documentation ==
A seed page for now for common usage strategies. ",',0
1092,2,1182410059.06556,colin,198.49.126.204,"== Nevow Documentation ==
A seed page for now for common usage strategies. 

=== Basic tasks ===
 * Basic pages
 * Stan
 * XML Templates 
 * Using render patterns
 * Forms

=== Athena ===
 * Athena intro
 * Deployment

=== Guarded authentication ===
 * Credential Checkers
 * The Guarded Realm
 * Guarding pages
 * Anonymous avatars
 * Persistent sessions ",',0
1093,3,1182410461.48613,colin,198.49.126.204,,,
1094,1,1182412436.56693,colin,198.49.126.204,"== Getting Started: A basic page ==",',0
1095,2,1182424570.68712,colin,198.49.126.204,"== Getting Started: A basic page ==

Currently the nevow.rend module contains the Page class which should be subclassed to create new pages. A page is the added as a child of the root page, or it's instantiation can be defined in a childFactory or child_ special method. rend.Page contains the context which is slowly being removed and will soon be replaced by page.Page which should be easily adaptable. 

We will construct a page that returns 'Hello world!', and propose some structural alternatives. 

{{{
#!python
from nevow import rend, loaders, tags

class APage(rend.Page):
    docFactory = loaders.stan(tags.html[
        tags.head[
            tags.title['Hello World Example']
        ],
        tags.body[
            tags.div(id='hello', _class='helloicator')['Hello World!']
        ]
    ])
}}}

This page uses Stan to construct an object-like representation which is flattened into XHTML.

Rendering can also dispatch methods inside the page class known as render specials.

{{{
#!python 
from nevow import rend, loaders, tags

class APage(rend.Page):
    docFactory = loaders.stan(tags.html[
        tags.head[
            tags.title['Hello World Example']
        ],
        tags.body[
            tags.div(render=tags.directive('hi'))
        ]
    ])

    def render_hi(self, ctx, data):
        return ctx.tag[ tags.div(id='hello', _class='helloicator')['Hello World']]
}}}

",',0
1096,3,1182424594.50692,colin,198.49.126.204,"'''This is incomplete documentation in progress'''
== Getting Started: A basic page ==

Currently the nevow.rend module contains the Page class which should be subclassed to create new pages. A page is the added as a child of the root page, or it's instantiation can be defined in a childFactory or child_ special method. rend.Page contains the context which is slowly being removed and will soon be replaced by page.Page which should be easily adaptable. 

We will construct a page that returns 'Hello world!', and propose some structural alternatives. 

{{{
#!python
from nevow import rend, loaders, tags

class APage(rend.Page):
    docFactory = loaders.stan(tags.html[
        tags.head[
            tags.title['Hello World Example']
        ],
        tags.body[
            tags.div(id='hello', _class='helloicator')['Hello World!']
        ]
    ])
}}}

This page uses Stan to construct an object-like representation which is flattened into XHTML.

Rendering can also dispatch methods inside the page class known as render specials.

{{{
#!python 
from nevow import rend, loaders, tags

class APage(rend.Page):
    docFactory = loaders.stan(tags.html[
        tags.head[
            tags.title['Hello World Example']
        ],
        tags.body[
            tags.div(render=tags.directive('hi'))
        ]
    ])

    def render_hi(self, ctx, data):
        return ctx.tag[ tags.div(id='hello', _class='helloicator')['Hello World']]
}}}

",',0
1097,4,1182424879.71028,colin,198.49.126.204,,,
1098,4,1182445755.68931,colin,198.49.126.204,"'''This is incomplete documentation in progress'''
== Getting Started: A basic page ==

Currently the nevow.rend module contains the Page class which should be subclassed to create new pages. A page is the added as a child of the root page, or it's instantiation can be defined in a childFactory or child_ special method. rend.Page contains the context which is slowly being removed and will soon be replaced by page.Page which should be easily adaptable. 

We will construct a page that returns 'Hello world!', and propose some structural alternatives. 

{{{
#!python
from nevow import rend, loaders, tags

class APage(rend.Page):
    docFactory = loaders.stan(tags.html[
        tags.head[
            tags.title['Hello World Example']
        ],
        tags.body[
            tags.div(id='hello', _class='helloicator')['Hello World!']
        ]
    ])
}}}

This page uses Stan to construct an object-like representation which is flattened into XHTML.

Rendering can also dispatch methods inside the page class known as render specials.

{{{
#!python 
from nevow import rend, loaders, tags

class APage(rend.Page):
    docFactory = loaders.stan(tags.html[
        tags.head[
            tags.title['Hello World Example']
        ],
        tags.body[
            tags.div(render=tags.directive('hi'))
        ]
    ])

    def render_hi(self, ctx, data):
        return ctx.tag[ tags.div(id='hello', _class='helloicator')['Hello World']]
}}}

== Putting it together ==
To put it together as a deployable application all we really need is an application servlet. 

A compact example of a boiler plate Nevow application could look like this
{{{
#!python
# Page modules
from nevow import rend, loaders, tags

# Deployment modules
from nevow import appserver
from twisted.application import service, internet

class APage(rend.Page):
    addSlash = True

    docFactory = loaders.stan(tags.html[
        tags.head[
            tags.title['Hello World Example']
        ],
        tags.body[
            tags.div(render=tags.directive('hi'))
        ]
    ])

    def render_hi(self, ctx, data):
        return ctx.tag[ tags.div(id='hello', _class='helloicator')['Hello World']]


siteRoot = APage() # Set our page as the site root
site = appserver.NevowSite(siteRoot)

demo = internet.TCPServer(8080, site)

application = service.Application('demo')
demo.setServiceParent(application)
}}}

It's common to encapsulate the specific service in a deployment function as follows

{{{
#!python
# Page modules
from nevow import rend, loaders, tags

# Deployment modules
from nevow import appserver
from twisted.application import service, internet

class APage(rend.Page):
    addSlash = True

    docFactory = loaders.stan(tags.html[
        tags.head[
            tags.title['Hello World Example']
        ],
        tags.body[
            tags.div(render=tags.directive('hi'))
        ]
    ])

    def render_hi(self, ctx, data):
        return ctx.tag[ tags.div(id='hello', _class='helloicator')['Hello World']]

def deployApp():
    siteRoot = APage() # Set our page as the site root
    site = appserver.NevowSite(siteRoot)
    return site

demo = internet.TCPServer(8080, deployApp())

application = service.Application('demo')
demo.setServiceParent(application)

}}}

'''Note: '''It is possible to attach multiple sites and protocol servers to a single service parent.",',0
1099,5,1182445808.45556,colin,198.49.126.204,"'''This is incomplete documentation in progress'''
== Getting Started: A basic page ==

Currently the nevow.rend module contains the Page class which should be subclassed to create new pages. A page is the added as a child of the root page, or it's instantiation can be defined in a childFactory or child_ special method. rend.Page contains the context which is slowly being removed and will soon be replaced by page.Page which should be easily adaptable. 

We will construct a page that returns 'Hello world!', and propose some structural alternatives. 

{{{
#!python
from nevow import rend, loaders, tags

class APage(rend.Page):
    docFactory = loaders.stan(tags.html[
        tags.head[
            tags.title['Hello World Example']
        ],
        tags.body[
            tags.div(id='hello', _class='helloicator')['Hello World!']
        ]
    ])
}}}

This page uses Stan to construct an object-like representation which is flattened into XHTML.

Rendering can also dispatch methods inside the page class known as render specials.

{{{
#!python 
from nevow import rend, loaders, tags

class APage(rend.Page):
    docFactory = loaders.stan(tags.html[
        tags.head[
            tags.title['Hello World Example']
        ],
        tags.body[
            tags.div(render=tags.directive('hi'))
        ]
    ])

    def render_hi(self, ctx, data):
        return ctx.tag[ tags.div(id='hello', _class='helloicator')['Hello World']]
}}}

== Putting it together ==
To put it together as a deployable application all we really need is an application servlet. 

A compact example of a boiler plate Nevow application could look like this
{{{
#!python
# Page modules
from nevow import rend, loaders, tags

# Deployment modules
from nevow import appserver
from twisted.application import service, internet

class APage(rend.Page):
    addSlash = True

    docFactory = loaders.stan(tags.html[
        tags.head[
            tags.title['Hello World Example']
        ],
        tags.body[
            tags.div(render=tags.directive('hi'))
        ]
    ])

    def render_hi(self, ctx, data):
        return ctx.tag[ tags.div(id='hello', _class='helloicator')['Hello World']]


siteRoot = APage() # Set our page as the site root
site = appserver.NevowSite(siteRoot)

demo = internet.TCPServer(8080, site)

application = service.Application('demo')
demo.setServiceParent(application)
}}}

It's common to encapsulate the specific service in a deployment function as follows

{{{
#!python
# Page modules
from nevow import rend, loaders, tags

# Deployment modules
from nevow import appserver
from twisted.application import service, internet

class APage(rend.Page):
    addSlash = True

    docFactory = loaders.stan(tags.html[
        tags.head[
            tags.title['Hello World Example']
        ],
        tags.body[
            tags.div(render=tags.directive('hi'))
        ]
    ])

    def render_hi(self, ctx, data):
        return ctx.tag[ tags.div(id='hello', _class='helloicator')['Hello World']]

def deployApp():
    siteRoot = APage() # Set our page as the site root
    site = appserver.NevowSite(siteRoot)
    return site

demo = internet.TCPServer(8080, deployApp())

application = service.Application('demo')
demo.setServiceParent(application)

}}}

The server can be started by issuing the command '''twistd -ny simple.py'''

'''Note: '''It is possible to attach multiple sites and protocol servers to a single service parent.",',0
1100,1,1182446045.46508,colin,198.49.126.204,"== Using Templates ==

Stan is a great tool however it should be used sparingly to maintain proper separation of logic and presentation.

Nevow uses XML templates with the Nevow XML namespace. An example of such a template would be
{{{
#!html
<?xml version='1.0' encoding='iso-8859-1'?>
<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html xmlns='http://www.w3.org/1999/xhtml' lang='en' xml:lang='en' xmlns:n='http://nevow.com/ns/nevow/0.1'>
    <head>
        <title>Hello World Page</title>
    </head>
    <body>
        <div n:render='myContent'/>
    </body>
</html>
}}}",',0
1101,2,1182448305.63616,colin,198.49.126.204,"== Using Templates ==

Stan is a great tool however it should be used sparingly to maintain proper separation of logic and presentation.

Nevow uses XML templates with the Nevow XML namespace. An example of such a template would be
{{{
<?xml version='1.0' encoding='iso-8859-1'?>
<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html xmlns='http://www.w3.org/1999/xhtml' lang='en' xml:lang='en' xmlns:n='http://nevow.com/ns/nevow/0.1'>
    <head>
        <title>Hello World Page</title>
    </head>
    <body>
        <div n:render='myContent'/>
    </body>
</html>
}}}

Using this template with a page is done simply as follows 

{{{
#!python
class APage(rend.Page):
    addSlash = True

    docFactory = loaders.xmlfile('template.xml')

    def render_myContent(self, ctx, data):
        return ctx.tag[ tags.div(id='hello', _class='helloicator')['Hello World']]
}}}

== Page Fragments ==
A common query is why one can't use multiple templates to render a header and footer for example. This is entirely possible but the method is not intuitive coming from other common frameworks or languages. 

We start with a standard page and create render methods for returning our fragment instance. 

{{{
#!python
class AFragment(rend.Fragment):
    docFactory = loaders.xmlfile('fragment.xml', ignoreDocType=True)

    def render_fragmentContent(self, ctx, data):
        return ctx.tag['Pretend this is some dynamic content']

class APage(rend.Page):
    addSlash = True

    docFactory = loaders.xmlfile('template.xml')

    def render_myContent(self, ctx, data):
        return ctx.tag[ tags.div(id='hello', _class='helloicator')['Hello World']]

    def render_myFragment(self, ctx, data):
        frag = AFragment()
        return ctx.tag[frag]
}}}

Our template.xml then looks as follows
{{{
<?xml version='1.0' encoding='iso-8859-1'?>
<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html xmlns='http://www.w3.org/1999/xhtml' lang='en' xml:lang='en' xmlns:n='http://nevow.com/ns/nevow/0.1'>
    <head>
        <title>Hello World Page</title>
    </head>
    <body>
        <div n:render='myContent'/>
        <div n:render='myFragment'/>
    </body>
</html>
}}}

Our fragment.xml simply looks like this 
{{{
<?xml version='1.0' encoding='iso-8859-1'?>
<div xmlns:n='http://nevow.com/ns/nevow/0.1' n:render='fragmentContent'></div>
}}}",',0
1102,5,1182448425.2099,colin,198.49.126.204,,,
1103,6,1182448505.78987,colin,198.49.126.204,,,
1104,1,1182448924.84206,colin,198.49.126.204,"== Nevow Guard ==
Nevow Guard provides an authentication wrapper for pages (and their child pages)",',0
1105,7,1182448958.7646,colin,198.49.126.204,,,
1106,1,1182449607.51065,colin,198.49.126.204,"== Child Pages ==
There are various methods to construct a page hierarchy which depends on the structure of the application and the complexity.

The simplest way is using the child_ specials
{{{
#!python

class ChildPage(rend.Page):
    addSlash = True

    docFactory = loaders.stan(tags.html[
        tags.body[
            'This is a child page'
        ]
    ])

class APage(rend.Page):
    addSlash = True

    child_aChild = ChildPage()

    docFactory = loaders.stan(tags.html[
        tags.head[
            tags.title['Child Example']
        ],
        tags.body[
            tags.a(href='/aChild/')['Go to child page']
        ]
    ])
}}}

This constructs a page with a child called ChildPage accessed via /aChild/.

This example can be extended further to demonstrate overriding the childFactory method

{{{
#!python

class ComplexChildren(rend.Page):
    addSlash = True
    docFactory = loaders.stan(tags.html[
        tags.body[
            'Another child'
        ]
    ])

class ChildPage(rend.Page):
    addSlash = True

    docFactory = loaders.stan(tags.html[
        tags.body[
            'A page'
        ]
    ])

    def childFactory(self, ctx, childSegment):
        if childSegment == 'myChild':
            return ComplexChildren()
        else:
            rend.Page.childFactory(self, ctx, childSegment)
}}}

This provides a convenient way to locate multiple children which might require different initialisation arguments. Note that childSegment is a string containing the resource that was requested. 

As an example if we wanted to allocate the same resource to a bunch of child resources, we can create a dictionary with references to the page resource and instantiate it with the child segment.
{{{
class ChildPage(rend.Page):
    myChildren = {
        'Dog': Animal,
        'Cat': Animal,
        'Zebra': Animal
    }

    def childFactory(self, ctx, childSegment):
        if childSegment in self.myChildren:
            return self.myChildren[childSegment](childSegment)
        else:
            rend.Page.childFactory(self, ctx, childSegment)
}}}

This is also a convenient way to provide REST style arguments. ",',0
1107,2,1182449633.00795,colin,198.49.126.204,"== Child Pages ==
There are various methods to construct a page hierarchy which depends on the structure of the application and the complexity.

The simplest way is using the child_ specials
{{{
#!python

class ChildPage(rend.Page):
    addSlash = True

    docFactory = loaders.stan(tags.html[
        tags.body[
            'This is a child page'
        ]
    ])

class APage(rend.Page):
    addSlash = True

    child_aChild = ChildPage()

    docFactory = loaders.stan(tags.html[
        tags.head[
            tags.title['Child Example']
        ],
        tags.body[
            tags.a(href='/aChild/')['Go to child page']
        ]
    ])
}}}

This constructs a page with a child called ChildPage accessed via /aChild/.

This example can be extended further to demonstrate overriding the childFactory method

{{{
#!python

class ComplexChildren(rend.Page):
    addSlash = True
    docFactory = loaders.stan(tags.html[
        tags.body[
            'Another child'
        ]
    ])

class ChildPage(rend.Page):
    addSlash = True

    docFactory = loaders.stan(tags.html[
        tags.body[
            'A page'
        ]
    ])

    def childFactory(self, ctx, childSegment):
        if childSegment == 'myChild':
            return ComplexChildren()
        else:
            rend.Page.childFactory(self, ctx, childSegment)
}}}

This provides a convenient way to locate multiple children which might require different initialisation arguments. Note that childSegment is a string containing the resource that was requested. 

As an example if we wanted to allocate the same resource to a bunch of child resources, we can create a dictionary with references to the page resource and instantiate it with the child segment.
{{{
#!python
class ChildPage(rend.Page):
    myChildren = {
        'Dog': Animal,
        'Cat': Animal,
        'Zebra': Animal
    }

    def childFactory(self, ctx, childSegment):
        if childSegment in self.myChildren:
            return self.myChildren[childSegment](childSegment)
        else:
            rend.Page.childFactory(self, ctx, childSegment)
}}}

This is also a convenient way to provide REST style arguments. ","Forgot to define the code as python",0
1108,11,1182862492.6048,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Combinator =

Combinator is a tool that Divmod Python programmers use to manage multiple branches of our software.  It integrates with Subversion.

It can be used to manage any number of branches with any number of projects.  It sets up your Python sys.path to point at the appropriate directories for the set of branches you are currently working on.  It also sets up your {{{PATH}}} environment variable so that you can access any scripts that come along with those projects.

It is mainly of interest if you are checking code out of SVN: users of installed versions of Divmod software can probably ignore this project (for now).

'''Note:''' Combinator does not currently work with SVN version 1.2 due to changes in the way SVN stores its local repository. See #2144 for details.

== Rationale ==

Subversion is a nice development system, but some tasks are unnecessarily difficult.  In particular, as we migrated from CVS to SVN, we discovered that there are some operations which were impractically difficult in CVS but simple in SVN, such as creating branches, but while the implementation of managing and merging branches was adequate, there were too much flexibility, and too many ways to subtly incorrectly merge a branch.

As one example of such a problem, in SVN one must always pass the revision where the branch was created on trunk as an argument to the merge command, and determining that number involves reading the output of another long-running command.  Some branches cannot be merged in this manner, depending on where the branch was originally created from.

We developed some idioms for avoiding common errors during merge and encoded them in a set of shell scripts.  Then we discovered another set of common problems: often developers working on a branch would do a bunch of work, and then find themselves mystified that their changes did not seem to be taking effect, due to a mismatch between the environment of their development tools and the shells where test commands were being run.

Combinator began as a set of idioms and shell scripts and has evolved into a set of Python tools which enforce a simple workflow for using SVN and Python together to work on projects that use branches to gather changes together while eliminating common errors.

== Download ==

Combinator is in the Divmod repository.

If you want to use it without the rest of the Divmod projects, see the CombinatorTutorial.

== Use ==

Start with [source:trunk/Combinator/README.txt README.txt] to get your environment set up.

CombinatorTutorial is a guide to typical Combinator use including setting up an SVN repository to play with.

Reading about [wiki:UltimateQualityDevelopmentSystem our development process] is likely to give you some insight into how it's intended to be used.

=== chbranch ===

=== mkbranch ===

=== unbranch ===
","it is called a shell game",0
1109,56,1184103150.26814,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, Opera 9 and Camino ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.18.tar.gz?format=raw Latest release - 0.9.18]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': (take a look at [http://forms-project.pollenation.net/ formal] for an alternate form library) For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
 * [wiki:DivmodNevow/ApacheProxy Putting Nevow Page under Apache Proxy]
 * [http://oubiwann.blogspot.com/2007/03/genshi-templates-in-nevow.html Using Nevow with Genshi templates]
 * [wiki:DivmodNevow/Storm Using the Storm ORM with Nevow]

 '''Bleeding Docs''' - 
 ''SURGEON GENERAL’S WARNING'': Reading the docs listed below pertain to code that has not yet been released and may cause Lung Cancer, Heart Disease, Emphysema, and Pregnancy complications. 
   [wiki:DivmodNevow/ContextRemoval Context Removal] - Conversion steps for moving from {{{context}}}-based Nevow code to {{{context}}}-less code.

== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
",',0
1110,1,1184103209.52989,oubiwann,198.49.126.204,"= Tutorial: Using Storm with Nevow =

This tutorial is forth-coming and planned for release sometime in the first half of August.

Stay tuned!

",',0
1111,30,1184162110.43865,dav,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= Goals =

(Put something here)

= Tutorial =

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

  * [wiki:DivmodNevow/Athena/Emacs Emacs]

== Simple LiveElement demo ==

Subclass {{{nevow.athena.LiveElement}}} and provide a {{{docFactory}}} which uses the {{{liveElement}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myElement'))])

    def render_myElement(self, ctx, data):
        f = MyElement()
        f.setFragmentParent(self)
        return ctx.tag[f]

    def child_(self, ctx):
        return MyPage()
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver
site = appserver.NevowSite(MyPage())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myelement.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===
Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{nevow/plugins/}}} ([http://twistedmatrix.com/projects/core/documentation/howto/plugin.html the Twisted plugin documentation] describes where else you can put it, with the exception that Nevow plugins should be placed beneath a {{{nevow}}} directory as opposed to a {{{twisted}}} directory).


In the JavaScript source file (in this case, {{{mymodule.js}}}), import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class (notice the module name that was defined in the plugin file):

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.methods(
    function echo(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Define the JavaScript class which will correspond to your {{{LiveElement}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))

    def __init__(self, *a, **kw):
        super(MyElement, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement'))[
        T.input(type='submit', value='Push me', onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyElement}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyElement(athena.LiveElement):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument
    athena.expose(echo)
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myelement.tac?format=raw myelement.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

= Implementation =

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

= Tickets =
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].",',0
1112,1,1184255842.19559,kgi,198.49.126.204,"= Nevow Tutorial =

== Preamble ==

Whenever I don't do any Nevow stuff for a while I always forget everything. I'm going to try and document the basics in an accessible way here so I can always bring myself up to speed quickly each time. I'm also going to make it into a simple 'quickstart' document for those who want to use Nevow.

This is a work in progress, by someone who is not a Nevow guru. Do not rely on it until a guru has cast His eye on it. I'm also simultaneously learning the wiki formatting, so have patience.

== About Nevow ==

Nevow is a relatively low-level framework for constructing web applications. It is built on top of Twisted's HTTP server, twisted.web, and a compatibility layer will probably be made available when twisted.web2 is released. The reader is assumed to have at least a basic understanding of Twisted.

Writing documentation for Nevow and Twisted in general can be hard because so much needs to be explained before anything can be seen to work. This tutorial attempts to avoid that and wade right in with complete, runnable code snippets. This will mean additional verbosity, and it will also mean that certain concepts will be introduced The Wrong Way first, before The Right Way is introduced.

== Getting Started ==

{{{
#!python
class Test:
    def __init__(self):
        print 'Hello World'
if __name__ == '__main__':
   Test()
}}}",',0
1113,2,1184257103.15636,kgi,198.49.126.204,"= Nevow Tutorial =

== Preamble ==

Whenever I don't do any Nevow stuff for a while I always forget everything. I'm going to try and document the basics in an accessible way here so I can always bring myself up to speed quickly each time. I'm also going to make it into a simple 'quickstart' document for those who want to use Nevow.

This is a work in progress, by someone who is not a Nevow guru. Do not rely on it until a guru has cast His eye on it. I'm also simultaneously learning the wiki formatting, so have patience.

== About Nevow ==

Nevow is a relatively low-level framework for constructing web applications. It is built on top of Twisted's HTTP server, twisted.web, and a compatibility layer will probably be made available when twisted.web2 is released. The reader is assumed to have at least a basic understanding of Twisted.

Writing documentation for Nevow and Twisted in general can be hard because so much needs to be explained before anything can be seen to work. This tutorial attempts to avoid that and wade right in with complete, runnable code snippets. This will mean additional verbosity, and it will also mean that certain concepts will be introduced The Wrong Way first, before The Right Way is introduced.

== Getting Started ==

{{{
#!python
######################################################################
# Run using 'twistd -noy file.tac', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
# Don't do it this way. Better ways are coming.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend

class MyPage ( rend.Page ):

    def renderHTTP ( self, ctx ):
        html = \
             '<html>' + \
             '<head><title>'Nevow Tutorial'</title></head>' + \
             '<body>Hi there</body></html>'
        return html

######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo1' )
port        = 8080
res         = MyPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}

Note that this is technically a {{{tac}}} file; that is, it should conventionally be save as {{{file.tac}}} rather than {{{file.py}}}.

A few points about this simple program:

  * {{{rend.Page}}} is probably the most basic building block of Nevow;
  * {{{rend.Page}}} has a method, {{{renderHTTP()}}} the renders a request for a page into the result of that request.
  * There are simpler ways of doing the boilerplate, but this is more or less the right way. You can ignore how it works for the time being.

For those thirsty for extra knowledge, {{{rend.Page}}} implements the {{{IResource}}} interface. You can read about it at
http://www.python.net/crew/mwh/nevowapi/nevow.rend.Page.html and at http://www.python.net/crew/mwh/nevowapi/nevow.inevow.IResource.html
",',0
1114,3,1184257434.4258,kgi,198.49.126.204,"= Nevow Tutorial =

== Preamble ==

Whenever I don't do any Nevow stuff for a while I always forget everything. I'm going to try and document the basics in an accessible way here so I can always bring myself up to speed quickly each time. I'm also going to make it into a simple 'quickstart' document for those who want to use Nevow.

This is a work in progress, by someone who is not a Nevow guru. Do not rely on it until a guru has cast His eye on it. I'm also simultaneously learning the wiki formatting, so have patience.

== About Nevow ==

Nevow is a relatively low-level framework for constructing web applications. It is built on top of Twisted's HTTP server, twisted.web, and a compatibility layer will probably be made available when twisted.web2 is released. The reader is assumed to have at least a basic understanding of Twisted.

Writing documentation for Nevow and Twisted in general can be hard because so much needs to be explained before anything can be seen to work. This tutorial attempts to avoid that and wade right in with complete, runnable code snippets. This will mean additional verbosity, and it will also mean that certain concepts will be introduced The Wrong Way first, before The Right Way is introduced.

== Getting Started ==

{{{
#!python
######################################################################
# Run using 'twistd -noy file.tac', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
# Don't do it this way. Better ways are coming.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend

class MyPage ( rend.Page ):

    def renderHTTP ( self, ctx ):
        html = \
             '<html>' + \
             '<head><title>'Nevow Tutorial'</title></head>' + \
             '<body>Hi there</body></html>'
        return html

######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo1' )
port        = 8080
res         = MyPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}

Note that this is technically a {{{tac}}} file; that is, it should conventionally be save as {{{file.tac}}} rather than {{{file.py}}}.

A few points about this simple program:

  * {{{rend.Page}}} is probably the most basic building block of Nevow;
  * {{{rend.Page}}} has a method, {{{renderHTTP()}}} the renders a request for a page into the result of that request.
  * There are simpler ways of doing the boilerplate, but this is more or less the right way. You can ignore how it works for the time being.

For those thirsty for extra knowledge, {{{rend.Page}}} implements the {{{IResource}}} interface. You can read about it at
http://www.python.net/crew/mwh/nevowapi/nevow.rend.Page.html and at http://www.python.net/crew/mwh/nevowapi/nevow.inevow.IResource.html

Once you're happy with this, proceed onto DivmodNevow/TutorialTwo
",',0
1115,1,1184258177.26068,kgi,198.49.126.204,"= Nevow Tutorial =

== Better HTML Generation using Stan ==

{{{
#!python
######################################################################
# Run using 'twistd -noy file.py', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
# Don't do it this way yet. Even better ways are coming.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend
from nevow               import loaders
from nevow               import tags as T
from nevow               import flat

class MyPage ( rend.Page ):

    def renderHTTP ( self, ctx ):
        s = T.html [ T.head ( title = 'Nevow Tutorial' ),
                     T.body [ 'Hi there' ] ]
        return flat.flatten ( s )

######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo2' )
port        = 8080
res         = MyPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}

This introduces Stan, a way of expressing HTML as a series of nested python expressions. It has the advantage of generating well-formed HTML, in that it guarantees that closing tags are correctly generated.

It is well worth playing around with Stan to see some of its features. In general, stan is structured as follows:

  * Square brackets transform to content surrounded by a tag;
  * Parentheses transform to attributes within the tags;

",',0
1116,2,1184258194.59899,kgi,198.49.126.204,"= Nevow Tutorial =

== Better HTML Generation using Stan ==

{{{
#!python
######################################################################
# Run using 'twistd -noy file.py', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
# Don't do it this way yet. Even better ways are coming.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend
from nevow               import loaders
from nevow               import tags as T
from nevow               import flat

class MyPage ( rend.Page ):

    def renderHTTP ( self, ctx ):
        s = T.html [ T.head ( title = 'Nevow Tutorial' ),
                     T.body [ 'Hi there' ] ]
        return flat.flatten ( s )

######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo2' )
port        = 8080
res         = MyPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}

This introduces Stan, a way of expressing HTML as a series of nested python expressions. It has the advantage of generating well-formed HTML, in that it guarantees that closing tags are correctly generated.

It is well worth playing around with Stan to see some of its features. In general, stan is structured as follows:

  * Square brackets transform to content surrounded by a tag;
  * Parentheses transform to attributes within the tags;

More to follow. I promise.",',0
1117,3,1184270878.26372,kgi,198.49.126.204,,,
1118,4,1184270955.31029,kgi,198.49.126.204,"= Nevow Tutorial =

== Better HTML Generation using Stan ==

Be aware that this is still just introductory stuff: it's not a recommended way of doing it.

{{{
#!python
######################################################################
# Run using 'twistd -noy file.py', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
# Don't do it this way yet. Even better ways are coming.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend
from nevow               import loaders
from nevow               import tags as T
from nevow               import flat

class MyPage ( rend.Page ):

    def renderHTTP ( self, ctx ):
        s = T.html [ T.head ( title = 'Nevow Tutorial' ),
                     T.body [ 'Hi there' ] ]
        return flat.flatten ( s )

######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo2' )
port        = 8080
res         = MyPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}

This introduces Stan, a way of expressing HTML as a series of nested python expressions. It has the advantage of generating well-formed HTML, in that it guarantees that closing tags are correctly generated.

It is well worth playing around with Stan to see some of its features. In general, stan is structured as follows:

  * Square brackets transform to content surrounded by a tag;
  * Parentheses transform to attributes within the tags;
  * Lists are flattened to be adjacent elements;

You can try out various things using {{{nevow.flat.flatten}}}, which is useful for experimenting with Stan as it just prints out a string so you don't need to bother with creating complete documents. For example:

{{{
#!python
from nevow               import tags as T
from nevow               import flat
from nevow               import entities


s1 = T.div ( _class = 'foo' ) [ T.a ( href = 'bar' ) [ 'Hi' ] ]
print flat.flatten ( s1 )

s2 = [ T.h1 [ 'This is a heading' ], T.h2 [ 'This is a subheading' ], T.p [ 'This is a paragraph' ] ]
print flat.flatten ( s2 )

s3 = [ 'Some text', entities.emsp, 'Some more text' ]
print flat.flatten ( s3 )
}}}

which will print:

{{{
<div class='foo'><a href='bar'>Hi</a></div>
<h1>This is a heading</h1><h2>This is a subheading</h2><p>This is a paragraph</p>
Some text&#8195;Some more text
}}}

Note the following:

  * You can specify pretty much arbitrary HTML attributes inside the parentheses;
  * These are attributes are actually keyword arguments, so they are unquoted;
  * {{{class}}} and {{{id}}} are Python reserved words, however, so you have to use {{{_class}}} and {{{_id}}}.
  * HTML entities are available in {{{nevow.entities}}}

If you're happy with this you can go on to DivmodNevow/TutorialThree",',0
1119,1,1184271091.28131,kgi,198.49.126.204,"= Nevow Tutorial =

== Building a Page Hierarchy ==

Pending
",',0
1120,1,1184274700.10074,kgi,198.49.126.204,"= Nevow Tutorial =

== Accessing Page Children ==

URLs resemble a hierarchy; for example, in the URL {{{http://example.com/foo/bar/baz.html}}}, the HTML page {{{baz.html}}} can be considered to be a child of the path {{{/foo/bar}}}.

Note that Nevow gurus will point out that many other things other than HTML pages can exist at a particular URI and that the correct term is actually a 'resource', but we will gloss over that fact for the time being.

As it happens, {{{childFactory()}}} is only one of several methods for accessing page children. We will now examine these in turn; the details are available at http://starship.python.net/crew/mwh/nevowapi/nevow.rend.ChildLookupMixin.html#locateChild

The main ways of accessing children of a Page are:

  * defining a class attribute called {{{children}}}, a dict of names to page objects;
  * defining a method called {{{child_}}}''name''{{{()}}} that returns a page object;
  * defining a method called {{{childFactory()}}} that returns a page object;

These approaches are implemented in the default implementation of {{{locateChild()}}}; this gives rise to a further method of accessing children:

  * redefining {{{locateChild()}}}

However, it is usually possible to get the result you want using the default implementation and using one of the other methods.

''Examples to follow''

",',0
1121,2,1184275199.885,kgi,198.49.126.204,"= Nevow Tutorial =

== Building a Page Hierarchy ==

Now we introduce a couple of more advanced concepts:

{{{
#!python
######################################################################
# Run using 'twistd -noy file.tac', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
# Don't do it this way. Better ways are coming.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend
from nevow               import loaders
from nevow               import tags as T

class SubPage ( rend.Page ):
    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Sub Page' ),
                 T.body [ T.h1 [ 'This is a Sub Page' ],
                          T.p [ 'I lack much of interest.' ]
                          ]
                 ]
        )
        
class MainPage ( rend.Page ):

    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Main Page' ),
                 T.body [ T.h1 [ 'This is the Main Page' ],
                          T.p [ 'However, try going ',
                                T.a ( href = 'sub' ) [ 'here' ]
                                ]
                          ]
                 ]
        )

    def childFactory ( self, ctx, name ):
        return SubPage()
    
######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo' )
port        = 8080
res         = MainPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}

Note the following:

  * We no longer use {{{renderHTTP()}}} to generate the page content;
  * Instead, a class attribute {{{docFactory}}} defines the page content;
  * A method {{{childFactory()}}} is used to access the children of a page;

Play around with this example until you're comfortable with it, then go on to DivmodTutorial/TutorialFour
",',0
1122,3,1184275376.4002,kgi,198.49.126.204,"= Nevow Tutorial =

== Building a Page Hierarchy ==

Now we introduce a couple of more advanced concepts:

{{{
#!python
######################################################################
# Run using 'twistd -noy file.tac', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
# Don't do it this way. Better ways are coming.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend
from nevow               import loaders
from nevow               import tags as T

class SubPage ( rend.Page ):
    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Sub Page' ),
                 T.body [ T.h1 [ 'This is a Sub Page' ],
                          T.p [ 'I lack much of interest.' ]
                          ]
                 ]
        )
        
class MainPage ( rend.Page ):

    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Main Page' ),
                 T.body [ T.h1 [ 'This is the Main Page' ],
                          T.p [ 'However, try going ',
                                T.a ( href = 'sub' ) [ 'here' ]
                                ]
                          ]
                 ]
        )

    def childFactory ( self, ctx, name ):
        return SubPage()
    
######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo' )
port        = 8080
res         = MainPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}

Note the following:

  * We no longer use {{{renderHTTP()}}} to generate the page content;
  * Instead, a class attribute {{{docFactory}}} defines the page content;
  * A method {{{childFactory()}}} is used to access the children of a page;

Play around with this example until you're comfortable with it, then go on to DivmodNevow/TutorialFour
",',0
1123,2,1184320999.0215,kgi,198.49.126.204,,,
1124,1,1184324077.77143,kgi,198.49.126.204,"= Nevow Tutorial =

== Using {{{child_}}}''name''{{{()}}} Methods ==

{{{
#!python
######################################################################
# Run using 'twistd -noy file.tac', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend
from nevow               import loaders
from nevow               import tags as T

class SubPage ( rend.Page ):

    def __init__ ( self, *args, **kwargs ):
        rend.Page.__init__ ( self, *args, **kwargs )
        self.viewed = 0;
        self.docFactory = self.makeDocFactory()

    def render_content ( self, ctx, data ):
        self.viewed += 1
        return 'I have been viewed %d times.' % ( self.viewed, )

    def makeDocFactory ( self ):
        return loaders.stan (
            T.html [ T.head ( title = 'Sub Page' ),
                     T.body [ T.h1 [ 'This is a Sub Page' ],
                              T.p ( render = T.directive ( 'content' ) )
                     ]
                   ]
            )


class MainPage ( rend.Page ):

    def __init__ ( self, *args, **kwargs ):
        rend.Page.__init__ ( self, *args, **kwargs )
        self.foopage = SubPage()
        self.barpage = SubPage()


    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Main Page' ),
                 T.body [ T.h1 [ 'This is the Main Page' ],
                          T.p [ 'Try going to the pages ',
                                T.a ( href = 'foo' ) [ 'foo' ],
                                ' or ',
                                T.a ( href = 'bar' ) [ 'bar' ],
                                ],
                          T.p [ 'Don't try going ',
                                T.a ( href = 'baz' ) [ 'here' ],
                                ' as it doesn't exist.'
                                ]
                          ]
                 ]
        )


    def child_foo ( self, ctx ):
        return self.foopage

    def child_bar ( self, ctx ):
        return self.barpage

######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo' )
port        = 8080
res         = MainPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}

This example does the page lookup differently from the previous examples, and it has also slipped in a few new features for the eagle-eyed:

  * Instead of a {{{children}}} dictionary the {{{MainPage}}} class now has two methods, {{{child_foo()}}} and {{{child_bar()}}} that return the pages;
  * The pages are stored on {{{self}}}, so the same object is returned from the method each time a page is accessed. Note that this was also the case in the {{{children}}}-dict example, but not in some previous examples, where they were instantiated on demand.
  * {{{SubPage}}} creates and assigns a {{{docFactory}}} in the constructor rather than a class attribute, just to show that it's possible;
  * Importantly, {{{SubPage}}} now stores ''state'': each time it is accessed, it reports the number of time the page has been viewed;

Don't worry too much about the last point; that will be covered soon. It's just a little taster to show off some of Nevow's more advanced features.

Proceed on to DivmodNevow/TutorialSix.
",',0
1125,1,1184324400.76627,kgi,198.49.126.204,"
= Nevow Tutorial =

",',0
1126,4,1184324568.03096,kgi,198.49.126.204,"= Nevow Tutorial =

== Building a Page Hierarchy ==

URLs resemble a hierarchy; for example, in the URL {{{http://example.com/foo/bar/baz.html}}}, the HTML page {{{baz.html}}} can be considered to be a child of the path {{{/foo/bar}}}.

Note that Nevow gurus will point out that many other things other than HTML pages can exist at a particular URI and that the correct term is actually a 'resource', but we will gloss over that fact for the time being.

As it happens, {{{childFactory()}}} is only one of several methods for accessing page children. We will now examine these in turn; the details are available at http://starship.python.net/crew/mwh/nevowapi/nevow.rend.ChildLookupMixin.html#locateChild

The main ways of accessing children of a Page are:

  * defining a method called {{{childFactory()}}} that returns a page object;
  * defining a class attribute called {{{children}}}, a dict of names to page objects;
  * defining a method called {{{child_}}}''name''{{{()}}} that returns a page object;

These approaches are implemented in the default implementation of {{{locateChild()}}}; this gives rise to a further method of accessing children:

  * redefining {{{locateChild()}}}

However, it is usually possible to get the result you want using the default implementation and using one of the other methods.

Let's look at each of these examples in turn.

== Using {{{childFactory()}}} ==

{{{
#!python
######################################################################
# Run using 'twistd -noy file.tac', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
# Don't do it this way. Better ways are coming.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend
from nevow               import loaders
from nevow               import tags as T

class SubPage ( rend.Page ):
    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Sub Page' ),
                 T.body [ T.h1 [ 'This is a Sub Page' ],
                          T.p [ 'I lack much of interest.' ]
                          ]
                 ]
        )
        
class MainPage ( rend.Page ):

    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Main Page' ),
                 T.body [ T.h1 [ 'This is the Main Page' ],
                          T.p [ 'However, try going ',
                                T.a ( href = 'sub' ) [ 'here' ]
                                ]
                          ]
                 ]
        )

    def childFactory ( self, ctx, name ):
        return SubPage()
    
######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo' )
port        = 8080
res         = MainPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}

Note the following:

  * We no longer use {{{renderHTTP()}}} to generate the page content;
  * Instead, a class attribute {{{docFactory}}} defines the page content;
  * A method {{{childFactory()}}} is used to access the children of a page;

Play around with this example until you're comfortable with it, then go on to DivmodNevow/TutorialFour
",',0
1127,5,1184324840.79532,kgi,198.49.126.204,"= Nevow Tutorial =

== Building a Page Hierarchy ==

URLs resemble a hierarchy; for example, in the URL {{{http://example.com/foo/bar/baz.html}}}, the HTML page {{{baz.html}}} can be considered to be a child of the path {{{/foo/bar}}}.

Note that Nevow gurus will point out that many other things other than HTML pages can exist at a particular URI and that the correct term is actually a 'resource', but we will gloss over that fact for the time being.

As it happens, {{{childFactory()}}} is only one of several methods for accessing page children. We will now examine these in turn; the details are available at http://starship.python.net/crew/mwh/nevowapi/nevow.rend.ChildLookupMixin.html#locateChild

The main ways of accessing children of a Page are:

  * defining a method called {{{childFactory()}}} that returns a page object;
  * defining a class attribute called {{{children}}}, a dict of names to page objects;
  * defining a method called {{{child_}}}''name''{{{()}}} that returns a page object;

These approaches are implemented in the default implementation of {{{locateChild()}}}; this gives rise to a further method of accessing children:

  * redefining {{{locateChild()}}}

However, it is usually possible to get the result you want using the default implementation and using one of the other methods.

Let's look at each of these examples in turn.

== Using {{{childFactory()}}} ==

{{{
#!python
######################################################################
# Run using 'twistd -noy file.tac', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
# Don't do it this way. Better ways are coming.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend
from nevow               import loaders
from nevow               import tags as T

class SubPage ( rend.Page ):
    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Sub Page' ),
                 T.body [ T.h1 [ 'This is a Sub Page' ],
                          T.p [ 'I lack much of interest.' ]
                          ]
                 ]
        )
        
class MainPage ( rend.Page ):

    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Main Page' ),
                 T.body [ T.h1 [ 'This is the Main Page' ],
                          T.p [ 'However, try going ',
                                T.a ( href = 'sub' ) [ 'here' ]
                                ]
                          ]
                 ]
        )

    def childFactory ( self, ctx, name ):
        return SubPage()
    
######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo' )
port        = 8080
res         = MainPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}

Note the following:

  * We no longer use {{{renderHTTP()}}} to generate the page content;
  * Instead, a class attribute {{{docFactory}}} defines the page content;
  * A method {{{childFactory()}}} is used to access the children of a page;
  * The {{{childFactory()}}} is a catch-all: ''any'' child that is not found through another method causes {{{childFactory()}}} to be called;
  * As a result of this, you can access {{{SubPage}}} through any path, not just {{{sub}}};
  * {{{childFactory()}}} may, however, choose not to return a page if it determines that one should not 'exist' at that location.

Play around with this example until you're comfortable with it, then go on to DivmodNevow/TutorialFour
",',0
1128,3,1184324949.20003,kgi,198.49.126.204,"= Nevow Tutorial =

== Using the {{{children}}} class attribute ==

{{{
#!python
######################################################################
# Run using 'twistd -noy file.tac', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend
from nevow               import loaders
from nevow               import tags as T

class SubPage ( rend.Page ):
    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Sub Page' ),
                 T.body [ T.h1 [ 'This is a Sub Page' ],
                          T.p [ 'I lack much of interest.' ],
                          T.p [ 'You might find ',
                                T.a ( href = '/' ) [ 'this' ],
                                ' more interesting' ],
                          ]
                 ]
        )
        
class MainPage ( rend.Page ):
    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Main Page' ),
                 T.body [ T.h1 [ 'This is the Main Page' ],
                          T.p [ 'Try going to the pages ',
                                T.a ( href = 'foo' ) [ 'foo' ],
                                ' or ',
                                T.a ( href = 'bar' ) [ 'bar' ],
                                ],
                          T.p [ 'Don't try going ',
                                T.a ( href = 'baz' ) [ 'here' ],
                                ' as it doesn't exist.'
                                ]
                          ]
                 ]
        )

    children = {
        'foo' : SubPage(),
        'bar' : SubPage()
        }
    
######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo' )
port        = 8080
res         = MainPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}

Here we see a main page with two child pages, {{{foo}}} and {{{bar}}}. An attempt to visit a child page that doesn't have an entry in the {{{children}}} dictionary fails.

Of course, ''any'' page can have children, not just the main page. Try modifying the example above to add another page below the {{{SubPage}}} objects.

Continue on to DivmodNevow/TutorialFive.
",',0
1129,2,1184327789.66119,kgi,198.49.126.204,"= Nevow Tutorial =

== Redefining {{{locateChild()}}} ==

Until now, each page has been responsible for accessing its direct children.

However, many web applications take the approach of encoding query parameters directly into URLs; this has the advantage of being easy to understand and easy to bookmark. An example of this might be:

  {{{http://examplebank.com/statements/58776376423/2006/11/byAmount/}}}

Ignoring authentication and security issues, this fictitious URL might point to an on-line statement for account number 58776376423 covering the month of November 2006, with the transactions sorted by amount rather than transaction size.

However, the bank may have millions of accounts, and each one of these may have hundreds of months of history. Taking the approach that each unique path within a URL refers to a resource starts to become unfeasible when the possible number of URL combinations is huge.

Nevow handles this by allowing you to redefine a page's master lookup mechanism, {{{locateChild()}}}. This takes ''all'' path elements and returns a page and any path elements that it chose not to consume.

For example, consider the following example:

{{{
#!python
######################################################################
# Run using 'twistd -noy file.tac', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend
from nevow               import loaders
from nevow               import tags as T
from nevow               import inevow

class AccountPage ( rend.Page ):

    def render_title ( self, ctx, data ):
        request = inevow.IRequest ( ctx )
        account_number = request.prepath [ 1 ]
        return 'Account Summary for Account %s' % ( account_number, )

    def render_body ( self, ctx, data ):
        request = inevow.IRequest ( ctx )
        account_number = request.prepath [ 1 ]
        year           = request.prepath [ 2 ]
        month          = request.prepath [ 3 ]
        return 'Account Balance at month end %s %s was %d' % \
          ( year, month,
            int ( account_number ) + ( int ( year ) * int ( month ) ) )

    docFactory = loaders.stan (
        T.html [ T.head [ T.title [ render_title ] ],
                 T.body [ render_body ]
        ]
    )

class ReportsPage ( rend.Page ):

    def locateChild ( self, ctx, segments ):
        return ( AccountPage(), () )


class MainPage ( rend.Page ):

    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Main Page' ),
                 T.body [ T.h1 [ 'This is the Main Page' ],
                          T.p [ 'Account Summaries:' ],
                          T.p [ T.a ( href = '/reports/123456/2007/01' ) [ 'Sum$
                          T.p [ T.a ( href = '/reports/234567/2006/02' ) [ 'Sum$
                          T.p [ T.a ( href = '/reports/345678/2005/03' ) [ 'Sum$
                 ],
               ]
        )

    child_reports = ReportsPage()

######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo' )
port        = 8080
res         = MainPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}
",',0
1130,3,1184328130.30642,kgi,198.49.126.204,"= Nevow Tutorial =

== Redefining {{{locateChild()}}} ==

Until now, each page has been responsible for accessing its direct children.

However, many web applications take the approach of encoding query parameters directly into URLs; this has the advantage of being easy to understand and easy to bookmark. An example of this might be:

  {{{http://examplebank.com/statements/58776376423/2006/11/byAmount/}}}

Ignoring authentication and security issues, this fictitious URL might point to an on-line statement for account number 58776376423 covering the month of November 2006, with the transactions sorted by amount rather than transaction size.

However, the bank may have millions of accounts, and each one of these may have hundreds of months of history. Taking the approach that each unique path within a URL refers to a resource starts to become unfeasible when the possible number of URL combinations is huge.

Nevow handles this by allowing you to redefine a page's master lookup mechanism, {{{locateChild()}}}. This takes ''all'' path elements and returns a page and any path elements that it chose not to consume.

For example, consider the following example:

{{{
#!python
######################################################################
# Run using 'twistd -noy file.tac', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend
from nevow               import loaders
from nevow               import tags as T
from nevow               import inevow

class AccountPage ( rend.Page ):

    def render_title ( self, ctx, data ):
        request = inevow.IRequest ( ctx )
        account_number = request.prepath [ 1 ]
        return 'Account Summary for Account %s' % ( account_number, )

    def render_body ( self, ctx, data ):
        request = inevow.IRequest ( ctx )
        account_number = request.prepath [ 1 ]
        year           = request.prepath [ 2 ]
        month          = request.prepath [ 3 ]
        return 'Account Balance at month end %s %s was %d' % \
          ( year, month,
            int ( account_number ) + ( int ( year ) * int ( month ) ) )

    docFactory = loaders.stan (
        T.html [ T.head [ T.title [ render_title ] ],
                 T.body [ render_body ]
        ]
    )

class ReportsPage ( rend.Page ):

    def locateChild ( self, ctx, segments ):
        return ( AccountPage(), () )


class MainPage ( rend.Page ):

    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Main Page' ),
                 T.body [ T.h1 [ 'This is the Main Page' ],
                          T.p [ 'Account Summaries:' ],
                          T.p [ T.a ( href = '/reports/123456/2007/01' ) [ 'Sum$
                          T.p [ T.a ( href = '/reports/234567/2006/02' ) [ 'Sum$
                          T.p [ T.a ( href = '/reports/345678/2005/03' ) [ 'Sum$
                 ],
               ]
        )

    child_reports = ReportsPage()

######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo' )
port        = 8080
res         = MainPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}

Note the following:

  * The important change is the {{{locateChild()}}} method of {{{ReportsPage}}};
  * {{{MainPage}}} and {{{ReportsPage}}} are still accessed through conventional child lookups;
  * Any path under {{{/reports/}}} is consumed in its entirety by the {{{locateChild()}}} method of {{{ReportsPage}}};
  * For consistency in this simple example, the account balances are derived from the account number and the date; in a real application one hopes it would be retrieved from some sort of database;
  * The titles and balances in {{{AccountPage}}} are calculated by inserting callables into the Stan; Stan is clever enough to know that it needs to call these and insert the results into the generated HTML.
",',0
1131,4,1184328205.27083,kgi,198.49.126.204,"= Nevow Tutorial =

== Redefining {{{locateChild()}}} ==

Until now, each page has been responsible for accessing its direct children.

However, many web applications take the approach of encoding query parameters directly into URLs; this has the advantage of being easy to understand and easy to bookmark. An example of this might be:

  {{{http://examplebank.com/statements/58776376423/2006/11/byAmount/}}}

Ignoring authentication and security issues, this fictitious URL might point to an on-line statement for account number 58776376423 covering the month of November 2006, with the transactions sorted by amount rather than transaction size.

However, the bank may have millions of accounts, and each one of these may have hundreds of months of history. Taking the approach that each unique path within a URL refers to a resource starts to become unfeasible when the possible number of URL combinations is huge.

Nevow handles this by allowing you to redefine a page's master lookup mechanism, {{{locateChild()}}}. This takes ''all'' path elements and returns a page and any path elements that it chose not to consume.

For example, consider the following example. Be aware that heavy reliance on the {{{ctx}}} variable is discouraged as it is deprecated; however, certain operations still require it.

{{{
#!python
######################################################################
# Run using 'twistd -noy file.tac', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend
from nevow               import loaders
from nevow               import tags as T
from nevow               import inevow

class AccountPage ( rend.Page ):

    def render_title ( self, ctx, data ):
        request = inevow.IRequest ( ctx )
        account_number = request.prepath [ 1 ]
        return 'Account Summary for Account %s' % ( account_number, )

    def render_body ( self, ctx, data ):
        request = inevow.IRequest ( ctx )
        account_number = request.prepath [ 1 ]
        year           = request.prepath [ 2 ]
        month          = request.prepath [ 3 ]
        return 'Account Balance at month end %s %s was %d' % \
          ( year, month,
            int ( account_number ) + ( int ( year ) * int ( month ) ) )

    docFactory = loaders.stan (
        T.html [ T.head [ T.title [ render_title ] ],
                 T.body [ render_body ]
        ]
    )

class ReportsPage ( rend.Page ):

    def locateChild ( self, ctx, segments ):
        return ( AccountPage(), () )


class MainPage ( rend.Page ):

    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Main Page' ),
                 T.body [ T.h1 [ 'This is the Main Page' ],
                          T.p [ 'Account Summaries:' ],
                          T.p [ T.a ( href = '/reports/123456/2007/01' ) [ 'Sum$
                          T.p [ T.a ( href = '/reports/234567/2006/02' ) [ 'Sum$
                          T.p [ T.a ( href = '/reports/345678/2005/03' ) [ 'Sum$
                 ],
               ]
        )

    child_reports = ReportsPage()

######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo' )
port        = 8080
res         = MainPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}

Note the following:

  * The important change is the {{{locateChild()}}} method of {{{ReportsPage}}};
  * {{{MainPage}}} and {{{ReportsPage}}} are still accessed through conventional child lookups;
  * Any path under {{{/reports/}}} is consumed in its entirety by the {{{locateChild()}}} method of {{{ReportsPage}}};
  * For consistency in this simple example, the account balances are derived from the account number and the date; in a real application one hopes it would be retrieved from some sort of database;
  * The titles and balances in {{{AccountPage}}} are calculated by inserting callables into the Stan; Stan is clever enough to know that it needs to call these and insert the results into the generated HTML.
",',0
1132,6,1184330708.52661,kgi,198.49.126.204,"= Nevow Tutorial =

== Building a Page Hierarchy ==

URLs resemble a hierarchy; for example, in the URL {{{http://example.com/foo/bar/baz.html}}}, the HTML page {{{baz.html}}} can be considered to be a child of the path {{{/foo/bar}}}.

Note that Nevow gurus will point out that many other things other than HTML pages can exist at a particular URI and that the correct term is actually a 'resource', but we will gloss over that fact for the time being.

As it happens, there are several methods for accessing page children. We will now examine these in turn; the details are available at http://starship.python.net/crew/mwh/nevowapi/nevow.rend.ChildLookupMixin.html#locateChild

The main ways of accessing children of a Page are:

  * defining a method called {{{childFactory()}}} that returns a page object;
  * defining a class attribute called {{{children}}}, a dict of names to page objects;
  * defining a method called {{{child_}}}''name''{{{()}}} that returns a page object;

These approaches are implemented in the default implementation of {{{locateChild()}}}; this gives rise to a further method of accessing children:

  * redefining {{{locateChild()}}}

However, it is usually possible to get the result you want using the default implementation and using one of the other methods.

Let's look at each of these examples in turn.

== Using {{{childFactory()}}} ==

{{{
#!python
######################################################################
# Run using 'twistd -noy file.tac', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
# Don't do it this way. Better ways are coming.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend
from nevow               import loaders
from nevow               import tags as T

class SubPage ( rend.Page ):
    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Sub Page' ),
                 T.body [ T.h1 [ 'This is a Sub Page' ],
                          T.p [ 'I lack much of interest.' ]
                          ]
                 ]
        )
        
class MainPage ( rend.Page ):

    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Main Page' ),
                 T.body [ T.h1 [ 'This is the Main Page' ],
                          T.p [ 'However, try going ',
                                T.a ( href = 'sub' ) [ 'here' ]
                                ]
                          ]
                 ]
        )

    def childFactory ( self, ctx, name ):
        return SubPage()
    
######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo' )
port        = 8080
res         = MainPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}

Note the following:

  * We no longer use {{{renderHTTP()}}} to generate the page content;
  * Instead, a class attribute {{{docFactory}}} defines the page content;
  * A method {{{childFactory()}}} is used to access the children of a page;
  * The {{{childFactory()}}} is a catch-all: ''any'' child that is not found through another method causes {{{childFactory()}}} to be called;
  * As a result of this, you can access {{{SubPage}}} through any path, not just {{{sub}}};
  * {{{childFactory()}}} may, however, choose not to return a page if it determines that one should not 'exist' at that location.

Play around with this example until you're comfortable with it, then go on to DivmodNevow/TutorialFour
",',0
1133,7,1184330831.72693,kgi,198.49.126.204,,,
1134,4,1184331000.50346,kgi,198.49.126.204,"= Nevow Tutorial =

== Using the {{{children}}} class attribute ==

{{{
#!python
######################################################################
# Run using 'twistd -noy file.tac', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend
from nevow               import loaders
from nevow               import tags as T

class SubPage ( rend.Page ):
    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Sub Page' ),
                 T.body [ T.h1 [ 'This is a Sub Page' ],
                          T.p [ 'I lack much of interest.' ],
                          T.p [ 'You might find ',
                                T.a ( href = '/' ) [ 'this' ],
                                ' more interesting' ],
                          ]
                 ]
        )
        
class MainPage ( rend.Page ):
    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Main Page' ),
                 T.body [ T.h1 [ 'This is the Main Page' ],
                          T.p [ 'Try going to the pages ',
                                T.a ( href = 'foo' ) [ 'foo' ],
                                ' or ',
                                T.a ( href = 'bar' ) [ 'bar' ],
                                ],
                          T.p [ 'Don't try going ',
                                T.a ( href = 'baz' ) [ 'here' ],
                                ' as it doesn't exist.'
                                ]
                          ]
                 ]
        )

    children = {
        'foo' : SubPage(),
        'bar' : SubPage()
        }
    
######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo' )
port        = 8080
res         = MainPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}

Note the following:

  * Instead of a {{{childFactory()}}} method we have an explicit mapping of child path elements to page objects;
  * Two independent child pages, {{{foo}}} and {{{bar}}} have been created. These are persisted in the dictionary; they are not created on demand;
  * An attempt to visit a child page that doesn't have an entry in the {{{children}}} dictionary will fails.

Of course, ''any'' page can have children, not just the main page. Try modifying the example above to add another page below the {{{SubPage}}} objects.

Continue on to DivmodNevow/TutorialFive.
",',0
1135,2,1184331229.97821,kgi,198.49.126.204,"= Nevow Tutorial =

== Using {{{child_}}}''name''{{{()}}} Methods and {{{child_}}}''name'' Attributes ==

{{{
#!python
######################################################################
# Run using 'twistd -noy file.tac', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend
from nevow               import loaders
from nevow               import tags as T

class SubPage ( rend.Page ):

    def __init__ ( self, *args, **kwargs ):
        rend.Page.__init__ ( self, *args, **kwargs )
        self.viewed = 0;
        self.docFactory = self.makeDocFactory()

    def render_content ( self, ctx, data ):
        self.viewed += 1
        return 'I have been viewed %d times.' % ( self.viewed, )

    def makeDocFactory ( self ):
        return loaders.stan (
            T.html [ T.head ( title = 'Sub Page' ),
                     T.body [ T.h1 [ 'This is a Sub Page' ],
                              T.p ( render = T.directive ( 'content' ) )
                     ]
                   ]
            )


class MainPage ( rend.Page ):

    def __init__ ( self, *args, **kwargs ):
        rend.Page.__init__ ( self, *args, **kwargs )
        self.foopage = SubPage()
        self.barpage = SubPage()


    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Main Page' ),
                 T.body [ T.h1 [ 'This is the Main Page' ],
                          T.p [ 'Try going to the pages ',
                                T.a ( href = 'foo' ) [ 'foo' ],
                                ' or ',
                                T.a ( href = 'bar' ) [ 'bar' ],
                                ' or ',
                                T.a ( href = 'baz' ) [ 'baz' ],
                                ],
                          T.p [ 'Don't try going ',
                                T.a ( href = 'baz' ) [ 'here' ],
                                ' as it doesn't exist.'
                                ]
                          ]
                 ]
        )


    def child_foo ( self, ctx ):
        return self.foopage

    def child_bar ( self, ctx ):
        return self.barpage

    child_baz = SubPage()

######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo' )
port        = 8080
res         = MainPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}

This example does the page lookup differently from the previous examples, and it has also slipped in a few new features for the eagle-eyed:

  * Instead of a {{{children}}} dictionary the {{{MainPage}}} class now has two methods, {{{child_foo()}}} and {{{child_bar()}}} that return the pages;
  * The pages are stored on {{{self}}}, so the same object is returned from the method each time a page is accessed. Note that this was also the case in the {{{children}}}-dict example, but not in some previous examples, where they were instantiated on demand.
  * Pages can also be stored on attributes as well as returned by methods; {{{child_baz}}} is such an attribute.
  * {{{SubPage}}} creates and assigns a {{{docFactory}}} in the constructor rather than a class attribute, just to show that it's possible;
  * Importantly, {{{SubPage}}} now stores ''state'': each time it is accessed, it reports the number of time the page has been viewed;

Don't worry too much about the last point; that will be covered soon. It's just a little taster to show off some of Nevow's more advanced features.

Proceed on to DivmodNevow/TutorialSix.
",',0
1136,3,1184331291.21914,kgi,198.49.126.204,"= Nevow Tutorial =

== Using {{{child_}}}''name''{{{()}}} Methods and {{{child_}}}''name'' Attributes ==

{{{
#!python
######################################################################
# Run using 'twistd -noy file.tac', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend
from nevow               import loaders
from nevow               import tags as T

class SubPage ( rend.Page ):

    def __init__ ( self, *args, **kwargs ):
        rend.Page.__init__ ( self, *args, **kwargs )
        self.viewed = 0;
        self.docFactory = self.makeDocFactory()

    def render_content ( self, ctx, data ):
        self.viewed += 1
        return 'I have been viewed %d times.' % ( self.viewed, )

    def makeDocFactory ( self ):
        return loaders.stan (
            T.html [ T.head ( title = 'Sub Page' ),
                     T.body [ T.h1 [ 'This is a Sub Page' ],
                              T.p ( render = T.directive ( 'content' ) )
                     ]
                   ]
            )


class MainPage ( rend.Page ):

    def __init__ ( self, *args, **kwargs ):
        rend.Page.__init__ ( self, *args, **kwargs )
        self.foopage = SubPage()
        self.barpage = SubPage()


    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Main Page' ),
                 T.body [ T.h1 [ 'This is the Main Page' ],
                          T.p [ 'Try going to the pages ',
                                T.a ( href = 'foo' ) [ 'foo' ],
                                ' or ',
                                T.a ( href = 'bar' ) [ 'bar' ],
                                ' or ',
                                T.a ( href = 'baz' ) [ 'baz' ],
                                ],
                          T.p [ 'Don't try going ',
                                T.a ( href = 'zzz' ) [ 'here' ],
                                ' as it doesn't exist.'
                                ]
                          ]
                 ]
        )


    def child_foo ( self, ctx ):
        return self.foopage

    def child_bar ( self, ctx ):
        return self.barpage

    child_baz = SubPage()

######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo' )
port        = 8080
res         = MainPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}

This example does the page lookup differently from the previous examples, and it has also slipped in a few new features for the eagle-eyed:

  * Instead of a {{{children}}} dictionary the {{{MainPage}}} class now has two methods, {{{child_foo()}}} and {{{child_bar()}}} that return the pages;
  * The pages are stored on {{{self}}}, so the same object is returned from the method each time a page is accessed. Note that this was also the case in the {{{children}}}-dict example, but not in some previous examples, where they were instantiated on demand.
  * Pages can also be stored on attributes as well as returned by methods; {{{child_baz}}} is such an attribute.
  * {{{SubPage}}} creates and assigns a {{{docFactory}}} in the constructor rather than a class attribute, just to show that it's possible;
  * Importantly, {{{SubPage}}} now stores ''state'': each time it is accessed, it reports the number of time the page has been viewed;

Don't worry too much about the last point; that will be covered soon. It's just a little taster to show off some of Nevow's more advanced features.

Proceed on to DivmodNevow/TutorialSix.
",',0
1137,2,1184745149.38039,oubiwann,198.49.126.204,"= Tutorial: Using Storm with Nevow =

Before a tutorial can be written on how to use storm in Nevow, someone needs to figure out 'best practices for using Storm in asynchronous codebases.' From a chat in #storm on freenode (11 July 2007):
{{{
[5:13pm] dialtone: storm API is fine, one just needs to see if: a) it's thread
                   safe and b) objects returned can be modified in a different 
                   thread
[5:13pm] dialtone: and then committed in another one yet
[5:13pm] radix: dialtone: It is certainly thread-safe, but you should not use 
                   the same Store in multiple threads
[5:14pm] dialtone: how do you do with deferToThread then?
[5:14pm] radix: dialtone: I don't know.
[5:14pm] radix: dialtone: Probably you don't load the objects until you get 
                   into the other thread.
[5:14pm] dialtone: that's sort of a problem probably, unless there's an 
                   alternative solution
[5:15pm] radix: dialtone: Nobody has figured out best practices for using Storm 
                   in asynchronous codebases yet.
[5:15pm] dialtone: ouch :(
[5:15pm] radix: dialtone: (That is, assuming your application actually wants to 
                   make the database operations asynchronous)
[5:16pm] dialtone: I can accept it being synchronous, but run in a different 
                   thread using deferToThread
[5:16pm] radix: dialtone: for example, it would be very reasonable to use Storm 
                   like Axiom: with SQLite, just blocking on database interaction
[5:16pm] dialtone: radix: yes well... but that comes with a lot of restrictions 
                   in itself
[5:17pm] radix: dialtone: I even have a Twisted server which uses Storm to talk 
                   to postgres in a totally blocking manner
[5:17pm] radix: but it's not a very typical server
[5:17pm] dialtone: sqlite doesn't really scale that well with high concurrency 
                   and scaling a shared sqlite instance is pretty hard
[5:17pm] dotz: dialtone: What's wrong with 'ceate a high level API for data 
                   manipulation and retrival, use some rpc mechanism, like pb, 
                   and make the hi-level database backend another process'?
[5:18pm] dialtone: dotz: that' waaay more effort than what I'm currently doing
[5:18pm] radix: dialtone: I'm sure there are some clever things that can be done 
                   to use Storm in asynchronous contexts, and I'm fairly interested 
                   in learning about them
[5:18pm] dotz: dialtone: and what are you currently doing?
[5:18pm] dialtone: as I said: I'm using the query builder from sqlalchemy to build 
                   and execute queries that return resultsets with a dict-like API
[5:19pm] dialtone: I simply write the queries and use the dict-like APi in nevow
[5:19pm] dialtone: and I run the functions in a separate thread with deferToThread
[5:20pm] dialtone: radix: maybe writing a store class that keeps track of which 
                   threads owns which connection and then reuse the connection when 
                   needed
[5:20pm] dialtone: this way you could share the store object and run queries 
                   independently of the context
[5:20pm] radix: dialtone: maybe. I'm not sure it'd be that simple.
}}}",',0
1138,57,1185361811.30923,tarjei,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, Opera 9 and Camino ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.18.tar.gz?format=raw Latest release - 0.9.18]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': (take a look at [http://forms-project.pollenation.net/ formal] for an alternate form library) For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
 * [wiki:DivmodNevow/ApacheProxy Putting Nevow Page under Apache Proxy]
 * [http://oubiwann.blogspot.com/2007/03/genshi-templates-in-nevow.html Using Nevow with Genshi templates]
 * [wiki:DivmodNevow/Storm Using the Storm ORM with Nevow]
 * [wiki:DivmodNevow/FaQ Frequently asked questions]

 '''Bleeding Docs''' - 
 ''SURGEON GENERAL’S WARNING'': Reading the docs listed below pertain to code that has not yet been released and may cause Lung Cancer, Heart Disease, Emphysema, and Pregnancy complications. 
   [wiki:DivmodNevow/ContextRemoval Context Removal] - Conversion steps for moving from {{{context}}}-based Nevow code to {{{context}}}-less code.

== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
","Added faq",0
1139,1,1185362092.91613,tarjei,198.49.126.204,"= FAQ =

== Testing ==
=== How do I make fake context objects? ===
Divmod contains a testutil module that contains a set of ready made classes like !FakeRequest, !FakeSession etc. Use these. 
Example:

{{{
ctx = context.WebContext(tag=page)
ctx.remember(testutil.AccumulatingFakeRequest())
}}}



",',0
1140,31,1185372941.71057,dav,198.49.126.204,"Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= History =

Athena is the best-of-breed approach to developing interactive javascript (AJAX / Comet) applications with DivmodNevow.  It should be noted that it '''supersedes''' previous solutions, such as livepage.  These prior solutions should not be used with Athena development.  Before using Athena, you may want to check out the [wiki:DivmodNevow/Tutorial Nevow tutorial].

= Development Environment =

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

 * [wiki:DivmodNevow/Athena/Emacs Emacs]
 * [http://www.getfirebug.com/ Firebug] - Firefox based javascript debugger

== Simple LiveElement demo ==

Subclass {{{nevow.athena.LiveElement}}} and provide a {{{docFactory}}} which uses the {{{liveElement}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myElement'))])

    def render_myElement(self, ctx, data):
        f = MyElement()
        f.setFragmentParent(self)
        return ctx.tag[f]

    def child_(self, ctx):
        return MyPage()
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver
site = appserver.NevowSite(MyPage())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myelement.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===
Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{nevow/plugins/}}} ([http://twistedmatrix.com/projects/core/documentation/howto/plugin.html the Twisted plugin documentation] describes where else you can put it, with the exception that Nevow plugins should be placed beneath a {{{nevow}}} directory as opposed to a {{{twisted}}} directory).


In the JavaScript source file (in this case, {{{mymodule.js}}}), import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class (notice the module name that was defined in the plugin file):

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.methods(
    function echo(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Define the JavaScript class which will correspond to your {{{LiveElement}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))

    def __init__(self, *a, **kw):
        super(MyElement, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement'))[
        T.input(type='submit', value='Push me', onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyElement}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyElement(athena.LiveElement):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument
    athena.expose(echo)
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myelement.tac?format=raw myelement.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

= Implementation =

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

= Tickets =
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].",',0
1143,1,1185985686.31731,exarkun,198.49.126.204,"Hyperbola is a blogging and forums system, for having discussions about things.

",',0
1144,2,1186070956.87032,oubiwann,198.49.126.204,"= Divmod: Hyperbola =

Hyperbola is a blogging and forums system, for having discussions about things.

== Download ==

    * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Hyperbola/ Hyperbola ",',0
1145,3,1186070975.1685,oubiwann,198.49.126.204,"= Divmod: Hyperbola =

Hyperbola is a blogging and forums system, for having discussions about things.

== Download ==

 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Hyperbola/ Hyperbola ",',0
1146,2,1186685337.99389,pjd,198.49.126.204,"Anvil is Divmod's planned issues tracker.

We have tried Roundup, RT and now Trac and while each of them is great in some ways but they each have some shortcomings. Anvil will be tailored for Divmod's development process and will integrate with QuotientProject so team members have a unified view of their tasks and messages.

Anvil will be built on MantissaProject.

Anvil is a collaborative issue tracker.  Anvil places high value on person-oriented interactions.  It understands ownership, relationships, and the concept that a particular task may have different priorities to different people.  Anvil understands that time passes.  It provides deadlines that loom and alter task priority.  It can summarize and report on task completion over time.  It expects estimates from owners of tasks and can provide feedback for the estimation process based on past performance for individuals.  Anvil understands perspectives.  Tasks are shared among team members, with different views given onto them based on each member's role with respect to that task.  Similarly, plans are shared and merged, and overall or individual schedules can be created from tasks in Anvil.

Some features we want from Anvil:
 * High level view of what's going on and what's coming up e.g. who's working on what
 * Dependencies
 * Task tagging",speling,0
1147,2,1186696853.33437,glyph,198.49.126.204,"== Applications using Divmod infrastructure ==
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game.",',0
1148,9,1186696873.68205,glyph,198.49.126.204,',',0
1149,3,1186696888.36166,glyph,198.49.126.204,',',0
1161,32,1187920388.13496,oubiwann,198.49.126.204,"= Divmod: Nevow: Athena =

Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= History =

Athena is the best-of-breed approach to developing interactive javascript (AJAX / Comet) applications with DivmodNevow.  It should be noted that it '''supersedes''' previous solutions, such as livepage.  These prior solutions should not be used with Athena development.  Before using Athena, you may want to check out the [wiki:DivmodNevow/Tutorial Nevow tutorial].

= Development Environment =

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

 * [wiki:DivmodNevow/Athena/Emacs Emacs]
 * [http://www.getfirebug.com/ Firebug] - Firefox based javascript debugger

== Simple LiveElement demo ==

Subclass {{{nevow.athena.LiveElement}}} and provide a {{{docFactory}}} which uses the {{{liveElement}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myElement'))])

    def render_myElement(self, ctx, data):
        f = MyElement()
        f.setFragmentParent(self)
        return ctx.tag[f]

    def child_(self, ctx):
        return MyPage()
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver
site = appserver.NevowSite(MyPage())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myelement.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===
Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{nevow/plugins/}}} ([http://twistedmatrix.com/projects/core/documentation/howto/plugin.html the Twisted plugin documentation] describes where else you can put it, with the exception that Nevow plugins should be placed beneath a {{{nevow}}} directory as opposed to a {{{twisted}}} directory).


In the JavaScript source file (in this case, {{{mymodule.js}}}), import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class (notice the module name that was defined in the plugin file):

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.methods(
    function echo(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Define the JavaScript class which will correspond to your {{{LiveElement}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))

    def __init__(self, *a, **kw):
        super(MyElement, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement'))[
        T.input(type='submit', value='Push me', onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyElement}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyElement(athena.LiveElement):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument
    athena.expose(echo)
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myelement.tac?format=raw myelement.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

= Implementation =

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

= Tickets =
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].",',0
1162,33,1187920406.2743,oubiwann,198.49.126.204,"= Divmod : Nevow : Athena =

Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

= History =

Athena is the best-of-breed approach to developing interactive javascript (AJAX / Comet) applications with DivmodNevow.  It should be noted that it '''supersedes''' previous solutions, such as livepage.  These prior solutions should not be used with Athena development.  Before using Athena, you may want to check out the [wiki:DivmodNevow/Tutorial Nevow tutorial].

= Development Environment =

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

 * [wiki:DivmodNevow/Athena/Emacs Emacs]
 * [http://www.getfirebug.com/ Firebug] - Firefox based javascript debugger

== Simple LiveElement demo ==

Subclass {{{nevow.athena.LiveElement}}} and provide a {{{docFactory}}} which uses the {{{liveElement}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myElement'))])

    def render_myElement(self, ctx, data):
        f = MyElement()
        f.setFragmentParent(self)
        return ctx.tag[f]

    def child_(self, ctx):
        return MyPage()
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver
site = appserver.NevowSite(MyPage())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myelement.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

=== Customizing Behavior ===
Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{nevow/plugins/}}} ([http://twistedmatrix.com/projects/core/documentation/howto/plugin.html the Twisted plugin documentation] describes where else you can put it, with the exception that Nevow plugins should be placed beneath a {{{nevow}}} directory as opposed to a {{{twisted}}} directory).


In the JavaScript source file (in this case, {{{mymodule.js}}}), import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class (notice the module name that was defined in the plugin file):

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.methods(
    function echo(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Define the JavaScript class which will correspond to your {{{LiveElement}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

=== Invoking Code in the Browser ===

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))

    def __init__(self, *a, **kw):
        super(MyElement, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

=== Invoking Code on the Server ===

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement'))[
        T.input(type='submit', value='Push me', onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyElement}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyElement(athena.LiveElement):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument
    athena.expose(echo)
}}}

Start up the server again and revisit <http://localhost:8080>.

== Download the files for this tutorial: ==

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myelement.tac?format=raw myelement.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

== Testing ==

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

= Implementation =

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

= Tickets =
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].",',0
1163,4,1187920438.03387,oubiwann,198.49.126.204,"= Divmod : Nevow =

== Athena ==

=== Unit Testing ===

''Note: Much of this page documents the current development version of Nevow's testing features, not the current release version.  Make sure you are using the right version of the code if you attempt to make use of this documentation.''

Divmod uses the stand-alone !JavaScript interpreter [http://www.mozilla.org/js/spidermonkey/ SpiderMonkey] to run unit tests on some portions of our !JavaScript sources.  You can find [browser:trunk/Nevow/nevow/test/test_object.js several] [browser:trunk/Nevow/nevow/test/test_deferred.js examples] in the Divmod repository.

These unit tests are valuable: they reveal simple errors, provide a kind of documentation as to the purpose of various functions, and ensure that the code is exercised in as much isolation as is possible.  However, they are not all-encompassing.  After all, they aren't even executed by the same runtime that will be used by ''any'' user to execute them.

{{{nit}}} can also be used for unit testing (see below).

== Functional Testing ==

To account for this, Nevow provides {{{nit}}}, a runner for tests which are designed to be run by an actual browser.  Nit tests are placed in Python source files named with the {{{livetest_}}} prefix.  There are [browser:trunk/Nevow/nevow/test/livetest_athena.py several] [browser:trunk/Mantissa/xmantissa/test/livetest_forms.py examples] [browser:trunk/Mantissa/xmantissa/test/livetest_people.py of this] kind of test in the Divmod repository as well.

If you are familiar with [http://en.wikipedia.org/wiki/XUnit XUnit], the API presented by nit should present few surprises.  The primary interface of interest to test developers is the {{{TestCase}}} class, which is subclassed and extended to define new tests.

=== Server Side ===

{{{nevow.livetrial.testcase.TestCase}}} is the base class for the server-side implementation of test methods.  Subclasses of {{{TestCase}}} define the JavaScript class which will implement the client-side portion of test methods as well as the document which will be used to render them.  {{{TestCase}}} is a {{{nevow.athena.LiveFragment}}} subclass, so it can also define methods which are exposed to the client.

A TestCase might be no more complex than the following:

{{{
#!python
from nevow.livetrial.testcase import TestCase
from nevow.athena import expose

class AdditionTestCase(TestCase):
    jsClass = 'Examples.Tests.AdditionTestCase'
}}}

=== Client Side ===

On the JavaScript side, test authors subclass {{{Nevow.Athena.Test.TestCase}}} and define actual test methods on it.  These methods may return Deferreds if they are testing asynchronous APIs.  Test methods which return a Deferred which eventually errbacks are treated as failing; those which return a Deferred which eventually callbacks are treated as succeeding.  Tests which return anything other than a Deferred are also treated as succeeding, and tests which throw any error are treated as failing.

The JavaScript half of the above example might look like this:

{{{
#!js

// import Nevow.Athena.Test

Examples.Tests.AdditionTestCase = Nevow.Athena.Test.TestCase.subclass('Examples.Tests.AdditionTestCase');
Examples.Tests.methods(
    function test_integerAddition(self) {
        self.assertEqual(1 + 1, 2);
    },

    function test_stringAddition(self) {
        self.assertEqual('a' + 'a', 'aa');
    });
}}}

=== Command Line ===

Tests are collected into a suite automatically by the nit command line.  For example, {{{nit nevow}}} will launch a server which runs all of Nevow's nits.  The server listens on http://localhost:8080/ by default.  To run the tests, visit that URL with a browser and click the {{{Run Tests}}} button.

== External Links ==

You might want to look at this walkthrough on [http://blackjml.livejournal.com/21602.html how to write tests for Athena].
",',0
1164,5,1187920479.27419,oubiwann,198.49.126.204,"= Divmod : Nevow =

== Athena ==

=== Unit Testing ===

''Note: Much of this page documents the current development version of Nevow's testing features, not the current release version.  Make sure you are using the right version of the code if you attempt to make use of this documentation.''

Divmod uses the stand-alone !JavaScript interpreter [http://www.mozilla.org/js/spidermonkey/ SpiderMonkey] to run unit tests on some portions of our !JavaScript sources.  You can find [browser:trunk/Nevow/nevow/test/test_object.js several] [browser:trunk/Nevow/nevow/test/test_deferred.js examples] in the Divmod repository.

These unit tests are valuable: they reveal simple errors, provide a kind of documentation as to the purpose of various functions, and ensure that the code is exercised in as much isolation as is possible.  However, they are not all-encompassing.  After all, they aren't even executed by the same runtime that will be used by ''any'' user to execute them.

{{{nit}}} can also be used for unit testing (see below).

=== Functional Testing ===

To account for this, Nevow provides {{{nit}}}, a runner for tests which are designed to be run by an actual browser.  Nit tests are placed in Python source files named with the {{{livetest_}}} prefix.  There are [browser:trunk/Nevow/nevow/test/livetest_athena.py several] [browser:trunk/Mantissa/xmantissa/test/livetest_forms.py examples] [browser:trunk/Mantissa/xmantissa/test/livetest_people.py of this] kind of test in the Divmod repository as well.

If you are familiar with [http://en.wikipedia.org/wiki/XUnit XUnit], the API presented by nit should present few surprises.  The primary interface of interest to test developers is the {{{TestCase}}} class, which is subclassed and extended to define new tests.

==== Server Side ====

{{{nevow.livetrial.testcase.TestCase}}} is the base class for the server-side implementation of test methods.  Subclasses of {{{TestCase}}} define the JavaScript class which will implement the client-side portion of test methods as well as the document which will be used to render them.  {{{TestCase}}} is a {{{nevow.athena.LiveFragment}}} subclass, so it can also define methods which are exposed to the client.

A TestCase might be no more complex than the following:

{{{
#!python
from nevow.livetrial.testcase import TestCase
from nevow.athena import expose

class AdditionTestCase(TestCase):
    jsClass = 'Examples.Tests.AdditionTestCase'
}}}

==== Client Side ====

On the JavaScript side, test authors subclass {{{Nevow.Athena.Test.TestCase}}} and define actual test methods on it.  These methods may return Deferreds if they are testing asynchronous APIs.  Test methods which return a Deferred which eventually errbacks are treated as failing; those which return a Deferred which eventually callbacks are treated as succeeding.  Tests which return anything other than a Deferred are also treated as succeeding, and tests which throw any error are treated as failing.

The JavaScript half of the above example might look like this:

{{{
#!js

// import Nevow.Athena.Test

Examples.Tests.AdditionTestCase = Nevow.Athena.Test.TestCase.subclass('Examples.Tests.AdditionTestCase');
Examples.Tests.methods(
    function test_integerAddition(self) {
        self.assertEqual(1 + 1, 2);
    },

    function test_stringAddition(self) {
        self.assertEqual('a' + 'a', 'aa');
    });
}}}

==== Command Line ====

Tests are collected into a suite automatically by the nit command line.  For example, {{{nit nevow}}} will launch a server which runs all of Nevow's nits.  The server listens on http://localhost:8080/ by default.  To run the tests, visit that URL with a browser and click the {{{Run Tests}}} button.

=== External Links ===

You might want to look at this walkthrough on [http://blackjml.livejournal.com/21602.html how to write tests for Athena].
",',0
1165,34,1187920574.43883,oubiwann,198.49.126.204,"= Divmod : Nevow =

== Athena ==

Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

=== History ===

Athena is the best-of-breed approach to developing interactive javascript (AJAX / Comet) applications with DivmodNevow.  It should be noted that it '''supersedes''' previous solutions, such as livepage.  These prior solutions should not be used with Athena development.  Before using Athena, you may want to check out the [wiki:DivmodNevow/Tutorial Nevow tutorial].

=== Development Environment ===

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

 * [wiki:DivmodNevow/Athena/Emacs Emacs]
 * [http://www.getfirebug.com/ Firebug] - Firefox based javascript debugger

==== Simple LiveElement demo ====

Subclass {{{nevow.athena.LiveElement}}} and provide a {{{docFactory}}} which uses the {{{liveElement}}} renderer:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

Put the result onto a {{{nevow.athena.LivePage}}} somehow:

{{{
#!python
class MyPage(athena.LivePage):
    docFactory = loaders.stan(T.html[
        T.head(render=T.directive('liveglue')),
        T.body(render=T.directive('myElement'))])

    def render_myElement(self, ctx, data):
        f = MyElement()
        f.setFragmentParent(self)
        return ctx.tag[f]

    def child_(self, ctx):
        return MyPage()
}}}

Put the page into a {{{nevow.appserver.NevowSite}}} somehow:

{{{
#!python
from nevow import appserver
site = appserver.NevowSite(MyPage())
}}}

Hook the site up to the internet:

{{{
#!python
from twisted.application import service, internet

application = service.Application('Athena Demo')
webService = internet.TCPServer(8080, site)
webService.setServiceParent(application)
}}}

Put it all into a {{{.tac}}} file and run it:

{{{
#!sh
twistd -noy myelement.tac
}}}

And hit <http://localhost:8080/>.  You now have an extremely simple Athena page.

===== Customizing Behavior =====
Add a Twisted plugin which maps your module name onto your JavaScript source file:

{{{
#!python
from nevow import athena

myPackage = athena.JSPackage({
    'MyModule': '/absolute/path/to/mymodule.js',
    })
}}}

Place this Python source file into {{{nevow/plugins/}}} ([http://twistedmatrix.com/projects/core/documentation/howto/plugin.html the Twisted plugin documentation] describes where else you can put it, with the exception that Nevow plugins should be placed beneath a {{{nevow}}} directory as opposed to a {{{twisted}}} directory).


In the JavaScript source file (in this case, {{{mymodule.js}}}), import {{{Nevow.Athena}}}:

{{{
#!js
// import Nevow.Athena
}}}

Next, subclass the JavaScript {{{Nevow.Athena.Widget}}} class (notice the module name that was defined in the plugin file):

{{{
#!js
MyModule.MyWidget = Nevow.Athena.Widget.subclass('MyModule.MyWidget');
}}}

Now, add a method to your newly defined class:

{{{
#!js
MyModule.MyWidget.methods(
    function echo(self, argument) {
        alert('Echoing ' + argument);
        return argument;
    });
}}}

Define the JavaScript class which will correspond to your {{{LiveElement}}} subclass:

{{{
#!python
from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))
}}}

===== Invoking Code in the Browser =====

Add some kind of event source (in this case, a timer, but this is incidental) which will cause the server to call a method in the browser:

{{{
#!python
from twisted.internet import reactor

from nevow import athena, loaders, tags as T

class MyElement(athena.LiveElement):
    jsClass = u'MyModule.MyWidget'
    docFactory = loaders.stan(T.div(render=T.directive('liveElement')))

    def __init__(self, *a, **kw):
        super(MyElement, self).__init__(*a, **kw)
        reactor.callLater(5, self.myEvent)

    def myEvent(self):
        print 'My Event Firing'
        self.callRemote('echo', 12345)
}}}

Start up the server again and revisit <http://localhost:8080>.

===== Invoking Code on the Server =====

Add an event source (in this case, a user-interface element, but this is incidental) which will cause the browser to call a method on the server:

{{{
#!python
class MyElement(athena.LiveElement):
    docFactory = loaders.stan(T.div(render=T.directive('liveElement'))[
        T.input(type='submit', value='Push me', onclick='Nevow.Athena.Widget.get(this).clicked()')])
    ...
}}}

Update the JavaScript definition of {{{MyModule.MyWidget}}} to handle this event and actually call the server method:

{{{
#!js
MyModule.MyWidget.method(
    'clicked',
    function(self) {
        self.callRemote('echo', 'hello, world');
    });
}}}

Add a method to {{{MyElement}}} which the browser will call, and expose it to the browser:

{{{
#!python
class MyElement(athena.LiveElement):
    ...

    def echo(self, argument):
        print 'Echoing', argument
        return argument
    athena.expose(echo)
}}}

Start up the server again and revisit <http://localhost:8080>.

==== Download the files for this tutorial: ====

 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/myelement.tac?format=raw myelement.tac]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule.js?format=raw mymodule.js]
 * [http://divmod.org/trac/attachment/wiki/DivmodNevow/Athena/Files/mymodule_pkg.py?format=raw mymodule_pkg.py]

==== Testing ====

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

=== Implementation ===

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

=== Tickets ===
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].",',0
1166,35,1187985325.78114,oubiwann,198.49.126.204,"= Divmod : Nevow =

== Athena ==

Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

=== History ===

Athena is the best-of-breed approach to developing interactive javascript (AJAX / Comet) applications with DivmodNevow.  It should be noted that it '''supersedes''' previous solutions, such as livepage.  These prior solutions should not be used with Athena development.  Before using Athena, you may want to check out the [wiki:DivmodNevow/Tutorial Nevow tutorial].

=== Development Environment ===

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

 * [wiki:DivmodNevow/Athena/Emacs Emacs]
 * [http://www.getfirebug.com/ Firebug] - Firefox based javascript debugger

=== Tutorials ===

 * [wiki:DivmodNevow/Athena/Tutorials/LivePage Athena LivePage Tutorial]

=== Testing ===

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

=== Implementation ===

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

=== Tickets ===
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].",',0
1167,1,1187985516.42558,oubiwann,198.49.126.204,,,
1168,36,1187985579.55647,oubiwann,198.49.126.204,"= Divmod : Nevow =

== Athena ==

Athena is a two-way communication channel for Nevow applications.  Peruse [browser:trunk/Nevow/examples/athenademo the examples].  Or make this page better.

[wiki:DivmodNevow/Athena/FAQ FAQ]

=== History ===

Athena is the best-of-breed approach to developing interactive javascript (AJAX / Comet) applications with DivmodNevow.  It should be noted that it '''supersedes''' previous solutions, such as livepage.  These prior solutions should not be used with Athena development.  Before using Athena, you may want to check out the [wiki:DivmodNevow/Tutorial Nevow tutorial].

=== Development Environment ===

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

 * [wiki:DivmodNevow/Athena/Emacs Emacs]
 * [http://www.getfirebug.com/ Firebug] - Firefox based javascript debugger

=== Tutorials ===

 * [wiki:DivmodNevow/Athena/Tutorials/LiveElement Athena LiveElement Tutorial]

=== Testing ===

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

=== Implementation ===

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

=== Tickets ===
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].",',0
1169,37,1187986055.14247,oubiwann,198.49.126.204,"= Divmod : Nevow =

== Athena ==

Athena is the best-of-breed approach to developing interactive javascript (AJAX / Comet) applications with DivmodNevow. Before using Athena, you may want to check out the [wiki:DivmodNevow/Tutorial Nevow tutorial].

=== History ===

Divmod had AJAX before the much touted 'Web 2.0'. It was called !LivePage and worked with Twisted's Woven web application development tool. The Twisted and Divmod development communities were exploring and implementing two-way browser communications that ''still'' aren't implemented by anyone else.

It should be noted that Athena '''supersedes''' previous solutions, such as Woven's !LivePage.  These prior solutions should not be used with Athena development (nor with Nevow).


=== Development Environment ===

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

 * [wiki:DivmodNevow/Athena/Emacs Emacs]
 * [http://www.getfirebug.com/ Firebug] - Firefox based javascript debugger

=== Documentation ===

 * [wiki:DivmodNevow/Athena/FAQ FAQ]
 * [wiki:DivmodNevow/Tutorial Nevow Tutorial]
 * [wiki:DivmodNevow/Athena/Tutorials/LiveElement Athena LiveElement Tutorial]
 * [browser:trunk/Nevow/examples/athenademo Code Examples]

=== Testing ===

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

=== Implementation ===

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

=== Tickets ===
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].",',0
1170,6,1188018976.53347,oubiwann,198.49.126.204,"= Divmod : Nevow =

== Athena ==

=== Unit Testing ===

''Note: Much of this page documents the current development version of Nevow's testing features, not the current release version.  Make sure you are using the right version of the code if you attempt to make use of this documentation.''

Divmod uses the stand-alone !JavaScript interpreter [http://www.mozilla.org/js/spidermonkey/ SpiderMonkey] to run unit tests on some portions of our !JavaScript sources.  You can find [browser:trunk/Nevow/nevow/test/test_object.js several] [browser:trunk/Nevow/nevow/test/test_deferred.js examples] in the Divmod repository.

These unit tests are valuable: they reveal simple errors, provide a kind of documentation as to the purpose of various functions, and ensure that the code is exercised in as much isolation as is possible.  However, they are not all-encompassing.  After all, they aren't even executed by the same runtime that will be used by ''any'' user to execute them.

{{{nit}}} can also be used for unit testing (see below).

=== Functional Testing ===

To account for this, Nevow provides {{{nit}}}, a runner for tests which are designed to be run by an actual browser.  Nit tests are placed in Python source files named with the {{{livetest_}}} prefix.  There are [browser:trunk/Nevow/nevow/test/livetest_athena.py several] [browser:trunk/Mantissa/xmantissa/test/livetest_forms.py examples] [browser:trunk/Mantissa/xmantissa/test/livetest_people.py of this] kind of test in the Divmod repository as well.

If you are familiar with [http://en.wikipedia.org/wiki/XUnit XUnit], the API presented by nit should present few surprises.  The primary interface of interest to test developers is the {{{TestCase}}} class, which is subclassed and extended to define new tests.

==== Server Side ====

{{{nevow.livetrial.testcase.TestCase}}} is the base class for the server-side implementation of test methods.  Subclasses of {{{TestCase}}} define the JavaScript class which will implement the client-side portion of test methods as well as the document which will be used to render them.  {{{TestCase}}} is a {{{nevow.athena.LiveFragment}}} subclass, so it can also define methods which are exposed to the client.

A {{{TestCase}}} might be no more complex than the following:

{{{
#!python
from nevow.livetrial.testcase import TestCase
from nevow.athena import expose

class AdditionTestCase(TestCase):
    jsClass = 'Examples.Tests.AdditionTestCase'
}}}

==== Client Side ====

On the JavaScript side, test authors subclass {{{Nevow.Athena.Test.TestCase}}} and define actual test methods on it.  These methods may return Deferreds if they are testing asynchronous APIs.  Test methods which return a Deferred which eventually errbacks are treated as failing; those which return a Deferred which eventually callbacks are treated as succeeding.  Tests which return anything other than a Deferred are also treated as succeeding, and tests which throw any error are treated as failing.

The JavaScript half of the above example might look like this:

{{{
#!js

// import Nevow.Athena.Test

Examples.Tests.AdditionTestCase = Nevow.Athena.Test.TestCase.subclass('Examples.Tests.AdditionTestCase');
Examples.Tests.methods(
    function test_integerAddition(self) {
        self.assertEqual(1 + 1, 2);
    },

    function test_stringAddition(self) {
        self.assertEqual('a' + 'a', 'aa');
    });
}}}

==== Command Line ====

Tests are collected into a suite automatically by the nit command line.  For example, {{{nit nevow}}} will launch a server which runs all of Nevow's nits.  The server listens on http://localhost:8080/ by default.  To run the tests, visit that URL with a browser and click the {{{Run Tests}}} button.

=== External Links ===

You might want to look at this walkthrough on [http://blackjml.livejournal.com/21602.html how to write tests for Athena].
",',0
1171,38,1188018985.712,oubiwann,198.49.126.204,"= Divmod : Nevow =

== Athena ==

Athena is the best-of-breed approach to developing interactive javascript (AJAX / Comet) applications with DivmodNevow. Before using Athena, you may want to check out the [wiki:DivmodNevow/Tutorial Nevow tutorial].

=== History ===

Divmod had AJAX before the much touted 'Web 2.0'. It was called !LivePage and worked with Twisted's Woven web application development tool. The Twisted and Divmod development communities were exploring and implementing two-way browser communications that ''still'' aren't implemented by anyone else.

It should be noted that Athena '''supersedes''' previous solutions, such as Woven's !LivePage.  These prior solutions should not be used with Athena development (nor with Nevow).


=== Development Environment ===

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

 * [wiki:DivmodNevow/Athena/Emacs Emacs]
 * [http://www.getfirebug.com/ Firebug] - Firefox based javascript debugger

=== Documentation ===

 * [wiki:DivmodNevow/Athena/FAQ FAQ]
 * [wiki:DivmodNevow/Tutorial Nevow Tutorial]
 * [wiki:DivmodNevow/Athena/Tutorials/LiveElement Athena LiveElement Tutorial]
 * [wiki:DivmodNevow/AthenaTesting Writing Unit Tests for Athena-based Projects]
 * [browser:trunk/Nevow/examples/athenademo Code Examples]

=== Testing ===

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

=== Implementation ===

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

=== Tickets ===
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].",',0
1172,39,1188019007.97675,oubiwann,198.49.126.204,"= Divmod : Nevow =

== Athena ==

Athena is the best-of-breed approach to developing interactive javascript (AJAX / Comet) applications with DivmodNevow. Before using Athena, you may want to check out the [wiki:DivmodNevow/Tutorial Nevow tutorial].

=== History ===

Divmod had AJAX before the much touted 'Web 2.0'. It was called !LivePage and worked with Twisted's Woven web application development tool. The Twisted and Divmod development communities were exploring and implementing two-way browser communications that ''still'' aren't implemented by anyone else.

It should be noted that Athena '''supersedes''' previous solutions, such as Woven's !LivePage.  These prior solutions should not be used with Athena development (nor with Nevow).


=== Development Environment ===

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

 * [wiki:DivmodNevow/Athena/Emacs Emacs]
 * [http://www.getfirebug.com/ Firebug] - Firefox based javascript debugger

=== Documentation ===

 * [wiki:DivmodNevow/Athena/FAQ FAQ]
 * [wiki:DivmodNevow/Tutorial Nevow Tutorial]
 * [wiki:DivmodNevow/Athena/Tutorials/LiveElement Athena LiveElement Tutorial]
 * [wiki:DivmodNevow/AthenaTesting Writing Unit Tests for Athena-based Projects] (bleeding edge)
 * [browser:trunk/Nevow/examples/athenademo Code Examples]

=== Testing ===

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

=== Implementation ===

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

=== Tickets ===
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].",',0
1173,40,1188019077.36183,oubiwann,198.49.126.204,"= Divmod : Nevow =

== Athena ==

Athena is the best-of-breed approach to developing interactive javascript (AJAX / Comet) applications with DivmodNevow. Before using Athena, you may want to check out the [wiki:DivmodNevow/Tutorial Nevow tutorial].

=== History ===

Divmod had AJAX before the much touted 'Web 2.0' came into being and claimed {{{XHR}}}. It was called !LivePage and worked with Twisted's Woven web application development tool. The Twisted and Divmod development communities were exploring and implementing two-way browser communications that ''still'' aren't implemented by anyone else.

It should be noted that Athena '''supersedes''' previous solutions, such as Woven's !LivePage.  These prior solutions should not be used with Athena development (nor with Nevow).


=== Development Environment ===

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

 * [wiki:DivmodNevow/Athena/Emacs Emacs]
 * [http://www.getfirebug.com/ Firebug] - Firefox based javascript debugger

=== Documentation ===

 * [wiki:DivmodNevow/Athena/FAQ FAQ]
 * [wiki:DivmodNevow/Tutorial Nevow Tutorial]
 * [wiki:DivmodNevow/Athena/Tutorials/LiveElement Athena LiveElement Tutorial]
 * [wiki:DivmodNevow/AthenaTesting Writing Unit Tests for Athena-based Projects] (bleeding edge)
 * [browser:trunk/Nevow/examples/athenademo Code Examples]

=== Testing ===

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

=== Implementation ===

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

=== Tickets ===
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].",',0
1174,41,1188019109.55242,oubiwann,198.49.126.204,"= Divmod : Nevow =

== Athena ==

Athena is the best-of-breed approach to developing interactive javascript (AJAX / Comet) applications with DivmodNevow. Before using Athena, you may want to check out the [wiki:DivmodNevow/Tutorial Nevow tutorial].

=== History ===

Divmod had AJAX before the much touted 'Web 2.0' came into being and claimed {{{XHR}}}. It was called !LivePage and worked with Twisted's Woven web application development tool. The Twisted and Divmod development communities were exploring and implementing two-way browser communications years ago that ''still'' aren't implemented by anyone else.

It should be noted that Athena '''supersedes''' previous solutions, such as Woven's !LivePage.  These prior solutions should not be used with Athena development (nor with Nevow).


=== Development Environment ===

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

 * [wiki:DivmodNevow/Athena/Emacs Emacs]
 * [http://www.getfirebug.com/ Firebug] - Firefox based javascript debugger

=== Documentation ===

 * [wiki:DivmodNevow/Athena/FAQ FAQ]
 * [wiki:DivmodNevow/Tutorial Nevow Tutorial]
 * [wiki:DivmodNevow/Athena/Tutorials/LiveElement Athena LiveElement Tutorial]
 * [wiki:DivmodNevow/AthenaTesting Writing Unit Tests for Athena-based Projects] (bleeding edge)
 * [browser:trunk/Nevow/examples/athenademo Code Examples]

=== Testing ===

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

=== Implementation ===

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

=== Tickets ===
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].",',0
1175,12,1188338850.21394,terrycojones,198.49.126.204,"= [wiki:WikiStart Divmod] : Combinator =

Combinator is a tool that Divmod Python programmers use to manage multiple branches of our software.  It integrates with Subversion.

It can be used to manage any number of branches with any number of projects.  It sets up your Python sys.path to point at the appropriate directories for the set of branches you are currently working on.  It also sets up your {{{PATH}}} environment variable so that you can access any scripts that come along with those projects.

It is mainly of interest if you are checking code out of SVN: users of installed versions of Divmod software can probably ignore this project (for now).

'''Note:''' Combinator does not currently work with SVN version 1.2 due to changes in the way SVN stores its local repository. See #2144 for details.

== Rationale ==

Subversion is a nice development system, but some tasks are unnecessarily difficult.  In particular, as we migrated from CVS to SVN, we discovered that there are some operations which were impractically difficult in CVS but simple in SVN, such as creating branches, but while the implementation of managing and merging branches was adequate, there were too much flexibility, and too many ways to subtly incorrectly merge a branch.

As one example of such a problem, in SVN one must always pass the revision where the branch was created on trunk as an argument to the merge command, and determining that number involves reading the output of another long-running command.  Some branches cannot be merged in this manner, depending on where the branch was originally created from.

We developed some idioms for avoiding common errors during merge and encoded them in a set of shell scripts.  Then we discovered another set of common problems: often developers working on a branch would do a bunch of work, and then find themselves mystified that their changes did not seem to be taking effect, due to a mismatch between the environment of their development tools and the shells where test commands were being run.

Combinator began as a set of idioms and shell scripts and has evolved into a set of Python tools which enforce a simple workflow for using SVN and Python together to work on projects that use branches to gather changes together while eliminating common errors.

== Download ==

Combinator is in the Divmod repository.

If you want to use it without the rest of the Divmod projects, see the CombinatorTutorial.

== Use ==

Start with [source:trunk/Combinator/README.txt README.txt] to get your environment set up.

'''Note''': if you follow the UNIX setup instructions and an exception is raised along the lines of
`OSError: [Errno 2] No such file or directory: '/home/YOURNAME/.local/lib/python2.4/site-packages'`,
you should run the command `mkdir -p /home/YOURNAME/.local/lib/python2.4/site-packages` and retry
the Combinator setup. This is a known bug with Combinator setup on at least one platform (Ubuntu linux).

CombinatorTutorial is a guide to typical Combinator use including setting up an SVN repository to play with.

Reading about [wiki:UltimateQualityDevelopmentSystem our development process] is likely to give you some insight into how it's intended to be used.

=== chbranch ===

=== mkbranch ===

=== unbranch ===
",',0
1176,2,1188415864.02769,oubiwann,198.49.126.204,"== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.

DuncanMcGreggor",',0
1177,1,1188415896.90389,oubiwann,198.49.126.204,"= Duncan's Wiki Page =

DemoBlogFeeds",',0
1178,3,1188415908.80896,oubiwann,198.49.126.204,"== Ideas ==
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
",',0
1179,1,1188415970.82612,oubiwann,198.49.126.204,"{{{
#!html

<script src='http://feeds.feedburner.com/Divmod?format=sigpro' type='text/javascript' ></script><noscript><p>Subscribe to RSS headline updates from: <a href='http://feeds.feedburner.com/Divmod'></a><br/>Powered by FeedBurner</p> </noscript>

}}}",',0
1180,2,1188416059.91602,oubiwann,198.49.126.204,"Demo Blog Feeds

{{{
#!html

<script src='http://feeds.feedburner.com/Divmod?format=sigpro' type='text/javascript' ></script><noscript><p>Subscribe to RSS headline updates from: <a href='http://feeds.feedburner.com/Divmod'></a><br/>Powered by FeedBurner</p> </noscript>

}}}",',0
1181,3,1188416134.03819,oubiwann,198.49.126.204,"= DuncanMcGreggor: Demo Blog Feeds =

{{{
#!html

<script src='http://feeds.feedburner.com/Divmod?format=sigpro' type='text/javascript' ></script>
<noscript><p>Subscribe to RSS headline updates from: 
<a href='http://feeds.feedburner.com/Divmod'></a><br/>Powered by FeedBurner</p> 
</noscript>

}}}",',0
1182,4,1188416929.98507,oubiwann,198.49.126.204,"= DuncanMcGreggor: Demo Blog Feeds =

{{{
#!html

<script src='http://feeds.feedburner.com/Divmod?format=sigpro' type='text/javascript' ></script>
<noscript><p>Subscribe to RSS headline updates from: 
<a href='http://feeds.feedburner.com/Divmod'></a><br/>Powered by FeedBurner</p> 
</noscript>

}}}

{{{
#!html
<p><a href='http://feeds.feedburner.com/Divmod' rel='alternate' type='application/rss+xml'>
<img src='http://www.feedburner.com/fb/images/pub/feed-icon16x16.png' alt='' style='vertical-align:middle;border:0'/></a>&nbsp;<a href='http://feeds.feedburner.com/Divmod' rel='alternate' type='application/rss+xml'>Subscribe to Divmod Blogs</a></p>
}}}",',0
1183,42,1188457730.5395,oubiwann,198.49.126.204,"= Divmod : Nevow =

== Athena ==

Athena is the best-of-breed approach to developing interactive javascript (AJAX / Comet) applications with DivmodNevow. Before using Athena, you may want to check out the [wiki:DivmodNevow/Tutorial Nevow tutorial].

=== History ===

Divmod had AJAX before the much touted 'Web 2.0' came into being and claimed {{{XHR}}}. It was called !LivePage and worked with Twisted's Woven web application development tool. The Twisted and Divmod development communities were exploring and implementing two-way browser communications years ago that ''still'' aren't implemented by anyone else.

It should be noted that Athena '''supersedes''' previous solutions, such as Woven's !LivePage.  These prior solutions should not be used with Athena development (nor with Nevow).


=== Development Environment ===

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

 * [wiki:DivmodNevow/Athena/Emacs Emacs]
 * [http://www.getfirebug.com/ Firebug] - Firefox based javascript debugger

=== Documentation ===

 * [wiki:DivmodNevow/Athena/FAQ FAQ]
 * Nevow Tutorial
   * [wiki:DivmodNevow/Tutorial Part I]
   * [wiki:DivmodNevow/TutorialTwo Part II]
   * [wiki:DivmodNevow/TutorialThree Part III]
   * [wiki:DivmodNevow/TutorialFour Part IV]
   * [wiki:DivmodNevow/TutorialFive Part V]
   * [wiki:DivmodNevow/TutorialSix Part VI]
 * [wiki:DivmodNevow/Athena/Tutorials/LiveElement Athena LiveElement Tutorial]
 * [wiki:DivmodNevow/AthenaTesting Writing Unit Tests for Athena-based Projects] (bleeding edge)
 * [browser:trunk/Nevow/examples/athenademo Code Examples]

=== Testing ===

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

=== Implementation ===

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

=== Tickets ===
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].",',0
1184,58,1189172664.97879,oubiwann,198.49.126.204,,,
1185,3,1193925471.55015,exarkun,198.49.126.204,"= DivmodAxiom : Concurrency and Scalability =

Several questions seem to keep coming relating to these issues; this is an attempt to summarize the discussion around them.

== Why is the API synchronous? ==

Generally database access through the SQLite backend is fast enough that database operations don't block long enough to be of concern.

== Are you sure? ==

Sort of. Current usage seems to indicate that it works out just fine, but you should conduct your own testing to determine whether this model is suitable for your particular usage patterns.

== Is it thread-safe, though? ==

No.  Accessing a Store from different threads will break.  Accessing different Stores, even backed by the same SQLite database, is fine.

== But how do you achieve scalability then? ==

Use multiple databases. For example, DivmodMantissa has per-user and per-application stores.

== What if that isn't good enough? ==

If you do need finer-grained concurrency, then running transactions in separate threads is one way to go about it. Glyph's blog has [http://www.livejournal.com/users/glyf/2005/09/24/ more on this subject]; also see #537 which covers the DivmodAxiom implementation of this model.","remove extraneous words; clarify exceptional case",0
1186,4,1193925508.29129,exarkun,198.49.126.204,"= DivmodAxiom : Concurrency and Scalability =

Several questions seem to keep coming relating to these issues; this is an attempt to summarize the discussion around them.

== Why is the API synchronous? ==

Generally database access through the SQLite backend is fast enough that database operations don't block long enough to be of concern.

== Are you sure? ==

Sort of. Current usage seems to indicate that it works out just fine, but you should conduct your own testing to determine whether this model is suitable for your particular usage patterns.

== Is it thread-safe, though? ==

No.  Accessing a Store from different threads will break.

== But how do you achieve scalability then? ==

Use multiple databases. For example, DivmodMantissa has per-user and per-application stores.

== What if that isn't good enough? ==

If you do need finer-grained concurrency, then running transactions in separate threads is one way to go about it. Glyph's blog has [http://www.livejournal.com/users/glyf/2005/09/24/ more on this subject]; also see #537 which covers the DivmodAxiom implementation of this model.","actually, axiom isn't threadsafe at all.  there is no exceptional case.",0
1187,13,1194612875.39955,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Combinator =

Combinator is a tool that Divmod Python programmers use to manage multiple branches of our software.  It integrates with Subversion.

It can be used to manage any number of branches with any number of projects.  It sets up your Python sys.path to point at the appropriate directories for the set of branches you are currently working on.  It also sets up your {{{PATH}}} environment variable so that you can access any scripts that come along with those projects.

It is mainly of interest if you are checking code out of SVN: users of installed versions of Divmod software can probably ignore this project (for now).

'''Note:''' Combinator does not currently work with SVN version 1.2 due to changes in the way SVN stores its local repository. See #2144 for details.

== Rationale ==

Subversion is a nice development system, but some tasks are unnecessarily difficult.  In particular, as we migrated from CVS to SVN, we discovered that there are some operations which were impractically difficult in CVS but simple in SVN, such as creating branches, but while the implementation of managing and merging branches was adequate, there were too much flexibility, and too many ways to subtly incorrectly merge a branch.

As one example of such a problem, in SVN one must always pass the revision where the branch was created on trunk as an argument to the merge command, and determining that number involves reading the output of another long-running command.  Some branches cannot be merged in this manner, depending on where the branch was originally created from.

We developed some idioms for avoiding common errors during merge and encoded them in a set of shell scripts.  Then we discovered another set of common problems: often developers working on a branch would do a bunch of work, and then find themselves mystified that their changes did not seem to be taking effect, due to a mismatch between the environment of their development tools and the shells where test commands were being run.

Combinator began as a set of idioms and shell scripts and has evolved into a set of Python tools which enforce a simple workflow for using SVN and Python together to work on projects that use branches to gather changes together while eliminating common errors.

== Download ==

Combinator is in the Divmod repository.

If you want to use it without the rest of the Divmod projects, see the CombinatorTutorial.

== Use ==

Start with [source:trunk/Combinator/README.txt README.txt] to get your environment set up.

'''Note''': if you follow the UNIX setup instructions and an exception is raised along the lines of
`OSError: [Errno 2] No such file or directory: '/home/YOURNAME/.local/lib/python2.4/site-packages'`,
you should update to the latest trunk revision of Combinator - this bug has been fixed!

CombinatorTutorial is a guide to typical Combinator use including setting up an SVN repository to play with.

Reading about [wiki:UltimateQualityDevelopmentSystem our development process] is likely to give you some insight into how it's intended to be used.

=== chbranch ===

=== mkbranch ===

=== unbranch ===
",',0
1188,14,1194613762.75709,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Combinator =

Combinator is a tool that Divmod Python programmers use to manage multiple branches of our software.  It integrates with Subversion.

It can be used to manage any number of branches with any number of projects.  It sets up your Python sys.path to point at the appropriate directories for the set of branches you are currently working on.  It also sets up your {{{PATH}}} environment variable so that you can access any scripts that come along with those projects.

It is mainly of interest if you are checking code out of SVN: users of installed versions of Divmod software can probably ignore this project (for now).

'''Note:''' Combinator does not currently work with SVN version 1.2 due to changes in the way SVN stores its local repository. See #2144 for details.

== Rationale ==

Subversion is a nice development system, but some tasks are unnecessarily difficult.  In particular, as we migrated from CVS to SVN, we discovered that there are some operations which were impractically difficult in CVS but simple in SVN, such as creating branches, but while the implementation of managing and merging branches was adequate, there were too much flexibility, and too many ways to subtly incorrectly merge a branch.

As one example of such a problem, in SVN one must always pass the revision where the branch was created on trunk as an argument to the merge command, and determining that number involves reading the output of another long-running command.  Some branches cannot be merged in this manner, depending on where the branch was originally created from.

We developed some idioms for avoiding common errors during merge and encoded them in a set of shell scripts.  Then we discovered another set of common problems: often developers working on a branch would do a bunch of work, and then find themselves mystified that their changes did not seem to be taking effect, due to a mismatch between the environment of their development tools and the shells where test commands were being run.

Combinator began as a set of idioms and shell scripts and has evolved into a set of Python tools which enforce a simple workflow for using SVN and Python together to work on projects that use branches to gather changes together while eliminating common errors.

== Download ==

Combinator is in the Divmod repository.

If you want to use it without the rest of the Divmod projects, see the CombinatorTutorial.

== Use ==

Start with [source:trunk/Combinator/README.txt README.txt] to get your environment set up.

'''Note''': if you follow the UNIX setup instructions and an exception is raised along the lines of
`OSError: [Errno 2] No such file or directory: '/home/YOURNAME/.local/lib/python2.4/site-packages'`,
you should update to the latest trunk revision of Combinator - this bug has been fixed!

CombinatorTutorial is a guide to typical Combinator use including setting up an SVN repository to play with.

Reading about [wiki:UltimateQualityDevelopmentSystem our development process] is likely to give you some insight into how it's intended to be used.

=== chbranch ===

'''chbranch''' is the tool for switching to a different branch.  Provide '''chbranch''' with a ''project name'' and ''branch name'' and it will modify all Combinator-enabled environments so that Python imports are satisfied from that branch of the project.  If necessary, the branch will be checked out.

=== mkbranch ===

'''mkbranch''' is the tool for creating new branches.  Provide '''mkbranch''' with a ''project name'' and ''branch name'' and it will create a new branch with that name, switch a copy of trunk to it, and do the equivalent of a '''chbranch''' to the new branch.

=== unbranch ===

'''unbranch''' is the tool for merging a branch's changes into trunk.  First, use '''chbranch''' to change to the branch to be merged.  Then, make sure that the trunk working copy either contains no changes or contains only changes which you want included in the merge (note: it is strongly, strongly recommended that if the merge will be committed that the trunk working copy contain no changes).  Finally, run '''unbranch''' with the ''project name'' and the changes from the branch will be merged into the trunk working copy.  They will not be committed automatically.
",',0
1189,117,1194631959.54959,mithrandi,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Need Help? ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://bb.divmod.org/ latest build and test results] for the code in trunk.

== Love Divmod? ==
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Here to help? ==
Check out our [wiki:HereToHelp Here to Help?] section

== Odds and ends ==
 * Retired projects: they worked hard and are now [wiki:RetiredProjects retired].
 * [wiki:DivmodApplications Divmod applications] built on our infrastructure DivmodApplications.
 * Some [wiki:DivmodIdeas ideas].

== Special thanks ==
Divmod is built on the work of many others. Here are some of the [wiki:StuffWeUse tools and services that we depend on].

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.","Buildbot has moved",0
1190,59,1194640679.98183,mithrandi,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

==== Athena ====

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, Opera 9 and Camino ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.26.tar.gz?format=raw Latest release - 0.9.26]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': (take a look at [http://forms-project.pollenation.net/ formal] for an alternate form library) For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
 * [wiki:DivmodNevow/ApacheProxy Putting Nevow Page under Apache Proxy]
 * [http://oubiwann.blogspot.com/2007/03/genshi-templates-in-nevow.html Using Nevow with Genshi templates]
 * [wiki:DivmodNevow/Storm Using the Storm ORM with Nevow]
 * [wiki:DivmodNevow/FaQ Frequently asked questions]

 '''Bleeding Docs''' - 
 ''SURGEON GENERAL’S WARNING'': Reading the docs listed below pertain to code that has not yet been released and may cause Lung Cancer, Heart Disease, Emphysema, and Pregnancy complications. 
   [wiki:DivmodNevow/ContextRemoval Context Removal] - Conversion steps for moving from {{{context}}}-based Nevow code to {{{context}}}-less code.

== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
",',0
1191,33,1194641018.0556,mithrandi,198.49.126.204,"= [wiki:WikiStart Divmod] : Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.26.tar.gz?format=raw Download the latest release - 0.5.26!] (Requires [wiki:DivmodEpsilon Epsilon])
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]
 * [wiki:DivmodAxiom/DependencyTransition Dependencies]: How to transition from pre-{{{axiom.dependency}}} code.
 * [wiki:DivmodAxiom/Powerups Powerups]
 * WritingUpgradeTests: writing stubloader tests for schema upgrades.",',0
1192,12,1194641157.75989,mithrandi,198.49.126.204,,,
1193,23,1194641438.30954,mithrandi,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the [wiki:DivmodAxiom Axiom] object database, the [wiki:DivmodNevow Nevow] web templating framework and the TwistedFramework.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod",',0
1194,3,1195100004.31018,glyph,198.49.126.204,"= Divmod Xapwrap =

== This project is no longer supported. ==

Enhancements to the Python bindings for the [http://www.xapian.org Xapian] full-text indexing library.

While Xapian comes with bindings, they are hard to work with, and being SWIG'd, a literal translation of a C++ API.  Xapwrap simplifies working with Xapian databases in Python.

This is implemented as a second layer of wrapping, so Xapian's bindings are still required.

[http://divmod.org/trac/attachment/wiki/SoftwareReleases/Xapwrap-0.3.1.tar.gz?format=raw Get release 0.3.1]
",',0
1195,9,1195124125.37589,pjd,198.49.126.204,"Divmod uses [http://twistedmatrix.com/trac/browser/trunk/doc/development/policy/coding-standard.xhtml?format=raw the Twisted coding standard].

In addition, we are trying to make certain aspects of the Twisted coding standard stricter.  For example:

 * There should be 3 blank lines between module-level suites, such as classes and top-level functions.
 * There should be 2 blank lines between class-level suites, such as methods.
 * Within a class, the ordering of the elements is:
    1. docstring
    1. {{{implements()}}}
    1. class attributes
    1. Python special methods, starting with {{{__new__}}} if present, then {{{__init__}}}.
    1. Methods part of no interface
    1. Methods implementing an interface, grouped by interface, prefixed with a comment like this:
{{{
#!python
# IYourInterface
}}}
 * Be careful with code like:
{{{
#!python
def test():
    outer1, outer2 = something()
    class Stub(object):
        foo = frob(outer1)
        def bar(self):
            return outer2
}}}
   Due to [http://bugs.python.org/issue1569356 a bug] in Python ≤ 2.5, when run with tracing (such as `trial --coverage`), the closed bindings (`outer1`, `outer2`) leak into the class context, causing problems when they have special meaning there.[[BR]]
   Vulnerable names should be renamed to avoid conflict.  Vulnerable ''values'' require wrapping in an indirect reference, such as:
{{{
#!python
    class Foo(formless.TypedInterface):
        pass
    _indirectFoo = lambda: Foo
    class Bar(formless.TypedInterface):
        baz = formless.Object(interface=_indirectFoo())
}}}
   See also #2394.","add a pretty long note about the Python tracing bug (1569356)",0
1196,5,1195142409.18454,philwo,198.49.126.204,"= Nevow Tutorial =

== Redefining {{{locateChild()}}} ==

Until now, each page has been responsible for accessing its direct children.

However, many web applications take the approach of encoding query parameters directly into URLs; this has the advantage of being easy to understand and easy to bookmark. An example of this might be:

  {{{http://examplebank.com/statements/58776376423/2006/11/byAmount/}}}

Ignoring authentication and security issues, this fictitious URL might point to an on-line statement for account number 58776376423 covering the month of November 2006, with the transactions sorted by amount rather than transaction size.

However, the bank may have millions of accounts, and each one of these may have hundreds of months of history. Taking the approach that each unique path within a URL refers to a resource starts to become unfeasible when the possible number of URL combinations is huge.

Nevow handles this by allowing you to redefine a page's master lookup mechanism, {{{locateChild()}}}. This takes ''all'' path elements and returns a page and any path elements that it chose not to consume.

For example, consider the following example. Be aware that heavy reliance on the {{{ctx}}} variable is discouraged as it is deprecated; however, certain operations still require it.

{{{
#!python
######################################################################
# Run using 'twistd -noy file.tac', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend
from nevow               import loaders
from nevow               import tags as T
from nevow               import inevow

class AccountPage ( rend.Page ):

    def render_title ( self, ctx, data ):
        request = inevow.IRequest ( ctx )
        account_number = request.prepath [ 1 ]
        return 'Account Summary for Account %s' % ( account_number, )

    def render_body ( self, ctx, data ):
        request = inevow.IRequest ( ctx )
        account_number = request.prepath [ 1 ]
        year           = request.prepath [ 2 ]
        month          = request.prepath [ 3 ]
        return 'Account Balance at month end %s %s was %d' % \
          ( year, month,
            int ( account_number ) + ( int ( year ) * int ( month ) ) )

    docFactory = loaders.stan (
        T.html [ T.head [ T.title [ render_title ] ],
                 T.body [ render_body ]
        ]
    )

class ReportsPage ( rend.Page ):

    def locateChild ( self, ctx, segments ):
        return ( AccountPage(), () )


class MainPage ( rend.Page ):

    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Main Page' ),
                 T.body [ T.h1 [ 'This is the Main Page' ],
                          T.p [ 'Account Summaries:' ],
                          T.p [ T.a ( href = '/reports/123456/2007/01' ) [ 'Summary for account 123456' ] ],
                          T.p [ T.a ( href = '/reports/234567/2006/02' ) [ 'Summary for account 234567' ] ],
                          T.p [ T.a ( href = '/reports/345678/2005/03' ) [ 'Summary for account 345678' ] ],
                 ],
               ]
        )

    child_reports = ReportsPage()

######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo' )
port        = 8080
res         = MainPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}

Note the following:

  * The important change is the {{{locateChild()}}} method of {{{ReportsPage}}};
  * {{{MainPage}}} and {{{ReportsPage}}} are still accessed through conventional child lookups;
  * Any path under {{{/reports/}}} is consumed in its entirety by the {{{locateChild()}}} method of {{{ReportsPage}}};
  * For consistency in this simple example, the account balances are derived from the account number and the date; in a real application one hopes it would be retrieved from some sort of database;
  * The titles and balances in {{{AccountPage}}} are calculated by inserting callables into the Stan; Stan is clever enough to know that it needs to call these and insert the results into the generated HTML.
","Obviously the author copied and pasted the source missing the end of three lines (window too small and word-wrap disabled?), I fixed it.",0
1197,6,1195142423.35344,philwo,198.49.126.204,"= Nevow Tutorial =

== Redefining {{{locateChild()}}} ==

Until now, each page has been responsible for accessing its direct children.

However, many web applications take the approach of encoding query parameters directly into URLs; this has the advantage of being easy to understand and easy to bookmark. An example of this might be:

  {{{http://examplebank.com/statements/58776376423/2006/11/byAmount/}}}

Ignoring authentication and security issues, this fictitious URL might point to an on-line statement for account number 58776376423 covering the month of November 2006, with the transactions sorted by amount rather than transaction size.

However, the bank may have millions of accounts, and each one of these may have hundreds of months of history. Taking the approach that each unique path within a URL refers to a resource starts to become unfeasible when the possible number of URL combinations is huge.

Nevow handles this by allowing you to redefine a page's master lookup mechanism, {{{locateChild()}}}. This takes ''all'' path elements and returns a page and any path elements that it chose not to consume.

For example, consider the following example. Be aware that heavy reliance on the {{{ctx}}} variable is discouraged as it is deprecated; however, certain operations still require it.

{{{
#!python
######################################################################
# Run using 'twistd -noy file.tac', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend
from nevow               import loaders
from nevow               import tags as T
from nevow               import inevow

class AccountPage ( rend.Page ):

    def render_title ( self, ctx, data ):
        request = inevow.IRequest ( ctx )
        account_number = request.prepath [ 1 ]
        return 'Account Summary for Account %s' % ( account_number, )

    def render_body ( self, ctx, data ):
        request = inevow.IRequest ( ctx )
        account_number = request.prepath [ 1 ]
        year           = request.prepath [ 2 ]
        month          = request.prepath [ 3 ]
        return 'Account Balance at month end %s %s was %d' % \
          ( year, month,
            int ( account_number ) + ( int ( year ) * int ( month ) ) )

    docFactory = loaders.stan (
        T.html [ T.head [ T.title [ render_title ] ],
                 T.body [ render_body ]
        ]
    )

class ReportsPage ( rend.Page ):

    def locateChild ( self, ctx, segments ):
        return ( AccountPage(), () )


class MainPage ( rend.Page ):

    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Main Page' ),
                 T.body [ T.h1 [ 'This is the Main Page' ],
                          T.p [ 'Account Summaries:' ],
                          T.p [ T.a ( href = '/reports/123456/2007/01' ) [ 'Summary for account 123456' ] ],
                          T.p [ T.a ( href = '/reports/234567/2006/02' ) [ 'Summary for account 234567' ] ],
                          T.p [ T.a ( href = '/reports/345678/2005/03' ) [ 'Summary for account 345678' ] ]
                 ],
               ]
        )

    child_reports = ReportsPage()

######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo' )
port        = 8080
res         = MainPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}

Note the following:

  * The important change is the {{{locateChild()}}} method of {{{ReportsPage}}};
  * {{{MainPage}}} and {{{ReportsPage}}} are still accessed through conventional child lookups;
  * Any path under {{{/reports/}}} is consumed in its entirety by the {{{locateChild()}}} method of {{{ReportsPage}}};
  * For consistency in this simple example, the account balances are derived from the account number and the date; in a real application one hopes it would be retrieved from some sort of database;
  * The titles and balances in {{{AccountPage}}} are calculated by inserting callables into the Stan; Stan is clever enough to know that it needs to call these and insert the results into the generated HTML.
",',0
1198,1,1195444332.63187,pjd,198.49.126.204,"= Synopsis =

IRIs are essentially the Unicode superset of (ASCII) URIs, combined with an embedding via UTF-8.

 * [http://rfc.net/rfc3987.html RFC 3987]
 * [http://www.w3.org/International/O-URL-and-ident.html Internationalized Resource Identifiers (IRIs)] (W3C)

The least you should know:

 * [http://rfc.net/rfc3987.html#s3. RFC 3987 §3] (IRI/URI conversion)
 * [http://www.w3.org/TR/REC-html40/appendix/notes.html#h-B.2.1 HTML4 B.2.1]: Non-ASCII characters in URI attribute values

= Browser support =

[http://www.sw.it.aoyama.ac.jp/2007/pub/IUC31-iri/Presentation.html IRIs and IDNs: Testing, Implementations, and Specification Evolvement] (2007)

 * '''Firefox''': [https://bugzilla.mozilla.org/show_bug.cgi?id=124042 Bug 124042] (2002), `network.standard-url.`{[http://kb.mozillazine.org/Network.standard-url.encode-utf8 encode-utf8]`,`[http://kb.mozillazine.org/Network.standard-url.escape-utf8 escape-utf8]`}`
 * '''Internet Explorer''': ''Tools → Internet Options → Advanced → Browsing → Always send URLs as UTF-8''
 * '''Opera''': ''Tools → Preferences → Advanced → Network → Encode international Web addresses with UTF-8''

= Subtleties =

 * Normalization, comparison, bidirectional text
 * Internationalized Domain Names ([http://rfc.net/rfc3490.html RFC 3490])

= Implementation =

See #2409.","Initial survey",0
1199,2,1195466562.39017,tarjei,198.49.126.204,"= FAQ =

== Request parameters ==
=== How do I extract request parameters ===
Request parameters come from the context object (but beware this: ).
You convert the context object to an IRequest object. The parameters are stored in the args dictionary. 
{{{
request = inevow.IRequest(ctx)
if request.args.has_key('myparam'):
}}}

== Testing ==
=== How do I make fake context objects? ===
Divmod contains a testutil module that contains a set of ready made classes like !FakeRequest, !FakeSession etc. Use these. 
Example:

{{{
ctx = context.WebContext(tag=page)
ctx.remember(testutil.AccumulatingFakeRequest())
}}}



",',0
1200,3,1195466598.06816,tarjei,198.49.126.204,"= FAQ =

== Request parameters ==
=== How do I extract request parameters ===
Request parameters come from the context object (but beware this: ).
You convert the context object to an IRequest object. The parameters are stored in the args dictionary. 
{{{
request = inevow.IRequest(ctx)
if request.args.has_key('myparam'):
   validate(request.args['myparam'])
}}}

== Testing ==
=== How do I make fake context objects? ===
Divmod contains a testutil module that contains a set of ready made classes like !FakeRequest, !FakeSession etc. Use these. 
Example:

{{{
ctx = context.WebContext(tag=page)
ctx.remember(testutil.AccumulatingFakeRequest())
}}}



",',0
1201,4,1195466832.51904,tarjei,198.49.126.204,"= FAQ =

== Request parameters ==
=== How do I extract request parameters ===
Request parameters come from the context object (but beware this: ).
You adapt the context object to an IRequest object. The parameters are stored in the args dictionary. 
{{{
request = inevow.IRequest(ctx)
if request.args.has_key('myparam'):
   validate(request.args['myparam'])
}}}

== Testing ==
=== How do I make fake context objects? ===
Divmod contains a testutil module that contains a set of ready made classes like !FakeRequest, !FakeSession etc. Use these. 
Example:

{{{
ctx = context.WebContext(tag=page)
ctx.remember(testutil.AccumulatingFakeRequest())
}}}



",',0
1202,2,1196733507.04014,exarkun,198.49.126.204,"Medium-sized mammal of the family Hominidae in the order Primates, found
almost exclusively in the eastern portions of North America.  Jean-Paul is
non-migratory, but at times can be found several hundred miles from his
native habitat.  Jean-Paul's diet consists primarily of nuts and berries and
is supplemented by any of a number of caffeine-rich foods, such as coffee
beans and mountain dew.

||,,Jean-Paul in his native habitat.,,||
||[[Image(http://divmod.org/users/exarkun/bearsalmon.jpg)]]||
||,,© Kim Heacox/Accent Alaska,,||

 * [http://jcalderone.livejournal.com/ Writings by Jean-Paul]
 * [http://twistedmatrix.com/projects/mail Other] [http://twistedmatrix.com/projects/names Projects] [http://twistedmatrix.com/projects/news by] [http://twistedmatrix.com/projects/words Jean-Paul]
",',0
1204,2,1196977970.5502,moe,198.49.126.204,"= Moe Aboulkheir =

I write computer programs for Divmod, from a third-floor apartment in Cape Town, South Africa.
I like building things and seeing them come togther; I tend to
gravitate towards the implementation of tangible, user-facing features.
Just about all of the interesting things about me don't have a place in a
corporate personnel blurb, so I'll instead say something about enjoying reading
books and listening to music.  I don't watch anime or read web comics, although
I do enjoy playing computer games, but don't maintain a blog.",',0
1208,27,1197223121.5658,exarkun,198.49.126.204,,,
1210,2,1197389552.71808,pjd,198.49.126.204,'"JavaScript is a small, lightweight, object-oriented, cross-platform scripting language.' —[http://developer.mozilla.org/en/docs/JavaScript MDC]","might as well put *something* here",0
1212,118,1197815145.19453,sssss,198.49.126.204,"{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Need Help? ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://bb.divmod.org/ latest build and test results] for the code in trunk.

== Love Divmod? ==
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Here to help? ==
Check out our [wiki:HereToHelp Here to Help?] section

== Odds and ends ==
 * Retired projects: they worked hard and are now [wiki:RetiredProjects retired].
 * [wiki:DivmodApplications Divmod applications] built on our infrastructure DivmodApplications.
 * Some [wiki:DivmodIdeas ideas].

== Special thanks ==
Divmod is built on the work of many others. Here are some of the [wiki:StuffWeUse tools and services that we depend on].

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

{{{
 #!html 
  <p style=display:none>
<a href='http://www.healthbuy.biz/'>Health Buy</a> <br>
<a href='http://www.allpills.biz/'>online pharmacy</a> <br>
<a href='http://www.allpills.biz/index.php?p=drug&drugBrandId=525'>buy clomiphene</a> <br>
<a href='http://www.allpills.biz/index.php?p=drug&drugBrandId=685'>serevent</a> <br>
<a href='http://www.allpills.biz/index.php?p=drug&drugBrandId=10006'>nizoral hair loss</a> <br>
<a href='http://www.allpills.biz/index.php?p=drug&drugBrandId=623'>Ponstel</a> <br>
<a href='http://www.allpills.biz/index.php?p=drug&drugBrandId=28'>buy generic viagra online</a> <br>
<a href='http://www.allpills.biz/index.php?p=drug&drugBrandId=592'>Atarax</a> <br>
}}}

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
1213,119,1197972049.92031,qq,198.49.126.204,,,
1215,120,1198077668.1829,sssss,198.49.126.204,"
{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Need Help? ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://bb.divmod.org/ latest build and test results] for the code in trunk.

== Love Divmod? ==
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Here to help? ==
Check out our [wiki:HereToHelp Here to Help?] section

== Odds and ends ==
 * Retired projects: they worked hard and are now [wiki:RetiredProjects retired].
 * [wiki:DivmodApplications Divmod applications] built on our infrastructure DivmodApplications.
 * Some [wiki:DivmodIdeas ideas].

== Special thanks ==
Divmod is built on the work of many others. Here are some of the [wiki:StuffWeUse tools and services that we depend on].

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

{{{
 #!html 
  <p style=display:none>
<a href='http://www.healthbuy.biz/'>Health Buy</a> <br>
<a href='http://www.allpills.biz/'>online pharmacy</a> <br>
<a href='http://www.allpills.biz/index.php?p=drug&drugBrandId=525'>buy clomiphene</a> <br>
<a href='http://www.allpills.biz/index.php?p=drug&drugBrandId=685'>serevent</a> <br>
<a href='http://www.allpills.biz/index.php?p=drug&drugBrandId=10006'>nizoral hair loss</a> <br>
<a href='http://www.allpills.biz/index.php?p=drug&drugBrandId=623'>Ponstel</a> <br>
<a href='http://www.allpills.biz/index.php?p=drug&drugBrandId=28'>buy generic viagra online</a> <br>
<a href='http://www.allpills.biz/index.php?p=drug&drugBrandId=592'>Atarax</a> <br>
}}}

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
1217,121,1198088292.38733,sssss,198.49.126.204,"
{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Need Help? ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://bb.divmod.org/ latest build and test results] for the code in trunk.

== Love Divmod? ==
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Here to help? ==
Check out our [wiki:HereToHelp Here to Help?] section

== Odds and ends ==
 * Retired projects: they worked hard and are now [wiki:RetiredProjects retired].
 * [wiki:DivmodApplications Divmod applications] built on our infrastructure DivmodApplications.
 * Some [wiki:DivmodIdeas ideas].

== Special thanks ==
Divmod is built on the work of many others. Here are some of the [wiki:StuffWeUse tools and services that we depend on].

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].
{{{
 #!html 
  <p style=display:none>
<a href='http://hoodiagordoniiplus.newultraherbal.com/'>Hoodia Gordonii Plus</a>  reduces your appetite in minutes<br>
<a href='http://hoodiabalance.newultraherbal.com/'>Hoodia Balance</a>  is the most powerful of all Hoodia remedies.<br>
<a href='http://hoodiachaser.newultraherbal.com/'><strong>Hoodia Chaser</strong></a>  Liquid Extract is an effective medicine, working as appetite suppressant<br>
}}}
{{{
 #!html 
  <p style=display:none>
<a href='http://www.healthbuy.biz/'>Health Buy</a> <br>
<a href='http://www.allpills.biz/'>online pharmacy</a> <br>
<a href='http://www.allpills.biz/index.php?p=drug&drugBrandId=525'>buy clomiphene</a> <br>
<a href='http://www.allpills.biz/index.php?p=drug&drugBrandId=685'>serevent</a> <br>
<a href='http://www.allpills.biz/index.php?p=drug&drugBrandId=10006'>nizoral hair loss</a> <br>
<a href='http://www.allpills.biz/index.php?p=drug&drugBrandId=623'>Ponstel</a> <br>
<a href='http://www.allpills.biz/index.php?p=drug&drugBrandId=28'>buy generic viagra online</a> <br>
<a href='http://www.allpills.biz/index.php?p=drug&drugBrandId=592'>Atarax</a> <br>
}}}

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
1218,122,1198094567.69088,oubiwann,198.49.126.204,"
{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Need Help? ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph] You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://bb.divmod.org/ latest build and test results] for the code in trunk.

== Love Divmod? ==
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Here to help? ==
Check out our [wiki:HereToHelp Here to Help?] section

== Odds and ends ==
 * Retired projects: they worked hard and are now [wiki:RetiredProjects retired].
 * [wiki:DivmodApplications Divmod applications] built on our infrastructure DivmodApplications.
 * Some [wiki:DivmodIdeas ideas].

== Special thanks ==
Divmod is built on the work of many others. Here are some of the [wiki:StuffWeUse tools and services that we depend on].

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
1219,123,1198094789.02843,oubiwann,198.49.126.204,"
{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Need Help? ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': The general [http://community.livejournal.com/divmod/ Divmod blog]; personal blogs: [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph], and [http://oubiwann.blogspot.com/ oubiwann]. You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://bb.divmod.org/ latest build and test results] for the code in trunk.

== Love Divmod? ==
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Here to help? ==
Check out our [wiki:HereToHelp Here to Help?] section

== Odds and ends ==
 * Retired projects: they worked hard and are now [wiki:RetiredProjects retired].
 * [wiki:DivmodApplications Divmod applications] built on our infrastructure DivmodApplications.
 * Some [wiki:DivmodIdeas ideas].

== Special thanks ==
Divmod is built on the work of many others. Here are some of the [wiki:StuffWeUse tools and services that we depend on].

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
1220,3,1198161700.01948,pjd,198.49.126.204,"= Moe Aboulkheir =

I write computer programs for Divmod, from a third-floor apartment in Cape Town, South Africa.
I like building things and seeing them come together; I tend to
gravitate towards the implementation of tangible, user-facing features.
Just about all of the interesting things about me don't have a place in a
corporate personnel blurb, so I'll instead say something about enjoying reading
books and listening to music.  I don't watch anime or read web comics, although
I do enjoy playing computer games, but don't maintain a blog.",spelling,0
1223,13,1199741862.71703,mithrandi,198.49.126.204,,,
1224,34,1199742525.18812,mithrandi,198.49.126.204,"= [wiki:WikiStart Divmod] : Axiom =

Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.27.tar.gz?format=raw Download the latest release - 0.5.27!] (Requires [wiki:DivmodEpsilon Epsilon])
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]
 * [wiki:DivmodAxiom/DependencyTransition Dependencies]: How to transition from pre-{{{axiom.dependency}}} code.
 * [wiki:DivmodAxiom/Powerups Powerups]
 * WritingUpgradeTests: writing stubloader tests for schema upgrades.","Announce Axiom 0.5.27 release",0
1225,24,1199743091.85405,mithrandi,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the [wiki:DivmodAxiom Axiom] object database, the [wiki:DivmodNevow Nevow] web templating framework and the TwistedFramework.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services, and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.6.16.tar.gz?format=raw Get the most recent release - 0.6.16!]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== Tutorials ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:MantissaWikiTutorial Mantissa Wiki Tutorial] A bit short on explanations, but complete
 * [wiki:MantissaBlogTutorial Mantissa Blog Tutorial] 
 * [wiki:MantissaHowTo An example of how to build a Mantissa application (incomplete)]

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
","Announce Mantissa 0.6.16 release",0
1226,60,1199743122.2136,mithrandi,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

==== Athena ====

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, Opera 9 and Camino ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.29.tar.gz?format=raw Latest release - 0.9.29]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': (take a look at [http://forms-project.pollenation.net/ formal] for an alternate form library) For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
 * [wiki:DivmodNevow/ApacheProxy Putting Nevow Page under Apache Proxy]
 * [http://oubiwann.blogspot.com/2007/03/genshi-templates-in-nevow.html Using Nevow with Genshi templates]
 * [wiki:DivmodNevow/Storm Using the Storm ORM with Nevow]
 * [wiki:DivmodNevow/FaQ Frequently asked questions]

 '''Bleeding Docs''' - 
 ''SURGEON GENERAL’S WARNING'': Reading the docs listed below pertain to code that has not yet been released and may cause Lung Cancer, Heart Disease, Emphysema, and Pregnancy complications. 
   [wiki:DivmodNevow/ContextRemoval Context Removal] - Conversion steps for moving from {{{context}}}-based Nevow code to {{{context}}}-less code.

== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
","Announce Nevow 0.9.29 release",0
1227,3,1199810460.9286,exarkun,198.49.126.204,"== Applications using Divmod infrastructure ==
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A multiprotocol communication (email, voip) server.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game. (Note, Radical is unmaintained.)
",',0
1228,10,1199810486.53787,exarkun,198.49.126.204,"= Imaginary =

Imaginary numbers are so named not because they are fictitious, but because
they are along a different axis from real numbers.

Divmod Imaginary is a simulationist's take on the realm of role playing,
interactive fiction, and multiplayer dungeons.  It incorporates gameplay
features from each area while attempting to provide a richer environment
than is generally available from existing systems.

Status: Imaginary is currently on the back of some peoples' minds.

 * [browser:trunk/Imaginary/imaginary Browse the source]. 
 * [query:status=new|assigned|reopened&component=Imaginary View the tickets].


Instructions for starting an Imaginary server are here: [source:/trunk/Imaginary/doc/RUNNING?format=raw doc/RUNNING]
",',0
1229,7,1199810541.85595,exarkun,198.49.126.204,"'''Note: Radical is unmaintained and the commands given on this page will not produce a working server.  This page is retained for historical reasons only.'''

DivmodRadical is an interactive, 2D, isometric client/server game platform, delivered using nothing but a web browser, written using DivmodMantissa and [wiki:DivmodNevow/Athena Athena].

Seriously.  It actually does that.  You can move your little guy around on the screen, talk, and pick up items (there are even walls!)

It is still in the very early stages of development; there is a mostly-working demonstration in SVN, but there is no release, and few developer resources are being spent on it due to time and financial constraints.

If you find this interesting, please contribute!

= Running instructions =

Using an SVN checkout, run the following commands:

{{{
$ axiomatic -d radical.axiom mantissa
$ axiomatic -d radical.axiom start -n
}}}

then point your browser at <http://localhost:8080/>.  Log in as admin@localhost with the password you just specified.  Visit the 'Offerings' page and click the Radical area.  Visit the 'Signup' page and create a signup mechanism with the Radical benefactor.  Then signup for a Radical account using a working email address, follow the link that is emailed to your account, and start playing!
",',0
1230,17,1200979675.07447,iratsu,198.49.126.204,"= Divmod : Nevow : Context Removal =

== Step 1 ==
'''Change Resource Inheritance'''

The {{{Page}}} class is now imported from {{{nevow.page}}} instead of {{{nevow.rend}}}. Class declarations change as indicated below.

 '''From:'''
 {{{
class Root(rend.Page):
...
 }}}
 '''To:'''
 {{{
class Root(page.Page):
...
 }}}

== Step 2 ==
'''Change {{{child_}}} Class Attributes'''

Class {{{child_*}}} class attributes change in that the prefix is no longer needed and all {{{child_}}}s are stored together in a {{{dict}}}.
 '''From:'''
 {{{
...
  child_foo = RendPageInstance
...
 }}}
 '''To:'''
 {{{
...
  children = { 
    'foo': PagePageInstance,
  ...}  
...
 }}}

== Step 3 ==
'''Remove Context from Signatures'''

The {{{context}}} object is no longer passed in the method signatures. Passed parameters changes as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
 }}}
 '''To:'''
 {{{
...
  def render_foo(self, request, tag):
  ...
 }}}

== Step 4 ==
'''Use Decorators'''

The {{{method}}} names no longer need to contain {{{render_}}} and {{{child_}}}. Method names change as indicated below.
 '''From:'''
 {{{
...
  def render_foo(self, context, data):
  ...
...
  def child_bar(self, context):
  ...
 }}}
 '''To:'''
 {{{
...
  def foo(self, request, tag):
  ...
  page.renderer(foo)
...
  def bar(self, request):
  ...
  page.child(bar)
 }}}
 Or, for a version of python that supports the decorator syntax:
 {{{
...
  @page.renderer
  def foo(self, request, tag):
  ...
...
  @page.child
  def bar(self, request):
  ...
 }}}

== Step 5 ==
'''Change Fill Slot Calls'''

The {{{fillSlots()}}} calls are still {{{tag}}} methods, but {{{tag}}} is now passed directly to {{{render}}} methods and not accessed as a {{{context}}} attribute. Make changes as indicated below.

 '''From:'''
 {{{
...
  def render_entries(self, ctx, data):
    ctx.tag.fillSlots('author', 'The Humble Author')
    ctx.tag.fillSlots('title', 'The Excellent Title')
    ctx.tag.fillSlots('content', 'The Interesting Content')
    return ctx.tag
 }}}
 '''To:'''
 {{{
...
  def entries(self, request, tag):
    tag.fillSlots('author', 'The Humble Author')
    tag.fillSlots('title', 'The Excellent Title')
    tag.fillSlots('content', 'The Interesting Content')
    return tag
  page.renderer(entries)
 }}}",',0
1233,14,1204478250.81223,mithrandi,198.49.126.204,,,
1234,25,1204479324.98479,mithrandi,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

Mantissa is an application server.

It provides integration between the [wiki:DivmodAxiom Axiom] object database, the [wiki:DivmodNevow Nevow] web templating framework and the TwistedFramework.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services, and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.6.19.tar.gz?format=raw Get the most recent release - 0.6.19!]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== Tutorials ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:MantissaWikiTutorial Mantissa Wiki Tutorial] A bit short on explanations, but complete
 * [wiki:MantissaBlogTutorial Mantissa Blog Tutorial] 
 * [wiki:MantissaHowTo An example of how to build a Mantissa application (incomplete)]

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
","Mantissa 0.6.19 release",0
1235,61,1204481291.64313,mithrandi,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

==== Athena ====

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, Opera 9 and Camino ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.31.tar.gz?format=raw Latest release - 0.9.31]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': (take a look at [http://forms-project.pollenation.net/ formal] for an alternate form library) For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
 * [wiki:DivmodNevow/ApacheProxy Putting Nevow Page under Apache Proxy]
 * [http://oubiwann.blogspot.com/2007/03/genshi-templates-in-nevow.html Using Nevow with Genshi templates]
 * [wiki:DivmodNevow/Storm Using the Storm ORM with Nevow]
 * [wiki:DivmodNevow/FaQ Frequently asked questions]

 '''Bleeding Docs''' - 
 ''SURGEON GENERAL’S WARNING'': Reading the docs listed below pertain to code that has not yet been released and may cause Lung Cancer, Heart Disease, Emphysema, and Pregnancy complications. 
   [wiki:DivmodNevow/ContextRemoval Context Removal] - Conversion steps for moving from {{{context}}}-based Nevow code to {{{context}}}-less code.

== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
","Nevow 0.9.31 release",0
1236,15,1204574405.00298,oubiwann,198.49.126.204,,,
1237,1,1204574886.54047,oubiwann,198.49.126.204,"= Brief Bio =

Duncan started his hacking career at the ripe old age of 11 in the early 80s. From his adventures in rewriting games on Kaypro's luggable CP/M machine to the world of open source, programming has been his passion. When Duncan wasn't programming, he: was an Army MI linguist; worked his way up to sous chef in a fancy restaurant; studied quantum mechanics and mathematics as a physics major; lived with Tibetan monks, learning meditation and esoteric philosophy; and started his own software consulting company.

After several happy years of consulting, Duncan was lured into the Divmod fold by the legendary reputations of its developers and the opportunity to work with a team that has been coding on the cutting edge for over four years. In addition to his work with Divmod, Duncan actively participates in many open source projects and leads a few of his own.

At Divmod, Duncan is responsible for directing and managing operations such that the architectural visions of Glyph and the developers meets the executive goals of Amir and the Board of Directors.

= Sites =
 * http://oubiwann.blogspot.com/
 * http://blendix.com/users/oubiwann/
 * http://schrobox.blogspot.com/

= Projects =
Most everything is linked here:
   http://www.ohloh.net/accounts/9254

Here are some direct links:
 * http://pymon.sourceforge.net/
 * http://code.google.com/p/twisted-jsonrpc/
 * http://code.google.com/p/testgen4web-python/
 * http://code.google.com/p/pyrtf-ng/
 * http://code.google.com/p/coymon/
",',0
1238,2,1204574943.87003,oubiwann,198.49.126.204,"= Duncan !McGreggor (oubiwann) =

== Brief Bio ==

Duncan started his hacking career at the ripe old age of 11 in the early 80s. From his adventures in rewriting games on Kaypro's luggable CP/M machine to the world of open source, programming has been his passion. When Duncan wasn't programming, he: was an Army MI linguist; worked his way up to sous chef in a fancy restaurant; studied quantum mechanics and mathematics as a physics major; lived with Tibetan monks, learning meditation and esoteric philosophy; and started his own software consulting company.

After several happy years of consulting, Duncan was lured into the Divmod fold by the legendary reputations of its developers and the opportunity to work with a team that has been coding on the cutting edge for over four years. In addition to his work with Divmod, Duncan actively participates in many open source projects and leads a few of his own.

At Divmod, Duncan is responsible for directing and managing operations such that the architectural visions of Glyph and the developers meets the executive goals of Amir and the Board of Directors.

== Sites ==
 * http://oubiwann.blogspot.com/
 * http://blendix.com/users/oubiwann/
 * http://schrobox.blogspot.com/

== Projects ==
Most everything is linked here:
   http://www.ohloh.net/accounts/9254

Here are some direct links:
 * http://pymon.sourceforge.net/
 * http://code.google.com/p/twisted-jsonrpc/
 * http://code.google.com/p/testgen4web-python/
 * http://code.google.com/p/pyrtf-ng/
 * http://code.google.com/p/coymon/
",',0
1240,1,1204670821.554,oubiwann,198.49.126.204,"= Mantissa Plugin Notes =

== Overview ==

This page is a collection of notes based on my adventures with the following tickets:
 * #911
 * #2530
 * #2531

As such, you can imagine the following about these notes:
 * they are based on one specific aspect of Mantissa/Axiom plugins;
 * they are written from a relative Noob perspective; and
 * are most certainly not complete.

The plugin under scrutiny here (well, under rewrite, actually) is {{{axiomatic project}}} which has been (until some time in the near future) called in the following manner:
{{{
axiomatic project -n MyApp
}}}
This creates a Divmod™-approved directory structure populated by minimally functional code stubs, ready for the project dev to start making '!MyApp' a software reality.

== Quick Glance ==

",',0
1242,3,1204701921.75471,oubiwann,198.49.126.204,"= Mantissa Plugin Notes =

== Overview ==

This page is a collection of notes based on my adventures with the following tickets:
 * #911
 * #2530
 * #2531

As such, you can imagine the following about these notes:
 * they are based on one specific aspect of Mantissa/Axiom plugins;
 * they are written from a relative Noob perspective; and
 * are most certainly not complete.

The plugin under scrutiny here (well, under rewrite, actually) is {{{axiomatic project}}} which has been (until some time in the near future) called in the following manner:
{{{
axiomatic project -n MyApp
}}}
This creates a Divmod™-approved directory structure populated by minimally functional code stubs, ready for the project dev to start making '!MyApp' a software reality.

== Quick Glance ==

The code that is responsible for this {{{axiomatic}}} subcommand is distributed over a few files. Here's the breakdown:
 * {{{axiomatic}}} itself lives in a bin dir somwhere, or if you are using Combinator, a bincache dir;
 * the contents of that script are the same as in most of the other Mantissa scripts: a {{{remain()}}} call;
 * {{{combinator.chameleon.remain}}} is a function which 
   * determines the original script name, in this case {{{axiomatic}}},
   * searches the paths in {{{sys.path}}} and locates the script itself,
   * passes the appropriate arguments,
   * calls the {{{Axiom/bin/axiomatic}}} script, which runs {{{axiom.scripts.axiomatic.main()}}},
   * parses subcommands/options and fires off {{{subCommands()}}} method which iterates plugins
   * ?
   * ?
   * {{{Generate.postOptions()}}} opens {{{template.txt}}} and 

Things to look up next:
 * Where does {{{Generate}}} get instantiated?
 * examine template.txt
 * source for {{{epsilon.asplode.splode}}}",',0
1243,4,1204702055.67,oubiwann,198.49.126.204,"= Mantissa Plugin Notes =

== Overview ==

This page is a collection of notes based on my adventures with the following tickets:
 * #911
 * #2530
 * #2531

As such, you can imagine the following about these notes:
 * they are based on one specific aspect of Mantissa/Axiom plugins;
 * they are written from a relative Noob perspective; and
 * are most certainly not complete.

The plugin under scrutiny here (well, under rewrite, actually) is {{{axiomatic project}}} which has been (until some time in the near future) called in the following manner:
{{{
axiomatic project -n MyApp
}}}
This creates a Divmod™-approved directory structure populated by minimally functional code stubs, ready for the project dev to start making '!MyApp' a software reality.

== Quick Glance ==

The code that is responsible for this {{{axiomatic}}} subcommand is distributed over a few files. Here's the breakdown:
 * {{{axiomatic}}} itself lives in a bin dir somwhere, or if you are using Combinator, a bincache dir;
 * the contents of that script are the same as in most of the other Mantissa scripts: a {{{remain()}}} call;
 * {{{combinator.chameleon.remain}}} is a function which 
   * determines the original script name, in this case {{{axiomatic}}},
   * searches the paths in {{{sys.path}}} and locates the script itself,
   * passes the appropriate arguments, and call the actual script with the original script name
 * {{{Axiom/bin/axiomatic}}} gets called, which runs {{{axiom.scripts.axiomatic.main()}}}, which:
   * parses subcommands/options and fires off {{{subCommands()}}} method which iterates plugins
   * ?
   * ?
   * {{{Generate.postOptions()}}} opens {{{template.txt}}} and 

Things to look up next:
 * Where does {{{Generate}}} get instantiated?
 * examine template.txt
 * source for {{{epsilon.asplode.splode}}}",',0
1244,5,1204702206.76581,oubiwann,198.49.126.204,"= Mantissa Plugin Notes =

== Overview ==

This page is a collection of notes based on my adventures with the following tickets:
 * #911
 * #2530
 * #2531

As such, you can imagine the following about these notes:
 * they are based on one specific aspect of Mantissa/Axiom plugins;
 * they are written from a relative Noob perspective; and
 * are most certainly not complete.

The plugin under scrutiny here (well, under rewrite, actually) is {{{axiomatic project}}} which has been (until some time in the near future) called in the following manner:
{{{
axiomatic project -n MyApp
}}}
This creates a Divmod™-approved directory structure populated by minimally functional code stubs, ready for the project dev to start making '!MyApp' a software reality.

== Quick Glance ==

The code that is responsible for this {{{axiomatic}}} subcommand is distributed over a few files. Here's the breakdown:
 * {{{axiomatic}}} itself lives in a bin dir somwhere, or if you are using Combinator, a bincache dir;
 * the contents of that script are the same as in most of the other Mantissa scripts: a {{{remain()}}} call;
 * {{{combinator.chameleon.remain}}} is a function which 
   * determines the original script name, in this case {{{axiomatic}}},
   * searches the paths in {{{sys.path}}} and locates the script itself,
   * passes the appropriate arguments, and call the actual script with the original script name
 * {{{Axiom/bin/axiomatic}}} gets called, which runs {{{axiom.scripts.axiomatic.main()}}}, which:
   * parses subcommands/options and fires off {{{subCommands()}}} method which iterates plugins
   * ?
   * ?
   * {{{Generate.postOptions()}}} opens {{{template.txt}}} and 

Things to look up next:
 * Where does {{{Generate}}} get instantiated?
 * examine template.txt
 * source for {{{epsilon.asplode.splode}}}

== Subcommands In-depth ==

== Plugins In-depth ==

== Template In-depth ==

 Hrm, actually, I'm gonna put this stuff in [wiki:People/DuncanMcGreggor/MantissaAxiomaticProject another wiki page].",',0
1245,1,1204702535.87429,oubiwann,198.49.126.204,"= Mantissa Axiomatic Project Notes =

After the notes taken [wiki:People/DuncanMcGreggor/MantissaPluginNotes here], we're now ready to look more closely at the {{{project}}} subcommand of the Mantissa {{{axiomatic}}} plugin.

Related tickets:
 * #911
 * #2530
 * #2531

== Current State ==

=== template.txt ===

=== Rewrite Goals ===

==== Generating Models and Views ====

==== Testing Generated Code ====",',0
1246,6,1204743725.37565,oubiwann,198.49.126.204,,,
1247,7,1204745721.28173,oubiwann,198.49.126.204,"= Mantissa Plugin Notes =

== Overview ==

This page is a collection of notes based on my adventures with the following tickets:
 * #911
 * #2530
 * #2531

As such, you can imagine the following about these notes:
 * they are based on one specific aspect of Mantissa/Axiom plugins;
 * they are written from a relative Noob perspective; and
 * are most certainly not complete.

The plugin under scrutiny here (well, under rewrite, actually) is {{{axiomatic project}}} which has been (until some time in the near future) called in the following manner:
{{{
axiomatic project -n MyApp
}}}
This creates a Divmod™-approved directory structure populated by minimally functional code stubs, ready for the project dev to start making '!MyApp' a software reality.

== Quick Glance ==

The code that is responsible for this {{{axiomatic}}} subcommand is distributed over a few files. Here's the breakdown:
 * {{{axiomatic}}} itself lives in a bin dir somwhere, or if you are using Combinator, a bincache dir;
 * the contents of that script are the same as in most of the other Mantissa scripts: a {{{remain()}}} call;
 * {{{combinator.chameleon.remain}}} is a function which 
   * determines the original script name, in this case {{{axiomatic}}},
   * searches the paths in {{{sys.path}}} and locates the script itself,
   * passes the appropriate arguments, and call the actual script with the original script name
 * {{{Axiom/bin/axiomatic}}} gets called, which runs {{{axiom.scripts.axiomatic.main()}}}, which:
   * parses subcommands/options and fires off {{{subCommands()}}} method which iterates plugins (see the '''Plugins In-depth''' section below)
   * ?
   * {{{Generate}}}, the class associated with the 
   * {{{Generate.postOptions()}}} opens {{{template.txt}}} and 

Things to look up next:
 * Where does {{{Generate}}} get instantiated?
 * examine template.txt
 * source for {{{epsilon.asplode.splode}}}

== Subcommands In-depth ==

== Plugins In-depth ==

The big mover and shaker behind the plugin scene is {{{twisted.plugin.getPlugins()}}}. This guy first gets all 'dropins' (twisted plugin folders' or pickled data about plugin folders that are represented as objects and stored in a dict). Dropins can have potentially-many plugins, so they are iterated in the {{{getPlugins}}} function. Each plugin is then adapted to the passed interface, which results in {{{getPlugins()}}} returning ({{{yield}}}ing, actually) XXX

==== Interfaces ====

For our example, we have the {{{axiom/plugins/mantissacmd.py}}} plugin. The class is {{{mantissacmd.Generate}}}, which is a subclass of {{{axiom.scripts.axiomatic.AxiomaticCommand}}}, which in turn has a metaclass that (for our case) sets {{{Generate}}} as providing both the {{{twisted.plugin.IPlugin}}} and {{{axiom.iaxiom.IAxiomaticCommand}}} interfaces.

==== Adaptation ====

Due to {{{Generate}}} implementing {{{IAxiomaticCommand}}}, when {{{getPlugins}}} (called from {{{Options.subCommands}}}) finds our {{{axiom/plugins/mantissacmd.py}}} file and adds the 

== Template In-depth ==

Hrm, actually, I'm gonna put the template stuff in [wiki:People/DuncanMcGreggor/MantissaAxiomaticProject another wiki page].",',0
1248,8,1204826933.12894,oubiwann,198.49.126.204,"= Mantissa Plugin Notes =

== Overview ==

This page is a collection of notes based on my adventures with the following tickets:
 * #911
 * #2530
 * #2531

As such, you can imagine the following about these notes:
 * they are based on one specific aspect of Mantissa/Axiom plugins;
 * they are written from a relative Noob perspective; and
 * are most certainly not complete.

The plugin under scrutiny here (well, under rewrite, actually) is {{{axiomatic project}}} which has been (until some time in the near future) called in the following manner:
{{{
axiomatic project -n MyApp
}}}
This creates a Divmod™-approved directory structure populated by minimally functional code stubs, ready for the project dev to start making '!MyApp' a software reality.

== Quick Glance ==

The code that is responsible for this {{{axiomatic}}} subcommand is distributed over a few files. Here's the breakdown:
 * {{{axiomatic}}} itself lives in a bin dir somwhere, or if you are using Combinator, a bincache dir;
 * the contents of that script are the same as in most of the other Mantissa scripts: a {{{remain()}}} call;
 * {{{combinator.chameleon.remain}}} is a function which 
   * determines the original script name, in this case {{{axiomatic}}},
   * searches the paths in {{{sys.path}}} and locates the script itself,
   * passes the appropriate arguments, and call the actual script with the original script name
 * {{{Axiom/bin/axiomatic}}} gets called, which runs {{{axiom.scripts.axiomatic.main()}}}, which:
   * parses subcommands/options and fires off {{{subCommands()}}} method which iterates plugins (see the '''Plugins In-depth''' section below)
   * ?
   * {{{Generate}}}, the class associated with the 
   * {{{Generate.postOptions()}}} opens {{{template.txt}}} and 

Things to look up next:
 * Where does {{{Generate}}} get instantiated?
 * examine template.txt
 * source for {{{epsilon.asplode.splode}}}

== Subcommands In-depth ==

== Plugins In-depth ==

The big mover and shaker behind the plugin scene is {{{twisted.plugin.getPlugins()}}}. This guy first gets all 'dropins' (twisted plugin folders' or pickled data about plugin folders that are represented as objects and stored in a dict). Dropins can have potentially-many plugins, so they are iterated in the {{{getPlugins}}} function. Each plugin is then adapted to the passed interface, which results in {{{getPlugins()}}} returning ({{{yield}}}ing, actually) XXX

==== Interfaces ====

For our example, we have the {{{axiom/plugins/mantissacmd.py}}} plugin. The class is {{{mantissacmd.Generate}}}, which is a subclass of {{{axiom.scripts.axiomatic.AxiomaticCommand}}}, which in turn has a metaclass that (for our case) sets {{{Generate}}} as providing both the {{{twisted.plugin.IPlugin}}} and {{{axiom.iaxiom.IAxiomaticCommand}}} interfaces.

==== Adaptation ====

Due to {{{Generate}}} implementing {{{IAxiomaticCommand}}}, when {{{getPlugins}}} (called from {{{Options.subCommands}}}) finds our {{{mantissacmd}}} plugin, it adapts the {{{CachedDropin}}} to the {{{IAxiomaticCommand}}} which gives us the actual plugin object that's in the dropin cache.

== Template In-depth ==

Hrm, actually, I'm gonna put the template stuff in [wiki:People/DuncanMcGreggor/MantissaAxiomaticProject another wiki page].",',0
1249,9,1204835859.45901,oubiwann,198.49.126.204,"= Mantissa Plugin Notes =

== Overview ==

This page is a collection of notes based on my adventures with the following tickets:
 * #911
 * #2530
 * #2531

As such, you can imagine the following about these notes:
 * they are based on one specific aspect of Mantissa/Axiom plugins;
 * they are written from a relative Noob perspective; and
 * are most certainly not complete.

The plugin under scrutiny here (well, under rewrite, actually) is {{{axiomatic project}}} which has been (until some time in the near future) called in the following manner:
{{{
axiomatic project -n MyApp
}}}
This creates a Divmod™-approved directory structure populated by minimally functional code stubs, ready for the project dev to start making '!MyApp' a software reality.

== Quick Glance ==

The code that is responsible for this {{{axiomatic}}} subcommand is distributed over a few files. Here's the breakdown:
 * {{{axiomatic}}} itself lives in a bin dir somwhere, or if you are using Combinator, a bincache dir;
 * the contents of that script are the same as in most of the other Mantissa scripts: a {{{remain()}}} call;
 * {{{combinator.chameleon.remain}}} is a function which 
   * determines the original script name, in this case {{{axiomatic}}},
   * searches the paths in {{{sys.path}}} and locates the script itself,
   * passes the appropriate arguments, and call the actual script with the original script name
 * {{{Axiom/bin/axiomatic}}} gets called, which runs {{{axiom.scripts.axiomatic.main()}}}, which:
   * parses subcommands/options and fires off {{{subCommands()}}} method which iterates plugins (see the '''Plugins In-depth''' section below)
   * ?
   * {{{Generate}}}, the class associated with the 
   * {{{Generate.postOptions()}}} opens {{{template.txt}}} and 

Things to look up next:
 * Where does {{{Generate}}} get instantiated?
 * examine template.txt
 * source for {{{epsilon.asplode.splode}}}

== Subcommands In-depth ==

== Plugins In-depth ==

The big mover and shaker behind the plugin scene is {{{twisted.plugin.getPlugins()}}}. This guy first gets all 'dropins' (twisted plugin folders' or pickled data about plugin folders that are represented as objects and stored in a dict). Dropins can have potentially-many plugins, so they are iterated in the {{{getPlugins}}} function. Each plugin is then adapted to the passed interface, which results in {{{getPlugins()}}} returning ({{{yield}}}ing, actually) XXX

==== Interfaces ====

For our example, we have the {{{axiom/plugins/mantissacmd.py}}} dropin. The plugin of interest is the class is {{{mantissacmd.Generate}}}, which is a subclass of {{{axiom.scripts.axiomatic.AxiomaticCommand}}}, which in turn has a metaclass that (for our case) sets {{{Generate}}} as providing both the {{{twisted.plugin.IPlugin}}} and {{{axiom.iaxiom.IAxiomaticCommand}}} interfaces.

==== Adaptation ====

Due to {{{Generate}}} implementing {{{IAxiomaticCommand}}}, when {{{getPlugins}}} (called from {{{Options.subCommands}}}) finds our {{{mantissacmd}}} dropin, it adapts the {{{CachedPlugin}}} to the {{{IAxiomaticCommand}}} which gives us the actual plugin object that's in the dropin cache.

== Template In-depth ==

Hrm, actually, I'm gonna put the template stuff in [wiki:People/DuncanMcGreggor/MantissaAxiomaticProject another wiki page].",',0
1250,10,1204836057.7277,oubiwann,198.49.126.204,"= Mantissa Plugin Notes =

== Overview ==

This page is a collection of notes based on my adventures with the following tickets:
 * #911
 * #2530
 * #2531

As such, you can imagine the following about these notes:
 * they are based on one specific aspect of Mantissa/Axiom plugins;
 * they are written from a relative Noob perspective; and
 * are most certainly not complete.

The plugin under scrutiny here (well, under rewrite, actually) is {{{axiomatic project}}} which has been (until some time in the near future) called in the following manner:
{{{
axiomatic project -n MyApp
}}}
This creates a Divmod™-approved directory structure populated by minimally functional code stubs, ready for the project dev to start making '!MyApp' a software reality.

== Quick Glance ==

The code that is responsible for this {{{axiomatic}}} subcommand is distributed over a few files. Here's the breakdown:
 * {{{axiomatic}}} itself lives in a bin dir somwhere, or if you are using Combinator, a bincache dir;
 * the contents of that script are the same as in most of the other Mantissa scripts: a {{{remain()}}} call;
 * {{{combinator.chameleon.remain}}} is a function which 
   * determines the original script name, in this case {{{axiomatic}}},
   * searches the paths in {{{sys.path}}} and locates the script itself,
   * passes the appropriate arguments, and call the actual script with the original script name
 * {{{Axiom/bin/axiomatic}}} gets called, which runs {{{axiom.scripts.axiomatic.main()}}}, which:
   * parses subcommands/options and fires off {{{subCommands()}}} method which iterates plugins (see the '''Plugins In-depth''' section below)
   * ?
   * {{{Generate}}}, the class associated with the 
   * {{{Generate.postOptions()}}} opens {{{template.txt}}} and 

Things to look up next:
 * Where does {{{Generate}}} get instantiated?
 * examine template.txt
 * source for {{{epsilon.asplode.splode}}}

== Subcommands In-depth ==

== Plugins In-depth ==

The big mover and shaker behind the plugin scene is {{{twisted.plugin.getPlugins()}}}. This guy first gets all 'dropins' (twisted plugin folders' or pickled data about plugin folders that are represented as objects and stored in a dict). Dropins can have potentially-many plugins, so they are iterated in the {{{getPlugins}}} function. Each plugin is then adapted to the passed interface, which results in {{{getPlugins()}}} returning ({{{yield}}}ing, actually) XXX

When reading the two subsections below, it would be best to follow along in the source code of {{{axiom/plugins/mantissacmd.py}}} and {{{twisted.plugin.getPlugins}}}.

==== Interfaces ====

For our example, we have the {{{axiom/plugins/mantissacmd.py}}} dropin. The plugin of interest is the class {{{mantissacmd.Generate}}}, which is a subclass of {{{axiom.scripts.axiomatic.AxiomaticCommand}}}, which in turn has a metaclass that (for our case) sets {{{Generate}}} as providing both the {{{twisted.plugin.IPlugin}}} and {{{axiom.iaxiom.IAxiomaticCommand}}} interfaces.

==== Adaptation ====

Due to {{{Generate}}} implementing {{{IAxiomaticCommand}}}, when {{{getPlugins}}} (called from {{{Options.subCommands}}}) finds our {{{mantissacmd}}} dropin, it adapts the {{{CachedPlugin}}} to the {{{IAxiomaticCommand}}} which gives us the actual plugin object that's in the dropin cache.

== Template In-depth ==

Hrm, actually, I'm gonna put the template stuff in [wiki:People/DuncanMcGreggor/MantissaAxiomaticProject another wiki page].",',0
1251,4,1204841730.04219,oubiwann,198.49.126.204,"= Duncan !McGreggor (oubiwann) =

== Brief Bio ==

Duncan started his hacking career at the ripe old age of 11 in the early 80s. From his adventures in rewriting games on Kaypro's luggable CP/M machine to the world of open source, programming has been his passion. When Duncan wasn't programming, he: was an Army MI linguist; worked his way up to sous chef in a fancy restaurant; studied quantum mechanics and mathematics as a physics major; lived with Tibetan monks, learning meditation and esoteric philosophy; and started his own software consulting company.

After several happy years of consulting, Duncan was lured into the Divmod fold by the legendary reputations of its developers and the opportunity to work with a team that has been coding on the cutting edge for over four years. In addition to his work with Divmod, Duncan actively participates in many open source projects and leads a few of his own.

At Divmod, Duncan is responsible for directing and managing operations such that the architectural visions of Glyph and the developers meets the executive goals of Amir and the Board of Directors.

== Sites ==
 * http://oubiwann.blogspot.com/
 * http://blendix.com/users/oubiwann/
 * http://schrobox.blogspot.com/

== Projects ==
Most everything is linked here:
   http://www.ohloh.net/accounts/9254

Here are some direct links:
 * http://pymon.sourceforge.net/
 * http://code.google.com/p/twisted-jsonrpc/
 * http://code.google.com/p/testgen4web-python/
 * http://code.google.com/p/pyrtf-ng/
 * http://code.google.com/p/coymon/

== Wiki Notes ==
 * [wiki:People/DuncanMcGreggor/MantissaPluginNotes Mantissa Plugin Notes]
 * Mantissa's '[wiki:People/DuncanMcGreggor/MantissaAxiomaticProject axiomatic project]' Subcommand",',0
1252,5,1204841776.64257,oubiwann,198.49.126.204,"= Duncan !McGreggor (oubiwann) =

== Brief Bio ==

Duncan started his hacking career at the ripe old age of 11 in the early 80s. From his adventures in rewriting games on Kaypro's luggable CP/M machine to the world of open source, programming has been his passion. When Duncan wasn't programming, he: was an Army MI linguist; worked his way up to sous chef in a fancy restaurant; studied quantum mechanics and mathematics as a physics major; lived with Tibetan monks, learning meditation and esoteric philosophy; and started his own software consulting company.

After several happy years of consulting, Duncan was lured into the Divmod fold by the legendary reputations of its developers and the opportunity to work with a team that has been coding on the cutting edge for over four years. In addition to his work with Divmod, Duncan actively participates in many open source projects and leads a few of his own.

At Divmod, Duncan is responsible for directing and managing operations such that the architectural visions of Glyph and the developers meets the executive goals of Amir and the Board of Directors.

== Sites ==
 * http://oubiwann.blogspot.com/
 * http://blendix.com/users/oubiwann/
 * http://schrobox.blogspot.com/

== Projects ==
Most everything is linked here:
   http://www.ohloh.net/accounts/9254

Here are some direct links:
 * http://pymon.sourceforge.net/
 * http://code.google.com/p/twisted-jsonrpc/
 * http://code.google.com/p/testgen4web-python/
 * http://code.google.com/p/pyrtf-ng/
 * http://code.google.com/p/coymon/

== Wiki Notes ==
 * [wiki:People/DuncanMcGreggor/MantissaPluginNotes Mantissa Plugin Notes]
 * [wiki:People/DuncanMcGreggor/MantissaAxiomaticProject Mantissa's 'axiomatic project' Subcommand Notes]",',0
1253,11,1204843775.61538,oubiwann,198.49.126.204,"= Mantissa Plugin Notes =

== Overview ==

This page is a collection of notes based on my adventures with the following tickets:
 * #911
 * #2530
 * #2531

As such, you can imagine the following about these notes:
 * they are based on one specific aspect of Mantissa/Axiom plugins;
 * they are written from a relative Noob perspective; and
 * are most certainly not complete.

The plugin under scrutiny here (well, under rewrite, actually) is {{{axiomatic project}}} which has been (until some time in the near future) called in the following manner:
{{{
axiomatic project -n MyApp
}}}
This creates a Divmod™-approved directory structure populated by minimally functional code stubs, ready for the project dev to start making '!MyApp' a software reality.

== Quick Glance ==

The code that is responsible for this {{{axiomatic}}} subcommand is distributed over a few files. Here's the breakdown:
 * {{{axiomatic}}} itself lives in a bin dir somwhere, or if you are using Combinator, a bincache dir;
 * the contents of that script are the same as in most of the other Mantissa scripts: a {{{remain()}}} call;
 * {{{combinator.chameleon.remain}}} is a function which 
   * determines the original script name, in this case {{{axiomatic}}},
   * searches the paths in {{{sys.path}}} and locates the script itself,
   * passes the appropriate arguments, and call the actual script with the original script name
 * {{{Axiom/bin/axiomatic}}} gets called, which runs {{{axiom.scripts.axiomatic.main()}}}, which:
   * parses subcommands/options and fires off {{{subCommands()}}} method which iterates plugins (see the '''Plugins In-depth''' section below)
   * ?
   * {{{Generate}}}, the class associated with the 
   * {{{Generate.postOptions()}}} opens {{{template.txt}}} and 

Things to look up next:
 * Where does {{{Generate}}} get instantiated?
 * examine template.txt
 * source for {{{epsilon.asplode.splode}}}

== Subcommands In-depth ==

== Plugins In-depth ==

The big mover and shaker behind the plugin scene is {{{twisted.plugin.getPlugins()}}}. This guy first gets all 'dropins' (twisted plugin modules or pickled data about plugin modules that are represented as objects and stored in a dict). Dropins can have potentially-many plugins, so they are iterated in the {{{getPlugins}}} function. Each plugin (note that plugins are classes) is then adapted to the passed interface, which results in {{{getPlugins()}}} returning ({{{yield}}}ing, actually) an iterable whose elements are plugins (classes).

When reading the two subsections below, it would be best to follow along in the source code of {{{axiom/plugins/mantissacmd.py}}} and {{{twisted.plugin.getPlugins}}}.

==== Interfaces ====

For our example, we have the {{{axiom/plugins/mantissacmd.py}}} dropin. The plugin of interest is the class {{{mantissacmd.Generate}}}, which is a subclass of {{{axiom.scripts.axiomatic.AxiomaticCommand}}}, which in turn has a metaclass that (for our case) sets {{{Generate}}} as providing both the {{{twisted.plugin.IPlugin}}} and {{{axiom.iaxiom.IAxiomaticCommand}}} interfaces.

==== Adaptation ====

Due to {{{Generate}}} implementing {{{IAxiomaticCommand}}}, when {{{getPlugins}}} (called from {{{Options.subCommands}}}) finds our {{{mantissacmd}}} dropin, it adapts the {{{CachedPlugin}}} to the {{{IAxiomaticCommand}}} which gives us the actual plugin object that's in the dropin cache.

== Template In-depth ==

Hrm, actually, I'm gonna put the template stuff in [wiki:People/DuncanMcGreggor/MantissaAxiomaticProject another wiki page].",',0
1254,12,1204843814.76023,oubiwann,198.49.126.204,"= Mantissa Plugin Notes =

== Overview ==

This page is a collection of notes based on my adventures with the following tickets:
 * #911
 * #2530
 * #2531

As such, you can imagine the following about these notes:
 * they are based on one specific aspect of Mantissa/Axiom plugins;
 * they are written from a relative Noob perspective; and
 * are most certainly not complete.

The plugin under scrutiny here (well, under rewrite, actually) is {{{axiomatic project}}} which has been (until some time in the near future) called in the following manner:
{{{
axiomatic project -n MyApp
}}}
This creates a Divmod™-approved directory structure populated by minimally functional code stubs, ready for the project dev to start making '!MyApp' a software reality.

== Quick Glance ==

The code that is responsible for this {{{axiomatic}}} subcommand is distributed over a few files. Here's the breakdown:
 * {{{axiomatic}}} itself lives in a bin dir somwhere, or if you are using Combinator, a bincache dir;
 * the contents of that script are the same as in most of the other Mantissa scripts: a {{{remain()}}} call;
 * {{{combinator.chameleon.remain}}} is a function which 
   * determines the original script name, in this case {{{axiomatic}}},
   * searches the paths in {{{sys.path}}} and locates the script itself,
   * passes the appropriate arguments, and call the actual script with the original script name
 * {{{Axiom/bin/axiomatic}}} gets called, which runs {{{axiom.scripts.axiomatic.main()}}}, which:
   * parses subcommands/options and fires off {{{subCommands()}}} method which iterates plugins (see the '''Plugins In-depth''' section below)
   * ?
   * {{{Generate}}}, the class associated with the 
   * {{{Generate.postOptions()}}} opens {{{template.txt}}} and 

Things to look up next:
 * Where does {{{Generate}}} get instantiated?
 * examine template.txt
 * source for {{{epsilon.asplode.splode}}}

== Subcommands In-depth ==

== Plugins In-depth ==

The big mover and shaker behind the plugin scene is {{{twisted.plugin.getPlugins()}}}. This guy first gets all 'dropins' (twisted plugin modules or pickled data about plugin modules that are represented as objects and stored in a dict). Dropins can have potentially-many plugins, so they are iterated in the {{{getPlugins}}} function. Each plugin (note that plugins are classes) is then adapted to the passed interface, which results in {{{getPlugins()}}} returning ({{{yield}}}ing, actually) an iterable whose elements are plugins (the classes that have been adapted).

When reading the two subsections below, it would be best to follow along in the source code of {{{axiom/plugins/mantissacmd.py}}} and {{{twisted.plugin.getPlugins}}}.

==== Interfaces ====

For our example, we have the {{{axiom/plugins/mantissacmd.py}}} dropin. The plugin of interest is the class {{{mantissacmd.Generate}}}, which is a subclass of {{{axiom.scripts.axiomatic.AxiomaticCommand}}}, which in turn has a metaclass that (for our case) sets {{{Generate}}} as providing both the {{{twisted.plugin.IPlugin}}} and {{{axiom.iaxiom.IAxiomaticCommand}}} interfaces.

==== Adaptation ====

Due to {{{Generate}}} implementing {{{IAxiomaticCommand}}}, when {{{getPlugins}}} (called from {{{Options.subCommands}}}) finds our {{{mantissacmd}}} dropin, it adapts the {{{CachedPlugin}}} to the {{{IAxiomaticCommand}}} which gives us the actual plugin object that's in the dropin cache.

== Template In-depth ==

Hrm, actually, I'm gonna put the template stuff in [wiki:People/DuncanMcGreggor/MantissaAxiomaticProject another wiki page].",',0
1255,13,1204843870.35851,oubiwann,198.49.126.204,"= Mantissa Plugin Notes =

== Overview ==

This page is a collection of notes based on my adventures with the following tickets:
 * #911
 * #2530
 * #2531

As such, you can imagine the following about these notes:
 * they are based on one specific aspect of Mantissa/Axiom plugins;
 * they are written from a relative Noob perspective; and
 * are most certainly not complete.

The plugin under scrutiny here (well, under rewrite, actually) is {{{axiomatic project}}} which has been (until some time in the near future) called in the following manner:
{{{
axiomatic project -n MyApp
}}}
This creates a Divmod™-approved directory structure populated by minimally functional code stubs, ready for the project dev to start making '!MyApp' a software reality.

== Quick Glance ==

The code that is responsible for this {{{axiomatic}}} subcommand is distributed over a few files. Here's the breakdown:
 * {{{axiomatic}}} itself lives in a bin dir somwhere, or if you are using Combinator, a bincache dir;
 * the contents of that script are the same as in most of the other Mantissa scripts: a {{{remain()}}} call;
 * {{{combinator.chameleon.remain}}} is a function which 
   * determines the original script name, in this case {{{axiomatic}}},
   * searches the paths in {{{sys.path}}} and locates the script itself,
   * passes the appropriate arguments, and call the actual script with the original script name
 * {{{Axiom/bin/axiomatic}}} gets called, which runs {{{axiom.scripts.axiomatic.main()}}}, which:
   * parses subcommands/options and fires off {{{subCommands()}}} method which iterates plugins (see the '''Plugins In-depth''' section below)
   * ?
   * {{{Generate}}}, the class associated with the 
   * {{{Generate.postOptions()}}} opens {{{template.txt}}} and 

Things to look up next:
 * Where does {{{Generate}}} get instantiated?
 * examine template.txt
 * source for {{{epsilon.asplode.splode}}}

== Subcommands In-depth ==

== Plugins In-depth ==

The big mover and shaker behind the plugin scene is {{{twisted.plugin.getPlugins()}}}. This guy first gets all 'dropins' (twisted plugin modules or pickled data about plugin modules that are represented as objects and stored in a dict). Dropins can have potentially-many plugins, so they are iterated in the {{{getPlugins}}} function. Each plugin (note that plugins are classes) is then adapted to the passed interface, which results in {{{getPlugins()}}} returning ({{{yield}}}ing, actually) an iterable whose elements are plugins (the classes that have been adapted).

When reading the two subsections below, it would be best to follow along in the source code of {{{axiom/plugins/mantissacmd.py}}} and {{{twisted.plugin.getPlugins}}}.

==== Interfaces ====

For our example, we have the {{{axiom/plugins/mantissacmd.py}}} dropin. The plugin of interest is the class {{{mantissacmd.Generate}}}, which is a subclass of {{{axiom.scripts.axiomatic.AxiomaticCommand}}}. This in turn has a metaclass which, for our case, sets {{{Generate}}} as providing both the {{{twisted.plugin.IPlugin}}} and {{{axiom.iaxiom.IAxiomaticCommand}}} interfaces.

==== Adaptation ====

Due to {{{Generate}}} implementing {{{IAxiomaticCommand}}}, when {{{getPlugins}}} (called from {{{Options.subCommands}}}) finds our {{{mantissacmd}}} dropin, it adapts the {{{CachedPlugin}}} to the {{{IAxiomaticCommand}}} which gives us the actual plugin object that's in the dropin cache.

== Template In-depth ==

Hrm, actually, I'm gonna put the template stuff in [wiki:People/DuncanMcGreggor/MantissaAxiomaticProject another wiki page].",',0
1256,14,1204843996.61367,oubiwann,198.49.126.204,"= Mantissa Plugin Notes =

== Overview ==

This page is a collection of notes based on my adventures with the following tickets:
 * #911
 * #2530
 * #2531

As such, you can imagine the following about these notes:
 * they are based on one specific aspect of Mantissa/Axiom plugins;
 * they are written from a relative Noob perspective; and
 * are most certainly not complete.

The plugin under scrutiny here (well, under rewrite, actually) is {{{axiomatic project}}} which has been (until some time in the near future) called in the following manner:
{{{
axiomatic project -n MyApp
}}}
This creates a Divmod™-approved directory structure populated by minimally functional code stubs, ready for the project dev to start making '!MyApp' a software reality.

== Quick Glance ==

The code that is responsible for this {{{axiomatic}}} subcommand is distributed over a few files. Here's the breakdown:
 * {{{axiomatic}}} itself lives in a bin dir somwhere, or if you are using Combinator, a bincache dir;
 * the contents of that script are the same as in most of the other Mantissa scripts: a {{{remain()}}} call;
 * {{{combinator.chameleon.remain}}} is a function which 
   * determines the original script name, in this case {{{axiomatic}}},
   * searches the paths in {{{sys.path}}} and locates the script itself,
   * passes the appropriate arguments, and call the actual script with the original script name
 * {{{Axiom/bin/axiomatic}}} gets called, which runs {{{axiom.scripts.axiomatic.main()}}}, which:
   * parses subcommands/options and fires off {{{subCommands()}}} method which iterates plugins (see the '''Plugins In-depth''' section below)
   * ?
   * {{{Generate}}}, the class associated with the 
   * {{{Generate.postOptions()}}} opens {{{template.txt}}} and 

Things to look up next:
 * Where does {{{Generate}}} get instantiated?
 * examine template.txt
 * source for {{{epsilon.asplode.splode}}}

== Subcommands In-depth ==

== Plugins In-depth ==

The big mover and shaker behind the plugin scene is {{{twisted.plugin.getPlugins()}}}. This guy first gets all 'dropins' (twisted plugin modules or pickled data about plugin modules that are represented as objects and stored in a dict). Dropins can have potentially-many plugins, so they are iterated in the {{{getPlugins}}} function. Each plugin (note that plugins are classes) is then adapted to the passed interface, which results in {{{getPlugins()}}} returning ({{{yield}}}ing, actually) an iterable whose elements are plugins (the classes that have been adapted).

When reading the two subsections below, it would be best to follow along in the source code of {{{axiom/plugins/mantissacmd.py}}} and {{{twisted.plugin.getPlugins}}}.

==== Interfaces ====

For our example, we have the {{{axiom/plugins/mantissacmd.py}}} dropin. The plugin of interest is the class {{{mantissacmd.Generate}}}, which is a subclass of {{{axiom.scripts.axiomatic.AxiomaticCommand}}}. This in turn has a metaclass which, for our case, sets {{{Generate}}} as providing both the {{{twisted.plugin.IPlugin}}} and {{{axiom.iaxiom.IAxiomaticCommand}}} interfaces.

==== Adaptation ====

Due to {{{Generate}}} implementing {{{IAxiomaticCommand}}}, when {{{getPlugins}}} (called from {{{Options.subCommands}}}) finds our {{{mantissacmd}}} dropin, it adapts the {{{CachedPlugin}}} to the {{{IAxiomaticCommand}}} which gives us the actual plugin object that's in the dropin cache.

For more on Twisted plugins, see http://twistedmatrix.com/projects/core/documentation/howto/plugin.html.

== Template In-depth ==

Hrm, actually, I'm gonna put the template stuff in [wiki:People/DuncanMcGreggor/MantissaAxiomaticProject another wiki page].",',0
1257,15,1204844092.86785,oubiwann,198.49.126.204,"= Mantissa Plugin Notes =

== Overview ==

This page is a collection of notes based on my adventures with the following tickets:
 * #911
 * #2530
 * #2531

As such, you can imagine the following about these notes:
 * they are based on one specific aspect of Mantissa/Axiom plugins;
 * they are written from a relative Noob perspective; and
 * are most certainly not complete.

The plugin under scrutiny here (well, under rewrite, actually) is {{{axiomatic project}}} which has been (until some time in the near future) called in the following manner:
{{{
axiomatic project -n MyApp
}}}
This creates a Divmod™-approved directory structure populated by minimally functional code stubs, ready for the project dev to start making '!MyApp' a software reality.

== Quick Glance ==

The code that is responsible for this {{{axiomatic}}} subcommand is distributed over a few files. Here's the breakdown:
 * {{{axiomatic}}} itself lives in a bin dir somwhere, or if you are using Combinator, a bincache dir;
 * the contents of that script are the same as in most of the other Mantissa scripts: a {{{remain()}}} call;
 * {{{combinator.chameleon.remain}}} is a function which 
   * determines the original script name, in this case {{{axiomatic}}},
   * searches the paths in {{{sys.path}}} and locates the 'real' script (not the wrapper in {{{bincache}}}),
   * passes the appropriate arguments, and call the actual script with the original script name
 * {{{Axiom/bin/axiomatic}}} gets called, which runs {{{axiom.scripts.axiomatic.main()}}}, which:
   * parses subcommands/options and fires off {{{subCommands()}}} method which iterates plugins (see the '''Plugins In-depth''' section below)
   * ?
   * {{{Generate}}}, the class associated with the 
   * {{{Generate.postOptions()}}} opens {{{template.txt}}} and 

Things to look up next:
 * Where does {{{Generate}}} get instantiated?
 * examine template.txt
 * source for {{{epsilon.asplode.splode}}}

== Subcommands In-depth ==

== Plugins In-depth ==

The big mover and shaker behind the plugin scene is {{{twisted.plugin.getPlugins()}}}. This guy first gets all 'dropins' (twisted plugin modules or pickled data about plugin modules that are represented as objects and stored in a dict). Dropins can have potentially-many plugins, so they are iterated in the {{{getPlugins}}} function. Each plugin (note that plugins are classes) is then adapted to the passed interface, which results in {{{getPlugins()}}} returning ({{{yield}}}ing, actually) an iterable whose elements are plugins (the classes that have been adapted).

When reading the two subsections below, it would be best to follow along in the source code of {{{axiom/plugins/mantissacmd.py}}} and {{{twisted.plugin.getPlugins}}}.

==== Interfaces ====

For our example, we have the {{{axiom/plugins/mantissacmd.py}}} dropin. The plugin of interest is the class {{{mantissacmd.Generate}}}, which is a subclass of {{{axiom.scripts.axiomatic.AxiomaticCommand}}}. This in turn has a metaclass which, for our case, sets {{{Generate}}} as providing both the {{{twisted.plugin.IPlugin}}} and {{{axiom.iaxiom.IAxiomaticCommand}}} interfaces.

==== Adaptation ====

Due to {{{Generate}}} implementing {{{IAxiomaticCommand}}}, when {{{getPlugins}}} (called from {{{Options.subCommands}}}) finds our {{{mantissacmd}}} dropin, it adapts the {{{CachedPlugin}}} to the {{{IAxiomaticCommand}}} which gives us the actual plugin object that's in the dropin cache.

For more on Twisted plugins, see http://twistedmatrix.com/projects/core/documentation/howto/plugin.html.

== Template In-depth ==

Hrm, actually, I'm gonna put the template stuff in [wiki:People/DuncanMcGreggor/MantissaAxiomaticProject another wiki page].",',0
1258,16,1204844134.87677,oubiwann,198.49.126.204,"= Mantissa Plugin Notes =

== Overview ==

This page is a collection of notes based on my adventures with the following tickets:
 * #911
 * #2530
 * #2531

As such, you can imagine the following about these notes:
 * they are based on one specific aspect of Mantissa/Axiom plugins;
 * they are written from a relative Noob perspective; and
 * are most certainly not complete.

The plugin under scrutiny here (well, under rewrite, actually) is {{{axiomatic project}}} which has been (until some time in the near future) called in the following manner:
{{{
axiomatic project -n MyApp
}}}
This creates a Divmod™-approved directory structure populated by minimally functional code stubs, ready for the project dev to start making '!MyApp' a software reality.

== Quick Glance ==

The code that is responsible for this {{{axiomatic}}} subcommand is distributed over a few files. Here's the breakdown:
 * {{{axiomatic}}} itself lives in a bin dir somwhere, or if you are using Combinator, a bincache dir;
 * the contents of that script are the same as in most of the other Mantissa scripts: a {{{remain()}}} call;
 * {{{combinator.chameleon.remain}}} is a function which 
   * determines the original script name, in this case {{{axiomatic}}},
   * searches the paths in {{{sys.path}}} and locates the 'real' script (not the wrapper in {{{bincache}}}),
   * passes the appropriate arguments, and calls the actual script.
 * {{{Axiom/bin/axiomatic}}} gets called, which runs {{{axiom.scripts.axiomatic.main()}}}, which:
   * parses subcommands/options and fires off {{{subCommands()}}} method which iterates plugins (see the '''Plugins In-depth''' section below)
   * ?
   * {{{Generate}}}, the class associated with the 
   * {{{Generate.postOptions()}}} opens {{{template.txt}}} and 

Things to look up next:
 * Where does {{{Generate}}} get instantiated?
 * examine template.txt
 * source for {{{epsilon.asplode.splode}}}

== Subcommands In-depth ==

== Plugins In-depth ==

The big mover and shaker behind the plugin scene is {{{twisted.plugin.getPlugins()}}}. This guy first gets all 'dropins' (twisted plugin modules or pickled data about plugin modules that are represented as objects and stored in a dict). Dropins can have potentially-many plugins, so they are iterated in the {{{getPlugins}}} function. Each plugin (note that plugins are classes) is then adapted to the passed interface, which results in {{{getPlugins()}}} returning ({{{yield}}}ing, actually) an iterable whose elements are plugins (the classes that have been adapted).

When reading the two subsections below, it would be best to follow along in the source code of {{{axiom/plugins/mantissacmd.py}}} and {{{twisted.plugin.getPlugins}}}.

==== Interfaces ====

For our example, we have the {{{axiom/plugins/mantissacmd.py}}} dropin. The plugin of interest is the class {{{mantissacmd.Generate}}}, which is a subclass of {{{axiom.scripts.axiomatic.AxiomaticCommand}}}. This in turn has a metaclass which, for our case, sets {{{Generate}}} as providing both the {{{twisted.plugin.IPlugin}}} and {{{axiom.iaxiom.IAxiomaticCommand}}} interfaces.

==== Adaptation ====

Due to {{{Generate}}} implementing {{{IAxiomaticCommand}}}, when {{{getPlugins}}} (called from {{{Options.subCommands}}}) finds our {{{mantissacmd}}} dropin, it adapts the {{{CachedPlugin}}} to the {{{IAxiomaticCommand}}} which gives us the actual plugin object that's in the dropin cache.

For more on Twisted plugins, see http://twistedmatrix.com/projects/core/documentation/howto/plugin.html.

== Template In-depth ==

Hrm, actually, I'm gonna put the template stuff in [wiki:People/DuncanMcGreggor/MantissaAxiomaticProject another wiki page].",',0
1259,17,1204844659.69861,oubiwann,198.49.126.204,"= Mantissa Plugin Notes =

== Overview ==

This page is a collection of notes based on my adventures with the following tickets:
 * #911
 * #2530
 * #2531

As such, you can imagine the following about these notes:
 * they are based on one specific aspect of Mantissa/Axiom plugins;
 * they are written from a relative Noob perspective; and
 * are most certainly not complete.

The plugin under scrutiny here (well, under rewrite, actually) is {{{axiomatic project}}} which has been (until some time in the near future) called in the following manner:
{{{
axiomatic project -n MyApp
}}}
This creates a Divmod™-approved directory structure populated by minimally functional code stubs, ready for the project dev to start making '!MyApp' a software reality.

== Quick Glance ==

The code that is responsible for this {{{axiomatic}}} subcommand is distributed over a few files. Here's the breakdown:
 * {{{axiomatic}}} itself lives in a bin dir somwhere, or if you are using Combinator, a bincache dir;
 * the contents of that script are the same as in most of the other Mantissa scripts: a {{{remain()}}} call;
 * {{{combinator.chameleon.remain}}} is a function which 
   * determines the original script name, in this case {{{axiomatic}}},
   * searches the paths in {{{sys.path}}} and locates the 'real' script (not the wrapper in {{{bincache}}}),
   * passes the appropriate arguments, and calls the actual script.
 * {{{Axiom/bin/axiomatic}}} is called, which runs {{{axiom.scripts.axiomatic.main()}}} and thus does the following:
   * parses subcommands/options and fires off the {{{subCommands()}}} method, which
   * calls {{{getPlugins}}}, iterating through the dropins (files) and plugins (dropin classes), adding the {{{Generate}}} class to the dropin cache (see the '''Plugins In-depth''' section below) and returning an iterable of discovered plugins (classes)
   * ?
   * {{{Generate}}}, the class associated with the 
   * {{{Generate.postOptions()}}} opens {{{template.txt}}} and 

Things to look up next:
 * Where does {{{Generate}}} get instantiated?
 * examine template.txt
 * source for {{{epsilon.asplode.splode}}}

== Subcommands In-depth ==

== Plugins In-depth ==

The big mover and shaker behind the plugin scene is {{{twisted.plugin.getPlugins()}}}. This guy first gets all 'dropins' (twisted plugin modules or pickled data about plugin modules that are represented as objects and stored in a dict). Dropins can have potentially-many plugins, so they are iterated in the {{{getPlugins}}} function. Each plugin (note that plugins are classes) is then adapted to the passed interface, which results in {{{getPlugins()}}} returning ({{{yield}}}ing, actually) an iterable whose elements are plugins (the classes that have been adapted).

When reading the two subsections below, it would be best to follow along in the source code of {{{axiom/plugins/mantissacmd.py}}} and {{{twisted.plugin.getPlugins}}}.

==== Interfaces ====

For our example, we have the {{{axiom/plugins/mantissacmd.py}}} dropin. The plugin of interest is the class {{{mantissacmd.Generate}}}, which is a subclass of {{{axiom.scripts.axiomatic.AxiomaticCommand}}}. This in turn has a metaclass which, for our case, sets {{{Generate}}} as providing both the {{{twisted.plugin.IPlugin}}} and {{{axiom.iaxiom.IAxiomaticCommand}}} interfaces.

==== Adaptation ====

Due to {{{Generate}}} implementing {{{IAxiomaticCommand}}}, when {{{getPlugins}}} (called from {{{Options.subCommands}}}) finds our {{{mantissacmd}}} dropin, it adapts the {{{CachedPlugin}}} to the {{{IAxiomaticCommand}}} which gives us the actual plugin object that's in the dropin cache.

For more on Twisted plugins, see http://twistedmatrix.com/projects/core/documentation/howto/plugin.html.

== Template In-depth ==

Hrm, actually, I'm gonna put the template stuff in [wiki:People/DuncanMcGreggor/MantissaAxiomaticProject another wiki page].",',0
1260,18,1204853526.5276,oubiwann,198.49.126.204,"= Mantissa Plugin Notes =

== Overview ==

This page is a collection of notes based on my adventures with the following tickets:
 * #911
 * #2530
 * #2531

As such, you can imagine the following about these notes:
 * they are based on one specific aspect of Mantissa/Axiom plugins;
 * they are written from a relative Noob perspective; and
 * are most certainly not complete.

The plugin under scrutiny here (well, under rewrite, actually) is {{{axiomatic project}}} which has been (until some time in the near future) called in the following manner:
{{{
axiomatic project -n MyApp
}}}
This creates a Divmod™-approved directory structure populated by minimally functional code stubs, ready for the project dev to start making '!MyApp' a software reality.

== Quick Glance ==

The code that is responsible for this {{{axiomatic}}} subcommand is distributed over a few files. Here's the breakdown:
 * {{{axiomatic}}} itself lives in a bin dir somwhere, or if you are using Combinator, a bincache dir;
 * the contents of that script are the same as in most of the other Mantissa scripts: a {{{remain()}}} call;
 * {{{combinator.chameleon.remain}}} is a function which 
   * determines the original script name, in this case {{{axiomatic}}},
   * searches the paths in {{{sys.path}}} and locates the 'real' script (not the wrapper in {{{bincache}}}),
   * passes the appropriate arguments, and calls the actual script.
 * {{{Axiom/bin/axiomatic}}} is called, which runs {{{axiom.scripts.axiomatic.main()}}} and thus does the following:
   * parses the command line with {{{Options.parseOptions}}} ({{{t.p.usage.Options.parseOptions}}}) which
   * iterates through the items yielded by {{{subCommands}}} (used as a property, but the property is a callable);
   * the yielded data structures have as their third element the plugin class that is used to parse the remaining plugin-specific command line options ({{{subCommands}}} calls {{{getPlugins}}} -- see the '''Plugins In-depth''' section below); also, {{{parseOptions}}}
   * instantiates the plugin class ({{{parser}}}), sets the {{{.subOptions}}} attribute with its value, and call {{{postOptions}}}.
   * {{{Generate.postOptions()}}} opens {{{template.txt}}} and {{{epsilon.asplode.splode}}} XXXes it

Things to look up next:
 * Where does {{{Generate}}} get instantiated?
 * examine template.txt
 * source for {{{epsilon.asplode.splode}}}

== Subcommands In-depth ==

== Plugins In-depth ==

The big mover and shaker behind the plugin scene is {{{twisted.plugin.getPlugins()}}}. This guy first gets all 'dropins' (twisted plugin modules or pickled data about plugin modules that are represented as objects and stored in a dict). Dropins can have potentially-many plugins, so they are iterated in the {{{getPlugins}}} function. Each plugin (note that plugins are classes) is then adapted to the passed interface, which results in {{{getPlugins()}}} returning ({{{yield}}}ing, actually) an iterable whose elements are plugins (the classes that have been adapted).

When reading the two subsections below, it would be best to follow along in the source code of {{{axiom/plugins/mantissacmd.py}}} and {{{twisted.plugin.getPlugins}}}.

==== Interfaces ====

For our example, we have the {{{axiom/plugins/mantissacmd.py}}} dropin. The plugin of interest is the class {{{mantissacmd.Generate}}}, which is a subclass of {{{axiom.scripts.axiomatic.AxiomaticCommand}}}. This in turn has a metaclass which, for our case, sets {{{Generate}}} as providing both the {{{twisted.plugin.IPlugin}}} and {{{axiom.iaxiom.IAxiomaticCommand}}} interfaces.

==== Adaptation ====

Due to {{{Generate}}} implementing {{{IAxiomaticCommand}}}, when {{{getPlugins}}} (called from {{{Options.subCommands}}}) finds our {{{mantissacmd}}} dropin, it adapts the {{{CachedPlugin}}} to the {{{IAxiomaticCommand}}} which gives us the actual plugin object that's in the dropin cache.

For more on Twisted plugins, see http://twistedmatrix.com/projects/core/documentation/howto/plugin.html.

== Template In-depth ==

Hrm, actually, I'm gonna put the template stuff in [wiki:People/DuncanMcGreggor/MantissaAxiomaticProject another wiki page].",',0
1261,19,1204853878.36701,oubiwann,198.49.126.204,"= Mantissa Plugin Notes =

== Overview ==

This page is a collection of notes based on my adventures with the following tickets:
 * #911
 * #2530
 * #2531

As such, you can imagine the following about these notes:
 * they are based on one specific aspect of Mantissa/Axiom plugins;
 * they are written from a relative Noob perspective; and
 * are most certainly not complete.

The plugin under scrutiny here (well, under rewrite, actually) is {{{axiomatic project}}} which has been (until some time in the near future) called in the following manner:
{{{
axiomatic project -n MyApp
}}}
This creates a Divmod™-approved directory structure populated by minimally functional code stubs, ready for the project dev to start making '!MyApp' a software reality.

== Quick Glance ==

The code that is responsible for this {{{axiomatic}}} subcommand is distributed over a few files. Here's the breakdown:
 * {{{axiomatic}}} itself lives in a bin dir somwhere, or if you are using Combinator, a bincache dir;
 * the contents of that script are the same as in most of the other Mantissa scripts: a {{{remain()}}} call;
 * {{{combinator.chameleon.remain}}} is a function which 
   * determines the original script name, in this case {{{axiomatic}}},
   * searches the paths in {{{sys.path}}} and locates the 'real' script (not the wrapper in {{{bincache}}}),
   * passes the appropriate arguments, and calls the actual script.
 * {{{Axiom/bin/axiomatic}}} is called, which runs {{{axiom.scripts.axiomatic.main()}}} and thus does the following:
   * parses the command line with {{{Options.parseOptions}}} ({{{t.p.usage.Options.parseOptions}}}) which
   * iterates through the items yielded by {{{subCommands}}} (used as a property, but the property is a callable);
   * the yielded data structures have as their third element the plugin class that is used to parse the remaining plugin-specific command line options ({{{subCommands}}} calls {{{getPlugins}}} -- see the '''Plugins In-depth''' section below); also, {{{parseOptions}}}
   * instantiates the plugin class ({{{parser}}}), sets the {{{.subOptions}}} attribute with its value, and call {{{postOptions}}}.
   * {{{Generate.postOptions()}}} opens {{{template.txt}}} and {{{epsilon.asplode.splode}}} writes out the contents of {{{template.txt}}} to boilerplate project code.

== Subcommands In-depth ==

TBD

== Plugins In-depth ==

The big mover and shaker behind the plugin scene is {{{twisted.plugin.getPlugins()}}}. This guy first gets all 'dropins' (twisted plugin modules or pickled data about plugin modules that are represented as objects and stored in a dict). Dropins can have potentially-many plugins, so they are iterated in the {{{getPlugins}}} function. Each plugin (note that plugins are classes) is then adapted to the passed interface, which results in {{{getPlugins()}}} returning ({{{yield}}}ing, actually) an iterable whose elements are plugins (the classes that have been adapted).

When reading the two subsections below, it would be best to follow along in the source code of {{{axiom/plugins/mantissacmd.py}}} and {{{twisted.plugin.getPlugins}}}.

==== Interfaces ====

For our example, we have the {{{axiom/plugins/mantissacmd.py}}} dropin. The plugin of interest is the class {{{mantissacmd.Generate}}}, which is a subclass of {{{axiom.scripts.axiomatic.AxiomaticCommand}}}. This in turn has a metaclass which, for our case, sets {{{Generate}}} as providing both the {{{twisted.plugin.IPlugin}}} and {{{axiom.iaxiom.IAxiomaticCommand}}} interfaces.

==== Adaptation ====

Due to {{{Generate}}} implementing {{{IAxiomaticCommand}}}, when {{{getPlugins}}} (called from {{{Options.subCommands}}}) finds our {{{mantissacmd}}} dropin, it adapts the {{{CachedPlugin}}} to the {{{IAxiomaticCommand}}} which gives us the actual plugin object that's in the dropin cache.

For more on Twisted plugins, see http://twistedmatrix.com/projects/core/documentation/howto/plugin.html.

== Template In-depth ==

Hrm, actually, I'm gonna put the template stuff in [wiki:People/DuncanMcGreggor/MantissaAxiomaticProject another wiki page].",',0
1262,10,1204942531.34474,oubiwann,198.49.126.204,"= Divmod Coding Standard =

Divmod uses [http://twistedmatrix.com/trac/browser/trunk/doc/development/policy/coding-standard.xhtml?format=raw the Twisted coding standard].

In addition, we are trying to make certain aspects of the Twisted coding standard stricter.  For example:

 * There should be 3 blank lines between module-level suites, such as classes and top-level functions.
 * There should be 2 blank lines between class-level suites, such as methods.
 * Within a class, the ordering of the elements is:
    1. docstring
    1. {{{implements()}}}
    1. class attributes
    1. Python special methods, starting with {{{__new__}}} if present, then {{{__init__}}}.
    1. Methods part of no interface
    1. Methods implementing an interface, grouped by interface, prefixed with a comment like this:
{{{
#!python
# IYourInterface
}}}
 * Be careful with code like:
{{{
#!python
def test():
    outer1, outer2 = something()
    class Stub(object):
        foo = frob(outer1)
        def bar(self):
            return outer2
}}}
   Due to [http://bugs.python.org/issue1569356 a bug] in Python ≤ 2.5, when run with tracing (such as `trial --coverage`), the closed bindings (`outer1`, `outer2`) leak into the class context, causing problems when they have special meaning there.[[BR]]
   Vulnerable names should be renamed to avoid conflict.  Vulnerable ''values'' require wrapping in an indirect reference, such as:
{{{
#!python
    class Foo(formless.TypedInterface):
        pass
    _indirectFoo = lambda: Foo
    class Bar(formless.TypedInterface):
        baz = formless.Object(interface=_indirectFoo())
}}}
   See also #2394.",',0
1263,1,1206100647.92351,glyph,198.49.126.204,,,
1264,2,1206100768.98211,glyph,198.49.126.204,,,
1265,3,1206102284.7802,glyph,198.49.126.204,,,
1266,4,1206115758.54011,washort,198.49.126.204,,,
1267,5,1206115832.25676,washort,198.49.126.204,,,
1268,6,1206467811.42793,oubiwann,198.49.126.204,"= Duncan !McGreggor (oubiwann) =

== Brief Bio ==

Duncan started his hacking career at the ripe old age of 11 in the early 80s. From his adventures in rewriting games on Kaypro's luggable CP/M machine to the world of open source, programming has been his passion. When Duncan wasn't programming, he: was an Army MI linguist; worked his way up to sous chef in a fancy restaurant; studied quantum mechanics and mathematics as a physics major; lived with Tibetan monks, learning meditation and esoteric philosophy; and started his own software consulting company.

After several happy years of consulting, Duncan was lured into the Divmod fold by the legendary reputations of its developers and the opportunity to work with a team that has been coding on the cutting edge for over four years. In addition to his work with Divmod, Duncan actively participates in many open source projects and leads a few of his own.

At Divmod, Duncan is responsible for directing and managing operations such that the architectural visions of Glyph and the developers meets the executive goals of Amir and the Board of Directors.

== Sites ==
 * http://oubiwann.blogspot.com/
 * http://blendix.com/users/oubiwann/
 * http://schrobox.blogspot.com/

== Projects ==
Most everything is linked here:
   http://www.ohloh.net/accounts/9254

Here are some direct links:
 * http://pymon.sourceforge.net/
 * http://code.google.com/p/twisted-jsonrpc/
 * http://code.google.com/p/testgen4web-python/
 * http://code.google.com/p/pyrtf-ng/
 * http://code.google.com/p/coymon/

== Wiki Notes ==
 * [wiki:People/DuncanMcGreggor/MantissaPluginNotes Mantissa Plugin Notes]
 * [wiki:People/DuncanMcGreggor/MantissaAxiomaticProject Mantissa's 'axiomatic project' Subcommand Notes]

== Draft Pages ==
 * [wiki:Drafts/FrontPage Front Page]",',0
1269,1,1206467820.6135,oubiwann,198.49.126.204,"
{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Need Help? ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': The general [http://community.livejournal.com/divmod/ Divmod blog]; personal blogs: [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph], and [http://oubiwann.blogspot.com/ oubiwann]. You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://bb.divmod.org/ latest build and test results] for the code in trunk.

== Love Divmod? ==
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Here to help? ==
Check out our [wiki:HereToHelp Here to Help?] section

== Odds and ends ==
 * Retired projects: they worked hard and are now [wiki:RetiredProjects retired].
 * [wiki:DivmodApplications Divmod applications] built on our infrastructure DivmodApplications.
 * Some [wiki:DivmodIdeas ideas].

== Special thanks ==
Divmod is built on the work of many others. Here are some of the [wiki:StuffWeUse tools and services that we depend on].

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
1270,4,1206468520.87765,oubiwann,198.49.126.204,"= Ideas =
 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
",',0
1271,2,1206468560.28145,oubiwann,198.49.126.204,"
{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Need Help? ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': The general [http://community.livejournal.com/divmod/ Divmod blog]; personal blogs: [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph], and [http://oubiwann.blogspot.com/ oubiwann]. You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://bb.divmod.org/ latest build and test results] for the code in trunk.

== Love Divmod? ==
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Here to help? ==
Check out our [wiki:HereToHelp Here to Help?] section

== Odds and ends ==
 * Retired projects: they worked hard and are now [wiki:RetiredProjects retired].
 * [wiki:DivmodApplications Divmod applications] built on our infrastructure DivmodApplications.
 * Some [wiki:DivmodIdeas ideas].

== Special thanks ==
Divmod is built on the work of many others. Here are some of the [wiki:StuffWeUse tools and services that we depend on].

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006-2008 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
1272,3,1206468904.09462,oubiwann,198.49.126.204,"= Retired Projects =

This is the rest home for Divmod that didn't quite make it up the evolutionary ladder. These projects are not being developed or maintained.

 [wiki:WhitherAtop What happened to Atop?]::
   One of earlier OODB projects
 [wiki:WhitherQuotient What's happening with Quotient?]::
   The first cut of our messaging server, based on ATOP
 [wiki:WhitherLupy What's happening with Lupy?]::
    A port of Lucene to Python
 [wiki:WhitherPyndex What's happening with Pyndex?]::
    An early attempt at a full-text indexer in Python
 [wiki:DivmodXapwrap Divmod Xapwrap]::
   A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.
",',0
1273,3,1206469466.63637,oubiwann,198.49.126.204,"
{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Complete List of Divmod Projects ===

DivmodProjects

== Need Help? ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': The general [http://community.livejournal.com/divmod/ Divmod blog]; personal blogs: [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph], and [http://oubiwann.blogspot.com/ oubiwann]. You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://bb.divmod.org/ latest build and test results] for the code in trunk.

== Love Divmod? ==
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

== Here to help? ==
Check out our [wiki:HereToHelp Here to Help?] section

== Odds and ends ==
 * Retired projects: they worked hard and are now [wiki:RetiredProjects retired].
 * [wiki:DivmodApplications Divmod applications] built on our infrastructure DivmodApplications.
 * Some [wiki:DivmodIdeas ideas].

== Special thanks ==
Divmod is built on the work of many others. Here are some of the [wiki:StuffWeUse tools and services that we depend on].

== Legal Stuff ==
divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006-2008 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
1274,1,1206469535.60791,oubiwann,198.49.126.204,"= The Complete Divmod Project List =

== Frameworks ==
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
== Tools ==
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

== Unmaintained ==

== Retired ==

",',0
1275,2,1206469904.38638,oubiwann,198.49.126.204,"= The Complete Divmod Project List =

== Frameworks ==

 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and our audio handling code.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).

== Tools ==

 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.

== Unmaintained ==

These are projects that could be revived if they were to benefit from a dedicated champion to maintain them.

 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
   The first cut of our messaging server, based on ATOP; see also [wiki:WhitherQuotient What's happening with Quotient?]

== Retired ==

These projects are now longer being developed.

 [wiki:WhitherAtop What happened to Atop?]::
   One of earlier OODB projects
 [wiki:WhitherLupy What's happening with Lupy?]::
    A port of Lucene to Python
 [wiki:WhitherPyndex What's happening with Pyndex?]::
    An early attempt at a full-text indexer in Python
 [wiki:DivmodXapwrap Divmod Xapwrap]::
   A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.",',0
1276,2,1206470097.38424,oubiwann,198.49.126.204,"= Powered By =

== Some of the software and services we depend on ==

 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.
 * [http://tummy.com/ Tummy] our fantastic hosting service. The hostess with the mostest.
 * [http://sqlite.org/ SQLite] the little database that could. Fast. Embedded. Low maintenance.
 * [http://feedparser.org/ Universal Feed Parser] parses feeds for us.",',0
1277,3,1206470108.46708,oubiwann,198.49.126.204,"= Powered By =

Some of the software and services we depend on

 * [http://python.org Python] our language of choice.
 * [http://twistedmatrix.com Twisted] the multiprotocol framework that makes Python usable for complex, multi-protocol applications.
 * [http://pylucene.osafoundation.org PyLucene] wrapper for the excellent full text indexer [http://lucene.apache.org Lucene].
 * [http://www.zope.org/Products/ZopeInterface Zope Interface] our favorite interface definition and adaptation library.
 * [http://www.ubuntulinux.org/ Ubuntu] our favorite Linux distribution.
 * [http://tummy.com/ Tummy] our fantastic hosting service. The hostess with the mostest.
 * [http://sqlite.org/ SQLite] the little database that could. Fast. Embedded. Low maintenance.
 * [http://feedparser.org/ Universal Feed Parser] parses feeds for us.",',0
1278,3,1206470453.50198,oubiwann,198.49.126.204,,,
1279,4,1206470478.63663,oubiwann,198.49.126.204,"= The Complete Divmod Project List =

== Frameworks ==

 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and our audio handling code.
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A messaging platform for email and more.

== Tools ==

 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.

== Unmaintained ==

These are projects that could be revived if they were to benefit from a dedicated champion to maintain them.

 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''Old Quotient'''::
   The first cut of our messaging server, based on ATOP; see also [wiki:WhitherQuotient What happened with 'Old' Quotient?]

== Retired ==

These projects are now longer being developed.

 [wiki:WhitherAtop What happened to Atop?]::
   One of earlier OODB projects
 [wiki:WhitherLupy What's happening with Lupy?]::
    A port of Lucene to Python
 [wiki:WhitherPyndex What's happening with Pyndex?]::
    An early attempt at a full-text indexer in Python
 [wiki:DivmodXapwrap Divmod Xapwrap]::
   A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.",',0
1280,5,1206470521.96777,oubiwann,198.49.126.204,"= The Complete Divmod Project List =

== Frameworks ==

 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and our audio handling code.
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A messaging platform for email and more.

== Tools ==

 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.

== Unmaintained ==

These are projects that could be revived if they were to benefit from a dedicated champion to maintain them.

 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''Old Quotient'''::
   The first cut of our messaging server, based on ATOP; see also [wiki:WhitherQuotient What happened with 'Old' Quotient?]

== Retired ==

These projects are now longer being developed.

 [wiki:WhitherAtop What happened to Atop?]::
   One of earlier OODB projects
 [wiki:WhitherLupy What happened to Lupy?]::
    A port of Lucene to Python
 [wiki:WhitherPyndex What happened to Pyndex?]::
    An early attempt at a full-text indexer in Python
 [wiki:DivmodXapwrap Divmod Xapwrap]::
   A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.",',0
1281,6,1206470583.963,oubiwann,198.49.126.204,"= The Complete Divmod Project List =

== Frameworks ==

 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and our audio handling code.
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A messaging platform for email and more.

== Tools ==

 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.

== Unmaintained ==

These are projects that could be revived if they were to benefit from a dedicated champion to maintain them.

 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.

== Retired ==

These projects are now longer being developed.

 [wiki:WhitherAtop What happened to Atop?]::
   One of earlier OODB projects; see also [wiki:WhitherQuotient What happened to 'Old' Quotient?]
 [wiki:WhitherLupy What happened to Lupy?]::
    A port of Lucene to Python
 [wiki:WhitherPyndex What happened to Pyndex?]::
    An early attempt at a full-text indexer in Python
 [wiki:DivmodXapwrap Divmod Xapwrap]::
   A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.",',0
1282,3,1206471006.65362,oubiwann,198.49.126.204,"= 'Old' Quotient =

Quotient's name lives on but the original ATOP-based Quotient is now known as Old Quotient. The latest version of [DivmodQuotient Quotient] is based on [DivmodAxiom Axiom]: our 'smart' database.

The short version is: Quotient has been ported to Axiom and (the new) Mantissa. We have been supporting and will continue to support our existing customer base that uses 'Old' Quotient -- never fear :-) We are also investigating potential integration with our [http://blendix.com Blendix] service, so stay tuned!

",',0
1283,4,1206471164.10975,oubiwann,198.49.126.204,,,
1284,5,1206471196.19517,oubiwann,198.49.126.204,"
{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Complete List of Divmod Projects ===

DivmodProjects

=== Community ===

==== Need Help? ====
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': The general [http://community.livejournal.com/divmod/ Divmod blog]; personal blogs: [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph], and [http://oubiwann.blogspot.com/ oubiwann]. You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://bb.divmod.org/ latest build and test results] for the code in trunk.

==== Love Divmod? ====
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

==== Here to help? ====
 * Check out our [wiki:HereToHelp Here to Help?] section
 * Get excited about [wiki:DivmodIdeas how we're thinking]!

== Thanks! ==

Divmod is built on the work of many others. Here are some of the [wiki:StuffWeUse tools and services that we depend on].

== Legal ==

divmod.org is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006-2008 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
1285,7,1206471281.62568,oubiwann,198.49.126.204,"= The Complete Divmod Project List =

== Frameworks ==

 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and our audio handling code.
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A messaging platform for email and more.
 '''[wiki:DivmodImaginary Imaginary]'''::
  A simulation framework for your games.

== Tools ==

 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.

== Unmaintained ==

These are projects that could be revived if they were to benefit from a dedicated champion to maintain them.

 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game. 

== Retired ==

These projects are now longer being developed.

 [wiki:WhitherAtop What happened to Atop?]::
   One of earlier OODB projects; see also [wiki:WhitherQuotient What happened to 'Old' Quotient?]
 [wiki:WhitherLupy What happened to Lupy?]::
    A port of Lucene to Python
 [wiki:WhitherPyndex What happened to Pyndex?]::
    An early attempt at a full-text indexer in Python
 [wiki:DivmodXapwrap Divmod Xapwrap]::
   A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.",',0
1286,4,1206471370.26588,oubiwann,198.49.126.204,"== Divmod Applications ==

All applications a listed on the '[DivmodProjects Complete Divmod]' wiki page.",',0
1287,4,1206471446.95096,oubiwann,198.49.126.204,"= Retired Projects =

Retired projects are now listed on the '[DivmodProjects Complete Divmod]' wiki page.",',0
1288,5,1206471464.4699,oubiwann,198.49.126.204,"== Divmod Applications ==

All applications are now listed on the '[DivmodProjects Complete Divmod]' wiki page.",',0
1289,6,1206471511.48844,oubiwann,198.49.126.204,"
{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Complete List of Divmod Projects ===

DivmodProjects

=== Community ===

==== Need Help? ====
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': The general [http://community.livejournal.com/divmod/ Divmod blog]; personal blogs: [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph], and [http://oubiwann.blogspot.com/ oubiwann]. You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://bb.divmod.org/ latest build and test results] for the code in trunk.

==== Love Divmod? ====
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

==== Here to help? ====
 * Check out our [wiki:HereToHelp Here to Help?] section
 * Get excited about [wiki:DivmodIdeas how we're thinking]!

== Thanks! ==

Divmod is built on the work of many others. Here are some of the [wiki:StuffWeUse tools and services that we depend on].

== Legal ==

[http://divmod.org divmod.org] is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006-2008 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
1290,3,1206471566.38162,oubiwann,198.49.126.204,"Divmod Logos

Information about our visual image and trademarks.

Divmod has 2 logos:

 http://divmod.com/ximages/anonymous_logo.png is for the corporate, commercial entity. This is exclusively for the use of Divmod Inc. and should not be used by any other entity. 
 

 http://divmod.org/trac/chrome/common/divmod.png is for our open-source community. This is for the community and can freely be used in the context of Divmod's open-source work, for instance in a 'powered by Divmod' context.
",',0
1292,7,1206472911.01785,oubiwann,198.49.126.204,"
{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Complete List of Divmod Projects ===

DivmodProjects

=== Community ===

==== Need Help? ====
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': The general [http://community.livejournal.com/divmod/ Divmod blog]; personal blogs: [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph], and [http://oubiwann.blogspot.com/ oubiwann]. You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://bb.divmod.org/ latest build and test results] for the code in trunk.

==== Love Divmod? ====
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

==== Wamt to help? ====
 * Check out our [wiki:HereToHelp Here to Help?] section
 * Get excited about [wiki:DivmodIdeas how we're thinking]!

== Thanks! ==

Divmod is built on the work of many others. Here are some of the [wiki:StuffWeUse tools and services that we depend on].

== Legal ==

[http://divmod.org divmod.org] is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006-2008 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
1293,8,1206472939.70038,oubiwann,198.49.126.204,"
{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Complete List of Divmod Projects ===

DivmodProjects

=== Community ===

  DivmodCommunity

==== Need Help? ====
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': The general [http://community.livejournal.com/divmod/ Divmod blog]; personal blogs: [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph], and [http://oubiwann.blogspot.com/ oubiwann]. You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://bb.divmod.org/ latest build and test results] for the code in trunk.

==== Love Divmod? ====
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].

==== Wamt to help? ====
 * Check out our [wiki:HereToHelp Here to Help?] section
 * Get excited about [wiki:DivmodIdeas how we're thinking]!

== Thanks! ==

Divmod is built on the work of many others. Here are some of the [wiki:StuffWeUse tools and services that we depend on].

== Legal ==

[http://divmod.org divmod.org] is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006-2008 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
1294,9,1206472967.77289,oubiwann,198.49.126.204,"
{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

=== Complete List of Divmod Projects ===

DivmodProjects

=== Community ===

  DivmodCommunity

== Thanks! ==

Divmod is built on the work of many others. Here are some of the [wiki:StuffWeUse tools and services that we depend on].

== Legal ==

[http://divmod.org divmod.org] is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006-2008 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
1295,1,1206473004.22161,oubiwann,198.49.126.204,"= Community =

== Need Help? ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': The general [http://community.livejournal.com/divmod/ Divmod blog]; personal blogs: [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph], and [http://oubiwann.blogspot.com/ oubiwann]. You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://bb.divmod.org/ latest build and test results] for the code in trunk.

== Wamt to help? ==
 * Check out our [wiki:HereToHelp Here to Help?] section
 * Get excited about [wiki:DivmodIdeas how we're thinking]!

== Love Divmod? ==
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].
",',0
1296,10,1206473065.47273,oubiwann,198.49.126.204,"
{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and using Shtoom's audio handling.
 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.

Want more? See the complete list of [DivmodProjects Divmod Projects]

=== Community ===

  DivmodCommunity

== Thanks! ==

Divmod is built on the work of many others. Here are some of the [wiki:StuffWeUse tools and services that we depend on].

== Legal ==

[http://divmod.org divmod.org] is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006-2008 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
1297,11,1206473126.85855,oubiwann,198.49.126.204,"
{{{
#!html
<div style='float: right; clear: right; padding: 4px; text-align: center; border: 1px solid gray'>
  <p />
  <h2>Featured Divmod Users</h2>
  <a href='http://python.org'><img src='http://divmod.org/users/moe/people-using-divmod/python-logo.gif' /></a>
  <p />
  <a href='http://www.who.int/en'><img src='http://divmod.org/users/moe/people-using-divmod/who-logo.gif' /></a>
  <p />
  <a href='http://www.daylife.com'><img src='http://divmod.org/users/amir/Scratch/daylife.gif' /></a>
  <p />
  <a href='http://www.openend.se'><img src='http://divmod.org/users/amir/Scratch/openend.gif' /></a>
  <p />
  <a href='http://snipshot.com'><img src='http://divmod.org/users/moe/people-using-divmod/snipshot-logo.gif' /></a>
  <p />
  <a href='http://numbler.com'><img src='http://divmod.org/users/moe/people-using-divmod/numbler-logo.gif' /></a>
  <p />
  <a href='http://test.stiq.it'><img src='http://divmod.org/users/moe/people-using-divmod/stiq-logo.gif' /></a>
  <p />
  <a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>Learn about these and others</a> <br><a href='http://divmod.org/trac/wiki/PeopleUsingDivmod'>using Divmod products </a>.
</div>
}}}

== Build your next great application more quickly using Divmod frameworks and tools ==
Welcome to the open-source outlet for [wiki:DivmodInc Divmod Inc.] and our open-source community.  We have a variety of [http://python.org Python] open source projects to share with you. You can access our code using SVN on http://divmod.org/svn/Divmod/trunk/.
=== Frameworks ===
 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.

=== Tools ===
 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.

Want more? See the complete list of [DivmodProjects Divmod Projects]

=== Community ===

  DivmodCommunity

== Thanks! ==

Divmod is built on the work of many others. Here are some of the [wiki:StuffWeUse tools and services that we depend on].

== Legal ==

[http://divmod.org divmod.org] is supported by Divmod Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note on the usage of our trademark images].

All pages on this domain copyright 2006-2008 Divmod, Inc., unless explicitly noted otherwise.  All rights reserved.",',0
1298,62,1206605704.7473,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =
[[PageOutline(2-3,Contents)]]
Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

==== Athena ====

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, Opera 9 and Camino ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.31.tar.gz?format=raw Latest release - 0.9.31]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': (take a look at [http://forms-project.pollenation.net/ formal] for an alternate form library) For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
 * [wiki:DivmodNevow/ApacheProxy Putting Nevow Page under Apache Proxy]
 * Using Nevow with Genshi templates: [http://oubiwann.blogspot.com/2007/03/genshi-templates-in-nevow.html original] and [http://oubiwann.blogspot.com/2008/03/genshi-on-nevow-revisited.html dynamic]
 * [wiki:DivmodNevow/Storm Using the Storm ORM with Nevow]
 * [wiki:DivmodNevow/FaQ Frequently asked questions]

 '''Bleeding Docs''' - 
 ''SURGEON GENERAL’S WARNING'': Reading the docs listed below pertain to code that has not yet been released and may cause Lung Cancer, Heart Disease, Emphysema, and Pregnancy complications. 
   [wiki:DivmodNevow/ContextRemoval Context Removal] - Conversion steps for moving from {{{context}}}-based Nevow code to {{{context}}}-less code.

== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
",',0
1299,6,1206650251.90939,amir,198.49.126.204,,,
1300,7,1206652585.50092,amir,198.49.126.204,,,
1301,8,1206652918.11207,amir,198.49.126.204,,,
1302,9,1206653044.29757,amir,198.49.126.204,,,
1303,7,1206656757.32989,oubiwann,198.49.126.204,"= Duncan !McGreggor (oubiwann) =

== Brief Bio ==

Duncan started his hacking career at the ripe old age of 11 in the early 80s. From his adventures in rewriting games on Kaypro's luggable CP/M machine to the world of open source, programming has been his passion. When Duncan wasn't programming, he: was an Army MI linguist; worked his way up to sous chef in a fancy restaurant; studied quantum mechanics and mathematics as a physics major; lived with Tibetan monks, learning meditation and esoteric philosophy; and started his own software consulting company.

After several happy years of consulting, Duncan was lured into the Divmod fold by the legendary reputations of its developers and the opportunity to work with a team that has been coding on the cutting edge for over four years. In addition to his work with Divmod, Duncan actively participates in many open source projects and leads a few of his own.

At Divmod, Duncan is responsible for directing and managing operations such that the architectural visions of Glyph and the developers meets the executive goals of Amir and the Board of Directors.

== Sites ==
 * http://oubiwann.blogspot.com/
 * http://blendix.com/users/oubiwann/
 * http://schrobox.blogspot.com/

== Projects ==
Most everything is linked here:
   http://www.ohloh.net/accounts/9254

Here are some direct links:
 * http://pymon.sourceforge.net/
 * http://code.google.com/p/twisted-jsonrpc/
 * http://code.google.com/p/testgen4web-python/
 * http://code.google.com/p/pyrtf-ng/
 * http://code.google.com/p/coymon/

== Wiki Notes ==
 * [wiki:People/DuncanMcGreggor/MantissaPluginNotes Mantissa Plugin Notes]
 * [wiki:People/DuncanMcGreggor/MantissaAxiomaticProject Mantissa's 'axiomatic project' Subcommand Notes]

== Draft Pages ==
 * [wiki:Drafts/FrontPage Front Page]
 * [wiki:Download]",',0
1304,1,1206656785.95138,oubiwann,198.49.126.204,"= Downloads =

You can have the entire open source Divmod code base in one go with the following:
{{{
svn co http://divmod.org/svn/Divmod/trunk/ Divmod
}}}

If you're going to be using [DivmodCombinator Combinator], then you might want to leave a place for branches:
{{{
svn co -N http://divmod.org/svn/Divmod 
cd Divmod
svn co -N branches
svn co trunk
}}}

If you'd like to download our projects individually (as releases) then please head over to the [DivmodProjects Projects] page and follow the links for the projects in which you are interested.",',0
1305,2,1206656816.55453,oubiwann,198.49.126.204,"= Downloads =

== Live Code ==

You can have the entire open source Divmod code base in one go with the following:
{{{
svn co http://divmod.org/svn/Divmod/trunk/ Divmod
}}}

If you're going to be using [DivmodCombinator Combinator], then you might want to leave a place for branches:
{{{
svn co -N http://divmod.org/svn/Divmod 
cd Divmod
svn co -N branches
svn co trunk
}}}

== Individual Releases ==

If you'd like to download our projects individually (as releases) then please head over to the [DivmodProjects Projects] page and follow the links for the projects in which you are interested.",',0
1306,8,1206658820.556,oubiwann,198.49.126.204,"= Duncan !McGreggor (oubiwann) =

== Brief Bio ==

Duncan started his hacking career at the ripe old age of 11 in the early 80s. From his adventures in rewriting games on Kaypro's luggable CP/M machine to the world of open source, programming has been his passion. When Duncan wasn't programming, he: was an Army MI linguist; worked his way up to sous chef in a fancy restaurant; studied quantum mechanics and mathematics as a physics major; lived with Tibetan monks, learning meditation and esoteric philosophy; and started his own software consulting company.

After several happy years of consulting, Duncan was lured into the Divmod fold by the legendary reputations of its developers and the opportunity to work with a team that has been coding on the cutting edge for over four years. In addition to his work with Divmod, Duncan actively participates in many open source projects and leads a few of his own.

At Divmod, Duncan is responsible for directing and managing operations such that the architectural visions of Glyph and the developers meets the executive goals of Amir and the Board of Directors.

== Sites ==
 * http://oubiwann.blogspot.com/
 * http://blendix.com/users/oubiwann/
 * http://schrobox.blogspot.com/

== Projects ==
Most everything is linked here:
   http://www.ohloh.net/accounts/9254

Here are some direct links:
 * http://pymon.sourceforge.net/
 * http://code.google.com/p/twisted-jsonrpc/
 * http://code.google.com/p/testgen4web-python/
 * http://code.google.com/p/pyrtf-ng/
 * http://code.google.com/p/coymon/

== Wiki Notes ==
 * [wiki:People/DuncanMcGreggor/MantissaPluginNotes Mantissa Plugin Notes]
 * [wiki:People/DuncanMcGreggor/MantissaAxiomaticProject Mantissa's 'axiomatic project' Subcommand Notes]

== Draft Pages ==
 * [wiki:Drafts/FrontPage Front Page]
 * [wiki:Download]
 * [wiki:DivmodCommunity]",',0
1307,124,1206661754.31077,oubiwann,198.49.126.204,"= Get started on your new [http://twistedmatrix.com/trac/ Twisted] application with our open source software! =

{{{
#!html
<br/>
<table id='splash' width='100%'>
  <tr>
    <td align='center' valign='top'>


<div id='lightwrapper'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table width='100%'>
  <tr class='names'>
    <td align='center'><a href='/trac/wiki/DivmodProjects'>Projects</a></td>
    <td align='center'><a href='/trac/wiki/Download'>Download</a></td>
    <td align='center'><a href='/trac/wiki/DivmodCommunity'>Community</a></td>
    <td align='center'><a href='/trac/wiki/DivmodFanClub'>The Fan Club</a></td>
  </tr>
  <tr class='icons'>
    <td align='center'><a href='/trac/wiki/DivmodProjects'><img src='/tracdocs/splash/projects.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/Download'><img src='/tracdocs/splash/download.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodCommunity'><img src='/tracdocs/splash/community.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodFanClub'><img src='/tracdocs/splash/fanclub.gif' /></a></td>
  </tr>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>

    </td>
  </tr>

</table>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>

    </td>
  </tr>
</table>
}}}

= Overview =

'''A quick peek at the major Divmod components'''. These will allow you to build your next great networked application more quickly than ever before!

{{{
#!html
<table id='splash' width='100%'>
  <tr>
    <td width='75%' align='center' valign='top'>

<div id='darkwrapper'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table id='splashcontent' width='100%'>
  <tr>
    <td align='center'>
    <img src='/tracdocs/splash/frameworks.gif' /><br/>
    <h1>Frameworks</h1>
    </td>
    <td align='center'>

<div id='lightsection'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table width='100%'>
  <tr class='icons'>
    <td align='center'><a href='/trac/wiki/DivmodNevow'><img src='/tracdocs/splash/nevow.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodAxiom'><img src='/tracdocs/splash/axiom.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodMantissa'><img src='/tracdocs/splash/mantissa.gif' /></a></td>
  </tr>
  <tr class='names'>
    <td align='center'><a href='/trac/wiki/DivmodNevow'>Nevow</a></td>
    <td align='center'><a href='/trac/wiki/DivmodAxiom'>Axiom</a></td>
    <td align='center'><a href='/trac/wiki/DivmodMantissa'>Mantissa</a></td>
  </tr>
  <tr class='descriptions'>
    <td align='center'>A <b>web templating</b> framework that provides a two-way <b>AJAX toolkit</b></td>
    <td align='center'>An embedded <b>object database</b> with integrated network services</td>
    <td align='center'>An extensible, multi-protocol and multi-user <b>application server</b></td>
  </tr>
</table>


</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>


    </td>
  </tr>
  <tr>
    <td align='center'>
    <img src='/tracdocs/splash/tools.gif' /><br/>
    <h1>Tools</h1>
    </td>
    <td align='center'>

<div id='mediumsection'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table width='100%'>
  <tr class='icons'>
    <td align='center'><a href='/trac/wiki/DivmodCombinator'><img src='/tracdocs/splash/combinator.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodPyflakes'><img src='/tracdocs/splash/pyflakes.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodEpsilon'><img src='/tracdocs/splash/epsilon.gif' /></a></td>
  </tr>
  <tr class='names'>
    <td align='center'><a href='/trac/wiki/DivmodCombinator'>Combinator</a></td>
    <td align='center'><a href='/trac/wiki/DivmodPyflakes'>PyFlakes</a></td>
    <td align='center'><a href='/trac/wiki/DivmodEpsilon'>Epsilon</a></td>
  </tr>
  <tr class='descriptions'>
    <td align='center'>A <b>branch-management</b> tool supporting Subversion and agile development</td>
    <td align='center'>A tool for checking Python <b>source-code</b></td>
    <td align='center'>A Python <b>utilities package</b>, famous for its Time class</td>
  </tr>
</table>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>

</table>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>


    </td>
  </tr>
</table>



}}}


== Thanks! ==

In addition to being insanely creative in our own right, Divmod code integrates that of others as well. Here are some of the [wiki:StuffWeUse tools and services] that we depend on. 

[http://divmod.org divmod.org] is supported by Divmod, Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note] on the usage of our trademark images.

The customs icons on this page are from the free [http://lila-theme.uni.cc/ Lila theme].",',0
1308,125,1206662248.21491,oubiwann,198.49.126.204,"= Get started on your new [http://twistedmatrix.com/trac/ Twisted] application with our open source software! =

{{{
#!html
<br/>
<table id='splash' width='100%'>
  <tr>
    <td align='center' valign='top'>


<div id='lightwrapper'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table width='100%'>
  <tr class='names'>
    <td align='center'><a href='/trac/wiki/DivmodProjects'>Projects</a></td>
    <td align='center'><a href='/trac/wiki/Download'>Download</a></td>
    <td align='center'><a href='/trac/wiki/DivmodCommunity'>Community</a></td>
    <td align='center'><a href='/trac/wiki/DivmodFanClub'>The Fan Club</a></td>
  </tr>
  <tr class='icons'>
    <td align='center'><a href='/trac/wiki/DivmodProjects'><img src='/tracdocs/splash/projects.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/Download'><img src='/tracdocs/splash/download.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodCommunity'><img src='/tracdocs/splash/community.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodFanClub'><img src='/tracdocs/splash/fanclub.gif' /></a></td>
  </tr>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>

    </td>
  </tr>

</table>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>

    </td>
  </tr>
</table>
}}}

= Overview =

'''A quick peek at the major Divmod components'''. These will allow you to build your next great networked application more quickly than ever before!

{{{
#!html
<table id='splash' width='100%'>
  <tr>
    <td width='75%' align='center' valign='top'>

<div id='darkwrapper'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table id='splashcontent' width='100%'>
  <tr>
    <td align='center'>
    <img src='/tracdocs/splash/frameworks.gif' /><br/>
    <h1>Frameworks</h1>
    </td>
    <td align='center'>

<div id='lightsection'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table width='100%'>
  <tr class='icons'>
    <td align='center'><a href='/trac/wiki/DivmodNevow'><img src='/tracdocs/splash/nevow.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodAxiom'><img src='/tracdocs/splash/axiom.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodMantissa'><img src='/tracdocs/splash/mantissa.gif' /></a></td>
  </tr>
  <tr class='names'>
    <td align='center'><a href='/trac/wiki/DivmodNevow'>Nevow</a></td>
    <td align='center'><a href='/trac/wiki/DivmodAxiom'>Axiom</a></td>
    <td align='center'><a href='/trac/wiki/DivmodMantissa'>Mantissa</a></td>
  </tr>
  <tr class='descriptions'>
    <td align='center'>A <b>web templating</b> framework that provides a two-way <b>AJAX toolkit</b></td>
    <td align='center'>An embedded <b>object database</b> with integrated network services</td>
    <td align='center'>An extensible, multi-protocol and multi-user <b>application server</b></td>
  </tr>
</table>


</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>


    </td>
  </tr>
  <tr>
    <td align='center'>
    <img src='/tracdocs/splash/tools.gif' /><br/>
    <h1>Tools</h1>
    </td>
    <td align='center'>

<div id='mediumsection'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table width='100%'>
  <tr class='icons'>
    <td align='center'><a href='/trac/wiki/DivmodCombinator'><img src='/tracdocs/splash/combinator.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodPyflakes'><img src='/tracdocs/splash/pyflakes.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodEpsilon'><img src='/tracdocs/splash/epsilon.gif' /></a></td>
  </tr>
  <tr class='names'>
    <td align='center'><a href='/trac/wiki/DivmodCombinator'>Combinator</a></td>
    <td align='center'><a href='/trac/wiki/DivmodPyflakes'>PyFlakes</a></td>
    <td align='center'><a href='/trac/wiki/DivmodEpsilon'>Epsilon</a></td>
  </tr>
  <tr class='descriptions'>
    <td align='center'>A <b>branch-management</b> tool supporting Subversion and agile development</td>
    <td align='center'>A tool for checking Python <b>source-code</b></td>
    <td align='center'>A Python <b>utilities package</b>, famous for its Time class</td>
  </tr>
</table>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>

</table>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>


    </td>
  </tr>
</table>



}}}


== Thanks! ==

In addition to being insanely creative in our own right, Divmod code integrates that of others as well. Here are some of the [wiki:StuffWeUse tools and services] that we depend on. 

[http://divmod.org divmod.org] is supported by Divmod, Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note] on the usage of our trademark images.

The custom icons on this page are from the free [http://lila-theme.uni.cc/ Lila theme].",',0
1309,126,1206664821.32225,oubiwann,198.49.126.204,"= Get started on your new [http://twistedmatrix.com/trac/ Twisted] application with our open source software! =

{{{
#!html
<br/>
<table id='splash' width='100%'>
  <tr>
    <td align='center' valign='top'>


<div id='lightwrapper'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table width='100%'>
  <tr class='names'>
    <td align='center'><a href='/trac/wiki/DivmodProjects'>Projects</a></td>
    <td align='center'><a href='/trac/wiki/Download'>Download</a></td>
    <td align='center'><a href='/trac/wiki/DivmodCommunity'>Community</a></td>
    <td align='center'><a href='/trac/wiki/DivmodFanClub'>The Fan Club</a></td>
  </tr>
  <tr class='icons'>
    <td align='center'><a href='/trac/wiki/DivmodProjects'><img src='/tracdocs/splash/projects.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/Download'><img src='/tracdocs/splash/download.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodCommunity'><img src='/tracdocs/splash/community.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodFanClub'><img src='/tracdocs/splash/fanclub.gif' /></a></td>
  </tr>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>

    </td>
  </tr>

</table>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>

    </td>
  </tr>
</table>

<br/>

}}}

= Overview =

'''A quick peek at the major Divmod components'''. These will allow you to build your next great networked application more quickly than ever before!

{{{
#!html
<table id='splash' width='100%'>
  <tr>
    <td width='75%' align='center' valign='top'>

<div id='darkwrapper'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table id='splashcontent' width='100%'>
  <tr>
    <td align='center'>
    <img src='/tracdocs/splash/frameworks.gif' /><br/>
    <h1>Frameworks</h1>
    </td>
    <td align='center'>

<div id='lightsection'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table width='100%'>
  <tr class='icons'>
    <td align='center'><a href='/trac/wiki/DivmodNevow'><img src='/tracdocs/splash/nevow.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodAxiom'><img src='/tracdocs/splash/axiom.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodMantissa'><img src='/tracdocs/splash/mantissa.gif' /></a></td>
  </tr>
  <tr class='names'>
    <td align='center'><a href='/trac/wiki/DivmodNevow'>Nevow</a></td>
    <td align='center'><a href='/trac/wiki/DivmodAxiom'>Axiom</a></td>
    <td align='center'><a href='/trac/wiki/DivmodMantissa'>Mantissa</a></td>
  </tr>
  <tr class='descriptions'>
    <td align='center'>A <b>web templating</b> framework that provides a two-way <b>AJAX toolkit</b></td>
    <td align='center'>An embedded <b>object database</b> with integrated network services</td>
    <td align='center'>An extensible, multi-protocol and multi-user <b>application server</b></td>
  </tr>
</table>


</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>


    </td>
  </tr>
  <tr>
    <td align='center'>
    <img src='/tracdocs/splash/tools.gif' /><br/>
    <h1>Tools</h1>
    </td>
    <td align='center'>

<div id='mediumsection'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table width='100%'>
  <tr class='icons'>
    <td align='center'><a href='/trac/wiki/DivmodCombinator'><img src='/tracdocs/splash/combinator.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodPyflakes'><img src='/tracdocs/splash/pyflakes.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodEpsilon'><img src='/tracdocs/splash/epsilon.gif' /></a></td>
  </tr>
  <tr class='names'>
    <td align='center'><a href='/trac/wiki/DivmodCombinator'>Combinator</a></td>
    <td align='center'><a href='/trac/wiki/DivmodPyflakes'>PyFlakes</a></td>
    <td align='center'><a href='/trac/wiki/DivmodEpsilon'>Epsilon</a></td>
  </tr>
  <tr class='descriptions'>
    <td align='center'>A <b>branch-management</b> tool supporting Subversion and agile development</td>
    <td align='center'>A tool for checking Python <b>source-code</b></td>
    <td align='center'>A Python <b>utilities package</b>, famous for its Time class</td>
  </tr>
</table>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>

</table>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>


    </td>
  </tr>
</table>



}}}


== Thanks! ==

In addition to being insanely creative in our own right, Divmod code integrates that of others as well. Here are some of the [wiki:StuffWeUse tools and services] that we depend on. 

[http://divmod.org divmod.org] is supported by Divmod, Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note] on the usage of our trademark images.

The custom icons on this page are from the free [http://lila-theme.uni.cc/ Lila theme].",',0
1310,35,1206679195.78175,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : Axiom =

[[Image(http://divmod.org/tracdocs/axiom_whtbck.png, right)]] Axiom is an object database, or alternatively, an object-relational mapper.

Its primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.27.tar.gz?format=raw Download the latest release - 0.5.27!] (Requires [wiki:DivmodEpsilon Epsilon])
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]
 * [wiki:DivmodAxiom/DependencyTransition Dependencies]: How to transition from pre-{{{axiom.dependency}}} code.
 * [wiki:DivmodAxiom/Powerups Powerups]
 * WritingUpgradeTests: writing stubloader tests for schema upgrades.",',0
1311,2,1206679332.33915,oubiwann,198.49.126.204,"= Community =

[[Image(http://divmod.org/tracdocs/community_whtbck.png, right)]] 

== Need Help? ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the web based archives.
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': The general [http://community.livejournal.com/divmod/ Divmod blog]; personal blogs: [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph], and [http://oubiwann.blogspot.com/ oubiwann]. You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://bb.divmod.org/ latest build and test results] for the code in trunk.

== Wamt to help? ==
 * Check out our [wiki:HereToHelp Here to Help?] section
 * Get excited about [wiki:DivmodIdeas how we're thinking]!

== Love Divmod? ==
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].
",',0
1312,3,1206681808.10854,oubiwann,198.49.126.204,"= Downloads =

download_whtbck.png

== Live Code ==

You can have the entire open source Divmod code base in one go with the following:
{{{
svn co http://divmod.org/svn/Divmod/trunk/ Divmod
}}}

If you're going to be using [DivmodCombinator Combinator], then you might want to leave a place for branches:
{{{
svn co -N http://divmod.org/svn/Divmod 
cd Divmod
svn co -N branches
svn co trunk
}}}

== Individual Releases ==

If you'd like to download our projects individually (as releases) then please head over to the [DivmodProjects Projects] page and follow the links for the projects in which you are interested.",',0
1313,4,1206681844.63125,oubiwann,198.49.126.204,"= Downloads =

[[Image(http://divmod.org/tracdocs/download_whtbck.png, right)]] 

== Live Code ==

You can have the entire open source Divmod code base in one go with the following:
{{{
svn co http://divmod.org/svn/Divmod/trunk/ Divmod
}}}

If you're going to be using [DivmodCombinator Combinator], then you might want to leave a place for branches:
{{{
svn co -N http://divmod.org/svn/Divmod 
cd Divmod
svn co -N branches
svn co trunk
}}}

== Individual Releases ==

If you'd like to download our projects individually (as releases) then please head over to the [DivmodProjects Projects] page and follow the links for the projects in which you are interested.",',0
1314,15,1206683665.23986,oubiwann,198.49.126.204,,,
1315,13,1206684018.67278,oubiwann,198.49.126.204,"= The Divmod Fan Club =

[[Image(http://divmod.org/tracdocs/fanclub_whtbck.png, right)]] 

Do you use Divmod's code?

Do you have a poster of Exarkun on your wall?

Do you love our giant-killing chutzpah?

Do you have a friend or family member on the Divmod team?

Has work you've done using a Divmod project made you fantastically wealthy,
such that you don't know what to do with all your extra disposable income?

''Now you know.''

== Joining Up ==

[http://divmod.org:8080/signup Join the club!]

We offer a few different levels of membership.

 * Bronze Membership - $10 per month - ''Buy Glyph enough caffeine to get through one average day.''

 * Silver Membership - $25 per month - ''Take JP out to a restaurant.''

 * Gold Membership - $50 per month - ''Pay for Allen's cell phone calls to Divmod HQ.''

 * Platinum Membership - $100 per month - ''Buy Moe's groceries for a month.''

 * Diamond Membership - $250 per month - ''Buy an iPod for a tireless contributor.''

 * [wiki:DivmodFanClubMithril Divmod Mithril Membership] - starting at $1000 per month (email to sales@divmod.com) - ''Buy Amir a pony.''

== Huh What?! ==

Our developer community has approached us to express their appreciation of our work,
and to influence us to work on particular aspects of our product for the their benefit. 

We've created the Divmod Fan Club, or the 'DFC', to give those users a way
to pay back, and a way for us to very publicly say 'thank you!'.

== It's Awesome - Why should I sign up? ==

Conscience. Influence. Status.

=== Conscience ===

Simple: you give because you take.

=== Influence ===

The club has monthly meetings over IRC where Divmod will propose a group of open-source features to be prioritized.  Club members will be allowed to vote on the order those features will be implemented in.  We are currently tallying the results of our first meeting - watch this space for our club-designated priorities!

Members will be allowed a number of votes corresponding to the number of
dollars per month that their membership costs, except Mithril members, who
receive a maximum of 250 votes each, or can instead choose to apply their
membership fees directly to the expense of implementing features of their
choice.

=== Status ===

Members of the club who sign up for one of our Divmod commercial services (such
as the soon-to-be-re-launched [http://divmod.com/ Divmod Mail]) will occasionally get special
treats, early access to new features, and extra goodies not available to the
general public.

Eventually they will also receive a 'badge' displayed next to their user-icon
in public areas.

Additionally, since we are currently using this club to beta-test our billing
system, members who sign up during the beta period (prior to the first day of
!PyCon) will receive an 'arcanite alloy' bonus, and be allowed 5 additional
votes for their membership level during the first 3 meetings.  Members who are
currently subscribers to [http://divmod.com Divmod Mail] will additionally
receive this bonus indefinitely.

== Where does the money go? ==

To pay employees, particularly for time spent on community work that is not essential to Divmod's core business.

To hire or buy gifts for some of our open source contributors.

To pay for hosting.

Once that's done, we may send some of this money to open-source contributors to
our products whom we do not employ, and then, if we have hojillions of dollars
left over, start paying for development of features in software Divmod's code
depends upon, such as SQLite and Python.
",',0
1316,26,1206684887.01827,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

[[Image(http://divmod.org/tracdocs/mantissa_whtbck.png, right)]] 

Mantissa is an application server.

It provides integration between the [wiki:DivmodAxiom Axiom] object database, the [wiki:DivmodNevow Nevow] web templating framework and the TwistedFramework.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services, and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.6.19.tar.gz?format=raw Get the most recent release - 0.6.19!]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== Tutorials ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:MantissaWikiTutorial Mantissa Wiki Tutorial] A bit short on explanations, but complete
 * [wiki:MantissaBlogTutorial Mantissa Blog Tutorial] 
 * [wiki:MantissaHowTo An example of how to build a Mantissa application (incomplete)]

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
",',0
1317,63,1206686727.3366,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =

[[PageOutline(2-3,Contents)]] 

[[Image(http://divmod.org/tracdocs/nevow_whtbck.png, left)]]  Nevow (pronounced as the French 'nouveau', or 'noo-voh') is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

==== Athena ====

Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, Opera 9 and Camino ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.31.tar.gz?format=raw Latest release - 0.9.31]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': (take a look at [http://forms-project.pollenation.net/ formal] for an alternate form library) For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
 * [wiki:DivmodNevow/ApacheProxy Putting Nevow Page under Apache Proxy]
 * Using Nevow with Genshi templates: [http://oubiwann.blogspot.com/2007/03/genshi-templates-in-nevow.html original] and [http://oubiwann.blogspot.com/2008/03/genshi-on-nevow-revisited.html dynamic]
 * [wiki:DivmodNevow/Storm Using the Storm ORM with Nevow]
 * [wiki:DivmodNevow/FaQ Frequently asked questions]

 '''Bleeding Docs''' - 
 ''SURGEON GENERAL’S WARNING'': Reading the docs listed below pertain to code that has not yet been released and may cause Lung Cancer, Heart Disease, Emphysema, and Pregnancy complications. 
   [wiki:DivmodNevow/ContextRemoval Context Removal] - Conversion steps for moving from {{{context}}}-based Nevow code to {{{context}}}-less code.

== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
",',0
1319,65,1206686947.39055,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =

[[PageOutline(2-3,Contents)]] 

[[Image(http://divmod.org/tracdocs/nevow_whtbck.png, left)]]  

'''Nevow''' - Pronounced as the French 'nouveau', or 'noo-voh', Nevow is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

'''Athena''' - Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, Opera 9 and Camino ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.31.tar.gz?format=raw Latest release - 0.9.31]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': (take a look at [http://forms-project.pollenation.net/ formal] for an alternate form library) For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/prose/meet-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
 * [wiki:DivmodNevow/ApacheProxy Putting Nevow Page under Apache Proxy]
 * Using Nevow with Genshi templates: [http://oubiwann.blogspot.com/2007/03/genshi-templates-in-nevow.html original] and [http://oubiwann.blogspot.com/2008/03/genshi-on-nevow-revisited.html dynamic]
 * [wiki:DivmodNevow/Storm Using the Storm ORM with Nevow]
 * [wiki:DivmodNevow/FaQ Frequently asked questions]

 '''Bleeding Docs''' - 
 ''SURGEON GENERAL’S WARNING'': Reading the docs listed below pertain to code that has not yet been released and may cause Lung Cancer, Heart Disease, Emphysema, and Pregnancy complications. 
   [wiki:DivmodNevow/ContextRemoval Context Removal] - Conversion steps for moving from {{{context}}}-based Nevow code to {{{context}}}-less code.

== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
",',0
1320,8,1206687474.31692,oubiwann,198.49.126.204,"= The Complete Divmod Project List =

[[Image(http://divmod.org/tracdocs/projects_whtbck.png, right)]]  

== Frameworks ==

 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and our audio handling code.
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A messaging platform for email and more.
 '''[wiki:DivmodImaginary Imaginary]'''::
  A simulation framework for your games.

== Tools ==

 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.

== Unmaintained ==

These are projects that could be revived if they were to benefit from a dedicated champion to maintain them.

 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game. 

== Retired ==

These projects are now longer being developed.

 [wiki:WhitherAtop What happened to Atop?]::
   One of earlier OODB projects; see also [wiki:WhitherQuotient What happened to 'Old' Quotient?]
 [wiki:WhitherLupy What happened to Lupy?]::
    A port of Lucene to Python
 [wiki:WhitherPyndex What happened to Pyndex?]::
    An early attempt at a full-text indexer in Python
 [wiki:DivmodXapwrap Divmod Xapwrap]::
   A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.",',0
1321,4,1206689427.3266,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : !PyFlakes =

!PyFlakes a Lint-like tool for Python, like [http://pychecker.sourceforge.net PyChecker].  It is focused on identifying common errors quickly without executing Python code.

Its primary advantage over [http://pychecker.sourceforge.net PyChecker] is that it is ''fast''.  You don't have to sit around for minutes waiting for the checker to run; it runs on most large projects in only a few seconds.

The two primary categories of defects reported by !PyFlakes are:

  * Names which are used but not defined or used before they are defined
  * Names which are redefined without having been used

These can each take many forms.  For example, !PyFlakes will tell you when you have forgotten an import, mistyped a variable name, defined two functions with the same name, shadowed a variable from another scope, imported a module twice, or two different modules with the same name, and so on.

== Exits ==
 * [http://www.freshmeat.net/projects/pyflakes PyFlakes on freshmeat]
 * [http://www.swik.net/pyflakes PyFlakes on swik]

== Download ==
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Pyflakes Pyflakes",',0
1322,5,1206689529.28124,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : !PyFlakes =

!PyFlakes a Lint-like tool for Python, like [http://pychecker.sourceforge.net PyChecker].  It is focused on identifying common errors quickly without executing Python code.

Its primary advantage over [http://pychecker.sourceforge.net PyChecker] is that it is ''fast''.  You don't have to sit around for minutes waiting for the checker to run; it runs on most large projects in only a few seconds.

The two primary categories of defects reported by !PyFlakes are:

  * Names which are used but not defined or used before they are defined
  * Names which are redefined without having been used

These can each take many forms.  For example, !PyFlakes will tell you when you have forgotten an import, mistyped a variable name, defined two functions with the same name, shadowed a variable from another scope, imported a module twice, or two different modules with the same name, and so on.

== Exits ==
 * [http://www.freshmeat.net/projects/pyflakes PyFlakes on freshmeat]
 * [http://www.swik.net/pyflakes PyFlakes on swik]

== Download ==
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Pyflakes PyFlakes",',0
1323,6,1206689736.65737,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : !PyFlakes =

[[Image(http://divmod.org/tracdocs/pyflakes_whtbck.png, right)]] 

!PyFlakes a Lint-like tool for Python, like [http://pychecker.sourceforge.net PyChecker].  It is focused on identifying common errors quickly without executing Python code.

Its primary advantage over [http://pychecker.sourceforge.net PyChecker] is that it is ''fast''.  You don't have to sit around for minutes waiting for the checker to run; it runs on most large projects in only a few seconds.

The two primary categories of defects reported by !PyFlakes are:

  * Names which are used but not defined or used before they are defined
  * Names which are redefined without having been used

These can each take many forms.  For example, !PyFlakes will tell you when you have forgotten an import, mistyped a variable name, defined two functions with the same name, shadowed a variable from another scope, imported a module twice, or two different modules with the same name, and so on.

== Exits ==
 * [http://www.freshmeat.net/projects/pyflakes PyFlakes on freshmeat]
 * [http://www.swik.net/pyflakes PyFlakes on swik]

== Download ==
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Pyflakes PyFlakes",',0
1324,7,1206689773.5949,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : !PyFlakes =

[[Image(http://divmod.org/tracdocs/pyflakes_whtbck.png, right)]] 

!PyFlakes a Lint-like tool for Python, like [http://pychecker.sourceforge.net PyChecker].  It is focused on identifying common errors quickly without executing Python code.

Its primary advantage over [http://pychecker.sourceforge.net PyChecker] is that it is ''fast''.  You don't have to sit around for minutes waiting for the checker to run; it runs on most large projects in only a few seconds.

The two primary categories of defects reported by !PyFlakes are:

  * Names which are used but not defined or used before they are defined
  * Names which are redefined without having been used

These can each take many forms.  For example, !PyFlakes will tell you when you have forgotten an import, mistyped a variable name, defined two functions with the same name, shadowed a variable from another scope, imported a module twice, or two different modules with the same name, and so on.

== Exits ==
 * [http://www.freshmeat.net/projects/pyflakes PyFlakes on freshmeat]
 * [http://www.swik.net/pyflakes PyFlakes on swik]

== Download ==
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Pyflakes !PyFlakes",',0
1325,15,1206690234.69735,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : Combinator =

[[Image(http://divmod.org/tracdocs/combinator_whtbck.png, right)]] 

Combinator is a tool that Divmod Python programmers use to manage multiple branches of our software.  It integrates with Subversion.

It can be used to manage any number of branches with any number of projects.  It sets up your Python sys.path to point at the appropriate directories for the set of branches you are currently working on.  It also sets up your {{{PATH}}} environment variable so that you can access any scripts that come along with those projects.

It is mainly of interest if you are checking code out of SVN: users of installed versions of Divmod software can probably ignore this project (for now).

'''Note:''' Combinator does not currently work with SVN version 1.2 due to changes in the way SVN stores its local repository. See #2144 for details.

== Rationale ==

Subversion is a nice development system, but some tasks are unnecessarily difficult.  In particular, as we migrated from CVS to SVN, we discovered that there are some operations which were impractically difficult in CVS but simple in SVN, such as creating branches, but while the implementation of managing and merging branches was adequate, there were too much flexibility, and too many ways to subtly incorrectly merge a branch.

As one example of such a problem, in SVN one must always pass the revision where the branch was created on trunk as an argument to the merge command, and determining that number involves reading the output of another long-running command.  Some branches cannot be merged in this manner, depending on where the branch was originally created from.

We developed some idioms for avoiding common errors during merge and encoded them in a set of shell scripts.  Then we discovered another set of common problems: often developers working on a branch would do a bunch of work, and then find themselves mystified that their changes did not seem to be taking effect, due to a mismatch between the environment of their development tools and the shells where test commands were being run.

Combinator began as a set of idioms and shell scripts and has evolved into a set of Python tools which enforce a simple workflow for using SVN and Python together to work on projects that use branches to gather changes together while eliminating common errors.

== Download ==

Combinator is in the Divmod repository.

If you want to use it without the rest of the Divmod projects, see the CombinatorTutorial.

== Use ==

Start with [source:trunk/Combinator/README.txt README.txt] to get your environment set up.

'''Note''': if you follow the UNIX setup instructions and an exception is raised along the lines of
`OSError: [Errno 2] No such file or directory: '/home/YOURNAME/.local/lib/python2.4/site-packages'`,
you should update to the latest trunk revision of Combinator - this bug has been fixed!

CombinatorTutorial is a guide to typical Combinator use including setting up an SVN repository to play with.

Reading about [wiki:UltimateQualityDevelopmentSystem our development process] is likely to give you some insight into how it's intended to be used.

=== chbranch ===

'''chbranch''' is the tool for switching to a different branch.  Provide '''chbranch''' with a ''project name'' and ''branch name'' and it will modify all Combinator-enabled environments so that Python imports are satisfied from that branch of the project.  If necessary, the branch will be checked out.

=== mkbranch ===

'''mkbranch''' is the tool for creating new branches.  Provide '''mkbranch''' with a ''project name'' and ''branch name'' and it will create a new branch with that name, switch a copy of trunk to it, and do the equivalent of a '''chbranch''' to the new branch.

=== unbranch ===

'''unbranch''' is the tool for merging a branch's changes into trunk.  First, use '''chbranch''' to change to the branch to be merged.  Then, make sure that the trunk working copy either contains no changes or contains only changes which you want included in the merge (note: it is strongly, strongly recommended that if the merge will be committed that the trunk working copy contain no changes).  Finally, run '''unbranch''' with the ''project name'' and the changes from the branch will be merged into the trunk working copy.  They will not be committed automatically.
",',0
1326,9,1206692840.05275,oubiwann,198.49.126.204,"= The Complete Divmod Project List =

[[Image(http://divmod.org/tracdocs/projects_whtbck.png, right)]]  

== Frameworks ==

 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and our audio handling code.
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A messaging platform for email and more.
 '''[wiki:DivmodImaginary Imaginary]'''::
  A simulation framework for your games.

== Tools ==

 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.

== Unmaintained ==

These are projects that could be revived if they were to benefit from a dedicated champion to maintain them.

 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game. 

== Retired ==

These projects are no longer being developed.

 '''Atop'''::
   Our earlier OODB projects.
   [wiki:WhitherAtop What happened to Atop?] See also [wiki:WhitherQuotient what happened to 'Old' Quotient?]
 '''Lupy'''::
   A port of Lucene to Python. [wiki:WhitherLupy What happened to Lupy?]
 '''Pyndex'''::
   An early attempt at a full-text indexer in Python. [wiki:WhitherPyndex What happened to Pyndex?]
 '''Xapwrap'''::
   A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.  [wiki:DivmodXapwrap Divmod Xapwrap]",',0
1327,10,1206692952.02561,oubiwann,198.49.126.204,"= The Complete Divmod Project List =

[[Image(http://divmod.org/tracdocs/projects_whtbck.png, right)]]  

== Frameworks ==

 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and our audio handling code.
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A messaging platform for email and more.
 '''[wiki:DivmodImaginary Imaginary]'''::
  A simulation framework for your games.

== Tools ==

 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.

== Unmaintained ==

These are projects that could be revived if they were to benefit from a dedicated champion to maintain them.

 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game. 

== Retired ==

These projects are no longer being developed.

 '''Atop'''::
   Our earlier OODB project, the big sister of [DivmodAxiom Axiom].
   [wiki:WhitherAtop What happened to Atop?] See also [wiki:WhitherQuotient what happened to 'Old' Quotient?]
 '''Lupy'''::
   A port of Lucene to Python. [wiki:WhitherLupy What happened to Lupy?]
 '''Pyndex'''::
   An early attempt at a full-text indexer in Python. [wiki:WhitherPyndex What happened to Pyndex?]
 '''Xapwrap'''::
   A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.  [wiki:DivmodXapwrap Divmod Xapwrap]",',0
1328,5,1206694762.59949,oubiwann,198.49.126.204,"= Ideas =

[[Image(http://divmod.org/tracdocs/ideas_whtbck.png, right)]] 

 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
",',0
1329,3,1206694807.8697,oubiwann,198.49.126.204,"= Community =

[[Image(http://divmod.org/tracdocs/community_whtbck.png, right)]] 

== Need Help? ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the [http://divmod.org/users/mailman.twistd/pipermail/divmod-dev/ web-based archives].
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Blogs''': The general [http://community.livejournal.com/divmod/ Divmod blog]; personal blogs: [http://www.livejournal.com/users/amiramir amiramir], [http://www.livejournal.com/users/jcalderone exarkun], [http://www.livejournal.com/users/glyf glyph], and [http://oubiwann.blogspot.com/ oubiwann]. You may also like to checkout these developers' weblogs for release announcements etc.
 * '''Buildbot''': See the [http://bb.divmod.org/ latest build and test results] for the code in trunk.

== Wamt to help? ==
 * Check out our [wiki:HereToHelp Here to Help?] section
 * Get excited about [wiki:DivmodIdeas how we're thinking]!

== Love Divmod? ==
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].
",',0
1330,2,1206695188.39446,oubiwann,198.49.126.204,"== Here to help out? ==

[[Image(http://divmod.org/tracdocs/help_whtbck.png, right)]] 

If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a fledgling business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.",',0
1331,5,1206729750.63668,oubiwann,198.49.126.204,"= Downloads =

[[Image(http://divmod.org/tracdocs/download_whtbck.png, right)]] 

== Live Code ==

You can have the entire open source Divmod code base in one go with the following:
{{{
svn co http://divmod.org/svn/Divmod/trunk/ Divmod
}}}

If you're going to be using [DivmodCombinator Combinator], then you might want to leave a place for branches:
{{{
svn co -N http://divmod.org/svn/Divmod 
cd Divmod
svn up -N branches
svn up trunk
}}}

== Individual Releases ==

If you'd like to download our projects individually (as releases) then please head over to the [DivmodProjects Projects] page and follow the links for the projects in which you are interested.",',0
1332,6,1206730142.94248,oubiwann,198.49.126.204,"= Divmod Ideas =

[[Image(http://divmod.org/tracdocs/ideas_whtbck.png, right)]] 

 * [wiki:MantissaIsTheDeploymentTarget Mantissa is the deployment target], the web is not.
 * Here at Divmod we use [wiki:BranchBasedDevelopment branch based development] to ensure quality and freshness of our software at all times.
 * MantissaUserConfigurationAdministration
 * [wiki:DivmodAnvil Anvil] will one day be a task tracker that replaces trac.
 * [wiki:DemocracyServer Democracy Server]: a communications and commerce server for the developing world.
",',0
1333,4,1206730526.31717,oubiwann,198.49.126.204,"= Community =

[[Image(http://divmod.org/tracdocs/community_whtbck.png, right)]] 

== Need Help? ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the [http://divmod.org/users/mailman.twistd/pipermail/divmod-dev/ web-based archives].
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Buildbot''': See the [http://bb.divmod.org/ latest build and test results] for the code in trunk.

== Stay Tuned In! ==

'''Blogs''': We have a company blog [http://community.livejournal.com/divmod/ here]. There are also several employee blogs you may want to keep in your RSS reader for the latest news, fun, and rumors:
 * [http://www.livejournal.com/users/amiramir amiramir]
 * [http://www.livejournal.com/users/jcalderone exarkun]
 * [http://www.livejournal.com/users/glyf glyph]
 * [http://oubiwann.blogspot.com/ oubiwann]

'''Twitter''': You can follow us on Twitter, too; lately, we tend to put sneak-peek notices there:
 * [http://twitter.com/glyf glyph]
 * [http://twitter.com/oubiwann oubiwann]

== Want to help? ==
 * Check out our [wiki:HereToHelp Here to Help?] section
 * Get excited about [wiki:DivmodIdeas how we're thinking]!

== Love Divmod? ==
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].
",',0
1334,20,1206731003.51228,oubiwann,198.49.126.204,,,
1335,7,1206731279.58624,oubiwann,198.49.126.204,"= Best Practices: Code Review =

Divmod uses code review for just about every change to any project.

Code review is a pretty simple process: at its heart, it is little more than reading some code written by someone else.  Nevertheless, it can be useful to have a set of things on which to focus during a review:

  * Does the branch merge or the diff apply cleanly?
  * Are there unit tests for the code being changed or added?
  * Do the unit tests pass for you?
  * Do the unit tests pass for buildbot?
  * Is there documentation for new code?
  * Where appropriate, has existing documentation been updated (including !ChangeLog/NEWS files)?
  * Does the code adhere to the [wiki:CodingStandard coding standard]?

There's the easy list.  Most are mechanical checks.  Don't feel bad about rejecting a branch if the answer to any of these questions is no: the problems may seem minor in isolation, but each contributes to overall poor code quality.  Moreover, sometimes apparently minor problems can be hiding larger issues.

Taking a look at the bigger picture can be a little bit harder, but it's just as important. ''Finish this section.''
",',0
1336,8,1206731290.42814,oubiwann,198.49.126.204,"= Divmod Best Practices: Code Review =

Divmod uses code review for just about every change to any project.

Code review is a pretty simple process: at its heart, it is little more than reading some code written by someone else.  Nevertheless, it can be useful to have a set of things on which to focus during a review:

  * Does the branch merge or the diff apply cleanly?
  * Are there unit tests for the code being changed or added?
  * Do the unit tests pass for you?
  * Do the unit tests pass for buildbot?
  * Is there documentation for new code?
  * Where appropriate, has existing documentation been updated (including !ChangeLog/NEWS files)?
  * Does the code adhere to the [wiki:CodingStandard coding standard]?

There's the easy list.  Most are mechanical checks.  Don't feel bad about rejecting a branch if the answer to any of these questions is no: the problems may seem minor in isolation, but each contributes to overall poor code quality.  Moreover, sometimes apparently minor problems can be hiding larger issues.

Taking a look at the bigger picture can be a little bit harder, but it's just as important. ''Finish this section.''
",',0
1337,3,1206731435.76446,oubiwann,198.49.126.204,"== Here to help out? ==

[[Image(http://divmod.org/tracdocs/help_whtbck.png, right)]] 

If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

==== Contributing Code ====

If after look at those (or other) tickets, are you are ready to start writing code for inclusion into one or more of our projects, we ask that you take the time to read and ask questions about the following:
 * Branch management with [DivmodCombinator Combinator]
 * The [CombinatorTutorial Combinator Tutorial]
 * [UltimateQualityDevelopmentSystem UQDS] - our development process: the Ultimate Quality Development System
 * The [CodingStandard Coding Standard]
 * The [CodeReview Code Review Process]
Adhering to our 'Best Practices', standards, and following the established process will give your patches the best opportunity for inclusion. Though most patches are not immediately accepted, take heart: even code from our lead developers is not immediately accepted! None of us are perfect :-)",',0
1338,36,1206731523.80541,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : Axiom =

[[Image(http://divmod.org/tracdocs/axiom_whtbck.png, right)]] Axiom is an object database whose primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.27.tar.gz?format=raw Download the latest release - 0.5.27!] (Requires [wiki:DivmodEpsilon Epsilon])
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]
 * [wiki:DivmodAxiom/DependencyTransition Dependencies]: How to transition from pre-{{{axiom.dependency}}} code.
 * [wiki:DivmodAxiom/Powerups Powerups]
 * WritingUpgradeTests: writing stubloader tests for schema upgrades.",',0
1339,14,1206731626.69049,oubiwann,198.49.126.204,"= Potato Programming =

'''One potato, two potato, three potato, four....'''

Potato programming is the sort of programming that encourages you to write your own 'for' loops and build up / tear down data structures, rather than passing vectors or iterators down through an interface in such a way that would allow a smarter version of that interface to be more efficient.

In other words, this is the PotatoProgramming way to add a file containing lines of numbers:

{{{
#!python
f = file('test.numbers')
accum = 0.
for line in f.readlines():
    accum += float(line)
print accum
}}}

Contrast this with:

{{{
#!python
f = file('test.numbers')
print sum(map(float, f.readlines()))
}}}

This term was coined by R0ml Lefkowitz.

More on PotatoProgrammingExplained.",',0
1340,15,1206731664.70308,oubiwann,198.49.126.204,"= Potato Programming =

'''One potato, two potato, three potato, four....'''

Potato programming is the sort of programming that encourages you to write your own 'for' loops and build up / tear down data structures, rather than passing vectors or iterators down through an interface in such a way that would allow a smarter version of that interface to be more efficient.

In other words, this is the PotatoProgramming way to add a file containing lines of numbers:

{{{
#!python
f = file('test.numbers')
accum = 0.
for line in f.readlines():
    accum += float(line)
print accum
}}}

Contrast this with:

{{{
#!python
f = file('test.numbers')
print sum(map(float, f.readlines()))
}}}

This term was coined by R0ml Lefkowitz.

See also: [PotatoProgrammingExplained Potato Programming Explained]",',0
1341,37,1206731891.36464,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : Axiom =

[[Image(http://divmod.org/tracdocs/axiom_whtbck.png, right)]] Axiom is an object database whose primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel Pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.27.tar.gz?format=raw Download the latest release - 0.5.27!] (Requires [wiki:DivmodEpsilon Epsilon])
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]
 * [wiki:DivmodAxiom/DependencyTransition Dependencies]: How to transition from pre-{{{axiom.dependency}}} code.
 * [wiki:DivmodAxiom/Powerups Powerups]
 * WritingUpgradeTests: writing stubloader tests for schema upgrades.",',0
1342,4,1206732067.65925,oubiwann,198.49.126.204,"== Here to help out? ==

[[Image(http://divmod.org/tracdocs/help_whtbck.png, right)]] 

If you're looking for a way to contribute to our open source efforts, thanks a lot!

[wiki:DivmodInc The Divmod company] would like our software to do anything and everything, but with a business to run, we have to make some tough choices with our time.  To ensure that our feature ideas don't get lost in the mists of time, we've created a page of [wiki:CommunityGoals community goals]: a highlighted collection of tickets that we would be grateful if some brave soul in the open source world would attempt to contribute a patch for.

==== Contributing Code ====

If after look at those (or other) tickets, are you are ready to start writing code for inclusion into one or more of our projects, we ask that you take the time to read and ask questions about the following:
 * Branch management with [DivmodCombinator Combinator]
 * The [CombinatorTutorial Combinator Tutorial]
 * [UltimateQualityDevelopmentSystem UQDS] - our development process: the Ultimate Quality Development System
 * The [CodingStandard Coding Standard]
 * The [CodeReview Code Review Process]

Some additional points of consideration:
 * [PotatoProgramming Potato Programming]
 * [PotatoProgrammingExplained Potato Programming Explained]

Adhering to our 'Best Practices' and coding standards while following the established process will give your patches the best opportunity for inclusion. Though most patches are not immediately accepted, take heart: even code from our lead developers is not immediately accepted! None of us are perfect :-)",',0
1343,9,1206732317.69782,oubiwann,198.49.126.204,"= Divmod Best Practices: Code Review =

Divmod uses code review for just about every change to any project.

Code review is a pretty simple process: at its heart, it is little more than reading some code written by someone else.  Nevertheless, it can be useful to have a set of things on which to focus during a review:

  * Does the branch merge or the diff apply cleanly?
  * Are there unit tests for the code being changed or added?
  * Do the unit tests pass for you?
  * Do the unit tests pass for buildbot?
  * Is there documentation for new code?
  * Where appropriate, has existing documentation been updated (including !ChangeLog/NEWS files)?
  * Does the code adhere to the [wiki:CodingStandard coding standard]?

There's the easy list, most being mechanical checks. For a more thorough break-down, please read the [http://twistedmatrix.com/trac/wiki/ReviewProcess Twisted Review Process].

Don't feel bad about rejecting a branch if the answer to any of the bulleted questions is 'no'; the problems may seem minor in isolation, but each contributes to overall poor code quality.  Moreover, sometimes apparently minor problems can be hiding larger issues.

Taking a look at the bigger picture can be a little bit harder, but it's just as important. As with most important skills, it takes time to gain proficiency in this, but everyone benefits when you do.
",',0
1344,27,1206732402.11183,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

[[Image(http://divmod.org/tracdocs/mantissa_whtbck.png, right)]] 

Mantissa is an application server. It provides integration between the [wiki:DivmodAxiom Axiom] 'smart' object database, the [wiki:DivmodNevow Nevow] web templating/AJAX/COMET framework and the TwistedFramework.

MantissaIsTheDeploymentTarget.

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services, and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.6.19.tar.gz?format=raw Get the most recent release - 0.6.19!]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== Tutorials ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:MantissaWikiTutorial Mantissa Wiki Tutorial] A bit short on explanations, but complete
 * [wiki:MantissaBlogTutorial Mantissa Blog Tutorial] 
 * [wiki:MantissaHowTo An example of how to build a Mantissa application (incomplete)]

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
",',0
1345,2,1206732463.58088,oubiwann,198.49.126.204,"= HTTP Isn't Special =

HTTP is just a protocol.

It is popular, but it isn't magical.

It isn't the best protocol; it makes it hard to build interactive applications.

Other protocols deserve good implementations, too.",',0
1346,4,1206732512.54085,oubiwann,198.49.126.204,"= Mantissa Is The Deployment Target =
=== The Web Is Not ===

== What Does That Mean? ==

Mantissa is an application server.

It can serve an application over several protocols.

HTTP is one of those protocols, but HttpIsntSpecial.

The web interface that Mantissa provides should be pluggable, but it should ''not'' be so flexible that every Mantissa application provides its own fixed skin and look and feel.

In other words, when you write a Mantissa application, Mantissa is the deployment target.  You deploy your application into a Mantissa application container that faces the web, '''not''' directly onto the web.  Ideally the Mantissa web container will be able to show components from several different independently-developed applications simultaneously.

This means that you SHOULD NOT be writing your own IResource implementations or full-page templates; applications should be plugging in somewhere on the page.  The set of interfaces developed for this right now (INavigableFragment, INavigableElement) are not necessarily the best, but others will arise soon.

This is not gold-plating or overengineering, as many seem to think.  It springs from a specific requirement.  Divmod specifcially intends to develop something like 10 different applications, and launch each one separately, but make it easy for people to sign up and for our subscribers to activate new services.  Each of those applications is pluggable and has integration points with other applications.  These applications are all going to share the same web interface and should have a common look and feel, common interface elements, and a shared infrastructure (for example: password management, search).

== Examples of Where This Matters ==

The most trivial example is side-by-side viewing.   It would be good if the tab-based navigation system could move towards being one where you click on a tab to 'go to a page', vs. one where you click on a tab to 'launch' a Mantissa object, enabling side-by-side viewing of multiple interactive objects on one LivePage.  (Donovan's ill-fated launch-bar demonstration is what I mean by this, for those who saw it before it was deleted.)

Obviously you cannot lay out the entire page in one component if it is going to be displayed on the same page as a separate component.

A better example might be search.  There should be one search box for every Mantissa application.  When a user searches, each application should be queried (where 'application' in this case is equivalent to 'thing installed on a user's store, implementing the appropriate search interface')

The search results page should not be laid out or rendered by any particular application, but instead, be an aggregation of all the search results for a particular term.  This means that the search page has to be part of the framework, not part of an application.

(More examples to come)",',0
1347,5,1206732571.09365,oubiwann,198.49.126.204,"= Divmod Mantissa: The Target =

'Mantissa is the deployment target, not the Web.'

== What Does That Mean? ==

Mantissa is an application server.

It can serve an application over several protocols.

HTTP is one of those protocols, but HttpIsntSpecial.

The web interface that Mantissa provides should be pluggable, but it should ''not'' be so flexible that every Mantissa application provides its own fixed skin and look and feel.

In other words, when you write a Mantissa application, Mantissa is the deployment target.  You deploy your application into a Mantissa application container that faces the web, '''not''' directly onto the web.  Ideally the Mantissa web container will be able to show components from several different independently-developed applications simultaneously.

This means that you SHOULD NOT be writing your own IResource implementations or full-page templates; applications should be plugging in somewhere on the page.  The set of interfaces developed for this right now (INavigableFragment, INavigableElement) are not necessarily the best, but others will arise soon.

This is not gold-plating or overengineering, as many seem to think.  It springs from a specific requirement.  Divmod specifcially intends to develop something like 10 different applications, and launch each one separately, but make it easy for people to sign up and for our subscribers to activate new services.  Each of those applications is pluggable and has integration points with other applications.  These applications are all going to share the same web interface and should have a common look and feel, common interface elements, and a shared infrastructure (for example: password management, search).

== Examples of Where This Matters ==

The most trivial example is side-by-side viewing.   It would be good if the tab-based navigation system could move towards being one where you click on a tab to 'go to a page', vs. one where you click on a tab to 'launch' a Mantissa object, enabling side-by-side viewing of multiple interactive objects on one LivePage.  (Donovan's ill-fated launch-bar demonstration is what I mean by this, for those who saw it before it was deleted.)

Obviously you cannot lay out the entire page in one component if it is going to be displayed on the same page as a separate component.

A better example might be search.  There should be one search box for every Mantissa application.  When a user searches, each application should be queried (where 'application' in this case is equivalent to 'thing installed on a user's store, implementing the appropriate search interface')

The search results page should not be laid out or rendered by any particular application, but instead, be an aggregation of all the search results for a particular term.  This means that the search page has to be part of the framework, not part of an application.

(More examples to come)",',0
1348,6,1206732587.78969,oubiwann,198.49.126.204,"= Divmod Mantissa: The Target =

'Mantissa is the deployment target, not the Web.'

== What Does That Mean? ==

Mantissa is an application server. It can serve an application over several protocols. HTTP is one of those protocols, but HttpIsntSpecial.

The web interface that Mantissa provides should be pluggable, but it should ''not'' be so flexible that every Mantissa application provides its own fixed skin and look and feel.

In other words, when you write a Mantissa application, Mantissa is the deployment target.  You deploy your application into a Mantissa application container that faces the web, '''not''' directly onto the web.  Ideally the Mantissa web container will be able to show components from several different independently-developed applications simultaneously.

This means that you SHOULD NOT be writing your own IResource implementations or full-page templates; applications should be plugging in somewhere on the page.  The set of interfaces developed for this right now (INavigableFragment, INavigableElement) are not necessarily the best, but others will arise soon.

This is not gold-plating or overengineering, as many seem to think.  It springs from a specific requirement.  Divmod specifcially intends to develop something like 10 different applications, and launch each one separately, but make it easy for people to sign up and for our subscribers to activate new services.  Each of those applications is pluggable and has integration points with other applications.  These applications are all going to share the same web interface and should have a common look and feel, common interface elements, and a shared infrastructure (for example: password management, search).

== Examples of Where This Matters ==

The most trivial example is side-by-side viewing.   It would be good if the tab-based navigation system could move towards being one where you click on a tab to 'go to a page', vs. one where you click on a tab to 'launch' a Mantissa object, enabling side-by-side viewing of multiple interactive objects on one LivePage.  (Donovan's ill-fated launch-bar demonstration is what I mean by this, for those who saw it before it was deleted.)

Obviously you cannot lay out the entire page in one component if it is going to be displayed on the same page as a separate component.

A better example might be search.  There should be one search box for every Mantissa application.  When a user searches, each application should be queried (where 'application' in this case is equivalent to 'thing installed on a user's store, implementing the appropriate search interface')

The search results page should not be laid out or rendered by any particular application, but instead, be an aggregation of all the search results for a particular term.  This means that the search page has to be part of the framework, not part of an application.

(More examples to come)",',0
1349,7,1206732611.19724,oubiwann,198.49.126.204,"= Divmod Mantissa: The Target =

'Mantissa is the deployment target, not the Web.'

== What Does That Mean? ==

Mantissa is an application server; it can serve an application over several protocols. HTTP is one of those protocols, but HttpIsntSpecial.

The web interface that Mantissa provides should be pluggable, but it should ''not'' be so flexible that every Mantissa application provides its own fixed skin and look and feel.

In other words, when you write a Mantissa application, Mantissa is the deployment target.  You deploy your application into a Mantissa application container that faces the web, '''not''' directly onto the web.  Ideally the Mantissa web container will be able to show components from several different independently-developed applications simultaneously.

This means that you SHOULD NOT be writing your own IResource implementations or full-page templates; applications should be plugging in somewhere on the page.  The set of interfaces developed for this right now (INavigableFragment, INavigableElement) are not necessarily the best, but others will arise soon.

This is not gold-plating or overengineering, as many seem to think.  It springs from a specific requirement.  Divmod specifcially intends to develop something like 10 different applications, and launch each one separately, but make it easy for people to sign up and for our subscribers to activate new services.  Each of those applications is pluggable and has integration points with other applications.  These applications are all going to share the same web interface and should have a common look and feel, common interface elements, and a shared infrastructure (for example: password management, search).

== Examples of Where This Matters ==

The most trivial example is side-by-side viewing.   It would be good if the tab-based navigation system could move towards being one where you click on a tab to 'go to a page', vs. one where you click on a tab to 'launch' a Mantissa object, enabling side-by-side viewing of multiple interactive objects on one LivePage.  (Donovan's ill-fated launch-bar demonstration is what I mean by this, for those who saw it before it was deleted.)

Obviously you cannot lay out the entire page in one component if it is going to be displayed on the same page as a separate component.

A better example might be search.  There should be one search box for every Mantissa application.  When a user searches, each application should be queried (where 'application' in this case is equivalent to 'thing installed on a user's store, implementing the appropriate search interface')

The search results page should not be laid out or rendered by any particular application, but instead, be an aggregation of all the search results for a particular term.  This means that the search page has to be part of the framework, not part of an application.

(More examples to come)",',0
1350,8,1206732646.07557,oubiwann,198.49.126.204,"= Divmod Mantissa: The Target =

'Mantissa is the deployment target, not the Web.'

== What Does That Mean? ==

Mantissa is an application server; it can serve an application over several protocols. HTTP is one of those protocols, but it [HttpIsntSpecial isn't the only one].

The web interface that Mantissa provides should be pluggable, but it should ''not'' be so flexible that every Mantissa application provides its own fixed skin and look and feel.

In other words, when you write a Mantissa application, Mantissa is the deployment target.  You deploy your application into a Mantissa application container that faces the web, '''not''' directly onto the web.  Ideally the Mantissa web container will be able to show components from several different independently-developed applications simultaneously.

This means that you SHOULD NOT be writing your own IResource implementations or full-page templates; applications should be plugging in somewhere on the page.  The set of interfaces developed for this right now (INavigableFragment, INavigableElement) are not necessarily the best, but others will arise soon.

This is not gold-plating or overengineering, as many seem to think.  It springs from a specific requirement.  Divmod specifcially intends to develop something like 10 different applications, and launch each one separately, but make it easy for people to sign up and for our subscribers to activate new services.  Each of those applications is pluggable and has integration points with other applications.  These applications are all going to share the same web interface and should have a common look and feel, common interface elements, and a shared infrastructure (for example: password management, search).

== Examples of Where This Matters ==

The most trivial example is side-by-side viewing.   It would be good if the tab-based navigation system could move towards being one where you click on a tab to 'go to a page', vs. one where you click on a tab to 'launch' a Mantissa object, enabling side-by-side viewing of multiple interactive objects on one LivePage.  (Donovan's ill-fated launch-bar demonstration is what I mean by this, for those who saw it before it was deleted.)

Obviously you cannot lay out the entire page in one component if it is going to be displayed on the same page as a separate component.

A better example might be search.  There should be one search box for every Mantissa application.  When a user searches, each application should be queried (where 'application' in this case is equivalent to 'thing installed on a user's store, implementing the appropriate search interface')

The search results page should not be laid out or rendered by any particular application, but instead, be an aggregation of all the search results for a particular term.  This means that the search page has to be part of the framework, not part of an application.

(More examples to come)",',0
1351,9,1206732709.27866,oubiwann,198.49.126.204,"= Divmod Mantissa: The Target =

'Mantissa is the deployment target, not the Web.'

== What Does That Mean? ==

Mantissa is an application server; it can serve an application over several protocols. HTTP is one of those protocols, but it [HttpIsntSpecial isn't the only one].

The web interface that Mantissa provides should be pluggable, but it should ''not'' be so flexible that every Mantissa application provides its own fixed skin and look and feel.

In other words, when you write a Mantissa application, Mantissa is the deployment target.  You deploy your application into a Mantissa application container that faces the web, '''not''' directly onto the web.  Ideally the Mantissa web container will be able to show components from several different independently-developed applications simultaneously.

This means that you SHOULD NOT be writing your own IResource implementations or full-page templates; applications should be plugging in somewhere on the page.  The set of interfaces developed for this right now (INavigableFragment, INavigableElement) are not necessarily the best, but others will arise soon.

This is not gold-plating or over-engineering, as many seem to think; it springs from a specific requirement.  Divmod specifically intends to develop something like 10 different applications, and launch each one separately, but make it easy for people to sign up and for our subscribers to activate new services.  Each of those applications is pluggable and has integration points with other applications.  These applications are all going to share the same web interface and should have a common look and feel, common interface elements, and a shared infrastructure (for example: password management, search).

== Examples of Where This Matters ==

The most trivial example is side-by-side viewing.   It would be good if the tab-based navigation system could move towards being one where you click on a tab to 'go to a page', vs. one where you click on a tab to 'launch' a Mantissa object, enabling side-by-side viewing of multiple interactive objects on one LivePage.  (Donovan's ill-fated launch-bar demonstration is what I mean by this, for those who saw it before it was deleted.)

Obviously you cannot lay out the entire page in one component if it is going to be displayed on the same page as a separate component.

A better example might be search.  There should be one search box for every Mantissa application.  When a user searches, each application should be queried (where 'application' in this case is equivalent to 'thing installed on a user's store, implementing the appropriate search interface')

The search results page should not be laid out or rendered by any particular application, but instead, be an aggregation of all the search results for a particular term.  This means that the search page has to be part of the framework, not part of an application.

(More examples to come)",',0
1352,10,1206732728.9998,oubiwann,198.49.126.204,"= Divmod Mantissa: The Target =

'Mantissa is the deployment target, not the Web.'

== What Does That Mean? ==

Mantissa is an application server; it can serve an application over several protocols. HTTP is one of those protocols, but it [HttpIsntSpecial isn't the only one].

The web interface that Mantissa provides should be pluggable, but it should ''not'' be so flexible that every Mantissa application provides its own fixed skin and look and feel.

In other words, when you write a Mantissa application, Mantissa is the deployment target.  You deploy your application into a Mantissa application container that faces the web, '''not''' directly onto the web.  Ideally the Mantissa web container will be able to show components from several different independently-developed applications simultaneously.

This means that you SHOULD NOT be writing your own IResource implementations or full-page templates; applications should be plugging in somewhere on the page.  The set of interfaces developed for this right now (INavigableFragment, INavigableElement) are not necessarily the best, but others will arise soon.

This is not gold-plating or over-engineering, as many seem to think; it springs from a specific requirement.  Divmod specifically intends to develop something like 10 different applications, and launch each one separately, but make it easy for people to sign up and for our subscribers to activate new services.  Each of those applications is pluggable and has integration points with other applications.  These applications are all going to share the same web interface and should have a common look and feel, common interface elements, and a shared infrastructure (for example: password management, search).

== Examples of Where This Matters ==

The most trivial example is side-by-side viewing.   It would be good if the tab-based navigation system could move towards being one where you click on a tab to 'go to a page', vs. one where you click on a tab to 'launch' a Mantissa object, enabling side-by-side viewing of multiple interactive objects on one LivePage.  (Donovan's ill-fated launch-bar demonstration is what I mean by this, for those who saw it before it was deleted.)

Obviously you cannot lay out the entire page in one component if it is going to be displayed on the same page as a separate component.

A better example might be search.  There should be one search box for every Mantissa application.  When a user searches, each application should be queried (where 'application' in this case is equivalent to 'thing installed on a user's store, implementing the appropriate search interface')

The search results page should not be laid out or rendered by any particular application, but instead, be an aggregation of all the search results for a particular term.  This means that the search page has to be part of the framework, not part of an application.",',0
1353,28,1206732819.61238,oubiwann,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

[[Image(http://divmod.org/tracdocs/mantissa_whtbck.png, right)]] 

Mantissa is an application server. It provides integration between the [wiki:DivmodAxiom Axiom] 'smart' object database, the [wiki:DivmodNevow Nevow] web templating/AJAX/COMET framework and the TwistedFramework.

Read more about Mantissa's [MantissaIsTheDeploymentTarget philosophy and motivation].

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services, and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.6.19.tar.gz?format=raw Get the most recent release - 0.6.19!]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== Tutorials ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:MantissaWikiTutorial Mantissa Wiki Tutorial] A bit short on explanations, but complete
 * [wiki:MantissaBlogTutorial Mantissa Blog Tutorial] 
 * [wiki:MantissaHowTo An example of how to build a Mantissa application (incomplete)]

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
",',0
1354,11,1206733525.49756,oubiwann,198.49.126.204,"= The Complete Divmod Project List =

[[Image(http://divmod.org/tracdocs/projects_whtbck.png, right)]]  

== Frameworks ==

 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web templating framework that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded object database implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A voice over IP framework built on Mantissa and our audio handling code.
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A messaging platform for email and more.
 '''[wiki:DivmodHyperbola Divmod Hyperbola]'''::
  Blogging/forums software.
 '''[wiki:DivmodImaginary Imaginary]'''::
  A simulation framework for your games.

== Tools ==

 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.

== Unmaintained ==

These are projects that could be revived if they were to benefit from a dedicated champion to maintain them.

 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game. 

== Retired ==

These projects are no longer being developed.

 '''Atop'''::
   Our earlier OODB project, the big sister of [DivmodAxiom Axiom].
   [wiki:WhitherAtop What happened to Atop?] See also [wiki:WhitherQuotient what happened to 'Old' Quotient?]
 '''Lupy'''::
   A port of Lucene to Python. [wiki:WhitherLupy What happened to Lupy?]
 '''Pyndex'''::
   An early attempt at a full-text indexer in Python. [wiki:WhitherPyndex What happened to Pyndex?]
 '''Xapwrap'''::
   A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.  [wiki:DivmodXapwrap Divmod Xapwrap]",',0
1355,39,1206733640.80527,oubiwann,198.49.126.204,"= Divmod: Success Stories =

Here are some people and organizations using Divmod software

 * [http://snipshot.com/ Snipshot] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://test.stiq.it/ Stiq]: A web news site with tags and all niceties
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://code.google.com/p/pymon/ pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://code.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodNevow/Athena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://python.org The Python website] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.who.int/en/ The World Health Organisation] uses [wiki:DivmodAxiom Axiom] and [wiki:DivmodNevow Nevow] for electronic learning products.
 * [http://www.gamezone.cz/ GameZone.cz] uses [wiki:DivmodNevow Divmod Nevow]
 * [http://www.evokat.com/ Illumaware EvoKat] (a data management application) uses [wiki:DivmodNevow Divmod Nevow], [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://www.fluendo.com/ Fluendo] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.daylife.com/ Daylife] uses [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodReverend Divmod Reverend].
 * [http://www.openend.se/ Open End] uses [wiki:DivmodNevow Divmod Nevow].",',0
1356,5,1206733949.90623,oubiwann,198.49.126.204,"= Community =

[[Image(http://divmod.org/tracdocs/community_whtbck.png, right)]] 

== Need Help? ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the [http://divmod.org/users/mailman.twistd/pipermail/divmod-dev/ web-based archives].
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Buildbot''': See the [http://bb.divmod.org/ latest build and test results] for the code in trunk.

== Stay Tuned In! ==

'''Blogs''': We have a company blog [http://community.livejournal.com/divmod/ here]. There are also several employee blogs you may want to keep in your RSS reader for the latest news, fun, and rumors:
 * [http://www.livejournal.com/users/amiramir amiramir]
 * [http://www.livejournal.com/users/jcalderone exarkun]
 * [http://www.livejournal.com/users/glyf glyph]
 * [http://oubiwann.blogspot.com/ oubiwann]

'''Twitter''': You can follow us on Twitter, too; lately, we tend to put sneak-peek notices there:
 * [http://twitter.com/glyf glyph]
 * [http://twitter.com/oubiwann oubiwann]

'''Success Stories''': Check out [PeopleUsingDivmod who's using Divmod]...

== Want to help? ==
 * Check out our [wiki:HereToHelp Here to Help?] section
 * Get excited about [wiki:DivmodIdeas how we're thinking]!

== Love Divmod? ==
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].
",',0
1357,127,1206736393.38902,oubiwann,198.49.126.204,"= Get started on your new [http://twistedmatrix.com/trac/ Twisted] application with our open source software! =

{{{
#!html
<br/>
<table id='splash' width='100%'>
  <tr>
    <td align='center' valign='top'>


<div id='lightwrapper'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table width='100%'>
  <tr class='names'>
    <td align='center'><a href='/trac/wiki/DivmodProjects'>Projects</a></td>
    <td align='center'><a href='/trac/wiki/Download'>Download</a></td>
    <td align='center'><a href='/trac/wiki/DivmodCommunity'>Community</a></td>
    <td align='center'><a href='/trac/wiki/DivmodFanClub'>The Fan Club</a></td>
  </tr>
  <tr class='icons'>
    <td align='center'><a href='/trac/wiki/DivmodProjects'><img src='/tracdocs/splash/projects.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/Download'><img src='/tracdocs/splash/download.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodCommunity'><img src='/tracdocs/splash/community.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodFanClub'><img src='/tracdocs/splash/fanclub.gif' /></a></td>
  </tr>
</table>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>

    </td>
  </tr>

</table>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>

    </td>
  </tr>
</table>

<br/>

}}}

= Overview =

'''A quick peek at the major Divmod components'''. These will allow you to build your next great networked application more quickly than ever before!

{{{
#!html
<table id='splash' width='100%'>
  <tr>
    <td width='75%' align='center' valign='top'>

<div id='darkwrapper'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table id='splashcontent' width='100%'>
  <tr>
    <td align='center'>
    <img src='/tracdocs/splash/frameworks.gif' /><br/>
    <h1>Frameworks</h1>
    </td>
    <td align='center'>

<div id='lightsection'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table width='100%'>
  <tr class='icons'>
    <td align='center'><a href='/trac/wiki/DivmodNevow'><img src='/tracdocs/splash/nevow.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodAxiom'><img src='/tracdocs/splash/axiom.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodMantissa'><img src='/tracdocs/splash/mantissa.gif' /></a></td>
  </tr>
  <tr class='names'>
    <td align='center'><a href='/trac/wiki/DivmodNevow'>Nevow</a></td>
    <td align='center'><a href='/trac/wiki/DivmodAxiom'>Axiom</a></td>
    <td align='center'><a href='/trac/wiki/DivmodMantissa'>Mantissa</a></td>
  </tr>
  <tr class='descriptions'>
    <td align='center'>A <b>web templating</b> framework that provides a two-way <b>AJAX toolkit</b></td>
    <td align='center'>An embedded <b>object database</b> with integrated network services</td>
    <td align='center'>An extensible, multi-protocol and multi-user <b>application server</b></td>
  </tr>
</table>


</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>


    </td>
  </tr>
  <tr>
    <td align='center'>
    <img src='/tracdocs/splash/tools.gif' /><br/>
    <h1>Tools</h1>
    </td>
    <td align='center'>

<div id='mediumsection'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table width='100%'>
  <tr class='icons'>
    <td align='center'><a href='/trac/wiki/DivmodCombinator'><img src='/tracdocs/splash/combinator.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodPyflakes'><img src='/tracdocs/splash/pyflakes.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodEpsilon'><img src='/tracdocs/splash/epsilon.gif' /></a></td>
  </tr>
  <tr class='names'>
    <td align='center'><a href='/trac/wiki/DivmodCombinator'>Combinator</a></td>
    <td align='center'><a href='/trac/wiki/DivmodPyflakes'>PyFlakes</a></td>
    <td align='center'><a href='/trac/wiki/DivmodEpsilon'>Epsilon</a></td>
  </tr>
  <tr class='descriptions'>
    <td align='center'>A <b>branch-management</b> tool supporting Subversion and agile development</td>
    <td align='center'>A tool for checking Python <b>source-code</b></td>
    <td align='center'>A Python <b>utilities package</b>, famous for its Time class</td>
  </tr>
</table>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>

</table>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>


    </td>
  </tr>
</table>



}}}


== Thanks! ==

In addition to being insanely creative in our own right, Divmod code integrates that of others as well. Here are some of the [wiki:StuffWeUse tools and services] that we depend on. 

[http://divmod.org divmod.org] is supported by Divmod, Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note] on the usage of our trademark images.

The custom icons on this page are from the free [http://lila-theme.uni.cc/ Lila theme].",',0
1358,128,1206736693.25168,oubiwann,198.49.126.204,"= Get started on your new [http://twistedmatrix.com/trac/ Twisted] application with our open source software! =

{{{
#!html
<br/>
<table id='splash' width='100%'>
  <tr>
    <td align='center' valign='top'>


<div id='lightwrapper'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table width='100%'>
  <tr class='names'>
    <td align='center'><a href='/trac/wiki/DivmodProjects'>Projects</a></td>
    <td align='center'><a href='/trac/wiki/Download'>Download</a></td>
    <td align='center'><a href='/trac/wiki/DivmodCommunity'>Community</a></td>
    <td align='center'><a href='/trac/wiki/DivmodFanClub'>The Fan Club</a></td>
  </tr>
  <tr class='icons'>
    <td align='center'><a href='/trac/wiki/DivmodProjects'><img src='/tracdocs/splash/projects.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/Download'><img src='/tracdocs/splash/download.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodCommunity'><img src='/tracdocs/splash/community.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodFanClub'><img src='/tracdocs/splash/fanclub.gif' /></a></td>
  </tr>
</table>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>

    </td>
  </tr>

</table>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>

    </td>
  </tr>
</table>

<br/>

}}}

= Overview =

'''A quick peek at the major Divmod components'''. These will allow you to build your next great networked application more quickly than ever before!

{{{
#!html
<table id='splash' width='100%'>
  <tr>
    <td width='75%' align='center' valign='top'>

<div id='darkwrapper'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table id='splashcontent' width='100%'>
  <tr>
    <td align='center'>
    <img src='/tracdocs/splash/frameworks.gif' /><br/>
    <h1>Frameworks</h1>
    </td>
    <td align='center'>

<div id='lightsection'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table width='100%'>
  <tr class='icons'>
    <td align='center'><a href='/trac/wiki/DivmodNevow'><img src='/tracdocs/splash/nevow.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodAxiom'><img src='/tracdocs/splash/axiom.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodMantissa'><img src='/tracdocs/splash/mantissa.gif' /></a></td>
  </tr>
  <tr class='names'>
    <td align='center'><a href='/trac/wiki/DivmodNevow'>Nevow</a></td>
    <td align='center'><a href='/trac/wiki/DivmodAxiom'>Axiom</a></td>
    <td align='center'><a href='/trac/wiki/DivmodMantissa'>Mantissa</a></td>
  </tr>
  <tr class='descriptions'>
    <td align='center'>A <b>web templating</b> framework that provides a two-way <b>AJAX toolkit</b></td>
    <td align='center'>An embedded <b>object database</b> with integrated network services</td>
    <td align='center'>An extensible, multi-protocol and multi-user <b>application server</b></td>
  </tr>
</table>


</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>

    </td>
  </tr>
  <tr>
    <td align='center'>
    <img src='/tracdocs/splash/tools.gif' /><br/>
    <h1>Tools</h1>
    </td>
    <td align='center'>

<div id='mediumsection'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table width='100%'>
  <tr class='icons'>
    <td align='center'><a href='/trac/wiki/DivmodCombinator'><img src='/tracdocs/splash/combinator.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodPyflakes'><img src='/tracdocs/splash/pyflakes.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodEpsilon'><img src='/tracdocs/splash/epsilon.gif' /></a></td>
  </tr>
  <tr class='names'>
    <td align='center'><a href='/trac/wiki/DivmodCombinator'>Combinator</a></td>
    <td align='center'><a href='/trac/wiki/DivmodPyflakes'>PyFlakes</a></td>
    <td align='center'><a href='/trac/wiki/DivmodEpsilon'>Epsilon</a></td>
  </tr>
  <tr class='descriptions'>
    <td align='center'>A <b>branch-management</b> tool supporting Subversion and agile development</td>
    <td align='center'>A tool for checking Python <b>source-code</b></td>
    <td align='center'>A Python <b>utilities package</b>, famous for its Time class</td>
  </tr>
</table>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>

</td>
</tr>

</table>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>


    </td>
  </tr>
</table>

}}}


== Thanks! ==

In addition to being insanely creative in our own right, Divmod code integrates that of others as well. Here are some of the [wiki:StuffWeUse tools and services] that we depend on. 

[http://divmod.org divmod.org] is supported by Divmod, Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note] on the usage of our trademark images.

The custom icons on this page are from the free [http://lila-theme.uni.cc/ Lila theme].",',0
1359,129,1206737081.40551,oubiwann,198.49.126.204,"= Get started on your new [http://twistedmatrix.com/trac/ Twisted] application with our open source software! =

{{{
#!html
<br/>
<table class='splash' width='100%'>
  <tr>
    <td align='center' valign='top'>


<div id='lightwrapper'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table width='100%'>
  <tr class='names'>
    <td align='center'><a href='/trac/wiki/DivmodProjects'>Projects</a></td>
    <td align='center'><a href='/trac/wiki/Download'>Download</a></td>
    <td align='center'><a href='/trac/wiki/DivmodCommunity'>Community</a></td>
    <td align='center'><a href='/trac/wiki/DivmodFanClub'>The Fan Club</a></td>
  </tr>
  <tr class='icons'>
    <td align='center'><a href='/trac/wiki/DivmodProjects'><img src='/tracdocs/splash/projects.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/Download'><img src='/tracdocs/splash/download.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodCommunity'><img src='/tracdocs/splash/community.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodFanClub'><img src='/tracdocs/splash/fanclub.gif' /></a></td>
  </tr>
</table>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>

    </td>
  </tr>
</table>

<br/>

}}}

= Overview =

'''A quick peek at the major Divmod components'''. These will allow you to build your next great networked application more quickly than ever before!

{{{
#!html
<table class='splash' width='100%'>
  <tr>
    <td width='75%' align='center' valign='top'>

<div id='darkwrapper'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table id='splashcontent' width='100%'>
  <tr>
    <td align='center'>
    <img src='/tracdocs/splash/frameworks.gif' /><br/>
    <h1>Frameworks</h1>
    </td>
    <td align='center'>

<div id='lightsection'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>


<table width='100%'>
  <tr class='icons'>
    <td align='center'><a href='/trac/wiki/DivmodNevow'><img src='/tracdocs/splash/nevow.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodAxiom'><img src='/tracdocs/splash/axiom.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodMantissa'><img src='/tracdocs/splash/mantissa.gif' /></a></td>
  </tr>
  <tr class='names'>
    <td align='center'><a href='/trac/wiki/DivmodNevow'>Nevow</a></td>
    <td align='center'><a href='/trac/wiki/DivmodAxiom'>Axiom</a></td>
    <td align='center'><a href='/trac/wiki/DivmodMantissa'>Mantissa</a></td>
  </tr>
  <tr class='descriptions'>
    <td align='center'>A <b>web templating</b> framework that provides a two-way <b>AJAX toolkit</b></td>
    <td align='center'>An embedded <b>object database</b> with integrated network services</td>
    <td align='center'>An extensible, multi-protocol and multi-user <b>application server</b></td>
  </tr>
</table>


</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>

    </td>
  </tr>
  <tr>
    <td align='center'>
    <img src='/tracdocs/splash/tools.gif' /><br/>
    <h1>Tools</h1>
    </td>
    <td align='center'>

<div id='mediumsection'>
<b class='b1'></b><b class='b2'></b><b class='b3'></b><b class='b4'></b>
<div class='boxcontent'>

<table width='100%'>
  <tr class='icons'>
    <td align='center'><a href='/trac/wiki/DivmodCombinator'><img src='/tracdocs/splash/combinator.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodPyflakes'><img src='/tracdocs/splash/pyflakes.gif' /></a></td>
    <td align='center'><a href='/trac/wiki/DivmodEpsilon'><img src='/tracdocs/splash/epsilon.gif' /></a></td>
  </tr>
  <tr class='names'>
    <td align='center'><a href='/trac/wiki/DivmodCombinator'>Combinator</a></td>
    <td align='center'><a href='/trac/wiki/DivmodPyflakes'>PyFlakes</a></td>
    <td align='center'><a href='/trac/wiki/DivmodEpsilon'>Epsilon</a></td>
  </tr>
  <tr class='descriptions'>
    <td align='center'>A <b>branch-management</b> tool supporting Subversion and agile development</td>
    <td align='center'>A tool for checking Python <b>source-code</b></td>
    <td align='center'>A Python <b>utilities package</b>, famous for its Time class</td>
  </tr>
</table>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>

</td>
</tr>

</table>

</div>
<b class='b4b'></b><b class='b3b'></b><b class='b2b'></b><b class='b1b'></b>
</div>


    </td>
  </tr>
</table>

}}}


== Thanks! ==

In addition to being insanely creative in our own right, Divmod code integrates that of others as well. Here are some of the [wiki:StuffWeUse tools and services] that we depend on. 

[http://divmod.org divmod.org] is supported by Divmod, Inc. and our generous [wiki:DivmodFanClub fans].

Please see this [wiki:DivmodLogos important note] on the usage of our trademark images.

The custom icons on this page are from the free [http://lila-theme.uni.cc/ Lila theme].",',0
1360,130,1206737595.54182,oubiwann,198.49.126.204,,,
1361,131,1206737801.52913,oubiwann,198.49.126.204,,,
1362,132,1206738986.63705,oubiwann,198.49.126.204,,,
1363,133,1206739148.51992,oubiwann,198.49.126.204,,,
1364,10,1206829022.15778,washort,198.49.126.204,,,
1365,11,1206829159.29475,washort,198.49.126.204,,,
1366,38,1206829413.17662,washort,198.49.126.204,"= [wiki:WikiStart Divmod] : Axiom =

[[Image(http://divmod.org/tracdocs/axiom_whtbck.png, right)]] Axiom is an object database whose primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel Pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.27.tar.gz?format=raw Download the latest release - 0.5.27!] (Requires [wiki:DivmodEpsilon Epsilon])
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [wiki:DivmodAxiom/Tutorial]: The Axiom tutorial. (Still in progress.)
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tips]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]
 * [wiki:DivmodAxiom/DependencyTransition Dependencies]: How to transition from pre-{{{axiom.dependency}}} code.
 * [wiki:DivmodAxiom/Powerups Powerups]
 * WritingUpgradeTests: writing stubloader tests for schema upgrades.",',0
1367,12,1206829857.32729,washort,198.49.126.204,,,
1368,13,1206842444.77739,washort,198.49.126.204,,,
1369,14,1206842673.76288,washort,198.49.126.204,,,
1370,15,1206843491.71782,washort,198.49.126.204,,,
1371,16,1206843989.74233,washort,198.49.126.204,,,
1372,17,1206844068.38449,washort,198.49.126.204,,,
1373,18,1206969907.87684,washort,198.49.126.204,,,
1374,19,1206988866.43515,washort,198.49.126.204,,,
1375,20,1207020934.60742,washort,198.49.126.204,,,
1376,21,1207080183.8093,washort,198.49.126.204,,,
1377,22,1207098078.51054,washort,198.49.126.204,,,
1378,12,1207155908.05665,oubiwann,198.49.126.204,"= The Complete Divmod Project List =

[[Image(http://divmod.org/tracdocs/projects_whtbck.png, right)]]  

== Frameworks ==

 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web '''templating framework''' that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded '''object database''' implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive '''application server''' built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A '''VoIP''' (voice over IP) '''framework''' built on Mantissa and our audio handling code.
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A '''messaging platform''' for email and more.
 '''[wiki:DivmodHyperbola Divmod Hyperbola]'''::
  '''Blogging'''/forums software.
 '''[wiki:DivmodImaginary Imaginary]'''::
  A '''simulation framework''' for your games.

== Tools ==

 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.

== Unmaintained ==

These are projects that could be revived if they were to benefit from a dedicated champion to maintain them.

 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game. 

== Retired ==

These projects are no longer being developed.

 '''Atop'''::
   Our earlier OODB project, the big sister of [DivmodAxiom Axiom].
   [wiki:WhitherAtop What happened to Atop?] See also [wiki:WhitherQuotient what happened to 'Old' Quotient?]
 '''Lupy'''::
   A port of Lucene to Python. [wiki:WhitherLupy What happened to Lupy?]
 '''Pyndex'''::
   An early attempt at a full-text indexer in Python. [wiki:WhitherPyndex What happened to Pyndex?]
 '''Xapwrap'''::
   A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.  [wiki:DivmodXapwrap Divmod Xapwrap]",',0
1379,13,1207236268.96515,oubiwann,198.49.126.204,"= The Complete Divmod Project List =

[[Image(http://divmod.org/tracdocs/projects_whtbck.png, right)]]  

== Frameworks ==

 '''[wiki:DivmodNevow Divmod Nevow]'''::
  A web '''templating framework''' that provides [wiki:DivmodNevow/Athena Athena], a two-way AJAX toolkit.
 '''[wiki:DivmodAxiom Divmod Axiom]'''::
  An pythonic embedded '''object database''' implemented on top of [wiki:SqLite SQLite].
 '''[wiki:DivmodMantissa Divmod Mantissa]'''::
  An extensible, multi-protocol, multi-user, interactive '''application server''' built on top of Axiom and Nevow.
 '''[wiki:DivmodSine Divmod Sine]'''::
  A '''VoIP''' (voice over IP) '''framework''' built on Mantissa and our audio handling code.
 '''[wiki:DivmodQuotient Divmod Quotient]'''::
  A '''messaging platform''' for email and more.
 '''[wiki:DivmodHyperbola Divmod Hyperbola]'''::
  '''Blogging'''/forums software.
 '''[wiki:DivmodImaginary Imaginary]'''::
  A '''simulation framework''' for your games.

== Tools ==

 '''[wiki:DivmodCombinator Divmod Combinator]'''::
  A branch-management tool to assist with the [wiki:UltimateQualityDevelopmentSystem Ultimate Quality Development System] ([wiki:UltimateQualityDevelopmentSystem UQDS]), useful to keep your PYTHONPATH short and avoid having to restart your terminal or log out and log back in when you update your Python path environment.
 '''[wiki:DivmodPyflakes Divmod Pyflakes]'''::
  A lint-like tool for quickly checking your Python code for sanity.
 '''[wiki:DivmodEpsilon Divmod Epsilon]'''::
  A Python utilities package, most famous for its [wiki:ExtimeDotTime Time] class.

== Unmaintained ==

These are projects that could be revived if they were to benefit from a dedicated champion to maintain them.

 '''[wiki:DivmodVertex Divmod Vertex]'''::
  An implementation of the Q2Q protocol, for connecting directly between two endpoints anywhere including mobile users and users behind Network Address Translators (NAT).
 '''[wiki:ShtoomProject Shtoom]'''::
  A voice over IP client and server.
 '''[wiki:DivmodReverend Divmod Reverend]'''::
  A general purpose Bayesian classifier, named after Rev. Thomas Bayes.

== Retired ==

These projects are no longer being developed.

 '''Atop'''::
   Our earlier OODB project, the big sister of [DivmodAxiom Axiom].
   [wiki:WhitherAtop What happened to Atop?] See also [wiki:WhitherQuotient what happened to 'Old' Quotient?]
 '''Lupy'''::
   A port of Lucene to Python. [wiki:WhitherLupy What happened to Lupy?]
 '''Pyndex'''::
   An early attempt at a full-text indexer in Python. [wiki:WhitherPyndex What happened to Pyndex?]
 '''Xapwrap'''::
   A wrapper around the Python bindings for the Xapian Probabilistic Information Retrieval library.  [wiki:DivmodXapwrap Divmod Xapwrap]
 '''[wiki:DivmodRadical Divmod Radical]'''::
  A web-based, interactive, 3rd-person, isometric role-playing game. 
",',0
1380,11,1207494611.13684,radix,198.49.126.204,"= Imaginary =

Imaginary numbers are so named not because they are fictitious, but because
they are along a different axis from real numbers.

Divmod Imaginary is a simulationist's take on the realm of role playing,
interactive fiction, and multiplayer dungeons.  It incorporates gameplay
features from each area while attempting to provide a richer environment
than is generally available from existing systems.

Status: Imaginary is currently on the back of some peoples' minds.

 * [browser:trunk/Imaginary/imaginary Browse the source]. 
 * [query:status=new|assigned|reopened&component=Imaginary View the tickets].


Instructions for starting an Imaginary server are here: [source:/trunk/Imaginary/README.txt?format=txt README.txt]
","README.txt not doc/RUNNING",0
1381,2,1207626228.0183,pjd,198.49.126.204,"= Synopsis =

IRIs are essentially the Unicode superset of (ASCII) URIs, combined with an ASCII embedding via UTF-8.

 * [http://rfc.net/rfc3987.html RFC 3987]
 * [http://www.w3.org/International/O-URL-and-ident.html Internationalized Resource Identifiers (IRIs)] (W3C)

The least you should know:

 * [http://rfc.net/rfc3987.html#s3. RFC 3987 §3] (IRI/URI conversion)
 * [http://www.w3.org/TR/REC-html40/appendix/notes.html#h-B.2.1 HTML4 B.2.1]: Non-ASCII characters in URI attribute values

= Browser support =

[http://www.sw.it.aoyama.ac.jp/2007/pub/IUC31-iri/Presentation.html IRIs and IDNs: Testing, Implementations, and Specification Evolvement] (2007)

 * '''Firefox''': [https://bugzilla.mozilla.org/show_bug.cgi?id=124042 Bug 124042] (2002), `network.standard-url.`{[http://kb.mozillazine.org/Network.standard-url.encode-utf8 encode-utf8]`,`[http://kb.mozillazine.org/Network.standard-url.escape-utf8 escape-utf8]`}`
 * '''Internet Explorer''': ''Tools → Internet Options → Advanced → Browsing → Always send URLs as UTF-8''
 * '''Opera''': ''Tools → Preferences → Advanced → Network → Encode international Web addresses with UTF-8''

= Subtleties =

 * Normalization, comparison, bidirectional text
 * Internationalized Domain Names ([http://rfc.net/rfc3490.html RFC 3490])

= Implementation =

See #2409.",clarify,0
1382,3,1207626310.99213,pjd,198.49.126.204,"= Synopsis =

IRIs are essentially the Unicode superset of (ASCII) URIs, combined with an ASCII embedding via UTF-8.

 * [http://rfc.net/rfc3987.html RFC 3987]
 * [http://www.w3.org/International/O-URL-and-ident.html Internationalized Resource Identifiers (IRIs)] (W3C)

The least you should know:

 * [http://rfc.net/rfc3987.html#s3. RFC 3987 §3] (IRI/URI conversion)
 * [http://www.w3.org/TR/REC-html40/appendix/notes.html#h-B.2.1 HTML4 B.2.1]: Non-ASCII characters in URI attribute values

= Browser support =

[http://www.sw.it.aoyama.ac.jp/2007/pub/IUC31-iri/Presentation.html IRIs and IDNs: Testing, Implementations, and Specification Evolvement] (2007)

Controlling options:

 * '''Firefox''': [https://bugzilla.mozilla.org/show_bug.cgi?id=124042 Bug 124042] (2002), `network.standard-url.`{[http://kb.mozillazine.org/Network.standard-url.encode-utf8 encode-utf8]`,`[http://kb.mozillazine.org/Network.standard-url.escape-utf8 escape-utf8]`}`
 * '''Internet Explorer''': ''Tools → Internet Options → Advanced → Browsing → Always send URLs as UTF-8''
 * '''Opera''': ''Tools → Preferences → Advanced → Network → Encode international Web addresses with UTF-8''

= Subtleties =

 * Normalization, comparison, bidirectional text
 * Internationalized Domain Names ([http://rfc.net/rfc3490.html RFC 3490])

= Implementation =

See #2409.",(tweak),0
1383,12,1208223577.75427,oubiwann,198.49.126.204,"= Divmod: Imaginary =

Imaginary numbers are so named not because they are fictitious, but because
they are along a different axis from real numbers.

Divmod Imaginary is a simulationist's take on the realm of role playing,
interactive fiction, and multiplayer dungeons.  It incorporates gameplay
features from each area while attempting to provide a richer environment
than is generally available from existing systems.

Status: Imaginary is currently on the back of some peoples' minds.

 * [browser:trunk/Imaginary/imaginary Browse the source]. 
 * [query:status=new|assigned|reopened&component=Imaginary View the tickets].


Instructions for starting an Imaginary server are here: [source:/trunk/Imaginary/README.txt?format=txt README.txt]
",',0
1384,13,1208264272.23709,exarkun,198.49.126.204,"== Divmod Sine ==

A voice over IP application server.

[[Image(http://isometric.sixsided.org/_/future_wiring/2.gif)]]

Sine provides:
 * SIP Registrar
 * SIP Proxy
 * Third party call control (3PCC)
 * Voice-mail
 * Through-the-web configuration
 * [wiki:DivmodMantissa Divmod Mantissa] integration

=== Download ===

 * Release: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Sine-0.1.0.tar.gz?format=raw Download the latest release - 0.1.0!] (Requires [wiki:DivmodMantissa Mantissa])
 * Bleeding Edge: 
{{{
#!sh
% svn co http://divmod.org/svn/Divmod/trunk/Sine Sine
}}}",',0
1385,23,1209044246.92947,washort,198.49.126.204,,,
1386,6,1210004464.22194,oubiwann,198.49.126.204,"= Community =

[[Image(http://divmod.org/tracdocs/community_whtbck.png, right)]] 

== Need Help? ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the [http://divmod.org/users/mailman.twistd/pipermail/divmod-dev/ web-based archives].
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Buildbot''': See the [http://bb.divmod.org/ latest build and test results] for the code in trunk.

== Stay Tuned In! ==

'''Blogs''': We have a company blog [http://community.livejournal.com/divmod/ here]. There are also several employee blogs you may want to keep in your RSS reader for the latest news, fun, and rumors:
 * [http://www.livejournal.com/users/amiramir amiramir]
 * [http://www.livejournal.com/users/jcalderone exarkun]
 * [http://glyph.twistedmatrix.com/ glyph] ([http://glyf.livejournal.com/ old])
 * [http://oubiwann.blogspot.com/ oubiwann]
 * [http://washort.twistedmatrix.com/ dash]

'''Twitter''': You can follow us on Twitter, too; lately, we tend to put sneak-peek notices there:
 * [http://twitter.com/glyf glyph]
 * [http://twitter.com/oubiwann oubiwann]

'''Success Stories''': Check out [PeopleUsingDivmod who's using Divmod]...

== Want to help? ==
 * Check out our [wiki:HereToHelp Here to Help?] section
 * Get excited about [wiki:DivmodIdeas how we're thinking]!

== Love Divmod? ==
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].
",',0
1387,1,1210005531.41446,exarkun,198.49.126.204,"{{{
#!python
Divmod.Runtime.SelectorSupportingPlatform = Divmod.Runtime.Platform.subclass(
    'Divmod.Runtime.SelectorSupportingPlatform');
Divmod.Runtime.SelectorSupportingPlatform.methods(
    function getElementsByTagNameShallow(self, root, tagName) {
        tagName = tagName.replace(/\:/g, '|');
        return root.querySelectorAll(tagName, Divmod.Runtime._nsResolver);
    },

    function _selectorQuery(self, root, attrName, attrValue, /* optional */ all) {
        attrName = attrName.replace(/\:/g, '|');
        if (all === undefined) {
            all = false;
        }
        if (all) {
            return root.querySelectorAll('*['+attrName+'=''+attrValue+'']', Divmod.Runtime._nsResolver);
        } else {
            return root.querySelector('*['+attrName+'=''+attrValue+'']', Divmod.Runtime._nsResolver);
        }
    },

    function firstNodeByAttribute(self, root, attrName, attrValue) {
        /* duplicate this here rather than adding an 'onlyOne' arg to
           nodesByAttribute so adding an extra arg accidentally doesn't change
           it's behaviour if called directly
        */
        var node = self._selectorQuery(root, attrName, attrValue)
        if (!node) {
            throw Divmod.Runtime.NodeAttributeError(root, attrName, attrValue);
        }
        return node;
    },

    function nodeByAttribute(self, root, attrName, attrValue, /* optional */ defaultNode){
        var nodes = self._selectorQuery(root, attrName, attrValue, true);
        if (nodes.length > 1) {
            throw new Error('Found too many ' + attrName + ' = ' + attrValue);
        }
        else if (nodes.length < 1) {
            if (defaultNode === undefined) {
                throw Divmod.Runtime.NodeAttributeError(root, attrName, attrValue);
            }
            else {
                return defaultNode;
            }
        }
        else {
            var result = nodes[0];
            return result;
        }
    },

    function nodesByAttribute(self, root, attrName, attrValue) {
        var nodes = self._selectorQuery(root, attrName, attrValue, true);
        return nodes;
    });
}}}
","Some code that might be of use some day",0
1388,29,1211481945.83079,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Mantissa =

[[Image(http://divmod.org/tracdocs/mantissa_whtbck.png, right)]] 

Mantissa is an application server. It provides integration between the [wiki:DivmodAxiom Axiom] 'smart' object database, the [wiki:DivmodNevow Nevow] web templating/AJAX/COMET framework and the TwistedFramework.

Read more about Mantissa's [MantissaIsTheDeploymentTarget philosophy and motivation].

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services, and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.6.19.tar.gz?format=raw Get the most recent release - 0.6.19!]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== Tutorials ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:MantissaWikiTutorial Mantissa Wiki Tutorial] A bit short on explanations, but complete
 * [wiki:MantissaBlogTutorial Mantissa Blog Tutorial] 
 * [wiki:MantissaHowTo An example of how to build a Mantissa application (incomplete)]

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
 * [wiki:DivmodMantissa/Concepts /Concepts]: other concepts with which Mantissa users should be familiar
","link to concepts",0
1389,1,1211482650.93299,exarkun,198.49.126.204,"== Offerings ==

The primary way in which application developers supply new functionality to be exposed by Mantissa is via the ''offering'' interface.  Mantissa loads offering plugins and uses them to provide new network services, web pages, themes, and a number of other things.

=== Site Powerups ===

An offering can provide any number of ''site powerups''.  These are `Item` subclasses with which the ''site store'' will be powered up when the offering is installed.  These can be powerups for any interface, but a number of interfaces are of particular interest.

==== IProtocolFactoryFactory ====

''Site powerups'' for the `IProtocolFactoryFactory` interface will be discovered by `axiomatic port` and the administrative web interface for port configuration and presented as options for which to create ''port'' bindings.  `IProtocolFactoryFactory` site powerups which are have port bindings will be available for inspection and removal via these interfaces as well.

== Ports ==

As a network server, Mantissa primarily exposes its functionality over TCP (and SSL/TLS) and UDP sockets.  A listening TCP (or SSL/TLS) or UDP socket is a ''port''.  TCP (and SSL/TLS) ports can be inspected, created, and deleted using the command line tool `axiomatic port` or with the administrative web interface available at ''Admin -> Ports''.

","first load of stuff",0
1390,16,1212362903.21257,jml,198.49.126.204,,,
1391,17,1212367918.17568,jml,198.49.126.204,,,
1392,18,1212369019.57588,glyph,198.49.126.204,,,
1393,19,1212370200.34972,glyph,198.49.126.204,,,
1394,3,1213864767.84585,tarjei,198.49.126.204,"= Tutorial: Using Storm with Nevow =

Note: There is work on integrating Storm with Twisted. Until then, the best way is probably to use deferToThread.

Before a tutorial can be written on how to use storm in Nevow, someone needs to figure out 'best practices for using Storm in asynchronous codebases.' From a chat in #storm on freenode (11 July 2007):
{{{
[5:13pm] dialtone: storm API is fine, one just needs to see if: a) it's thread
                   safe and b) objects returned can be modified in a different 
                   thread
[5:13pm] dialtone: and then committed in another one yet
[5:13pm] radix: dialtone: It is certainly thread-safe, but you should not use 
                   the same Store in multiple threads
[5:14pm] dialtone: how do you do with deferToThread then?
[5:14pm] radix: dialtone: I don't know.
[5:14pm] radix: dialtone: Probably you don't load the objects until you get 
                   into the other thread.
[5:14pm] dialtone: that's sort of a problem probably, unless there's an 
                   alternative solution
[5:15pm] radix: dialtone: Nobody has figured out best practices for using Storm 
                   in asynchronous codebases yet.
[5:15pm] dialtone: ouch :(
[5:15pm] radix: dialtone: (That is, assuming your application actually wants to 
                   make the database operations asynchronous)
[5:16pm] dialtone: I can accept it being synchronous, but run in a different 
                   thread using deferToThread
[5:16pm] radix: dialtone: for example, it would be very reasonable to use Storm 
                   like Axiom: with SQLite, just blocking on database interaction
[5:16pm] dialtone: radix: yes well... but that comes with a lot of restrictions 
                   in itself
[5:17pm] radix: dialtone: I even have a Twisted server which uses Storm to talk 
                   to postgres in a totally blocking manner
[5:17pm] radix: but it's not a very typical server
[5:17pm] dialtone: sqlite doesn't really scale that well with high concurrency 
                   and scaling a shared sqlite instance is pretty hard
[5:17pm] dotz: dialtone: What's wrong with 'ceate a high level API for data 
                   manipulation and retrival, use some rpc mechanism, like pb, 
                   and make the hi-level database backend another process'?
[5:18pm] dialtone: dotz: that' waaay more effort than what I'm currently doing
[5:18pm] radix: dialtone: I'm sure there are some clever things that can be done 
                   to use Storm in asynchronous contexts, and I'm fairly interested 
                   in learning about them
[5:18pm] dotz: dialtone: and what are you currently doing?
[5:18pm] dialtone: as I said: I'm using the query builder from sqlalchemy to build 
                   and execute queries that return resultsets with a dict-like API
[5:19pm] dialtone: I simply write the queries and use the dict-like APi in nevow
[5:19pm] dialtone: and I run the functions in a separate thread with deferToThread
[5:20pm] dialtone: radix: maybe writing a store class that keeps track of which 
                   threads owns which connection and then reuse the connection when 
                   needed
[5:20pm] dialtone: this way you could share the store object and run queries 
                   independently of the context
[5:20pm] radix: dialtone: maybe. I'm not sure it'd be that simple.
}}}",',0
1395,7,1214349460.31546,oubiwann,198.49.126.204,"= Community =

[[Image(http://divmod.org/tracdocs/community_whtbck.png, right)]] 

== Need Help? ==
 * '''Mailing list''': [/users/mailman.twistd/listinfo/divmod-dev The divmod-dev mailing list page] has subscription instructions and a link to the [http://divmod.org/users/mailman.twistd/pipermail/divmod-dev/ web-based archives].
 * '''IRC''': You will find Divmod developers, contributors and users hanging out on [http://freenode.net/ Freenode] in #divmod, #twisted and #twisted.web.
 * '''Buildbot''': See the [http://bb.divmod.org/ latest build and test results] for the code in trunk.

== Stay Tuned In! ==

'''Blogs''': We have a company blog [http://blogs.divmod.com/ here] (you can also visit our [http://community.livejournal.com/divmod/ old blog]). There are also several employee blogs you may want to keep in your RSS reader for the latest news, fun, and rumors:
 * [http://www.livejournal.com/users/amiramir amiramir]
 * [http://www.livejournal.com/users/jcalderone exarkun]
 * [http://glyph.twistedmatrix.com/ glyph] ([http://glyf.livejournal.com/ old])
 * [http://oubiwann.blogspot.com/ oubiwann]
 * [http://washort.twistedmatrix.com/ dash]

'''Twitter''': You can follow us on Twitter, too; lately, we tend to put sneak-peek notices there:
 * [http://twitter.com/glyf glyph]
 * [http://twitter.com/oubiwann oubiwann]

'''Success Stories''': Check out [PeopleUsingDivmod who's using Divmod]...

== Want to help? ==
 * Check out our [wiki:HereToHelp Here to Help?] section
 * Get excited about [wiki:DivmodIdeas how we're thinking]!

== Love Divmod? ==
You can also contribute and show your appreciation by joining the [wiki:DivmodFanClub Divmod Fan Club].
",',0
1396,4,1217550184.94665,ivan,198.49.126.204,"= Tutorial: Using Storm with Nevow =

Note: There is work on integrating Storm with Twisted ([https://code.launchpad.net/~therve/storm/twisted-integration storm/twisted-integration]). Until then, the best way is probably to use deferToThread.

Before a tutorial can be written on how to use storm in Nevow, someone needs to figure out 'best practices for using Storm in asynchronous codebases.' From a chat in #storm on freenode (11 July 2007):
{{{
[5:13pm] dialtone: storm API is fine, one just needs to see if: a) it's thread
                   safe and b) objects returned can be modified in a different 
                   thread
[5:13pm] dialtone: and then committed in another one yet
[5:13pm] radix: dialtone: It is certainly thread-safe, but you should not use 
                   the same Store in multiple threads
[5:14pm] dialtone: how do you do with deferToThread then?
[5:14pm] radix: dialtone: I don't know.
[5:14pm] radix: dialtone: Probably you don't load the objects until you get 
                   into the other thread.
[5:14pm] dialtone: that's sort of a problem probably, unless there's an 
                   alternative solution
[5:15pm] radix: dialtone: Nobody has figured out best practices for using Storm 
                   in asynchronous codebases yet.
[5:15pm] dialtone: ouch :(
[5:15pm] radix: dialtone: (That is, assuming your application actually wants to 
                   make the database operations asynchronous)
[5:16pm] dialtone: I can accept it being synchronous, but run in a different 
                   thread using deferToThread
[5:16pm] radix: dialtone: for example, it would be very reasonable to use Storm 
                   like Axiom: with SQLite, just blocking on database interaction
[5:16pm] dialtone: radix: yes well... but that comes with a lot of restrictions 
                   in itself
[5:17pm] radix: dialtone: I even have a Twisted server which uses Storm to talk 
                   to postgres in a totally blocking manner
[5:17pm] radix: but it's not a very typical server
[5:17pm] dialtone: sqlite doesn't really scale that well with high concurrency 
                   and scaling a shared sqlite instance is pretty hard
[5:17pm] dotz: dialtone: What's wrong with 'ceate a high level API for data 
                   manipulation and retrival, use some rpc mechanism, like pb, 
                   and make the hi-level database backend another process'?
[5:18pm] dialtone: dotz: that' waaay more effort than what I'm currently doing
[5:18pm] radix: dialtone: I'm sure there are some clever things that can be done 
                   to use Storm in asynchronous contexts, and I'm fairly interested 
                   in learning about them
[5:18pm] dotz: dialtone: and what are you currently doing?
[5:18pm] dialtone: as I said: I'm using the query builder from sqlalchemy to build 
                   and execute queries that return resultsets with a dict-like API
[5:19pm] dialtone: I simply write the queries and use the dict-like APi in nevow
[5:19pm] dialtone: and I run the functions in a separate thread with deferToThread
[5:20pm] dialtone: radix: maybe writing a store class that keeps track of which 
                   threads owns which connection and then reuse the connection when 
                   needed
[5:20pm] dialtone: this way you could share the store object and run queries 
                   independently of the context
[5:20pm] radix: dialtone: maybe. I'm not sure it'd be that simple.
}}}","mention storm/twisted-integration",0
1397,9,1218116979.18917,LordVan,198.49.126.204,"


It is generally not recommended to put the staff that requires many simultaneous connections under apache, unless Event MPM is used. But sometimes that's just fine, e.g for tests.

Imagine you want to hide http://localhost:8080/ behind http://go.site.com/

This is what you put on apache with mod_proxy enabled
{{{
    <VirtualHost *:80>  # of course, *:80 can be replaced by something

        # external site URL
        ServerName go.site.com

        # internal (proxied) URL, note vhost/<protocol>/<host>/ scheme (*)
        ProxyPass / http://localhost:8080/vhost/http/go.site.com/  

    </VirtualHost>
}}}

Usually people also add 'ProxyRequests Off' to their apache conf to ensure that apache won't be used as free proxy.

But it's clearly not enough to setup apache, because it will send requests to Twisted asking http://localhost:8080/.. , while
Nevow application should process request as if it were http://go.site.com.

There is a special module nevow.vhost.VHostMonsterResource()  (please note nevow.vhost is used, not twisted.web.vhost),
which takes url in the form http://localhost:8080/vhost/http/go.site.com/* and fixes request to make Resource think that it were direct go.site.com/* .


==== Example ====

Let's hide a resource MyResource, which works perfectly as http://localhost:8080, under http://go.site.com.

Here is a brief 'proxy.tac' example, which can be run by 'twistd -noy proxy.tac'


{{{
from twisted.application import service, strports
from nevow import appserver, inevow, rend, loaders, vhost
from zope.interface import implements

# This is the root resource we are hiding behind proxy
# It *was* working as http://localhost:8080, but now it should *become* http://go.site.com
class MyResource(rend.Page):

    def child_(self, ctx):
        return HelloPage()

# A simple root page, *was* http://localhost:8080/, 
# will *become* http://go.site.com/
# (or http://localhost:8080/vhost/http/go.site.com/ from proxied url)
class HelloPage(rend.Page):

    docFactory = loaders.xmlstr('''\
<html><body>Hello</body></html>
''')

# thanks Damascene for this wrapper
# it delegates /vhost/* requests to VHostMonsterResource, which fixes request
class VhostFakeRoot:
    '''
    I am a wrapper to be used at site root when you want to combine 
    vhost.VHostMonsterResource with nevow.guard. If you are using guard, you 
    will pass me a guard.SessionWrapper resource.
    Also can hide generic resources
    '''
    implements(inevow.IResource)
    def __init__(self, wrapped):
        self.wrapped = wrapped
    
    def renderHTTP(self, ctx):
        return self.wrapped.renderHTTP(ctx)
        
    def locateChild(self, ctx, segments):
        '''Returns a VHostMonster if the first segment is 'vhost'. Otherwise
        delegates to the wrapped resource.'''
        if segments[0] == 'vhost':
            return vhost.VHostMonsterResource(), segments[1:]
        else:
            return self.wrapped.locateChild(ctx, segments)         

# setup/run site
site = appserver.NevowSite(VhostFakeRoot(MyResource()))
application = service.Application('go')

strports.service('8080', site).setServiceParent(application)

}}}


==== How that works ? ====

 * Request comes as http://localhost:8080/vhost/http/go.site.com/<**>
 * VhostFakeRoot.localChild is called 
 * 'vhost' is stripped from path and http/go.site.com/* comes to VHostMonsterResource
 * http is stripped by VHostMonsterResource, request is fixed
 * go.site.com is stripped by VHostMonsterResource, request is fixed
 * MyResource comes into play and does its job with <**>


== Notes ==

 1. Headers from Twisted are consumed by apache.. That may be a problem
 2. Nevow.livePage stuff had problems working through proxy


=== Alternative Method ===

There's an alternative (a lot easier method) to achieve the desired result.
Just do it in apache config:

{{{
<VirtualHost [insert IP or * here]:80>
  ServerName mysub.mydomain.com

  ErrorLog /var/log/apache2/mysub.mydomain.com_error_log
  CustomLog /var/log/apache2/mysub.mydomain.com_access_log combined

  ProxyVia On
  ProxyPass / http://127.0.0.1:8080/
  ProxyPassReverse / http://127.0.0.1:8080/
</VirtualHost>
}}}

Also see:
http://divmod.org/trac/wiki/DivmodNevow/Deployment/ReverseProxy

","Added other method to have twisted behind apache proxy",0
1398,66,1218122497.76797,LordVan,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =

[[PageOutline(2-3,Contents)]] 

[[Image(http://divmod.org/tracdocs/nevow_whtbck.png, left)]]  

'''Nevow''' - Pronounced as the French 'nouveau', or 'noo-voh', Nevow is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

'''Athena''' - Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, Opera 9 and Camino ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.31.tar.gz?format=raw Latest release - 0.9.31]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': (take a look at [http://forms-project.pollenation.net/ formal] for an alternate form library) For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/txt The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/code/documentation/nevow-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
 * [wiki:DivmodNevow/ApacheProxy Putting Nevow Page under Apache Proxy]
 * Using Nevow with Genshi templates: [http://oubiwann.blogspot.com/2007/03/genshi-templates-in-nevow.html original] and [http://oubiwann.blogspot.com/2008/03/genshi-on-nevow-revisited.html dynamic]
 * [wiki:DivmodNevow/Storm Using the Storm ORM with Nevow]
 * [wiki:DivmodNevow/FaQ Frequently asked questions]

 '''Bleeding Docs''' - 
 ''SURGEON GENERAL’S WARNING'': Reading the docs listed below pertain to code that has not yet been released and may cause Lung Cancer, Heart Disease, Emphysema, and Pregnancy complications. 
   [wiki:DivmodNevow/ContextRemoval Context Removal] - Conversion steps for moving from {{{context}}}-based Nevow code to {{{context}}}-less code.

== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
","fixed Meet Stan link",0
1399,4,1218923652.94691,glyph,198.49.126.204,"
= Sharing Objects in Mantissa =

== Prerequisites ==

You should have all the Divmod code installed and runnable.

You should also have read the [DivmodAxiom/Tutorial axiom tutorial], because the Mantissa sharing system is all about sharing axiom items, and you will need to know how to create and manipulate them.

== Introduction ==

Since you have ready the [DivmodAxiom/Tutorial axiom tutorial] (you didn't skip the prerequisites section, did you?) you already know how to create items in a database and manipulate them directly.  Items in a database are much more interesting, however, when they can be created and accessed by different people.  Even more interesting when you can provide different levels of access to different people so that your data is safe even when it's shared.

Mantissa is a multi-protocol application server.  This means that unlike many web frameworks, mantissa's access control is not specific to HTTP.  Nowhere in sharing will you find a request, or headers, or even usernames and passwords.  The Mantissa 'sharing' system is about abstractly declaring what operations are allowed by what people, and it should be usable by any protocol.  So, much of this tutorial will be couched in very general terms.

Don't worry, though: in this web 2.0 world, we know that HTTP is a very interesting protocol.  The sharing system was very definitely designed with the web in mind, and this tutorial will discuss how to use the sharing system to expose your items over HTTP.

=== The General Idea ===

You have an item in a database and you want to share it with someone.

The first thing you have to decide is what you want to share.  This is any `Item`.

Here's a simple one.

{{{
#!py
# sharestuff.py
from axiom.item import Item
from axiom.attributes import text

class Post(Item):
    contents = text()

    def read(self):
        return self.contents

    def write(self, contents):
        self.contents = contents
}}}

It's a simple item with two methods; one for reading and one for writing.

Next, we need to decide what operations we're going to allow on this object.  For determining what is and is not allowed, the sharing system uses `Interface` objects, so we need to declare some interfaces that this class implements.

{{{
# sharestuff.py
from zope.interface import implements, Interface

from axiom.item import Item
from axiom.attributes import text

class IRead(Interface):
    def read(self):
        'Read this object.'

class IWrite(Interface):
    def write(self, contents):
        'Write to this object.'

class Post(Item):
    implements(IRead, IWrite)
    contents = text()

    def read(self):
        return self.contents

    def write(self, contents):
        self.contents = contents
}}}

Now, we need to create the actual post so we can share it.  Let's open up an interactive interpreter and make one.

{{{
$ python
>>> from axiom.store import Store
>>> s = Store('sharestuff.axiom')
>>> from sharestuff import Post
>>> post = Post(store=s)
}}}

Let's say our post is an article entitled 'man bites dog'.  So we'll give it some contents.

{{{
>>> post.write(u'A local man bit a dog today.')
}}}

In order to share this post, we need to decide three things: what it will be called, who will be able to access it, and what those people will be able to do with it once they've got it.

Abstractly, we'd like to allow everyone to read this article.  We've already declared that this post provides 2 interfaces - `IRead` and `IWrite`, so we will share it as an `IRead` provider only.

{{{
>>> from sharestuff import IRead
}}}

Then we need to decide who to share it with.  In the sharing system, both individual people and groups are referred to as `Role` objects.  We'd like to allow everyone to read this object, so we need to get a `Role` object which refers to everyone.  There are a few special roles; `sharing.getEveryoneRole` is a function which will return the role that represents everyone.

{{{
>>> from xmantissa.sharing import getEveryoneRole
>>> everybody = getEveryoneRole(s)
}}}

Finally, we need to decide what they're going to call it when we share it.  When someone views an item that was shared, they have to get to it somehow.  That is usually through a web browser.  For example, if bob at mantissa.example.com shared an item called 'frisbee', you would access that in your web browser by typing <`http://mantissa.example.com/users/bob/frisbee`>.  We'll get to exactly how that actually gets hooked up to a web page in a moment, but the need for a name holds true for other protocols too.  For example - although mantissa does not currently support this - you might be able to send an email to `bob+frisbee@mantissa.example.com` to address the same object.

So here's how we share the post with everybody as a thing that can be read, named u'man-bites-dog':

{{{
>>> everybody.shareItem(post, u'man-bites-dog', [IRead])
}}}

This small sample database is not actually connected to anything.  In order for an item to actually be accessed, it needs to be shared by a user in a running Mantissa instance.  We'll get to that in a moment, but for now, let's look at what a Mantissa protocol would do in order to access this item.

First Mantissa would decide who you're logged in as.  If you're logged in anonymously, then that will be the 'everyone' role, which we've already retrieved, above.  Then, as I've already described, it will determine from the request what the name of the shared thing you're looking for is.  It will then call the `getShare` method on the appropriate `Role` object.

{{{
>>> publicPost = everybody.getShare(u'man-bites-dog')
}}}

The object that comes back from this call is a `SharedProxy`.  This is an access-controlled version of the original `Post` item.  Whatever code interacts with it should treat it as a provider of the interfaces it was shared with - in this case `sharestuff.IRead`.  For example, we can read it:

{{{
>>> publicPost.read()
u'A local man bit a dog today.'
}}}

Importantly, however, this post object is ''not'' an actual `Post` and therefore does not do things like provide the `IWrite` interface.  If just anyone came along and tried to write to this object:

{{{
>>> publicPost.write(u'No dogs were bitten today.')
Traceback (most recent call last):
  File '<stdin>', line 1, in <module>
  File 'Mantissa/xmantissa/sharing.py', line 449, in __getattribute__
    raise AttributeError('%r has no attribute %r' % (self, name))
AttributeError: SharedProxy(Post(contents=u'A local man bit a dog today.', storeID=7)@0x87A66CC, [<InterfaceClass sharestuff.IRead>], u'man-bites-dog') has no attribute 'write'
}}}

The security model in Mantissa's sharing system is designed to make it difficult to make mistakes.  In many other permission systems, you need to explicitly check permission before doing something, or ask which user is accessing stuff.

When using sharing, by the time your application code is running, the server has already decided what user is logged in, what permissions they are allowed to have and has given you a model object that can perform only those operations.  If you make a mistake and forget to check permissions for a certain operation, attempting that operation will generate an error rather than do something that would break your security rules.

=== Checking Permissions ===

Of course, you don't always want to get an ugly exception.

=== Different Permissions for Different People ===

=== Querying for Shared Stuff ===

=== Putting a Shared Item on the Web ===
","Initial dump of some sharing stuff.",0
1400,5,1219140150.76156,glyph,198.49.126.204,,,
1401,4,1219357952.83652,zooko,198.49.126.204,,,
1402,1,1219548389.36641,glyph,198.49.126.204,"= What Happens When A Browser Requests a Web Page From Mantissa =

This is a step-by-step guide explaining which classes are involved and what they do, with a heavy emphasis on how they interact with application code and plugins.  I'm tired of working this out from scratch every time I'm trying to maintain the system - hopefully this will become simpler over time.

== Wrappers at the Root ==

We start at what the port is bound to: the object that comes back from `xmantissa.web.SiteConfiguration.getFactory`.

This is a `SecuringWrapper` wrapped around an `UnguardedWrapper` wrapped around a `PersistentSessionWrapper`, which ultimately wraps the portal provided by the store, an axiom `LoginSystem`.  One step at a time:

`xmantissa.web.SecuringWrapper` has the job of redirecting to HTTPS if the ultimate target resource stipulates that it is a requirement.  This inspects the (almost entirely undocumented) `needsSecure` attribute on the `IResource` which is ultimately looked up, by wrapping each intermediary `locateChild` result in a `_SecureWrapper`.  For most purposes you can ignore this.

== Sessionless Plugins ==

`xmantissa.web.UnguardedWrapper` is responsible for providing access to resources which do not require a session.  This statically provides the URL hierarchies under `/Mantissa`, `/__jsmodule__`, and `/static`.  It will also do a powerup query for `ISessionlessSiteRootPlugin` on the site store.  If there are any sessionless plugins, they will always take priority, since this is the first foray that the resource lookup makes into application code.  However, by default, no sessionless plugins are installed.  You can verify this by running `axiomatic web --list` on your mantissa database and looking at the 'Sessionless plugins:' section.

== Sessions and Authentication ==

Next, the `PersistentSessionWrapper` gets involved.  This is in charge of sessions and authentication.  This has a lot of internal behavior regarding setting up a session and redirecting the user; this means that for any path except the three mentioned above (`/Mantissa`, `/__jsmodule__`, `static`) your browser will be redirected if it doesn't have a cookie.  (This needs to be fixed somehow so that we can provide access to APIs like XMLRPC or data like RSS for dumb user-agents that can't handle cookies, authentication, or maybe even redirects.)

Internally the `PersistentSessionWrapper` has only one code path: it logs in the user using some set of credentials, and then presents the root resource as the avatar that was retrieved for those credentials.  However, given that all sessions begin by presenting credentials that say 'I'm anonymous', there are effectively two things that it can do: show you the anonymous site or show you a logged-in site.  This relies on the fact that when `axiom.userbase.LoginSystem` is presented with anonymous credentials, the avatar that it returns is the site store.

== Anonymous Sessions (the public site) ==

The anonymous `IResource` root, which is to say the site store's `IResource` powerup, as installed by `axiom.plugins.baseoff`, is `xmantissa.publicweb.AnonymousSite`.  It uses powerup indirection to provide an in-memory avatar, `xmantissa.website.VirtualHostWrapper`, which provides per-user subdomain dispatch; i.e. http://youruser.mantissa.example.com/ will resolve to the same resource as http://mantissa.example.com/users/youruser/.

Continuing down anonymous resource lookup, `AnonymousSite` statically provides 3 features itself: `/login`, `/resetPassword`, and `/users`.

`/users/` is handled by `xmantissa.websharing.UserIndexPage`, which wraps a `xmantissa.websharing.SharingIndex` around each users' store, exposing the items that they have shared.  When viewed by anonymous users, shared items are (somewhat obviously) retrieved using the role returned by `getEveryoneRole`.  See below for customization.

It also does a powerup query for `ISiteRootPlugin`; i.e. sessioned site root plugins.  By default, Mantissa installs one site root plugin powerup: `xmantissa.publicweb.FrontPage`.  `FrontPage` handles just that, the display of the front page which appears at <http://mantissa.example.com/>.  Normally it renders a Divmod logo and a list of installed offerings, but it can be configured to render the front page of one particular offering by way of the `axiomatic offering frontpage` plugin.  `PublicFrontPage` also looks up each offering in turn, providing a URL hierarchy under that offering's name by providing a sharing index.  For example, if the `Quotient` offering has shared an item called `divisor`, `PublicFrontPage` is the object that returns it to show up at <http://mantissa.example.com/Quotient/divisor>.

== Authenticated Sessions ==

Starting once again inside `PersistentSessionWrapper`, i.e. after `ISessionlessSiteRootPlugin` objects on the site store have been looked up, we begin at `xmantissa.website.WebSite`, which is the authenticated version of `xmantissa.publicweb.AnonymousSite`.  It also implements `IResource`, and similarly indirects via `VirtualHostWrapper` to support username subdomains.  (Note: `SiteRootMixin`'s docstring is completely wrong, it's only used for the private hierarchy now, there's only the one subclass and no tests or other usages anywhere.)  `WebSite` has its own implementation of `/resetPassword`, which attempts to redirect to the user's settings page.  (This is broken, as per #2358.)

`WebSite` then makes a query for `ISiteRootPlugin` in the ''user'' store of the user who is viewing it.  There are two plugins which are typically found: `xmantissa.webapp.PrivateApplication`, and `xmantissa.publicweb.CustomizedPublicPage`, which it depends on.

`PrivateApplication` is responsible for rendering the hierarchy under `/private` for logged-in users.  These URLs are all opaque, but can be accessed by clicking on the tabs that are installed by various applications.  Also, `PrivateApplication` provides a redirect from `/private` to the object indicated by the first 'tab' that the navigation system can find.  (The navigation system is out of scope here, see `xmantissa.ixmantissa.INavigableElement` and `xmantissa.webnav`.)

`PrivateApplication` maps an opaque identifier to a storeID, looks up the item with that storeID, first adapts it to `IResource`, or if no `IResource` is found, then it adapts the item to `INavigableElement`.

Finally, the thing that allows a user to see the pieces of the public site described above - the `/users/` hierarchy, app store pages at `/NameOfApplication`, and sessioned plugins on the site, is `CustomizedPublicPage`.

The content which is normally available to the public might look different once you're logged in.  For example, content shared through the [wiki:DivmodMantissa/Sharing sharing system] needs to know which role is viewing it.  `CustomizedPublicPage` does this by looking up the `IResource` provider of the parent store, then wrapping each returned resource in a `_CustomizingResource`.


",',0
1403,67,1219834935.05311,exarkun,198.49.126.204,"= [wiki:WikiStart Divmod] : Nevow =

[[PageOutline(2-3,Contents)]] 

[[Image(http://divmod.org/tracdocs/nevow_whtbck.png, left)]]  

'''Nevow''' - Pronounced as the French 'nouveau', or 'noo-voh', Nevow is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

'''Athena''' - Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, Opera 9 and Camino ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest].  Athena supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an Athena page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.31.tar.gz?format=raw Latest release - 0.9.31]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''Athena''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': (take a look at [http://forms-project.pollenation.net/ formal] for an alternate form library) For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/code/documentation/nevow-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
 * [wiki:DivmodNevow/ApacheProxy Putting Nevow Page under Apache Proxy]
 * Using Nevow with Genshi templates: [http://oubiwann.blogspot.com/2007/03/genshi-templates-in-nevow.html original] and [http://oubiwann.blogspot.com/2008/03/genshi-on-nevow-revisited.html dynamic]
 * [wiki:DivmodNevow/Storm Using the Storm ORM with Nevow]
 * [wiki:DivmodNevow/FaQ Frequently asked questions]

 '''Bleeding Docs''' - 
 ''SURGEON GENERAL’S WARNING'': Reading the docs listed below pertain to code that has not yet been released and may cause Lung Cancer, Heart Disease, Emphysema, and Pregnancy complications. 
   [wiki:DivmodNevow/ContextRemoval Context Removal] - Conversion steps for moving from {{{context}}}-based Nevow code to {{{context}}}-less code.

== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
",',0
1404,1,1220551706.87585,glyph,198.49.126.204,"We probably shouldn't put 'should' into test docstrings; that's what `test_` means, so it's redundant.",',0
1405,28,1222027464.01302,maio,213.220.254.158,,,
1406,4,1222439317.60473,exarkun,70.91.133.157,"= Divmod Xapwrap =

== This project is no longer supported.  It is not compatible with the latest release of Xapian. ==

Enhancements to the Python bindings for the [http://www.xapian.org Xapian] full-text indexing library.

While Xapian comes with bindings, they are hard to work with, and being SWIG'd, a literal translation of a C++ API.  Xapwrap simplifies working with Xapian databases in Python.

This is implemented as a second layer of wrapping, so Xapian's bindings are still required.

[http://divmod.org/trac/attachment/wiki/SoftwareReleases/Xapwrap-0.3.1.tar.gz?format=raw Get release 0.3.1]
",',0
1407,29,1224249438.98625,exarkun,70.91.133.157,,,
1408,8,1224775705.61404,zooko,97.118.99.189,"= [wiki:WikiStart Divmod] : !PyFlakes =

[[Image(http://divmod.org/tracdocs/pyflakes_whtbck.png, right)]] 

!PyFlakes a Lint-like tool for Python, like [http://pychecker.sourceforge.net PyChecker].  It is focused on identifying common errors quickly without executing Python code.

Its primary advantage over [http://pychecker.sourceforge.net PyChecker] is that it is ''fast''.  You don't have to sit around for minutes waiting for the checker to run; it runs on most large projects in only a few seconds.

The two primary categories of defects reported by !PyFlakes are:

  * Names which are used but not defined or used before they are defined
  * Names which are redefined without having been used

These can each take many forms.  For example, !PyFlakes will tell you when you have forgotten an import, mistyped a variable name, defined two functions with the same name, shadowed a variable from another scope, imported a module twice, or two different modules with the same name, and so on.

== Exits ==
 * [http://pypi.python.org/pypi/pyflakes PyFlakes on PyPI]
 * [https://launchpad.net/pyflakes PyFlakes on launchpad]
 * [http://www.freshmeat.net/projects/pyflakes PyFlakes on freshmeat]
 * [http://www.swik.net/pyflakes PyFlakes on swik]

== Download ==
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Pyflakes !PyFlakes","add more links -- pypi and launchpad",0
1409,43,1225916168.77125,michalpasternak,89.78.16.112,,,
1410,4,1225916712.02723,michalpasternak,89.78.16.112,,,
1411,5,1225916746.84905,michalpasternak,89.78.16.112,"
== Nevow & Athena FAQ ==

Q) When I reload a page, the server logs a traceback ending with {{{exceptions.AssertionError: Cannot render a LivePage more than once}}}

A) LivePage instances maintain server-side state that corresponds to the connection to the browser.  Because of this, each LivePage instance can only be used to serve a single client.  When you serve LivePages, make sure that you create a new instance for each render pass.

Q) I can't debug athena on Internet explorer.  what gives?

A) Athena include the livefragment javascript in the body of the document via a script tag.  Visual studio doesn't appear to be happy with this and does not let you set break points.  If you load the javascript in the head of the document then you can set a break point in your athena livefragment javascript using visual studio.  The best way I found to do this is manually include the javacript in the header and then information athena that the livefragment javascript is already loaded.  One way to do this is to call the 'hidden' _shouldInclude method on the athena livepage instance, e.g self._shouldInclude('yourjsmodule').  This will let athena know that the javascript is already loaded and not to load it twice.

Q) Why doesn't Athena support Safari?

A) Safari has a broken JS implementation that throws an error when a nested 'named' function is encountered, e.g. 

{{{
methods(function foo(self) {},function bar(self) {});
}}}

A workaround would be to use anonymous functions instead of named functions.  Another issue is that someone needs to implement a custom runtime module in runtime.js to support Safari.

Q) How can I unit-test javascript code using Athena?

A) The same way you unit-test your ordinary [http://twistedmatrix.com Twisted] or [http://divmod.org Divmod] software: by using [http://twistedmatrix.com/trac/wiki/TwistedTrial trial]. First, install javascript interpreter (smjs or js) and have a look at [http://divmod.org/trac/browser/trunk/Nevow/nevow/test/test_javascript.py nevow.test.test_javascript] to see, how tests are prepared and run.
",',0
1412,68,1226240106.01866,michalpasternak,89.78.16.112,"= [wiki:WikiStart Divmod] : Nevow =

[[PageOutline(2-3,Contents)]] 

[[Image(http://divmod.org/tracdocs/nevow_whtbck.png, left)]]  

'''Nevow''' - Pronounced as the French 'nouveau', or 'noo-voh', Nevow is a web application construction kit written in Python. It is designed to allow the programmer to express as much of the view logic as desired in Python, and includes a pure Python XML expression syntax named stan to facilitate this. However it also provides rich support for designer-edited templates, using a very small XML attribute language to provide bi-directional template manipulation capability.

Nevow also includes formless, a declarative syntax for specifying the types of method parameters and exposing these methods to the web. Forms can be rendered automatically, and form posts will be validated and input coerced, rendering error pages if appropriate. Once a form post has validated successfully, the method will be called with the coerced values.

'''[http://divmod.org/trac/wiki/DivmodNevow/Athena Athena]''' - Finally, Nevow includes [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena], a two-way bridge between Javascript in a browser and Python on the server. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] is compatible with  Mozilla, Firefox, Windows Internet Explorer 6, Opera 9 and Camino ([wiki:DivmodFanClub Don't see your favorite browser?]). Event handlers can be written in pure Python and Javascript implementation details are hidden from the programmer, with Nevow taking care of routing data to and from the server using [http://www.google.com/search?q=xmlhttprequest XmlHttpRequest]. [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] supports a widget authoring framework that simplifies the authoring and management of client side widgets that need to communicate with the server.  Multiple widgets can be hosted on an [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena] page without interfering with each other.  Athena supports automatic event binding so that that a DHTML event (onclick,onkeypress,etc) is mapped to the appropriate javascript handler (which in turn may call the server).

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.31.tar.gz?format=raw Latest release - 0.9.31]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow
== Features ==
 * '''XHTML templates''': contain no programming logic, only nodes tagged with nevow attributes
 * '''data/render methods''': simplify the task of separating data from presentation and writing view logic
 * '''stan''': An s-expression-like syntax for expressing xml in pure python
 * '''[http://divmod.org/trac/wiki/DivmodNevow/Athena Athena]''': Cross-browser JavaScript library for sending client side events to the server and server side events to the client after the page has loaded, without causing the entire page to refresh

 * '''formless''': (take a look at [http://forms-project.pollenation.net/ formal] for an alternate form library) For describing the types of objects which may be passed to methods of your classes, validating and coercing string input from either web or command-line sources, and calling your methods automatically once validation passes. 
 * '''webform''': For rendering web forms based on formless type descriptions, accepting form posts and passing them to formless validators, and rendering error forms in the event validation fails

== Documentation ==
 * [http://divmod.org/trac/browser/trunk/Nevow/doc/ The Nevow guide]: An introductory guide covering Nevow basics (Getting Started, Object Traversal, Object Publishing, XML Templates, Deploying Nevow Applications)
 * [http://starship.python.net/crew/mwh/nevowapi/ Nevow API]
 * [http://www.kieranholland.com/code/documentation/nevow-stan/ Meet Stan]: An excellent tutorial on the Nevow Document Object Model by Kieran Holland
 * [http://divmod.org/trac/wiki/DivmodNevow/Athena Athena Documentation] 
 * [http://twistedmatrix.com/projects/core/documentation/howto/components.html Twisted Components]: If you are unfamiliar with Interfaces and Adapters then Nevow may not make much sense. This is essential reading.
 * [wiki:DivmodNevow/ErrorHandling Error handling in Nevow]: How to create custom error (404 and 500) pages
 * [wiki:DivmodNevow/FormHandling Form handling in Nevow]
   * [http://forms-project.pollenation.net/cgi-bin/trac.cgi/wiki/WYSIWYGTextArea JavaScript WYSIWYG Editors] integration with Nevow/formal
 * [wiki:DivmodNevow/Deployment Deployment techniques]
 * [wiki:DivmodNevow/Emacs Tips for using Emacs + Nevow]
 * [wiki:DivmodNevow/ApacheProxy Putting Nevow Page under Apache Proxy]
 * Using Nevow with Genshi templates: [http://oubiwann.blogspot.com/2007/03/genshi-templates-in-nevow.html original] and [http://oubiwann.blogspot.com/2008/03/genshi-on-nevow-revisited.html dynamic]
 * [wiki:DivmodNevow/Storm Using the Storm ORM with Nevow]
 * [wiki:DivmodNevow/FaQ Frequently asked questions]

 '''Bleeding Docs''' - 
 ''SURGEON GENERAL’S WARNING'': Reading the docs listed below pertain to code that has not yet been released and may cause Lung Cancer, Heart Disease, Emphysema, and Pregnancy complications. 
   [wiki:DivmodNevow/ContextRemoval Context Removal] - Conversion steps for moving from {{{context}}}-based Nevow code to {{{context}}}-less code.

== Examples ==
 * To run the examples yourself (Source in [source:trunk/Nevow/examples]):
{{{
#!sh
richard@lazar:/tmp$ cd Nevow/examples/
richard@lazar:/tmp/Nevow/examples$ twistd -noy examples.tac
2005/11/02 15:18 GMT [-] Log opened.
2005/11/02 15:18 GMT [-] twistd SVN-Trunk (/usr/bin/python 2.4.2) starting up
2005/11/02 15:18 GMT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/11/02 15:18 GMT [-] Loading examples.tac...
2005/11/02 15:18 GMT [-] Loaded.
2005/11/02 15:18 GMT [-] nevow.appserver.NevowSite starting on 8080
2005/11/02 15:18 GMT [-] Starting factory <nevow.appserver.NevowSite instance at 0xb6c8110c>
}}}
...visit http://localhost:8080 and you'll begin to appreciate the possibilities!
== Help / Support ==
You will find plenty of experts on the mailing lists and in the chatrooms who will happily help you, but '''please''' make sure you '''read all the documentation''', '''study all the examples''' and '''search the mailing list archives''' first. The chances are that your question has already been answered.
 * '''Mailing list''': The [http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web twisted-web] and [/users/mailman.twistd/listinfo/divmod-dev divmod-dev] mailing list pages have subscription instructions and links to the web based archives.
 * '''IRC''': Nevow developers and users can be found on [http://freenode.net/ Freenode] in #twisted.web
 * '''Blogs''': [http://vvolonghi.blogspot.com/ dialtone], [http://ulaluma.com/pyx/ fzZzy], [http://tv.debian.net/blog/ Tv]
 * [query:?status=new&status=assigned&status=reopened&component=Nevow&order=priority Tickets] ([http://divmod.org/users/roundup.twistd/nevow/ More tickets])
== Related Projects ==
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Formal Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.  This project was formerly known as 'forms'.
 * [wiki:DivmodMantissa Mantissa]: An extensible, multi-protocol, multi-user, interactive application server built on top of Axiom and Nevow.
 * [http://test.stiq.it/ Stiq]: A web news system built using Nevow
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
","Athena -> [Athena], links to Athena documentation",0
1413,6,1226250184.85378,michalpasternak,89.78.16.112,"
== Nevow & Athena FAQ ==

Q) When I reload a page, the server logs a traceback ending with {{{exceptions.AssertionError: Cannot render a LivePage more than once}}}

A) LivePage instances maintain server-side state that corresponds to the connection to the browser.  Because of this, each LivePage instance can only be used to serve a single client.  When you serve LivePages, make sure that you create a new instance for each render pass.

Q) I can't debug athena on Internet explorer.  what gives?

A) Athena include the livefragment javascript in the body of the document via a script tag.  Visual studio doesn't appear to be happy with this and does not let you set break points.  If you load the javascript in the head of the document then you can set a break point in your athena livefragment javascript using visual studio.  The best way I found to do this is manually include the javacript in the header and then information athena that the livefragment javascript is already loaded.  One way to do this is to call the 'hidden' _shouldInclude method on the athena livepage instance, e.g self._shouldInclude('yourjsmodule').  This will let athena know that the javascript is already loaded and not to load it twice.

Q) Why doesn't Athena support Safari?

A) Safari has a broken JS implementation that throws an error when a nested 'named' function is encountered, e.g. 

{{{
methods(function foo(self) {},function bar(self) {});
}}}

A workaround would be to use anonymous functions instead of named functions.  Another issue is that someone needs to implement a custom runtime module in runtime.js to support Safari.

Q) How can I unit-test javascript code using Athena?

A) The same way you unit-test your ordinary [http://twistedmatrix.com Twisted] or [http://divmod.org Divmod] software: by using [http://twistedmatrix.com/trac/wiki/TwistedTrial trial]. You can find [http://divmod.org/trac/wiki/DivmodNevow/AthenaTesting documentation of AthenaTesting here]. Have a look at [http://divmod.org/trac/browser/trunk/Nevow/nevow/test/test_javascript.py nevow.test.test_javascript] to see, how tests are prepared and run.
",',0
1414,7,1226250315.74922,michalpasternak,89.78.16.112,"
== Athena FAQ ==

Q) When I reload a page, the server logs a traceback ending with {{{exceptions.AssertionError: Cannot render a LivePage more than once}}}

A) LivePage instances maintain server-side state that corresponds to the connection to the browser.  Because of this, each LivePage instance can only be used to serve a single client.  When you serve LivePages, make sure that you create a new instance for each render pass.

Q) I can't debug athena on Internet explorer.  what gives?

A) Athena include the livefragment javascript in the body of the document via a script tag.  Visual studio doesn't appear to be happy with this and does not let you set break points.  If you load the javascript in the head of the document then you can set a break point in your athena livefragment javascript using visual studio.  The best way I found to do this is manually include the javacript in the header and then information athena that the livefragment javascript is already loaded.  One way to do this is to call the 'hidden' _shouldInclude method on the athena livepage instance, e.g self._shouldInclude('yourjsmodule').  This will let athena know that the javascript is already loaded and not to load it twice.

Q) Why doesn't Athena support Safari?

A) Safari has a broken JS implementation that throws an error when a nested 'named' function is encountered, e.g. 

{{{
methods(function foo(self) {},function bar(self) {});
}}}

A workaround would be to use anonymous functions instead of named functions.  Another issue is that someone needs to implement a custom runtime module in runtime.js to support Safari.

Q) How can I unit-test javascript code using Athena?

A) The same way you unit-test your ordinary [http://twistedmatrix.com Twisted] or [http://divmod.org Divmod] software: by using [http://twistedmatrix.com/trac/wiki/TwistedTrial trial]. You can find [http://divmod.org/trac/wiki/DivmodNevow/AthenaTesting documentation of AthenaTesting here]. Have a look at [http://divmod.org/trac/browser/trunk/Nevow/nevow/test/test_javascript.py nevow.test.test_javascript] to see, how tests are prepared and run.
","Nevow & Athena FAQ => Athena FAQ",0
1415,69,1226250386.46834,michalpasternak,89.78.16.112,,,
1416,44,1226250404.17079,michalpasternak,89.78.16.112,"= Divmod : Nevow =

== Athena ==

Athena is the best-of-breed approach to developing interactive javascript (AJAX / Comet) applications with DivmodNevow. 

Athena is :
 * a lot of things relating to javascript
 * communicating between python and javascript
 * organizing javascript code
 * a class-based object model for javascript
 * unit testing javascript
 * abstracting browser differences away from javascript

Before using Athena, you may want to check out the [wiki:DivmodNevow/Tutorial Nevow tutorial].

=== History ===

Divmod had AJAX before the much touted 'Web 2.0' came into being and claimed {{{XHR}}}. It was called !LivePage and worked with Twisted's Woven web application development tool. The Twisted and Divmod development communities were exploring and implementing two-way browser communications years ago that ''still'' aren't implemented by anyone else.

It should be noted that Athena '''supersedes''' previous solutions, such as Woven's !LivePage.  These prior solutions should not be used with Athena development (nor with Nevow).


=== Development Environment ===

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

 * [wiki:DivmodNevow/Athena/Emacs Emacs]
 * [http://www.getfirebug.com/ Firebug] - Firefox based javascript debugger

=== Documentation ===

 * [wiki:DivmodNevow/Athena/FAQ Athena FAQ]
 * [wiki:DivmodNevow/Athena/Tutorials/LiveElement Athena LiveElement Tutorial]
 * [wiki:DivmodNevow/AthenaTesting Writing Unit Tests for Athena-based Projects] (bleeding edge)
 * [browser:trunk/Nevow/examples/athenademo Code Examples]

=== Testing ===

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

=== Implementation ===

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

=== Tickets ===
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].","Remove Nevow Tutorial (move to Nevow page)",0
1417,70,1226250983.3946,michalpasternak,89.78.16.112,,,
1418,8,1226251139.49505,michalpasternak,89.78.16.112,"
== Athena FAQ ==

Q) When I reload a page, the server logs a traceback ending with {{{exceptions.AssertionError: Cannot render a LivePage more than once}}}

A) LivePage instances maintain server-side state that corresponds to the connection to the browser.  Because of this, each LivePage instance can only be used to serve a single client.  When you serve LivePages, make sure that you create a new instance for each render pass.

Q) I can't debug athena on Internet explorer.  what gives?

A) Athena include the livefragment javascript in the body of the document via a script tag.  Visual studio doesn't appear to be happy with this and does not let you set break points.  If you load the javascript in the head of the document then you can set a break point in your athena livefragment javascript using visual studio.  The best way I found to do this is manually include the javacript in the header and then information athena that the livefragment javascript is already loaded.  One way to do this is to call the 'hidden' _shouldInclude method on the athena livepage instance, e.g self._shouldInclude('yourjsmodule').  This will let athena know that the javascript is already loaded and not to load it twice.

Q) Why doesn't Athena support Safari?

A) Safari has a broken JS implementation that throws an error when a nested 'named' function is encountered, e.g. 

{{{
methods(function foo(self) {},function bar(self) {});
}}}

A workaround would be to use anonymous functions instead of named functions.  Another issue is that someone needs to implement a custom runtime module in runtime.js to support Safari.

Q) How can I unit-test javascript code using Athena?

A) The same way you unit-test your ordinary [http://twistedmatrix.com Twisted] or [http://divmod.org Divmod] software: by using [http://twistedmatrix.com/trac/wiki/TwistedTrial trial]. You can find [http://divmod.org/trac/wiki/DivmodNevow/AthenaTesting documentation of AthenaTesting here]. Have a look at [http://divmod.org/trac/browser/trunk/Nevow/nevow/test/test_javascript.py nevow.test.test_javascript] to see, how tests are prepared and run.

Q) How can I add elements to an already rendered LivePage?

A) See [http://divmod.org/trac/browser/trunk/Nevow/nevow/js/Nevow/Athena/__init__.js#L897 Nevow.Athena.Widget.addChildWidgetFromWidgetInfo] ","How can I add elements to an already rendered LivePage?",0
1419,71,1226251258.83638,michalpasternak,89.78.16.112,,,
1420,45,1226329651.15284,michalpasternak,89.78.16.112,"= Divmod : Nevow =

== Athena ==

Athena is the best-of-breed approach to developing interactive javascript (AJAX / Comet) applications with DivmodNevow. 

Athena is :
 * a lot of things relating to javascript
 * communicating between python and javascript
 * organizing javascript code
 * a class-based object model for javascript
 * unit testing javascript
 * abstracting browser differences away from javascript

Before using Athena, you may want to check out the [wiki:DivmodNevow/Tutorial Nevow tutorial].

=== History ===

Divmod had AJAX before the much touted 'Web 2.0' came into being and claimed {{{XHR}}}. It was called !LivePage and worked with Twisted's Woven web application development tool. The Twisted and Divmod development communities were exploring and implementing two-way browser communications years ago that ''still'' aren't implemented by anyone else.

It should be noted that Athena '''supersedes''' previous solutions, such as Woven's !LivePage.  These prior solutions should not be used with Athena development (nor with Nevow).


=== Development Environment ===

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

 * [wiki:DivmodNevow/Athena/Emacs Emacs]
 * [http://www.getfirebug.com/ Firebug] - Firefox based javascript debugger

=== Documentation ===

 * [wiki:DivmodNevow/Athena/FAQ Athena FAQ]
 * [wiki:DivmodNevow/Athena/Tutorials/LiveElement Athena LiveElement Tutorial]
 * [wiki:DivmodNevow/Athena/Tutorials/LiveElementsOnFly How to add LiveElements to a LivePage on fly]
 * [wiki:DivmodNevow/AthenaTesting Writing Unit Tests for Athena-based Projects] (bleeding edge)
 * [browser:trunk/Nevow/examples/athenademo Code Examples]

=== Testing ===

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

=== Implementation ===

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

=== Tickets ===
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].","LiveElements on fly howto",0
1421,1,1226330312.79287,michalpasternak,89.78.16.112,"= Divmod : Nevow =

== Athena ==

=== Adding LiveElements to a LivePage on fly tutorial ===

Javascript function [http://divmod.org/trac/browser/trunk/Nevow/nevow/js/Nevow/Athena/__init__.js#L897 Nevow.Athena.Widget.addChildWidgetFromWidgetInfo] can be used to do that.

All you need on the server is to return a LiveElement instance:

{{{
#!python

from nevow import athena

class WhateverElement(athena.LiveElement):

  @athena.expose
  def getNewLiveElement(self):
    return SomeOtherLiveElement()
}}}

On the client, you need some code & a free XML node to append the new element to:
{{{
#!js
// import Nevow.Athena
// import Divmod.Runtime

What.Ever = Nevow.Athena.Widget.subclass('What.Ever');
What.Ever.methods = (

 function foo(self) {
   d = self.callRemote('getNewLiveElement');

   d.addCallback(

     function liveElementReceived(le) {

       d2 = self.addChildWidgetFromWidgetInfo(le);
       d2.addCallback(
         function childAdded(widget) {

           /* widget is a Nevow.Athena.Widget instance and it
            * represents a newly created widget for the liveelement
            * got from the server */

           /* find a node to attach the widget to: */
           self.nodeById('lastNode').appendChild(widget.node);
            
           /* you could also use, for example:
            *
            * var node = self.nodeById('lastNode');
            * node.replaceChild(widget.node, node.firstChild);
            */
         });

     }); 
}}}","LiveElements on fly tutorial",0
1422,9,1226330412.50787,michalpasternak,89.78.16.112,"
== Athena FAQ ==

Q) When I reload a page, the server logs a traceback ending with {{{exceptions.AssertionError: Cannot render a LivePage more than once}}}

A) LivePage instances maintain server-side state that corresponds to the connection to the browser.  Because of this, each LivePage instance can only be used to serve a single client.  When you serve LivePages, make sure that you create a new instance for each render pass.

Q) I can't debug athena on Internet explorer.  what gives?

A) Athena include the livefragment javascript in the body of the document via a script tag.  Visual studio doesn't appear to be happy with this and does not let you set break points.  If you load the javascript in the head of the document then you can set a break point in your athena livefragment javascript using visual studio.  The best way I found to do this is manually include the javacript in the header and then information athena that the livefragment javascript is already loaded.  One way to do this is to call the 'hidden' _shouldInclude method on the athena livepage instance, e.g self._shouldInclude('yourjsmodule').  This will let athena know that the javascript is already loaded and not to load it twice.

Q) Why doesn't Athena support Safari?

A) Safari has a broken JS implementation that throws an error when a nested 'named' function is encountered, e.g. 

{{{
methods(function foo(self) {},function bar(self) {});
}}}

A workaround would be to use anonymous functions instead of named functions.  Another issue is that someone needs to implement a custom runtime module in runtime.js to support Safari.

Q) How can I unit-test javascript code using Athena?

A) The same way you unit-test your ordinary [http://twistedmatrix.com Twisted] or [http://divmod.org Divmod] software: by using [http://twistedmatrix.com/trac/wiki/TwistedTrial trial]. You can find [http://divmod.org/trac/wiki/DivmodNevow/AthenaTesting documentation of AthenaTesting here]. Have a look at [http://divmod.org/trac/browser/trunk/Nevow/nevow/test/test_javascript.py nevow.test.test_javascript] to see, how tests are prepared and run.

Q) How can I add elements to an already rendered LivePage?

A) See [http://divmod.org/trac/browser/trunk/Nevow/nevow/js/Nevow/Athena/__init__.js#L897 Nevow.Athena.Widget.addChildWidgetFromWidgetInfo] and the [wiki:DivmodNevow/Athena/Tutorials/LiveElementsOnFly wiki entry]","Update link to LiveElementsOnFly",0
1423,72,1226330737.27207,michalpasternak,89.78.16.112,,,
1424,39,1226529202.89862,michalpasternak,89.78.16.112,"= [wiki:WikiStart Divmod] : Axiom =

[[Image(http://divmod.org/tracdocs/axiom_whtbck.png, right)]] Axiom is an object database whose primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel Pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.27.tar.gz?format=raw Download the latest release - 0.5.27!] (Requires [wiki:DivmodEpsilon Epsilon])
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [wiki:DivmodAxiom/Tutorial]: The Axiom tutorial. (Still in progress.)
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tips]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]
 * [wiki:DivmodAxiom/DependencyTransition Dependencies]: How to transition from pre-{{{axiom.dependency}}} code.
 * [wiki:DivmodAxiom/Powerups Powerups]
 * WritingUpgradeTests: writing stubloader tests for schema upgrades.
 * [wiki:DivmodAxiom/Files How to handle files in Axiom]",',0
1425,1,1226530192.34736,michalpasternak,89.78.16.112,,,
1426,10,1226960039.30248,exarkun,70.91.133.157,"
== Athena FAQ ==

Q) When I reload a page, the server logs a traceback ending with {{{exceptions.AssertionError: Cannot render a LivePage more than once}}}

A) LivePage instances maintain server-side state that corresponds to the connection to the browser.  Because of this, each LivePage instance can only be used to serve a single client.  When you serve LivePages, make sure that you create a new instance for each render pass.

Q) I can't debug athena on Internet explorer.  what gives?

A) Athena include the livefragment javascript in the body of the document via a script tag.  Visual studio doesn't appear to be happy with this and does not let you set break points.  If you load the javascript in the head of the document then you can set a break point in your athena livefragment javascript using visual studio.  The best way I found to do this is manually include the javacript in the header and then information athena that the livefragment javascript is already loaded.  One way to do this is to call the 'hidden' _shouldInclude method on the athena livepage instance, e.g self._shouldInclude('yourjsmodule').  This will let athena know that the javascript is already loaded and not to load it twice.

Q) Why doesn't Athena support Safari?

A) Athena supports recent versions of Safari.

Q) How can I unit-test javascript code using Athena?

A) The same way you unit-test your ordinary [http://twistedmatrix.com Twisted] or [http://divmod.org Divmod] software: by using [http://twistedmatrix.com/trac/wiki/TwistedTrial trial]. You can find [http://divmod.org/trac/wiki/DivmodNevow/AthenaTesting documentation of AthenaTesting here]. Have a look at [http://divmod.org/trac/browser/trunk/Nevow/nevow/test/test_javascript.py nevow.test.test_javascript] to see, how tests are prepared and run.

Q) How can I add elements to an already rendered LivePage?

A) See [http://divmod.org/trac/browser/trunk/Nevow/nevow/js/Nevow/Athena/__init__.js#L897 Nevow.Athena.Widget.addChildWidgetFromWidgetInfo] and the [wiki:DivmodNevow/Athena/Tutorials/LiveElementsOnFly wiki entry]","Safari works",0
1427,73,1227032560.26391,mithrandi,41.247.119.83,,,
1428,40,1227033368.0538,mithrandi,41.247.119.83,"= [wiki:WikiStart Divmod] : Axiom =

[[Image(http://divmod.org/tracdocs/axiom_whtbck.png, right)]] Axiom is an object database whose primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel Pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.30.tar.gz?format=raw Download the latest release - 0.5.30!] (Requires [wiki:DivmodEpsilon Epsilon])
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [wiki:DivmodAxiom/Tutorial]: The Axiom tutorial. (Still in progress.)
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tips]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]
 * [wiki:DivmodAxiom/DependencyTransition Dependencies]: How to transition from pre-{{{axiom.dependency}}} code.
 * [wiki:DivmodAxiom/Powerups Powerups]
 * WritingUpgradeTests: writing stubloader tests for schema upgrades.
 * [wiki:DivmodAxiom/Files How to handle files in Axiom]","Axiom 0.5.30 release",0
1429,16,1227033830.66651,mithrandi,41.247.119.83,,,
1430,30,1227034206.77374,mithrandi,41.247.119.83,"= [wiki:WikiStart Divmod] : Mantissa =

[[Image(http://divmod.org/tracdocs/mantissa_whtbck.png, right)]] 

Mantissa is an application server. It provides integration between the [wiki:DivmodAxiom Axiom] 'smart' object database, the [wiki:DivmodNevow Nevow] web templating/AJAX/COMET framework and the TwistedFramework.

Read more about Mantissa's [MantissaIsTheDeploymentTarget philosophy and motivation].

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services, and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.6.21.tar.gz?format=raw Get the most recent release - 0.6.21!]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== Tutorials ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:MantissaWikiTutorial Mantissa Wiki Tutorial] A bit short on explanations, but complete
 * [wiki:MantissaBlogTutorial Mantissa Blog Tutorial] 
 * [wiki:MantissaHowTo An example of how to build a Mantissa application (incomplete)]

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
 * [wiki:DivmodMantissa/Concepts /Concepts]: other concepts with which Mantissa users should be familiar
",',0
1431,134,1230584179.61853,glyph,66.30.15.103,,,
1432,10,1230696548.95302,drewp,209.204.188.29,"


It is generally not recommended to put the staff that requires many simultaneous connections under apache, unless Event MPM is used. But sometimes that's just fine, e.g for tests.

Imagine you want to hide http://localhost:8080/ behind http://go.site.com/

This is what you put on apache with mod_proxy enabled
{{{
    <VirtualHost *:80>  # of course, *:80 can be replaced by something

        # external site URL
        ServerName go.site.com

        # internal (proxied) URL, note vhost/<protocol>/<host>/ scheme (*)
        ProxyPass / http://localhost:8080/vhost/http/go.site.com/  

    </VirtualHost>
}}}

Usually people also add 'ProxyRequests Off' to their apache conf to ensure that apache won't be used as free proxy.

But it's clearly not enough to setup apache, because it will send requests to Twisted asking http://localhost:8080/.. , while
Nevow application should process request as if it were http://go.site.com.

There is a special module nevow.vhost.VHostMonsterResource()  (please note nevow.vhost is used, not twisted.web.vhost),
which takes url in the form http://localhost:8080/vhost/http/go.site.com/* and fixes request to make Resource think that it were direct go.site.com/* .


==== Example ====

Let's hide a resource MyResource, which works perfectly as http://localhost:8080, under http://go.site.com.

Here is a brief 'proxy.tac' example, which can be run by 'twistd -noy proxy.tac'


{{{
from twisted.application import service, strports
from nevow import appserver, inevow, rend, loaders, vhost
from zope.interface import implements

# This is the root resource we are hiding behind proxy
# It *was* working as http://localhost:8080, but now it should *become* http://go.site.com
class MyResource(rend.Page):

    def child_(self, ctx):
        return HelloPage()

# A simple root page, *was* http://localhost:8080/, 
# will *become* http://go.site.com/
# (or http://localhost:8080/vhost/http/go.site.com/ from proxied url)
class HelloPage(rend.Page):

    docFactory = loaders.xmlstr('''\
<html><body>Hello</body></html>
''')

# thanks Damascene for this wrapper
# it delegates /vhost/* requests to VHostMonsterResource, which fixes request
class VhostFakeRoot:
    '''
    I am a wrapper to be used at site root when you want to combine 
    vhost.VHostMonsterResource with nevow.guard. If you are using guard, you 
    will pass me a guard.SessionWrapper resource.
    Also can hide generic resources
    '''
    implements(inevow.IResource)
    def __init__(self, wrapped):
        self.wrapped = wrapped
    
    def renderHTTP(self, ctx):
        return self.wrapped.renderHTTP(ctx)
        
    def locateChild(self, ctx, segments):
        '''Returns a VHostMonster if the first segment is 'vhost'. Otherwise
        delegates to the wrapped resource.'''
        if segments[0] == 'vhost':
            return vhost.VHostMonsterResource(), segments[1:]
        else:
            return self.wrapped.locateChild(ctx, segments)         

# setup/run site
site = appserver.NevowSite(VhostFakeRoot(MyResource()))
application = service.Application('go')

strports.service('8080', site).setServiceParent(application)

}}}


==== How that works ? ====

 * Request comes as http://localhost:8080/vhost/http/go.site.com/<**>
 * VhostFakeRoot.locateChild is called 
 * 'vhost' is stripped from path and http/go.site.com/* comes to VHostMonsterResource
 * http is stripped by VHostMonsterResource, request is fixed
 * go.site.com is stripped by VHostMonsterResource, request is fixed
 * MyResource comes into play and does its job with <**>


== Notes ==

 1. Headers from Twisted are consumed by apache.. That may be a problem
 2. Nevow.livePage stuff had problems working through proxy


=== Alternative Method ===

There's an alternative (a lot easier method) to achieve the desired result.
Just do it in apache config:

{{{
<VirtualHost [insert IP or * here]:80>
  ServerName mysub.mydomain.com

  ErrorLog /var/log/apache2/mysub.mydomain.com_error_log
  CustomLog /var/log/apache2/mysub.mydomain.com_access_log combined

  ProxyVia On
  ProxyPass / http://127.0.0.1:8080/
  ProxyPassReverse / http://127.0.0.1:8080/
</VirtualHost>
}}}

Also see:
http://divmod.org/trac/wiki/DivmodNevow/Deployment/ReverseProxy

",typo,0
1433,24,1232962648.8735,yasusii,125.175.103.28,,,
1434,9,1233333950.89259,exarkun,70.91.133.157,"= [wiki:WikiStart Divmod] : !PyFlakes =

[[Image(http://divmod.org/tracdocs/pyflakes_whtbck.png, right)]] 

!PyFlakes a Lint-like tool for Python, like [http://pychecker.sourceforge.net PyChecker].  It is focused on identifying common errors quickly without executing Python code.

Its primary advantage over [http://pychecker.sourceforge.net PyChecker] is that it is ''fast''.  You don't have to sit around for minutes waiting for the checker to run; it runs on most large projects in only a few seconds.

The two primary categories of defects reported by !PyFlakes are:

  * Names which are used but not defined or used before they are defined
  * Names which are redefined without having been used

These can each take many forms.  For example, !PyFlakes will tell you when you have forgotten an import, mistyped a variable name, defined two functions with the same name, shadowed a variable from another scope, imported a module twice, or two different modules with the same name, and so on.

== Download ==
 * [http://divmod.org/trac/attachment/wiki/SoftwareReleases/pyflakes-0.3.0.tar.gz?format=raw 0.3.0 Release] ([http://divmod.org/trac/browser/tags/releases/Pyflakes-0.3.0/NEWS.txt Release Notes])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Pyflakes !PyFlakes

== Exits ==
 * [http://pypi.python.org/pypi/pyflakes PyFlakes on PyPI]
 * [https://launchpad.net/pyflakes PyFlakes on launchpad]
 * [http://www.freshmeat.net/projects/pyflakes PyFlakes on freshmeat]
 * [http://www.swik.net/pyflakes PyFlakes on swik]
",',0
1435,19,1234497332.64223,exarkun,209.6.216.253,"Context has not yet been removed.  Please return later for updates.
","Nothing on this page is accurate.  Wrong docs are worse than no docs.",0
1436,13,1236602177.55834,exarkun,209.6.216.253,"= Divmod: Imaginary =

Imaginary numbers are so named not because they are fictitious, but because
they are along a different axis from real numbers.

Divmod Imaginary is a simulationist's take on the realm of role playing,
interactive fiction, and multiplayer dungeons.  It incorporates gameplay
features from each area while attempting to provide a richer environment
than is generally available from existing systems.

Status: Imaginary is currently on the back of some peoples' minds.

 * [browser:trunk/Imaginary/imaginary Browse the source]. 
 * [query:status=new|assigned|reopened&component=Imaginary View the tickets].


Instructions for starting an Imaginary server are here: [source:/trunk/Imaginary/README.txt README.txt]
","Hey trac, you're a piece of shit",0
1437,41,1236967281.36329,exarkun,70.91.133.157,"= [wiki:WikiStart Divmod] : Axiom =

[[Image(http://divmod.org/tracdocs/axiom_whtbck.png, right)]] Axiom is an object database whose primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel Pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.31.tar.gz?format=raw Download the latest release - 0.5.31!] (Requires [wiki:DivmodEpsilon Epsilon])
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [wiki:DivmodAxiom/Tutorial]: The Axiom tutorial. (Still in progress.)
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tips]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]
 * [wiki:DivmodAxiom/DependencyTransition Dependencies]: How to transition from pre-{{{axiom.dependency}}} code.
 * [wiki:DivmodAxiom/Powerups Powerups]
 * WritingUpgradeTests: writing stubloader tests for schema upgrades.
 * [wiki:DivmodAxiom/Files How to handle files in Axiom]",',0
1438,17,1236967314.9563,exarkun,70.91.133.157,,,
1439,31,1236967356.11213,exarkun,70.91.133.157,"= [wiki:WikiStart Divmod] : Mantissa =

[[Image(http://divmod.org/tracdocs/mantissa_whtbck.png, right)]] 

Mantissa is an application server. It provides integration between the [wiki:DivmodAxiom Axiom] 'smart' object database, the [wiki:DivmodNevow Nevow] web templating/AJAX/COMET framework and the TwistedFramework.

Read more about Mantissa's [MantissaIsTheDeploymentTarget philosophy and motivation].

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services, and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.6.22.tar.gz?format=raw Get the most recent release - 0.6.22!]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== Tutorials ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:MantissaWikiTutorial Mantissa Wiki Tutorial] A bit short on explanations, but complete
 * [wiki:MantissaBlogTutorial Mantissa Blog Tutorial] 
 * [wiki:MantissaHowTo An example of how to build a Mantissa application (incomplete)]

== See Also ==
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
 * [wiki:DivmodMantissa/Concepts /Concepts]: other concepts with which Mantissa users should be familiar
",',0
1440,74,1236967387.7648,exarkun,70.91.133.157,,,
1441,1,1240725725.56209,dotz,89.78.3.46,"= Divmod : Nevow =

== Athena ==

=== Notify on disconnect ===

If you want to be notified when client disconnects, you can use LivePage's notifyOnDisconnect function.

{{{
class thePage(athena.LivePage):

  def beforeRender(self, ctx):
    d = self.notifyOnDisconnect()
    d.addErrback(self.disconn)

  def disconn(self, reason):
    '''
    We will be called back when the client disconnects
    '''
    pass
}}}
",',0
1442,46,1240725770.0957,dotz,89.78.3.46,"= Divmod : Nevow =

== Athena ==

Athena is the best-of-breed approach to developing interactive javascript (AJAX / Comet) applications with DivmodNevow. 

Athena is :
 * a lot of things relating to javascript
 * communicating between python and javascript
 * organizing javascript code
 * a class-based object model for javascript
 * unit testing javascript
 * abstracting browser differences away from javascript

Before using Athena, you may want to check out the [wiki:DivmodNevow/Tutorial Nevow tutorial].

=== History ===

Divmod had AJAX before the much touted 'Web 2.0' came into being and claimed {{{XHR}}}. It was called !LivePage and worked with Twisted's Woven web application development tool. The Twisted and Divmod development communities were exploring and implementing two-way browser communications years ago that ''still'' aren't implemented by anyone else.

It should be noted that Athena '''supersedes''' previous solutions, such as Woven's !LivePage.  These prior solutions should not be used with Athena development (nor with Nevow).


=== Development Environment ===

If you haven't developed with !JavaScript before, you may wish to set up your development environment before beginning with Athena.  Some tips may be available, depending on your preferred tools:

 * [wiki:DivmodNevow/Athena/Emacs Emacs]
 * [http://www.getfirebug.com/ Firebug] - Firefox based javascript debugger

=== Documentation ===

 * [wiki:DivmodNevow/Athena/FAQ Athena FAQ]
 * [wiki:DivmodNevow/Athena/Tutorials/LiveElement Athena LiveElement Tutorial]
 * [wiki:DivmodNevow/Athena/Tutorials/LiveElementsOnFly How to add LiveElements to a LivePage on fly]
 * [wiki:DivmodNevow/Athena/NotifyOnDisconnect How to be notified when client disconnects]
 * [wiki:DivmodNevow/AthenaTesting Writing Unit Tests for Athena-based Projects] (bleeding edge)
 * [browser:trunk/Nevow/examples/athenademo Code Examples]

=== Testing ===

Visit the [wiki:DivmodNevow/AthenaTesting Testing Tutorial] or [http://blackjml.livejournal.com/21602.html Test Driven Development with Athena]

=== Implementation ===

Though Divmod's use of it predates the term by several years, Athena uses what some have come to call Comet.  Athena's !JavaScript half makes an HTTP request before it actually needs to retrieve information from the server.  The server does not respond to this request until it has something to tell the browser.  In this way, the server can push events to the browser instantly.

=== Tickets ===
See open tickets for Athena [http://divmod.org/trac/query?status=new&status=assigned&status=reopened&component=Nevow&keywords=%7Eathena&order=priority here].",',0
1443,5,1240887239.75753,jmmaranan,61.9.12.12,"= FAQ =
== Modules ==
=== When loading a Nevow application using built-in Twisted server via 'twistd -noy file.tac', why are user modules aren't loaded by default ===
Twisted does not recognize the current directory as loaded in Python path. On your file.tac file, before any nevow or twisted modules are loaded do this :
{{{
# file.tac
import os, sys
sys.path.append(os.getcwd()) # loads the current directory to Python path

# then start loading nevow and twisted modules
from twisted.application import service, internet

# start importing your modules here
from foo import BarPage
# etc...
-----------------------
# foo.BarPage.py

from nevow.rend import Page
class BarPage( Page ):
    def renderHTTP( self, ctx ):
        return 'foo'
}}}

== Request parameters ==
=== How do I extract request parameters ===
Request parameters come from the context object (but beware this: ).
You adapt the context object to an IRequest object. The parameters are stored in the args dictionary. 
{{{
request = inevow.IRequest(ctx)
if request.args.has_key('myparam'):
   validate(request.args['myparam'])
}}}

== Testing ==
=== How do I make fake context objects? ===
Divmod contains a testutil module that contains a set of ready made classes like !FakeRequest, !FakeSession etc. Use these. 
Example:

{{{
ctx = context.WebContext(tag=page)
ctx.remember(testutil.AccumulatingFakeRequest())
}}}



",',0
1444,6,1240887589.25384,jmmaranan,61.9.12.12,"= FAQ =
== Modules ==
=== When loading a Nevow application using built-in Twisted server via 'twistd -noy file.tac', why do I get an ImportError when loading module 'foo'? ===
Twisted does not recognize the current directory as loaded in Python path. On your file.tac file, before any nevow or twisted modules are loaded do this :
{{{
# file.tac
import os, sys
sys.path.append(os.getcwd()) # loads the current directory to Python path

# then start loading nevow and twisted modules
from twisted.application import service, internet

# start importing your modules here
from foo import BarPage
# etc...
-----------------------
# foo.BarPage.py

from nevow.rend import Page
class BarPage( Page ):
    def renderHTTP( self, ctx ):
        return 'foo'
}}}

== Request parameters ==
=== How do I extract request parameters ===
Request parameters come from the context object (but beware this: ).
You adapt the context object to an IRequest object. The parameters are stored in the args dictionary. 
{{{
request = inevow.IRequest(ctx)
if request.args.has_key('myparam'):
   validate(request.args['myparam'])
}}}

== Testing ==
=== How do I make fake context objects? ===
Divmod contains a testutil module that contains a set of ready made classes like !FakeRequest, !FakeSession etc. Use these. 
Example:

{{{
ctx = context.WebContext(tag=page)
ctx.remember(testutil.AccumulatingFakeRequest())
}}}



",',0
1445,7,1240887621.77791,jmmaranan,61.9.12.12,"= FAQ =
== Modules ==
=== When loading a Nevow application using built-in Twisted server via 'twistd -noy file.tac', why do I get an import error when loading my module 'foo'? ===
Twisted does not recognize the current directory as loaded in Python path. On your file.tac file, before any nevow or twisted modules are loaded do this :
{{{
# file.tac
import os, sys
sys.path.append(os.getcwd()) # loads the current directory to Python path

# then start loading nevow and twisted modules
from twisted.application import service, internet

# start importing your modules here
from foo import BarPage
# etc...
-----------------------
# foo.BarPage.py

from nevow.rend import Page
class BarPage( Page ):
    def renderHTTP( self, ctx ):
        return 'foo'
}}}

== Request parameters ==
=== How do I extract request parameters ===
Request parameters come from the context object (but beware this: ).
You adapt the context object to an IRequest object. The parameters are stored in the args dictionary. 
{{{
request = inevow.IRequest(ctx)
if request.args.has_key('myparam'):
   validate(request.args['myparam'])
}}}

== Testing ==
=== How do I make fake context objects? ===
Divmod contains a testutil module that contains a set of ready made classes like !FakeRequest, !FakeSession etc. Use these. 
Example:

{{{
ctx = context.WebContext(tag=page)
ctx.remember(testutil.AccumulatingFakeRequest())
}}}



",',0
1446,8,1240891011.98468,jmmaranan,61.9.12.12,"= FAQ =
== Modules ==
=== When loading a Nevow application using built-in Twisted server via 'twistd -noy file.tac', why do I get an import error when loading my module 'foo'? ===
Twisted does not recognize the current directory as loaded in Python path. On your file.tac file, before any nevow or twisted modules are loaded do this :
{{{
#!python
# file.tac
import os, sys
sys.path.append(os.getcwd()) # loads the current directory to Python path

# then start loading nevow and twisted modules
from twisted.application import service, internet

# start importing your modules here
from foo import BarPage
# etc...
-----------------------
# foo.BarPage.py

from nevow.rend import Page
class BarPage( Page ):
    def renderHTTP( self, ctx ):
        return 'foo'
}}}

== Request parameters ==
=== How do I extract request parameters ===
Request parameters come from the context object (but beware this: ).
You adapt the context object to an IRequest object. The parameters are stored in the args dictionary. 
{{{
#!python
request = inevow.IRequest(ctx)
if request.args.has_key('myparam'):
   validate(request.args['myparam'])
}}}

== Testing ==
=== How do I make fake context objects? ===
Divmod contains a testutil module that contains a set of ready made classes like !FakeRequest, !FakeSession etc. Use these. 
Example:

{{{
#!python
ctx = context.WebContext(tag=page)
ctx.remember(testutil.AccumulatingFakeRequest())
}}}



",',0
1447,9,1240916635.68899,jmmaranan,61.9.12.12,"= FAQ =
== Modules ==
=== When loading a Nevow application using built-in Twisted server via 'twistd -noy file.tac', why do I get an import error when importing my module 'foo'? ===
Twisted does not recognize the current directory as loaded in Python path. On your file.tac, before any nevow or twisted modules are imported do this :
{{{
#!python
# file.tac
import os, sys
sys.path.append(os.getcwd()) # loads the current directory to Python path

# then start loading nevow and twisted modules
from twisted.application import service, internet

# start importing your modules here
from foo import BarPage
# etc...
-----------------------
# foo.BarPage.py

from nevow.rend import Page
class BarPage( Page ):
    def renderHTTP( self, ctx ):
        return 'foo'
}}}

== Request parameters ==
=== How do I extract request parameters ===
Request parameters come from the context object (but beware this: ).
You adapt the context object to an IRequest object. The parameters are stored in the args dictionary. 
{{{
#!python
request = inevow.IRequest(ctx)
if request.args.has_key('myparam'):
   validate(request.args['myparam'])
}}}

== Testing ==
=== How do I make fake context objects? ===
Divmod contains a testutil module that contains a set of ready made classes like !FakeRequest, !FakeSession etc. Use these. 
Example:

{{{
#!python
ctx = context.WebContext(tag=page)
ctx.remember(testutil.AccumulatingFakeRequest())
}}}



",',0
1448,75,1242751052.30866,exarkun,70.91.133.157,,,
1449,42,1242751105.95297,exarkun,70.91.133.157,"= [wiki:WikiStart Divmod] : Axiom =

[[Image(http://divmod.org/tracdocs/axiom_whtbck.png, right)]] Axiom is an object database whose primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel Pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.31.tar.gz?format=raw Download the latest release - 0.5.31!] (Requires [wiki:DivmodEpsilon Epsilon])
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [wiki:DivmodAxiom/Tutorial]: The Axiom tutorial. (Still in progress.)
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tips]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * ''Development'' version of the [http://buildbot.divmod.org/apidocs/axiom.html Axiom API docs]
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]
 * [wiki:DivmodAxiom/DependencyTransition Dependencies]: How to transition from pre-{{{axiom.dependency}}} code.
 * [wiki:DivmodAxiom/Powerups Powerups]
 * WritingUpgradeTests: writing stubloader tests for schema upgrades.
 * [wiki:DivmodAxiom/Files How to handle files in Axiom]",',0
1450,32,1242751164.07766,exarkun,70.91.133.157,"= [wiki:WikiStart Divmod] : Mantissa =

[[Image(http://divmod.org/tracdocs/mantissa_whtbck.png, right)]] 

Mantissa is an application server. It provides integration between the [wiki:DivmodAxiom Axiom] 'smart' object database, the [wiki:DivmodNevow Nevow] web templating/AJAX/COMET framework and the TwistedFramework.

Read more about Mantissa's [MantissaIsTheDeploymentTarget philosophy and motivation].

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services, and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.6.22.tar.gz?format=raw Get the most recent release - 0.6.22!]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== Tutorials ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:MantissaWikiTutorial Mantissa Wiki Tutorial] A bit short on explanations, but complete
 * [wiki:MantissaBlogTutorial Mantissa Blog Tutorial] 
 * [wiki:MantissaHowTo An example of how to build a Mantissa application (incomplete)]

== See Also ==
 * ''Development'' version of the [http://buildbot.divmod.org/apidocs/xmantissa.html Mantissa API docs]
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
 * [wiki:DivmodMantissa/Concepts /Concepts]: other concepts with which Mantissa users should be familiar
",',0
1451,14,1242751224.23375,exarkun,70.91.133.157,"== Divmod Sine ==

A voice over IP application server.

[[Image(http://isometric.sixsided.org/_/future_wiring/2.gif)]]

Sine provides:
 * SIP Registrar
 * SIP Proxy
 * Third party call control (3PCC)
 * Voice-mail
 * Through-the-web configuration
 * [wiki:DivmodMantissa Divmod Mantissa] integration

=== Download ===

 * Release: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Sine-0.1.0.tar.gz?format=raw Download the latest release - 0.1.0!] (Requires [wiki:DivmodMantissa Mantissa])
 * Bleeding Edge: 
{{{
#!sh
% svn co http://divmod.org/svn/Divmod/trunk/Sine Sine
}}}

=== See Also ===

  * ''Development'' version of the [http://buildbot.divmod.org/sine.html Sine API docs]
",',0
1452,15,1242751235.98731,exarkun,70.91.133.157,"== Divmod Sine ==

A voice over IP application server.

[[Image(http://isometric.sixsided.org/_/future_wiring/2.gif)]]

Sine provides:
 * SIP Registrar
 * SIP Proxy
 * Third party call control (3PCC)
 * Voice-mail
 * Through-the-web configuration
 * [wiki:DivmodMantissa Divmod Mantissa] integration

=== Download ===

 * Release: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Sine-0.1.0.tar.gz?format=raw Download the latest release - 0.1.0!] (Requires [wiki:DivmodMantissa Mantissa])
 * Bleeding Edge: 
{{{
#!sh
% svn co http://divmod.org/svn/Divmod/trunk/Sine Sine
}}}

=== See Also ===

  * ''Development'' version of the [http://buildbot.divmod.org/apidocs/sine.html Sine API docs]
",',0
1453,18,1242751318.93503,exarkun,70.91.133.157,"= [wiki:WikiStart Divmod] : Epsilon =

[[Image(http://divmod.org/tracdocs/epsilon_whtbck.png, right)]] 

A small utility package that depends on tools too recent for Twisted (like datetime in python2.4) but performs generic enough functions that it can be used in projects that don't want to share Divmod's other projects' large footprint.

Currently included:
  * A powerful date/time formatting and import/export class (ExtimeDotTime), for exchanging date and time information between all Python's various ways to interpret objects as times or time deltas.
  * Tools for managing concurrent asynchronous processes within Twisted.
  * A metaclass which helps you define classes with explicit states.
  * A featureful Version class.
  * A formal system for application of monkey-patches.

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Epsilon-0.5.12.tar.gz?format=raw Get the most recent release - 0.5.12!]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Epsilon Epsilon

== See Also ==
 * ''Development'' version of the [http://buildbot.divmod.org/apidocs/epsilon.html Epsilon API docs]
",',0
1454,15,1242751441.48226,exarkun,70.91.133.157,"= [wiki:WikiStart Divmod] : Vertex =
Vertex is an implementation of the Q2Q protocol (sort of like P2P, but one better). There are a few moving parts in Vertex:

  * PTCP: a protocol which is nearly identical to TCP, but which runs over UDP. This lets Q2Q penetrate most NAT configurations.
  * JUICE ([JU]ice [I]s [C]oncurrent [E]vents): a very simple but immensely flexible protocol which forms the basis of the high-level aspects of Q2Q
  * vertex: a command line tool which exposes a few features useful in many situations (such as registration and authentication)

Q2Q is a very high-level protocol (alternatively, transport) the goal of which is to make communication over the internet a possibility (if you enjoy setting up tunnels or firewall rules whenever you need to transfer a file between two computers, Q2Q may not be for you). Q2Q endpoints aren't hardware addresses or network addresses. They look a lot like email addresses and they act a lot like instant message addresses. You can hook into yours wherever you can access the internet, and you can be online or offline as you choose (Q2Q supports multiple unrelated protocols, so you also might be online for some services but offline for others). Two people with Q2Q addresses can easily communicate without out-of-band negotiation of their physical locations or the topology of their networks. If Alice wants to talk to Bob, Alice will always just open a connection to bob@divmod.com/chat. If Bob is online anywhere at all, the connection will have an opportunity to succeed (Bob might be busy or not want to talk to Alice, but that is another matter ;). The connection is authenticated in both directions, so if it does succeed Alice knows she is talking to the real Bob and vice versa.

The Q2Q network has some decentralized features (there is no one server or company which can control all Q2Q addresses) and features of centralization (addresses beneath a particular domain are issued by a server for that domain; once issued, some activities require the server to be contacted again, while others do not). Vertex includes an identity server capable of hosting Q2Q addresses. Once you've installed the 0.1 release, you can run it like this:
{{{
exarkun@boson:~$ cat > q2q-standalone.tac
from vertex.q2qstandalone import defaultConfig
application = defaultConfig()
exarkun@boson:~$ twistd -noy q2q-standalone.tac 
2005/10/15 00:12 EDT [-] Log opened.
2005/10/15 00:12 EDT [-] twistd 2.0.1 (/usr/bin/python2.4 2.4.1) starting up
2005/10/15 00:12 EDT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/10/15 00:12 EDT [-] Loading q2q-standalone.tac...
2005/10/15 00:12 EDT [-] Loaded.
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QService starting on 8788
2005/10/15 00:12 EDT [-] Starting factory <Q2QService 'service'@-488b6a34>
2005/10/15 00:12 EDT [-] vertex.ptcp.PTCP starting on 8788
2005/10/15 00:12 EDT [-] Starting protocol <vertex.ptcp.PTCP instance at 0xb777884c>
2005/10/15 00:12 EDT [-] Binding PTCP/UDP 8788=8788
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QBootstrapFactory starting on 8789
2005/10/15 00:12 EDT [-] Starting factory <vertex.q2q.Q2QBootstrapFactory instance at 0xb77787cc>
}}}
You can acquire a new Q2Q address using the vertex command line tool:
{{{
exarkun@boson:~$ vertex register exarkun@boson password
}}}
boson is a name on my local network, making this address rather useless. On the other hand, no one will be able to pretend to be me by cracking my hopelessly weak password ;) If you set up a Vertex server on a public host, you will be able to register a real, honest-to-goodness Q2Q address beneath its domain (careful - so will anyone else).

vertex also offers a tool for requesting a signed certificate from the server. These certificates can be used to prove ones identity to foreign domains without involving ones home server. Another feature vertex provides is a toy file transfer application. Bob can issue a vertex receive while Alice issues a vertex send pointed at him, and the file will be transferred.

Much of the real power of Q2Q is exposed to developers using two methods: listenQ2Q and connectQ2Q. These work in roughly the same way Twisted's listenTCP and connectTCP work: they offer support for writing servers and clients that operate on the Q2Q network.

== Exits ==
 * [http://divmod.org/projects/vertex Old Divmod project page for Vertex]
 * [http://www.swik.net/vertex Vertex on swik]
 * [wiki:UsingVertex Using Vertex], a work-in-progress page about using Vertex in an application
 * ''Development'' version of [http://buildbot.divmod.org/apidocs/vertex.html Vertex API docs]

== Status ==
 * Vertex does '''not''' currently pass its test suite on Windows or Mac OS X.
 * This [query:?group=status&component=Vertex&order=priority custom Vertex ticket query] will show you all the tickets (bugs and feature requests) filed against Vertex.
 * Vertex is likely usable as a Q2Q server on Linux and Windows.
 * Vertex is likely usable as a Q2Q client on Linux.

== Download ==
 * Release: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Vertex-0.2.0.tar.gz?format=raw Latest release: 0.2.0]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Vertex Vertex
",',0
1456,20,1245408070.58252,glyph,76.24.223.175,,,
1457,11,1247970305.76068,d_yang,60.166.225.206,"
== Athena FAQ ==

Q) When I reload a page, the server logs a traceback ending with {{{exceptions.AssertionError: Cannot render a LivePage more than once}}}

A) LivePage instances maintain server-side state that corresponds to the connection to the browser.  Because of this, each LivePage instance can only be used to serve a single client.  When you serve LivePages, make sure that you create a new instance for each render pass.
Here is an example(from Dominik Neumann) about using LivePage as a main page:
Wrap you Index page like:
{{{
#!python
class RootPage(Index):
	'''
	always return a new Index
	'''
	def child_(self, ctx):
		return Index()
}}}




Q) I can't debug athena on Internet explorer.  what gives?

A) Athena include the livefragment javascript in the body of the document via a script tag.  Visual studio doesn't appear to be happy with this and does not let you set break points.  If you load the javascript in the head of the document then you can set a break point in your athena livefragment javascript using visual studio.  The best way I found to do this is manually include the javacript in the header and then information athena that the livefragment javascript is already loaded.  One way to do this is to call the 'hidden' _shouldInclude method on the athena livepage instance, e.g self._shouldInclude('yourjsmodule').  This will let athena know that the javascript is already loaded and not to load it twice.

Q) Why doesn't Athena support Safari?

A) Athena supports recent versions of Safari.

Q) How can I unit-test javascript code using Athena?

A) The same way you unit-test your ordinary [http://twistedmatrix.com Twisted] or [http://divmod.org Divmod] software: by using [http://twistedmatrix.com/trac/wiki/TwistedTrial trial]. You can find [http://divmod.org/trac/wiki/DivmodNevow/AthenaTesting documentation of AthenaTesting here]. Have a look at [http://divmod.org/trac/browser/trunk/Nevow/nevow/test/test_javascript.py nevow.test.test_javascript] to see, how tests are prepared and run.

Q) How can I add elements to an already rendered LivePage?

A) See [http://divmod.org/trac/browser/trunk/Nevow/nevow/js/Nevow/Athena/__init__.js#L897 Nevow.Athena.Widget.addChildWidgetFromWidgetInfo] and the [wiki:DivmodNevow/Athena/Tutorials/LiveElementsOnFly wiki entry]",',0
1458,12,1247970349.39159,d_yang,60.166.225.206,"
== Athena FAQ ==

Q) When I reload a page, the server logs a traceback ending with {{{exceptions.AssertionError: Cannot render a LivePage more than once}}}

A) LivePage instances maintain server-side state that corresponds to the connection to the browser.  Because of this, each LivePage instance can only be used to serve a single client.  When you serve LivePages, make sure that you create a new instance for each render pass.

Here is an example(from Dominik Neumann) about using LivePage as a main page:
Wrap you Index page like:
{{{
#!python
class RootPage(Index):
	'''
	always return a new Index
	'''
	def child_(self, ctx):
		return Index()
}}}




Q) I can't debug athena on Internet explorer.  what gives?

A) Athena include the livefragment javascript in the body of the document via a script tag.  Visual studio doesn't appear to be happy with this and does not let you set break points.  If you load the javascript in the head of the document then you can set a break point in your athena livefragment javascript using visual studio.  The best way I found to do this is manually include the javacript in the header and then information athena that the livefragment javascript is already loaded.  One way to do this is to call the 'hidden' _shouldInclude method on the athena livepage instance, e.g self._shouldInclude('yourjsmodule').  This will let athena know that the javascript is already loaded and not to load it twice.

Q) Why doesn't Athena support Safari?

A) Athena supports recent versions of Safari.

Q) How can I unit-test javascript code using Athena?

A) The same way you unit-test your ordinary [http://twistedmatrix.com Twisted] or [http://divmod.org Divmod] software: by using [http://twistedmatrix.com/trac/wiki/TwistedTrial trial]. You can find [http://divmod.org/trac/wiki/DivmodNevow/AthenaTesting documentation of AthenaTesting here]. Have a look at [http://divmod.org/trac/browser/trunk/Nevow/nevow/test/test_javascript.py nevow.test.test_javascript] to see, how tests are prepared and run.

Q) How can I add elements to an already rendered LivePage?

A) See [http://divmod.org/trac/browser/trunk/Nevow/nevow/js/Nevow/Athena/__init__.js#L897 Nevow.Athena.Widget.addChildWidgetFromWidgetInfo] and the [wiki:DivmodNevow/Athena/Tutorials/LiveElementsOnFly wiki entry]",',0
1459,6,1248140865.37636,d_yang,60.166.239.77,"= Downloads =

[[Image(http://divmod.org/tracdocs/download_whtbck.png, right)]] 

== Live Code ==

You can have the entire open source Divmod code base in one go with the following:
{{{
svn co http://divmod.org/svn/Divmod/trunk/ Divmod
}}}

If you're going to be using [DivmodCombinator Combinator], then you might want to leave a place for branches:
{{{
svn co -N http://divmod.org/svn/Divmod 
cd Divmod
svn up -N branches
svn up trunk
}}}

== Individual Releases ==

If you'd like to download our projects individually (as releases) then please head over to the [DivmodProjects Projects] page and follow the links for the projects in which you are interested.

=== Nevow ===
* Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.33.tar.gz?format=raw Latest release - 0.9.33]
* Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow

=== Axiom ===
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.31.tar.gz?format=raw Download the latest release - 0.5.31!] (Requires [wiki:DivmodEpsilon Epsilon])
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom

=== Mantissa ===
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.6.22.tar.gz?format=raw Get the most recent release - 0.6.22!]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

",',0
1460,7,1248140955.55726,d_yang,60.166.239.77,"= Downloads =

[[Image(http://divmod.org/tracdocs/download_whtbck.png, right)]] 

== Live Code ==

You can have the entire open source Divmod code base in one go with the following:
{{{
svn co http://divmod.org/svn/Divmod/trunk/ Divmod
}}}

If you're going to be using [DivmodCombinator Combinator], then you might want to leave a place for branches:
{{{
svn co -N http://divmod.org/svn/Divmod 
cd Divmod
svn up -N branches
svn up trunk
}}}

== Individual Releases ==

If you'd like to download our projects individually (as releases) then please head over to the [DivmodProjects Projects] page and follow the links for the projects in which you are interested.

=== Nevow ===
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Nevow-0.9.33.tar.gz?format=raw Latest release - 0.9.33]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow

=== Axiom ===
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.5.31.tar.gz?format=raw Download the latest release - 0.5.31!] (Requires [wiki:DivmodEpsilon Epsilon])
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom

=== Mantissa ===
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.6.22.tar.gz?format=raw Get the most recent release - 0.6.22!]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

",',0
1463,5,1249961881.5045,d_yang,60.166.230.196,"= Tutorial: Using Storm with Nevow =

Note: There is work on integrating Storm with Twisted ([https://code.launchpad.net/~therve/storm/twisted-integration storm/twisted-integration]). Until then, the best way is probably to use deferToThread.

Before a tutorial can be written on how to use storm in Nevow, someone needs to figure out 'best practices for using Storm in asynchronous codebases.' From a chat in #storm on freenode (11 July 2007):
{{{
[5:13pm] dialtone: storm API is fine, one just needs to see if: a) it's thread
                   safe and b) objects returned can be modified in a different 
                   thread
[5:13pm] dialtone: and then committed in another one yet
[5:13pm] radix: dialtone: It is certainly thread-safe, but you should not use 
                   the same Store in multiple threads
[5:14pm] dialtone: how do you do with deferToThread then?
[5:14pm] radix: dialtone: I don't know.
[5:14pm] radix: dialtone: Probably you don't load the objects until you get 
                   into the other thread.
[5:14pm] dialtone: that's sort of a problem probably, unless there's an 
                   alternative solution
[5:15pm] radix: dialtone: Nobody has figured out best practices for using Storm 
                   in asynchronous codebases yet.
[5:15pm] dialtone: ouch :(
[5:15pm] radix: dialtone: (That is, assuming your application actually wants to 
                   make the database operations asynchronous)
[5:16pm] dialtone: I can accept it being synchronous, but run in a different 
                   thread using deferToThread
[5:16pm] radix: dialtone: for example, it would be very reasonable to use Storm 
                   like Axiom: with SQLite, just blocking on database interaction
[5:16pm] dialtone: radix: yes well... but that comes with a lot of restrictions 
                   in itself
[5:17pm] radix: dialtone: I even have a Twisted server which uses Storm to talk 
                   to postgres in a totally blocking manner
[5:17pm] radix: but it's not a very typical server
[5:17pm] dialtone: sqlite doesn't really scale that well with high concurrency 
                   and scaling a shared sqlite instance is pretty hard
[5:17pm] dotz: dialtone: What's wrong with 'ceate a high level API for data 
                   manipulation and retrival, use some rpc mechanism, like pb, 
                   and make the hi-level database backend another process'?
[5:18pm] dialtone: dotz: that' waaay more effort than what I'm currently doing
[5:18pm] radix: dialtone: I'm sure there are some clever things that can be done 
                   to use Storm in asynchronous contexts, and I'm fairly interested 
                   in learning about them
[5:18pm] dotz: dialtone: and what are you currently doing?
[5:18pm] dialtone: as I said: I'm using the query builder from sqlalchemy to build 
                   and execute queries that return resultsets with a dict-like API
[5:19pm] dialtone: I simply write the queries and use the dict-like APi in nevow
[5:19pm] dialtone: and I run the functions in a separate thread with deferToThread
[5:20pm] dialtone: radix: maybe writing a store class that keeps track of which 
                   threads owns which connection and then reuse the connection when 
                   needed
[5:20pm] dialtone: this way you could share the store object and run queries 
                   independently of the context
[5:20pm] radix: dialtone: maybe. I'm not sure it'd be that simple.
}}}



[wiki:NevowStormApproach A possible approach with Nevow and Storm/twisted-integration]",',0
1464,6,1249961924.48689,d_yang,60.166.230.196,"= Tutorial: Using Storm with Nevow =

Note: There is work on integrating Storm with Twisted ([https://code.launchpad.net/~therve/storm/twisted-integration storm/twisted-integration]). Until then, the best way is probably to use deferToThread.

(Here is [wiki:NevowStormApproach A possible approach with Nevow and Storm/twisted-integration])

Before a tutorial can be written on how to use storm in Nevow, someone needs to figure out 'best practices for using Storm in asynchronous codebases.' From a chat in #storm on freenode (11 July 2007):
{{{
[5:13pm] dialtone: storm API is fine, one just needs to see if: a) it's thread
                   safe and b) objects returned can be modified in a different 
                   thread
[5:13pm] dialtone: and then committed in another one yet
[5:13pm] radix: dialtone: It is certainly thread-safe, but you should not use 
                   the same Store in multiple threads
[5:14pm] dialtone: how do you do with deferToThread then?
[5:14pm] radix: dialtone: I don't know.
[5:14pm] radix: dialtone: Probably you don't load the objects until you get 
                   into the other thread.
[5:14pm] dialtone: that's sort of a problem probably, unless there's an 
                   alternative solution
[5:15pm] radix: dialtone: Nobody has figured out best practices for using Storm 
                   in asynchronous codebases yet.
[5:15pm] dialtone: ouch :(
[5:15pm] radix: dialtone: (That is, assuming your application actually wants to 
                   make the database operations asynchronous)
[5:16pm] dialtone: I can accept it being synchronous, but run in a different 
                   thread using deferToThread
[5:16pm] radix: dialtone: for example, it would be very reasonable to use Storm 
                   like Axiom: with SQLite, just blocking on database interaction
[5:16pm] dialtone: radix: yes well... but that comes with a lot of restrictions 
                   in itself
[5:17pm] radix: dialtone: I even have a Twisted server which uses Storm to talk 
                   to postgres in a totally blocking manner
[5:17pm] radix: but it's not a very typical server
[5:17pm] dialtone: sqlite doesn't really scale that well with high concurrency 
                   and scaling a shared sqlite instance is pretty hard
[5:17pm] dotz: dialtone: What's wrong with 'ceate a high level API for data 
                   manipulation and retrival, use some rpc mechanism, like pb, 
                   and make the hi-level database backend another process'?
[5:18pm] dialtone: dotz: that' waaay more effort than what I'm currently doing
[5:18pm] radix: dialtone: I'm sure there are some clever things that can be done 
                   to use Storm in asynchronous contexts, and I'm fairly interested 
                   in learning about them
[5:18pm] dotz: dialtone: and what are you currently doing?
[5:18pm] dialtone: as I said: I'm using the query builder from sqlalchemy to build 
                   and execute queries that return resultsets with a dict-like API
[5:19pm] dialtone: I simply write the queries and use the dict-like APi in nevow
[5:19pm] dialtone: and I run the functions in a separate thread with deferToThread
[5:20pm] dialtone: radix: maybe writing a store class that keeps track of which 
                   threads owns which connection and then reuse the connection when 
                   needed
[5:20pm] dialtone: this way you could share the store object and run queries 
                   independently of the context
[5:20pm] radix: dialtone: maybe. I'm not sure it'd be that simple.
}}}



",',0
1465,1,1249962439.27807,d_yang,60.166.230.196,"
== A possible approach with Nevow and Storm/twisted-integration ==


=== Set up pool ===
{{{
#!python
from storm.databases.sqlite import SQLite
from storm.uri import URI
from storm.twisted.store import StorePool

database = SQLite(URI('sqlite:///test.db'))
pool = StorePool(database, 5, 10)

pool.start()

}}}


=== Create models ===
{{{
#!python

from storm.locals import *
from storm.twisted.wrapper import DeferredReference

class People(object):
	__storm_table__ = 'people'
	
	id			=	Int(primary=True)
	email		=	Unicode()
	nickname	=	Unicode()
	passwd		=	Unicode()
	avatar		=	Unicode()
	

class Topic(object):
	__storm_table__ = 'topic'
	
	id			=	Int(primary=True)
	topic_title	=	Unicode()
	keyword		=	Unicode()
	content		=	Unicode()
	people_id	=	Int()
	people		=	DeferredReference(people_id, People.id)
	
	
	posted		=	DateTime()
}}}


=== and have fun ===

{{{
#!python
from twisted.internet.defer import inlineCallbacks, returnValue

from db import pool
from db.models import Topic


    def getTopics(self):
		@inlineCallbacks
		def transaction(store):
			dr = yield store.find(Topic, Topic.topic_title==self.topic, Topic.keyword==self.keyword)
			
			dr.order_by(Desc(Topic.posted))
			items = yield dr.all()
			
			for item in items:
				#do whatever.
				people = yield item.people
				#do whatever else.
				
			#this can recycle stores in pool
			yield store.commit()
			
			returnValue(   ) #return whatever you want.
			
		return pool.transact(transaction)



}}}

",',0
1466,2,1249962570.46068,d_yang,60.166.230.196,"
== A possible approach with Nevow and Storm/twisted-integration ==

(thanks for these very nice guys in mailing list)

=== Set up pool ===
{{{
#!python
from storm.databases.sqlite import SQLite
from storm.uri import URI
from storm.twisted.store import StorePool

database = SQLite(URI('sqlite:///test.db'))
pool = StorePool(database, 5, 10)

pool.start()

}}}


=== Create models ===
{{{
#!python

from storm.locals import *
from storm.twisted.wrapper import DeferredReference

class People(object):
	__storm_table__ = 'people'
	
	id			=	Int(primary=True)
	email		=	Unicode()
	nickname	=	Unicode()
	passwd		=	Unicode()
	avatar		=	Unicode()
	

class Topic(object):
	__storm_table__ = 'topic'
	
	id			=	Int(primary=True)
	topic_title	=	Unicode()
	keyword		=	Unicode()
	content		=	Unicode()
	people_id	=	Int()
	people		=	DeferredReference(people_id, People.id)
	
	
	posted		=	DateTime()
}}}


=== and have fun ===

{{{
#!python
from twisted.internet.defer import inlineCallbacks, returnValue

from db import pool
from db.models import Topic


    def getTopics(self):
		@inlineCallbacks
		def transaction(store):
			dr = yield store.find(Topic, Topic.topic_title==self.topic, Topic.keyword==self.keyword)
			
			dr.order_by(Desc(Topic.posted))
			items = yield dr.all()
			
			for item in items:
				#do whatever.
				people = yield item.people
				#do whatever else.
				
			#this can recycle stores in pool
			yield store.commit()
			
			returnValue(   ) #return whatever you want.
			
		return pool.transact(transaction)



}}}

",',0
1467,3,1249962587.55593,d_yang,60.166.230.196,"
== A possible approach with Nevow and Storm/twisted-integration ==

(thanks to these very nice guys in mailing list)

=== Set up pool ===
{{{
#!python
from storm.databases.sqlite import SQLite
from storm.uri import URI
from storm.twisted.store import StorePool

database = SQLite(URI('sqlite:///test.db'))
pool = StorePool(database, 5, 10)

pool.start()

}}}


=== Create models ===
{{{
#!python

from storm.locals import *
from storm.twisted.wrapper import DeferredReference

class People(object):
	__storm_table__ = 'people'
	
	id			=	Int(primary=True)
	email		=	Unicode()
	nickname	=	Unicode()
	passwd		=	Unicode()
	avatar		=	Unicode()
	

class Topic(object):
	__storm_table__ = 'topic'
	
	id			=	Int(primary=True)
	topic_title	=	Unicode()
	keyword		=	Unicode()
	content		=	Unicode()
	people_id	=	Int()
	people		=	DeferredReference(people_id, People.id)
	
	
	posted		=	DateTime()
}}}


=== and have fun ===

{{{
#!python
from twisted.internet.defer import inlineCallbacks, returnValue

from db import pool
from db.models import Topic


    def getTopics(self):
		@inlineCallbacks
		def transaction(store):
			dr = yield store.find(Topic, Topic.topic_title==self.topic, Topic.keyword==self.keyword)
			
			dr.order_by(Desc(Topic.posted))
			items = yield dr.all()
			
			for item in items:
				#do whatever.
				people = yield item.people
				#do whatever else.
				
			#this can recycle stores in pool
			yield store.commit()
			
			returnValue(   ) #return whatever you want.
			
		return pool.transact(transaction)



}}}

",',0
1468,40,1250904575.31613,wuyellow,80.104.128.160,"= Divmod: Success Stories =

Here are some people and organizations using Divmod software

 * [http://snipshot.com/ Snipshot] (an image editor) uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.superleague.co.uk/ Rugby Super League] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.nunatak.com.au/ Nunatak Systems] use Atop and [wiki:DivmodNevow Divmod Nevow].
 * [http://www.hess.com.tw/en/ Hess Educational Organization] use [wiki:DivmodNevow Divmod Nevow] and [wiki:DivmodMantissa Divmod Mantissa].
 * [http://www.organizedflirting.com/switch/en Organized Flirting] use [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://jotlive.com/ JotSpot Live] use [wiki:DivmodNevow Divmod Nevow] and LivePage.
 * [http://www.inoi.fi/open/trac/eocmanage Eocmanage]: An alternative to Mailman built with Twisted and Nevow.
 * [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]: A fresh take on automatic form generation for Nevow, with a simpler interface and more input types than Formless.
 * [http://test.stiq.it/ Stiq]: A web news site with tags and all niceties
 * [http://www.inoi.fi/open/trac/wubwubwub WubWubWub]: 'Making Twisted.Web look like Apache since 2002' A fully featured Twisted based webserver for serving multiple twisted.web and Nevow apps.
 * [http://code.google.com/p/pymon/ pymon] uses [wiki:DivmodNevow Divmod Nevow] for its web frontend (and the standard Twisted framework for everything else)
 * [http://code.adytum.us/tracs/TwistedCollection/wiki/AtcImageDB ImageDB] uses [wiki:DivmodAxiom Divmod Axiom] + [wiki:DivmodNevow Divmod Nevow] + [http://forms-project.pollenation.net/cgi-bin/trac.cgi Pollenation's Forms Project]
 * [http://numbler.com Numbler.com] uses [wiki:DivmodNevow Divmod Nevow] + [wiki:DivmodNevow/Athena Divmod Athena].  Numbler is a realtime collaborative spreadsheet application.
 * [http://unununium.org/ Unununium.org] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://python.org The Python website] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.who.int/en/ The World Health Organisation] uses [wiki:DivmodAxiom Axiom] and [wiki:DivmodNevow Nevow] for electronic learning products.
 * [http://www.gamezone.cz/ GameZone.cz] uses [wiki:DivmodNevow Divmod Nevow]
 * [http://www.evokat.com/ Illumaware EvoKat] (a data management application) uses [wiki:DivmodNevow Divmod Nevow], [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodAxiom Divmod Axiom].
 * [http://www.fluendo.com/ Fluendo] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://www.daylife.com/ Daylife] uses [wiki:DivmodMantissa Divmod Mantissa] and [wiki:DivmodReverend Divmod Reverend].
 * [http://www.openend.se/ Open End] uses [wiki:DivmodNevow Divmod Nevow].
 * [http://en.wubook.net/ WuBook] uses [wiki:DivmodNevow Divmod Nevow]. [http://wubook.net/ WuBook] provides tourism technologies",',0
1469,1,1251402755.49075,exarkun,209.6.216.253,"WhitherContext.
",',0
1470,2,1255255192.99978,petrmifek,213.194.204.59,"= Divmod : Nevow =

== Athena ==

=== Adding LiveElements to a LivePage on fly tutorial ===

Javascript function [http://divmod.org/trac/browser/trunk/Nevow/nevow/js/Nevow/Athena/__init__.js#L897 Nevow.Athena.Widget.addChildWidgetFromWidgetInfo] can be used to do that.

All you need on the server is to return a LiveElement instance:

{{{
#!python

from nevow import athena

class WhateverElement(athena.LiveElement):

  @athena.expose
  def getNewLiveElement(self):
    return SomeOtherLiveElement()
}}}

Note: you should also call {{{setFragmentParent}}} on the new LiveElement (see [http://buildbot.divmod.org/apidocs/nevow.athena._LiveMixin.html#setFragmentParent here]).

On the client, you need some code & a free XML node to append the new element to:
{{{
#!js
// import Nevow.Athena
// import Divmod.Runtime

What.Ever = Nevow.Athena.Widget.subclass('What.Ever');
What.Ever.methods = (

 function foo(self) {
   d = self.callRemote('getNewLiveElement');

   d.addCallback(

     function liveElementReceived(le) {

       d2 = self.addChildWidgetFromWidgetInfo(le);
       d2.addCallback(
         function childAdded(widget) {

           /* widget is a Nevow.Athena.Widget instance and it
            * represents a newly created widget for the liveelement
            * got from the server */

           /* find a node to attach the widget to: */
           self.nodeById('lastNode').appendChild(widget.node);
            
           /* you could also use, for example:
            *
            * var node = self.nodeById('lastNode');
            * node.replaceChild(widget.node, node.firstChild);
            */
         });

     }); 
}}}","Added a note about setFragmentParent - which is mandatory according to the API docs",0
1471,5,1255943880.8582,terrycojones,84.77.246.231,"= Nevow Tutorial =

== Using the {{{children}}} class attribute ==

{{{
#!python
######################################################################
# Run using 'twistd -noy file.tac', then point your browser to
# http://localhost:8080
# A very simple Nevow site.
######################################################################

from twisted.application import service, internet

from nevow               import appserver
from nevow               import rend
from nevow               import loaders
from nevow               import tags as T

class SubPage ( rend.Page ):
    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Sub Page' ),
                 T.body [ T.h1 [ 'This is a Sub Page' ],
                          T.p [ 'I lack much of interest.' ],
                          T.p [ 'You might find ',
                                T.a ( href = '/' ) [ 'this' ],
                                ' more interesting' ],
                          ]
                 ]
        )
        
class MainPage ( rend.Page ):
    docFactory = loaders.stan (
        T.html [ T.head ( title = 'Main Page' ),
                 T.body [ T.h1 [ 'This is the Main Page' ],
                          T.p [ 'Try going to the pages ',
                                T.a ( href = 'foo' ) [ 'foo' ],
                                ' or ',
                                T.a ( href = 'bar' ) [ 'bar' ],
                                ],
                          T.p [ 'Don't try going ',
                                T.a ( href = 'baz' ) [ 'here' ],
                                ' as it doesn't exist.'
                                ]
                          ]
                 ]
        )

    children = {
        'foo' : SubPage(),
        'bar' : SubPage()
        }
    
######################################################################
# Nevow Boilerplate
######################################################################

application = service.Application ( 'nevowdemo' )
port        = 8080
res         = MainPage()
site        = appserver.NevowSite ( res )
webService  = internet.TCPServer ( port, site )
webService.setServiceParent ( application )
}}}

Note the following:

  * Instead of a {{{childFactory()}}} method we have an explicit mapping of child path elements to page objects;
  * Two independent child pages, {{{foo}}} and {{{bar}}} have been created. These are persisted in the dictionary; they are not created on demand;
  * An attempt to visit a child page that doesn't have an entry in the {{{children}}} dictionary will fail.

Of course, ''any'' page can have children, not just the main page. Try modifying the example above to add another page below the {{{SubPage}}} objects.

Continue on to DivmodNevow/TutorialFive.
",',0
1472,17,1255945914.14634,terrycojones,84.77.246.231,"= [wiki:WikiStart Divmod] : [wiki:DivmodNevow Nevow] : Form Handling (A summary of Nevow form handling techniques) =
[[PageOutline(2-3,Contents)]]
There is more than one way to correctly handle forms in Nevow. This short tutorial demonstrates three Nevow form handling techniques. It includes some real world problems and (hopefully) demonstrates the most appropriate form handling recipe to use in each case. 

Examples are included on separate wiki pages for clarity and to make it easy for the reader to download and run them. Where example files end in .tac.py, the example should be run as twistd -noy Example.tac.py. Some screenshots are provided so that you can quickly see the output of the examples.

== Automatic Form Generation and Handling ==
Form handling is one of the most tedious parts of developing a web application. Fortunately there are two sophisticated form handling libraries available for Nevow; '''Formless''' and [http://forms-project.pollenation.net/ Pollenation Forms]. Both offer automatic form generation, validation and type coercion. 

Formless is older and comes bundled with Nevow but can be confusing for beginners and frustrating for more experienced users. That said, it is highly customisable and allows html coder to precisely layout the form while still taking advantage of the automatic validation and type coercion. 

Pollenation Forms is both simpler for the beginner and offers powerful features for the experienced user. It is the recommended form handling library for those who do not need precise customisation of the form layout in the document template.

== The Simplest Form - Example 1: A News Item Editor Page ==
[[Image(Example1.0.png,200,float:right;clear:right;margin-bottom:2px;)]]
[[Image(Example1.1.png,200,float:right;clear:right;margin-bottom:2px;)]]
[[Image(Example1.2.png,200,float:right;clear:right;margin-bottom:2px;)]]
The following example demonstrates and compares the simplest use of Formless / Pollenation Forms. 
We start with a [attachment:Example1.0.tac basic tac file (src)] containing everything but the form:
 * the rend.Page subclass and docFactory
 * a simple list to store news items
 * a data_* method to expose the list of stories to the template
 * a method to save new items to the database which redirects to a completion page on success

 * '''[attachment:Example1.1.tac.py Formless Recipe (src):]''' To expose the method (saveNewsItem) in our web page with Formless we:
   * import [source:trunk/Nevow/formless/annotate.py annotate] and [source:trunk/Nevow/formless/webform.py webform]
   * update the template to include form layout css and a placeholder (<n:invisible />) for our form renderer
   * add the Formless standard css file as a [source:trunk/Nevow/nevow/static.py#L144 static.File] child resource 
   * define a corresponding bind_saveNewsItem method whose job is to return a description of the saveNewsItem method arguments
   * define a custom renderer which adds the results of webform.renderForms() to the page output.
 * '''[attachment:Example1.2.tac.py Pollenation Forms Recipe (src):]''' With Pollenation Forms we:
   * import [http://forms-project.pollenation.net/cgi-bin/trac.cgi/browser/trunk/forms/__init__.py forms]
   * mixin the [http://forms-project.pollenation.net/cgi-bin/trac.cgi/browser/trunk/forms/form.py#L303 forms.ResourceMixin] to our rend.Page subclass.
   * update the template to include form layout css and a placeholder for our form renderer (forms.ResourceMixin defines its own render_form method so we use that)
   * update our saveNewsItem method to accommodate the extra args that forms will pass to it.
   * define a special form_* method which builds and returns the form.
A comparison of the two recipes:
 * Pollenation Forms API is more transparent (subjective of course, but generally accepted).
 * Pollenation Forms generates cleaner html.
 * Pollenation Forms form interface is more usable and provides clearer feedback messages. (ie 'Submit' button rather than the Formless 'Call'. Why? Especially when the new Formless bind_* methods make it such a rigmarole to customise the button...but more on that later.)
 * Pollenation Forms default rendered form looks prettier (again subjective) though in both cases, the generated html is sprinkled generously with class and id attributes so that by adding your own CSS you can transform the way the form looks.

So that looks like a pretty ringing endoresment of Pollenation Forms, but it must be remembered that this is a comparison of what the two libraries produce by default in very simple case. Equally important is how they can be extended and customised to fit your application, and that's what we start looking at next.

 * [wiki:DivmodNevow/FormHandling/Formless Continue to the Formless Tutorial]
 * [wiki:DivmodNevow/FormHandling/PollenationForms Continue to the Pollenation Forms Tutorial]

== Manual Form Handling ==
Sometimes a form is so simple that it is easiest to write the form html by hand and handle the result manually. The following code demonstrates a  form with which the user can choose his preferred number of items per page in a datagrid.
 * [attachment:ManualFormHandlingExample.tac.py]
The <select> tag has a javascript onchange handler to automatically submit its parent form and is presented inline with the content of its parent <p> tag. To achieve this automatically using webform.renderForms() would have required defining a custom form template with custom patterns etc (see later example). 

(It should be noted that Formless or Pollenation Forms could be used here for automatic coercion and validation of the form variables without employing their form rendering machinery. An example of this may be added later.)",',0
1473,10,1259520954.76051,exarkun,209.6.43.126,"= [wiki:WikiStart Divmod] : !PyFlakes =

[[Image(http://divmod.org/tracdocs/pyflakes_whtbck.png, right)]] 

!PyFlakes a Lint-like tool for Python, like [http://pychecker.sourceforge.net PyChecker].  It is focused on identifying common errors quickly without executing Python code.

Its primary advantage over [http://pychecker.sourceforge.net PyChecker] is that it is ''fast''.  You don't have to sit around for minutes waiting for the checker to run; it runs on most large projects in only a few seconds.

The two primary categories of defects reported by !PyFlakes are:

  * Names which are used but not defined or used before they are defined
  * Names which are redefined without having been used

These can each take many forms.  For example, !PyFlakes will tell you when you have forgotten an import, mistyped a variable name, defined two functions with the same name, shadowed a variable from another scope, imported a module twice, or two different modules with the same name, and so on.

== Download ==
 * [http://divmod.org/trac/attachment/wiki/SoftwareReleases/pyflakes-0.4.0.tar.gz?format=raw 0.4.0 Release] ([http://divmod.org/trac/browser/tags/releases/Pyflakes-0.4.0/NEWS.txt Release Notes])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Pyflakes !PyFlakes

== Exits ==
 * [http://pypi.python.org/pypi/pyflakes PyFlakes on PyPI]
 * [https://launchpad.net/pyflakes PyFlakes on launchpad]
 * [http://www.freshmeat.net/projects/pyflakes PyFlakes on freshmeat]
 * [http://www.swik.net/pyflakes PyFlakes on swik]
","Announce Pyflakes 0.4 release",0
1474,7,1259521415.17968,exarkun,209.6.43.126,"= [wiki:WikiStart Divmod] : Reverend =
Reverend is a general purpose Bayesian classifier, named after Rev. Thomas Bayes. Use the Reverend to quickly add Bayesian smarts to your app. To use it in your own application, you either subclass Bayes or pass it a tokenizing function. Bayesian fun has never been so quick and easy. Many thanks for [http://christophe.delord.free.fr/ Christophe Delord] for his well written PopF. [http://magix.fri.uni-lj.si/orange/ Orange] also looks good. If you are looking for a spam filter take a look at SpamBayes and POPFile.

The Reverend package requires Python 2.3 or later. [http://www.advogato.org/person/leonardr/ Leonard Richardson] has back-ported Reverend for use with Python 1.5.2. You can find his version [http://newsbruiser.tigris.org/source/browse/newsbruiser/nb/lib/reverend/ here].

Some fun stuff is starting to pop up that uses the Reverend: http://jrhicks.net/reverend and [http://newsbruiser.tigris.org/ Newsbruiser].

[http://matt.blogs.it/ Matt Mower] has ported Reverend to Ruby and named it [http://rubyforge.org/projects/bishop/ Bishop].

Stuff you can do with the Reverend:
 * classify RSS stories
 * classify recipes by cuisine
 * who do you write like? Shakespeare, Dickens or Austen
 * detect the language of a document
 * is your code more like Guido's or Peter's

Think about how you want your data tokenized! You can write a custom tokenizer and pass it to Bayes at instance creation. The default tokenizer is named Splitter and is like a glorified version of string.split(): it breaks words/tokens on space and other non-alphanumeric characters. This is fine for many apps, particularly apps around texts in western languages. However, if characters like #!$&, or Unicode are important to your application, you may want to provide you own tokenizer. Also, by default the Reverend expects a string for both training and guessing. If you want to pass it an object, you need to write a tokenizer that knows how to get the tokens out of your object.

Here's some code:
{{{
from reverend.thomas import Bayes
guesser = Bayes()
guesser.train('french', 'le la les du un une je il elle de en')
guesser.train('german', 'der die das ein eine')
guesser.train('spanish', 'el uno una las de la en')
guesser.train('english', 'the it she he they them are were to')
guesser.guess('they went to el cantina')
guesser.guess('they were flying planes')
guesser.train('english', 'the rain in spain falls mainly on the plain')
guesser.save('my_guesser.bay')
}}}

== Download ==
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Reverend
 * [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Reverend-0.4.tar.gz?format=raw 0.4 Release] ([source:tags/releases/Reverend-0.4/NEWS.txt Release Notes])","Announce Reverend 0.4 release",0
1475,19,1259521553.08258,exarkun,209.6.43.126,"= [wiki:WikiStart Divmod] : Epsilon =

[[Image(http://divmod.org/tracdocs/epsilon_whtbck.png, right)]] 

A small utility package that depends on tools too recent for Twisted (like datetime in python2.4) but performs generic enough functions that it can be used in projects that don't want to share Divmod's other projects' large footprint.

Currently included:
  * A powerful date/time formatting and import/export class (ExtimeDotTime), for exchanging date and time information between all Python's various ways to interpret objects as times or time deltas.
  * Tools for managing concurrent asynchronous processes within Twisted.
  * A metaclass which helps you define classes with explicit states.
  * A featureful Version class.
  * A formal system for application of monkey-patches.

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Epsilon-0.6.0.tar.gz?format=raw Get the most recent release - 0.6.0!]
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Epsilon Epsilon

== See Also ==
 * ''Development'' version of the [http://buildbot.divmod.org/apidocs/epsilon.html Epsilon API docs]
","Announce Epsilon 0.6 release",0
1476,20,1259521607.0573,exarkun,209.6.43.126,"= [wiki:WikiStart Divmod] : Epsilon =

[[Image(http://divmod.org/tracdocs/epsilon_whtbck.png, right)]] 

A small utility package that depends on tools too recent for Twisted (like datetime in python2.4) but performs generic enough functions that it can be used in projects that don't want to share Divmod's other projects' large footprint.

Currently included:
  * A powerful date/time formatting and import/export class (ExtimeDotTime), for exchanging date and time information between all Python's various ways to interpret objects as times or time deltas.
  * Tools for managing concurrent asynchronous processes within Twisted.
  * A metaclass which helps you define classes with explicit states.
  * A featureful Version class.
  * A formal system for application of monkey-patches.

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Epsilon-0.6.0.tar.gz?format=raw Get the most recent release - 0.6.0!] ([source:/tags/releases/Epsilon-0.6.0/NEWS.txt Release Notes])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Epsilon Epsilon

== See Also ==
 * ''Development'' version of the [http://buildbot.divmod.org/apidocs/epsilon.html Epsilon API docs]
",',0
1477,76,1259521718.96276,exarkun,209.6.43.126,,,
1478,43,1259521819.69539,exarkun,209.6.43.126,"= [wiki:WikiStart Divmod] : Axiom =

[[Image(http://divmod.org/tracdocs/axiom_whtbck.png, right)]] Axiom is an object database whose primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel Pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.6.0.tar.gz?format=raw Download the latest release - 0.6.0!] (Requires [wiki:DivmodEpsilon Epsilon]) ([source:/tags/releases/Axiom-0.6.0/NEWS.txt Release Notes)
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [wiki:DivmodAxiom/Tutorial]: The Axiom tutorial. (Still in progress.)
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tips]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * ''Development'' version of the [http://buildbot.divmod.org/apidocs/axiom.html Axiom API docs]
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]
 * [wiki:DivmodAxiom/DependencyTransition Dependencies]: How to transition from pre-{{{axiom.dependency}}} code.
 * [wiki:DivmodAxiom/Powerups Powerups]
 * WritingUpgradeTests: writing stubloader tests for schema upgrades.
 * [wiki:DivmodAxiom/Files How to handle files in Axiom]","Announce Axiom 0.6 release",0
1479,44,1259521833.57159,exarkun,209.6.43.126,"= [wiki:WikiStart Divmod] : Axiom =

[[Image(http://divmod.org/tracdocs/axiom_whtbck.png, right)]] Axiom is an object database whose primary goal is to provide an object-oriented layer with what we consider to be the key aspects of OO, i.e. polymorphism and message dispatch, without hindering the power of an RDBMS.  It is designed to 'feel Pythonic', without encouraging the typical ORM behavior such as [wiki:PotatoProgramming potato programming].

Axiom provides a full interface to the database, which strongly suggests that you do not write any SQL of your own.  Metaprogramming is difficult and dangerous (as many, many SQL injection attacks amply demonstrate).  Writing your own SQL is still possible, however, and Axiom does have several methods which return fragments of generated schema if you wish to use them in your own queries.

Axiom currently supports only SQLite and does NOT have any features for dealing with concurrency.  We do plan to add some later, and perhaps also support other databases in the future.  Take a look at [wiki:DivmodAxiom/ConcurrencyScalability our concurrency and scalability page] for more information - we'll update this as the community makes progress on these issues.

== Performance ==

How does Axiom perform?

Here are some simple third-party [http://www.livejournal.com/users/william_os4y/1271.html benchmarks].

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Axiom-0.6.0.tar.gz?format=raw Download the latest release - 0.6.0!] (Requires [wiki:DivmodEpsilon Epsilon]) ([source:/tags/releases/Axiom-0.6.0/NEWS.txt Release Notes])
 * Trunk:  svn co http://divmod.org/svn/Divmod/trunk/Axiom Axiom
== See Also ==
 * [wiki:DivmodAxiom/Tutorial]: The Axiom tutorial. (Still in progress.)
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tips]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:DivmodAxiom/WhyAxiom Why Axiom]: Glyph writes about the advantages of Axiom over other RDBMS and ORM alternatives.
 * [wiki:DivmodAxiom/Reference Reference]: A reference to the Axiom public API. (Incomplete but evolving!)
 * ''Development'' version of the [http://buildbot.divmod.org/apidocs/axiom.html Axiom API docs]
 * [wiki:DivmodAxiom/Examples Examples]
 * [query:?status=new&status=assigned&status=reopened&groupdesc=1&group=type&component=Axiom&order=priority Axiom tickets]
 * [wiki:Axiomatic axiomatic]
 * [wiki:DivmodAxiom/DependencyTransition Dependencies]: How to transition from pre-{{{axiom.dependency}}} code.
 * [wiki:DivmodAxiom/Powerups Powerups]
 * WritingUpgradeTests: writing stubloader tests for schema upgrades.
 * [wiki:DivmodAxiom/Files How to handle files in Axiom]",',0
1480,16,1259521903.08185,exarkun,209.6.43.126,"= [wiki:WikiStart Divmod] : Vertex =
Vertex is an implementation of the Q2Q protocol (sort of like P2P, but one better). There are a few moving parts in Vertex:

  * PTCP: a protocol which is nearly identical to TCP, but which runs over UDP. This lets Q2Q penetrate most NAT configurations.
  * JUICE ([JU]ice [I]s [C]oncurrent [E]vents): a very simple but immensely flexible protocol which forms the basis of the high-level aspects of Q2Q
  * vertex: a command line tool which exposes a few features useful in many situations (such as registration and authentication)

Q2Q is a very high-level protocol (alternatively, transport) the goal of which is to make communication over the internet a possibility (if you enjoy setting up tunnels or firewall rules whenever you need to transfer a file between two computers, Q2Q may not be for you). Q2Q endpoints aren't hardware addresses or network addresses. They look a lot like email addresses and they act a lot like instant message addresses. You can hook into yours wherever you can access the internet, and you can be online or offline as you choose (Q2Q supports multiple unrelated protocols, so you also might be online for some services but offline for others). Two people with Q2Q addresses can easily communicate without out-of-band negotiation of their physical locations or the topology of their networks. If Alice wants to talk to Bob, Alice will always just open a connection to bob@divmod.com/chat. If Bob is online anywhere at all, the connection will have an opportunity to succeed (Bob might be busy or not want to talk to Alice, but that is another matter ;). The connection is authenticated in both directions, so if it does succeed Alice knows she is talking to the real Bob and vice versa.

The Q2Q network has some decentralized features (there is no one server or company which can control all Q2Q addresses) and features of centralization (addresses beneath a particular domain are issued by a server for that domain; once issued, some activities require the server to be contacted again, while others do not). Vertex includes an identity server capable of hosting Q2Q addresses. Once you've installed the 0.1 release, you can run it like this:
{{{
exarkun@boson:~$ cat > q2q-standalone.tac
from vertex.q2qstandalone import defaultConfig
application = defaultConfig()
exarkun@boson:~$ twistd -noy q2q-standalone.tac 
2005/10/15 00:12 EDT [-] Log opened.
2005/10/15 00:12 EDT [-] twistd 2.0.1 (/usr/bin/python2.4 2.4.1) starting up
2005/10/15 00:12 EDT [-] reactor class: twisted.internet.selectreactor.SelectReactor
2005/10/15 00:12 EDT [-] Loading q2q-standalone.tac...
2005/10/15 00:12 EDT [-] Loaded.
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QService starting on 8788
2005/10/15 00:12 EDT [-] Starting factory <Q2QService 'service'@-488b6a34>
2005/10/15 00:12 EDT [-] vertex.ptcp.PTCP starting on 8788
2005/10/15 00:12 EDT [-] Starting protocol <vertex.ptcp.PTCP instance at 0xb777884c>
2005/10/15 00:12 EDT [-] Binding PTCP/UDP 8788=8788
2005/10/15 00:12 EDT [-] vertex.q2q.Q2QBootstrapFactory starting on 8789
2005/10/15 00:12 EDT [-] Starting factory <vertex.q2q.Q2QBootstrapFactory instance at 0xb77787cc>
}}}
You can acquire a new Q2Q address using the vertex command line tool:
{{{
exarkun@boson:~$ vertex register exarkun@boson password
}}}
boson is a name on my local network, making this address rather useless. On the other hand, no one will be able to pretend to be me by cracking my hopelessly weak password ;) If you set up a Vertex server on a public host, you will be able to register a real, honest-to-goodness Q2Q address beneath its domain (careful - so will anyone else).

vertex also offers a tool for requesting a signed certificate from the server. These certificates can be used to prove ones identity to foreign domains without involving ones home server. Another feature vertex provides is a toy file transfer application. Bob can issue a vertex receive while Alice issues a vertex send pointed at him, and the file will be transferred.

Much of the real power of Q2Q is exposed to developers using two methods: listenQ2Q and connectQ2Q. These work in roughly the same way Twisted's listenTCP and connectTCP work: they offer support for writing servers and clients that operate on the Q2Q network.

== Exits ==
 * [http://divmod.org/projects/vertex Old Divmod project page for Vertex]
 * [http://www.swik.net/vertex Vertex on swik]
 * [wiki:UsingVertex Using Vertex], a work-in-progress page about using Vertex in an application
 * ''Development'' version of [http://buildbot.divmod.org/apidocs/vertex.html Vertex API docs]

== Status ==
 * Vertex does '''not''' currently pass its test suite on Windows or Mac OS X.
 * This [query:?group=status&component=Vertex&order=priority custom Vertex ticket query] will show you all the tickets (bugs and feature requests) filed against Vertex.
 * Vertex is likely usable as a Q2Q server on Linux and Windows.
 * Vertex is likely usable as a Q2Q client on Linux.

== Download ==
 * Release: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Vertex-0.3.0.tar.gz?format=raw Latest release: 0.3.0] ([source:/tags/releases/Vertex-0.3.0/NEWS.txt Release Notes])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Vertex Vertex
","Announce Vertex 0.3 release",0
1481,33,1259522013.56628,exarkun,209.6.43.126,"= [wiki:WikiStart Divmod] : Mantissa =

[[Image(http://divmod.org/tracdocs/mantissa_whtbck.png, right)]] 

Mantissa is an application server. It provides integration between the [wiki:DivmodAxiom Axiom] 'smart' object database, the [wiki:DivmodNevow Nevow] web templating/AJAX/COMET framework and the TwistedFramework.

Read more about Mantissa's [MantissaIsTheDeploymentTarget philosophy and motivation].

The goal of Mantissa is to provide a common platform that open-source contributors can use to help us build customized additions to the Divmod service.  Divmod is going to offer a variety of different services, and if you want to write something that hooks into our network, Mantissa is how you do it.
== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Mantissa-0.7.0.tar.gz?format=raw Get the most recent release - 0.7.0!] ([source:/tags/releases/Mantissa-0.7.0/NEWS.txt Release Notes])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Mantissa Mantissa (See the dependencies here: [source:trunk/Mantissa/DEPS.txt DEPS.txt])

== Tutorials ==
 * [wiki:DivmodAxiom/AxiomTutorial Exarkun's Axiom and Mantissa tutorial]: Short, sharp Axiom/Mantissa tips and tricks.
 * [wiki:MantissaWikiTutorial Mantissa Wiki Tutorial] A bit short on explanations, but complete
 * [wiki:MantissaBlogTutorial Mantissa Blog Tutorial] 
 * [wiki:MantissaHowTo An example of how to build a Mantissa application (incomplete)]

== See Also ==
 * ''Development'' version of the [http://buildbot.divmod.org/apidocs/xmantissa.html Mantissa API docs]
 * Several of the Axiom docs on the DivmodAxiom page are also Mantissa docs.
 * [wiki:DivmodMantissa/Sharing /Sharing]: description of sharing functionality
 * [wiki:DivmodMantissa/Concepts /Concepts]: other concepts with which Mantissa users should be familiar
","Announce Mantissa 0.7 release",0
1482,16,1259522101.97273,exarkun,209.6.43.126,"== Divmod Sine ==

A voice over IP application server.

[[Image(http://isometric.sixsided.org/_/future_wiring/2.gif)]]

Sine provides:
 * SIP Registrar
 * SIP Proxy
 * Third party call control (3PCC)
 * Voice-mail
 * Through-the-web configuration
 * [wiki:DivmodMantissa Divmod Mantissa] integration

=== Download ===

 * Release: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Sine-0.3.0.tar.gz?format=raw Download the latest release - 0.130!] (Requires [wiki:DivmodMantissa Mantissa]) ([source:/tags/releases/Sine-0.3.0/NEWS.txt Release Notes])
 * Bleeding Edge: 
{{{
#!sh
% svn co http://divmod.org/svn/Divmod/trunk/Sine Sine
}}}

=== See Also ===

  * ''Development'' version of the [http://buildbot.divmod.org/apidocs/sine.html Sine API docs]
","Announce Sine 0.3",0
1483,17,1259522172.56081,exarkun,209.6.43.126,"== Divmod Sine ==

A voice over IP application server.

[[Image(http://isometric.sixsided.org/_/future_wiring/2.gif)]]

Sine provides:
 * SIP Registrar
 * SIP Proxy
 * Third party call control (3PCC)
 * Voice-mail
 * Through-the-web configuration
 * [wiki:DivmodMantissa Divmod Mantissa] integration

=== Download ===

 * Release: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Sine-0.3.0.tar.gz?format=raw Download the latest release - 0.3.0!] (Requires [wiki:DivmodMantissa Mantissa]) ([source:/tags/releases/Sine-0.3.0/NEWS.txt Release Notes])
 * Bleeding Edge: 
{{{
#!sh
% svn co http://divmod.org/svn/Divmod/trunk/Sine Sine
}}}

=== See Also ===

  * ''Development'' version of the [http://buildbot.divmod.org/apidocs/sine.html Sine API docs]
",',0
1484,3,1259522216.83206,exarkun,209.6.43.126,"= [wiki:WikiStart Divmod] : Quotient =

Divmod Quotient is a messaging platform developed as an Offering for Divmod
Mantissa.

It is currently in the very early stages of development, but you can already
use it to read your mail.

(Divmod, Inc. is planning to offer a commercial service based on Quotient in
the near future.  Watch http://divmod.org/ for an announcement!)

== Download ==
 * Stable: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Quotient-0.3.0.tar.gz?format=raw Get the most recent release - 0.3.0!] ([source:/tags/releases/Quotient-0.3.0/NEWS.txt Release Notes])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Quotient Quotient","Announce Quotient 0.3 release",0
1485,4,1259522312.70831,exarkun,209.6.43.126,"= Divmod: Hyperbola =

Hyperbola is a blogging and forums system, for having discussions about things.

== Download ==

 * [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Hyperbola-0.0.3.tar.gz?format=raw 0.0.3 Release] ([http://divmod.org/trac/browser/tags/releases/Hyperbola-0.0.3/NEWS.txt Release Notes])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Hyperbola/ Hyperbola ","Announce Hyperbola 0.0.3 release",0
1486,14,1259522565.2294,exarkun,209.6.43.126,"= Divmod: Imaginary =

Imaginary numbers are so named not because they are fictitious, but because
they are along a different axis from real numbers.

Divmod Imaginary is a simulationist's take on the realm of role playing,
interactive fiction, and multiplayer dungeons.  It incorporates gameplay
features from each area while attempting to provide a richer environment
than is generally available from existing systems.

Status: Imaginary is currently on the back of some peoples' minds.

 * [browser:trunk/Imaginary/imaginary Browse the source]. 
 * [query:status=new|assigned|reopened&component=Imaginary View the tickets].


Instructions for starting an Imaginary server are here: [source:/trunk/Imaginary/README.txt README.txt]

== Download ==

 * [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Imaginary-0.0.5.tar.gz?format=raw 0.0.5 Release] ([http://divmod.org/trac/browser/tags/releases/Imaginary-0.0.5/NEWS.txt Release Notes])
 * Trunk: svn co http://divmod.org/svn/Divmod/trunk/Imaginary/ Imaginary
","Announce Imaginary 0.0.5 release",0
1487,8,1263048183.56215,exarkun,209.6.43.126,"= Downloads =

[[Image(http://divmod.org/tracdocs/download_whtbck.png, right)]] 

== Live Code ==

You can have the entire open source Divmod code base in one go with the following:
{{{
svn co http://divmod.org/svn/Divmod/trunk/ Divmod
}}}

If you're going to be using [DivmodCombinator Combinator], then you might want to leave a place for branches:
{{{
svn co -N http://divmod.org/svn/Divmod 
cd Divmod
svn up -N branches
svn up trunk
}}}

== Individual Releases ==

If you'd like to download our projects individually (as releases) then please head over to the [DivmodProjects Projects] page and follow the links for the projects in which you are interested.
","Too much work to maintain these download links in multiple places",0
1488,16,1274429391.7169,newacct,169.232.246.119,"= Potato Programming =

'''One potato, two potato, three potato, four....'''

Potato programming is the sort of programming that encourages you to write your own 'for' loops and build up / tear down data structures, rather than passing vectors or iterators down through an interface in such a way that would allow a smarter version of that interface to be more efficient.

In other words, this is the PotatoProgramming way to add a file containing lines of numbers:

{{{
#!python
f = file('test.numbers')
accum = 0.
for line in f:
    accum += float(line)
print accum
}}}

Contrast this with:

{{{
#!python
f = file('test.numbers')
print sum(map(float, f))
}}}

This term was coined by R0ml Lefkowitz.

See also: [PotatoProgrammingExplained Potato Programming Explained]",',0
1489,3,1275865955.6767,mithrandi,41.133.117.8,"= Why is potato programming a bad idea?  It seems normal to me. =

Here is an expanded realistic potato/non-potato comparison, reading a list of system users.

Potato:

{{{
#!python
def system_users():
    lines = file('/etc/passwd').readlines()
    for line in lines:
        if len(line[:line.find('#')].strip()):
            fields = line.split(':')
            if int(fields[2]) < 1000:
                yield fields[0]
}}}

''{{{timeit.py}}} result: 100000 loops, best of 3: 187 usec per loop''

Vector:

{{{
#!python
import pwd
import operator
def system_users():
    users = pwd.getpwall()
    users.sort(key=operator.itemgetter(2))
    for user in users:
        if user[2] < 1000:
            yield user[0]
        else:
            return
}}}

''100000 loops, best of 3: 137 usec per loop''

Now, you might say, 'That's not a fair comparison!  The 'VectorProgramming' example is using a library for this while PotatoProgramming is implementing it from scratch!'

The comparison still holds, however:

{{{
#!python
import operator

def my_getpwall():
    lines = file('/etc/passwd').readlines()
    for line in lines:
        uncommline = line[:line.find('#')].strip()
        fields = uncommline.split(':')
        yield fields

def system_users():
    users = list(my_getpwall())
    users.sort(key=operator.itemgetter(2))
    for user in users:
        if user[2] < 1000:
            yield user[0]
        else:
            return
}}}
''10000 loops, best of 3: 168 usec per loop''

In other words, if 'pwd' did not exist, it would be necessary to invent it.  When you optimize your code, you don't want to do it across boundaries which require the caller to make loops; you want the interface to be expressive so that the loops can be optimized within your interface.  For an ''extreme'' version of PP, implement readline yourself with a {{{for c in string: if c == '\n'...}}}

Ideally, you wouldn't even have to write the 'for user in users' loop yourself.  For example, here's an Axiom snippet to do a similar thing implemented potato-style:

{{{
#!python
def axiom_users(s):
    for u in s.query(User):
        if u.uid < 1000:
            yield u.name
}}}

vector style:

{{{
#!python
def axiom_users(s):
    for u in s.query(User, User.uid < 1000):
        yield u.name
}}}

Axiom aims to force as much work down into the optimizeable guts of the library as possible, then use the interface that way, rather than doing additional iteration and testing in application code.

In fact, in this case, we can push the loop further down into Axiom:

{{{
#!python
def axiom_users(s):
    return s.query(User, User.uid < 1000).getColumn('name')
}}}",',0
1490,18,1289927298.38387,washort,76.254.42.111,"== Divmod Sine ==

A voice over IP application server.


Sine provides:
 * SIP Registrar
 * SIP Proxy
 * Third party call control (3PCC)
 * Voice-mail
 * Through-the-web configuration
 * [wiki:DivmodMantissa Divmod Mantissa] integration

=== Download ===

 * Release: [http://divmod.org/trac/attachment/wiki/SoftwareReleases/Sine-0.3.0.tar.gz?format=raw Download the latest release - 0.3.0!] (Requires [wiki:DivmodMantissa Mantissa]) ([source:/tags/releases/Sine-0.3.0/NEWS.txt Release Notes])
 * Bleeding Edge: 
{{{
#!sh
% svn co http://divmod.org/svn/Divmod/trunk/Sine Sine
}}}

=== See Also ===

  * ''Development'' version of the [http://buildbot.divmod.org/apidocs/sine.html Sine API docs]
",',0
